[
  {
    "CWE_ID": [
      "CWE-352"
    ],
    "code": "/**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.activemq.web.handler;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.web.bind.ServletRequestDataBinder;\nimport org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping;\nimport org.springframework.web.servlet.HandlerExecutionChain;\n\n/**\n * @version $Revision$\n */\npublic class BindingBeanNameUrlHandlerMapping extends BeanNameUrlHandlerMapping {\n    private static final transient Log LOG = LogFactory.getLog(BindingBeanNameUrlHandlerMapping.class);\n\n    protected Object getHandlerInternal(HttpServletRequest request) throws Exception {\n        Object object = super.getHandlerInternal(request);\n\n        if (object instanceof String) {\n            String handlerName = (String) object;\n            object = getApplicationContext().getBean(handlerName);\n        }\n        if (object instanceof HandlerExecutionChain) {\n            HandlerExecutionChain handlerExecutionChain = (HandlerExecutionChain) object;\n            object = handlerExecutionChain.getHandler();\n        }\n\n        if (object != null) {\n            ServletRequestDataBinder binder = new ServletRequestDataBinder(object, \"request\");\n            try {\n                binder.bind(request);\n                binder.setIgnoreUnknownFields(true);\n                if (LOG.isDebugEnabled()) {\n                    LOG.debug(\"Bound POJO is now: \" + object);\n                }\n            }\n            catch (Exception e) {\n                LOG.warn(\"Caught: \" + e, e);\n                throw e;\n            }\n        }\n        return object;\n    }\n}",
    "target": 1,
    "language": "java",
    "dataset": "A-Manually-Curated-Dataset-of-Vulnerability-Introducing-Commits-in-Java",
    "idx": 800054,
    "RELATED_CWE": [
      "CWE-79",
      "CWE-918",
      "CWE-384"
    ]
  },
  {
    "CWE_ID": [
      "CWE-352"
    ],
    "code": "/**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.activemq.web.handler;\n\nimport java.util.Arrays;\nimport java.util.UUID;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.apache.activemq.web.DestinationFacade;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.web.bind.ServletRequestDataBinder;\nimport org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping;\nimport org.springframework.web.servlet.HandlerExecutionChain;\n\n/**\n * @version $Revision$\n */\npublic class BindingBeanNameUrlHandlerMapping extends BeanNameUrlHandlerMapping {\n    private static final transient Log LOG = LogFactory.getLog(BindingBeanNameUrlHandlerMapping.class);\n\n    protected Object getHandlerInternal(HttpServletRequest request) throws Exception {\n        Object object = super.getHandlerInternal(request);\n\n        if (object instanceof String) {\n            String handlerName = (String) object;\n            object = getApplicationContext().getBean(handlerName);\n        }\n        if (object instanceof HandlerExecutionChain) {\n            HandlerExecutionChain handlerExecutionChain = (HandlerExecutionChain) object;\n            object = handlerExecutionChain.getHandler();\n        }\n        \n        if (object != null) {\n        \t// prevent CSRF attacks\n        \tif (object instanceof DestinationFacade) {\n        \t\t// check supported methods\n        \t\tif (!Arrays.asList(((DestinationFacade)object).getSupportedHttpMethods()).contains(request.getMethod())) {\n        \t\t\tthrow new UnsupportedOperationException(\"Unsupported method \" + request.getMethod() + \" for path \" + request.getRequestURI());\n        \t\t}\n        \t\t// check the 'secret'\n        \t\tif (!request.getSession().getAttribute(\"secret\").equals(request.getParameter(\"secret\"))) {\n        \t\t\tthrow new UnsupportedOperationException(\"Possible CSRF attack\");\n        \t\t}\n        \t}\n        \t\n        \t\n            ServletRequestDataBinder binder = new ServletRequestDataBinder(object, \"request\");\n            try {\n                binder.bind(request);\n                binder.setIgnoreUnknownFields(true);\n                if (LOG.isDebugEnabled()) {\n                    LOG.debug(\"Bound POJO is now: \" + object);\n                }\n            }\n            catch (Exception e) {\n                LOG.warn(\"Caught: \" + e, e);\n                throw e;\n            }\n        }\n        \n        return object;\n    }\n}",
    "target": 0,
    "language": "java",
    "dataset": "A-Manually-Curated-Dataset-of-Vulnerability-Introducing-Commits-in-Java",
    "idx": 800055,
    "RELATED_CWE": [
      "CWE-79",
      "CWE-918",
      "CWE-384"
    ]
  },
  {
    "CWE_ID": [
      "CWE-352"
    ],
    "code": "/*\n * Copyright 2021 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.thoughtworks.go.apiv1.backupconfig;\n\nimport com.thoughtworks.go.api.ApiController;\nimport com.thoughtworks.go.api.ApiVersion;\nimport com.thoughtworks.go.api.CrudController;\nimport com.thoughtworks.go.api.base.OutputWriter;\nimport com.thoughtworks.go.api.representers.JsonReader;\nimport com.thoughtworks.go.api.spring.ApiAuthenticationHelper;\nimport com.thoughtworks.go.api.util.GsonTransformer;\nimport com.thoughtworks.go.api.util.MessageJson;\nimport com.thoughtworks.go.apiv1.backupconfig.representers.BackupConfigRepresenter;\nimport com.thoughtworks.go.config.BackupConfig;\nimport com.thoughtworks.go.config.exceptions.EntityType;\nimport com.thoughtworks.go.config.exceptions.GoConfigInvalidException;\nimport com.thoughtworks.go.config.update.CreateOrUpdateBackupConfigCommand;\nimport com.thoughtworks.go.config.update.DeleteBackupConfigCommand;\nimport com.thoughtworks.go.server.service.GoConfigService;\nimport com.thoughtworks.go.spark.Routes;\nimport com.thoughtworks.go.spark.spring.SparkSpringController;\nimport org.apache.http.HttpStatus;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\nimport spark.Request;\nimport spark.Response;\n\nimport java.io.IOException;\nimport java.util.function.Consumer;\n\nimport static spark.Spark.*;\n\n@Component\npublic class BackupConfigControllerV1 extends ApiController implements SparkSpringController, CrudController<BackupConfig> {\n\n    private final ApiAuthenticationHelper apiAuthenticationHelper;\n    private final GoConfigService goConfigService;\n\n    @Autowired\n    public BackupConfigControllerV1(ApiAuthenticationHelper apiAuthenticationHelper, GoConfigService goConfigService) {\n        super(ApiVersion.v1);\n        this.apiAuthenticationHelper = apiAuthenticationHelper;\n        this.goConfigService = goConfigService;\n    }\n\n    @Override\n    public String controllerBasePath() {\n        return Routes.BackupConfig.BASE;\n    }\n\n    @Override\n    public void setupRoutes() {\n        path(controllerBasePath(), () -> {\n            before(\"\", mimeType, this::setContentType);\n\n\n            // change the line below to enable appropriate security\n            before(\"\", mimeType, this.apiAuthenticationHelper::checkAdminUserAnd403);\n\n            get(\"\", mimeType, this::show);\n\n            post(\"\", mimeType, this::createOrUpdate);\n            put(\"\", mimeType, this::createOrUpdate);\n\n            delete(\"\", mimeType, this::deleteBackupConfig);\n        });\n    }\n\n    public String show(Request req, Response res) throws IOException {\n        BackupConfig backupConfig = doFetchEntityFromConfig();\n\n        if (backupConfig == null) {\n            backupConfig = new BackupConfig();\n        }\n\n        return writerForTopLevelObject(req, res, jsonWriter(backupConfig));\n    }\n\n    public String createOrUpdate(Request req, Response res) throws IOException {\n        BackupConfig backupConfig = buildEntityFromRequestBody(req);\n        try {\n            goConfigService.updateConfig(new CreateOrUpdateBackupConfigCommand(backupConfig), currentUsername());\n        } catch (GoConfigInvalidException e) {\n            res.status(HttpStatus.SC_UNPROCESSABLE_ENTITY);\n            return MessageJson.create(e.getMessage(), jsonWriter(backupConfig));\n        }\n        return show(req, res);\n    }\n\n    public String deleteBackupConfig(Request req, Response res) throws IOException {\n        // to throw a NFE, if none is available\n        fetchEntityFromConfig();\n\n        goConfigService.updateConfig(new DeleteBackupConfigCommand(), currentUsername());\n\n        return renderMessage(res, 200, EntityType.BackupConfig.deleteSuccessful());\n    }\n\n    @Override\n    public String etagFor(BackupConfig entityFromServer) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public EntityType getEntityType() {\n        return EntityType.BackupConfig;\n    }\n\n    @Override\n    public BackupConfig doFetchEntityFromConfig() {\n        return goConfigService.serverConfig().getBackupConfig();\n    }\n\n    @Override\n    public BackupConfig buildEntityFromRequestBody(Request req) {\n        JsonReader jsonReader = GsonTransformer.getInstance().jsonReaderFrom(req.body());\n        return BackupConfigRepresenter.fromJSON(jsonReader);\n    }\n\n    @Override\n    public Consumer<OutputWriter> jsonWriter(BackupConfig backupConfig) {\n        return outputWriter -> BackupConfigRepresenter.toJSON(outputWriter, backupConfig);\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "TreeVul",
    "idx": 700248,
    "RELATED_CWE": [
      "CWE-79",
      "CWE-918",
      "CWE-384"
    ]
  },
  {
    "CWE_ID": [
      "CWE-352"
    ],
    "code": "/*\n * Copyright 2021 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.thoughtworks.go.apiv1.backupconfig;\n\nimport com.thoughtworks.go.api.ApiController;\nimport com.thoughtworks.go.api.ApiVersion;\nimport com.thoughtworks.go.api.CrudController;\nimport com.thoughtworks.go.api.base.OutputWriter;\nimport com.thoughtworks.go.api.representers.JsonReader;\nimport com.thoughtworks.go.api.spring.ApiAuthenticationHelper;\nimport com.thoughtworks.go.api.util.GsonTransformer;\nimport com.thoughtworks.go.api.util.MessageJson;\nimport com.thoughtworks.go.apiv1.backupconfig.representers.BackupConfigRepresenter;\nimport com.thoughtworks.go.config.BackupConfig;\nimport com.thoughtworks.go.config.exceptions.EntityType;\nimport com.thoughtworks.go.config.exceptions.GoConfigInvalidException;\nimport com.thoughtworks.go.config.update.CreateOrUpdateBackupConfigCommand;\nimport com.thoughtworks.go.config.update.DeleteBackupConfigCommand;\nimport com.thoughtworks.go.server.service.GoConfigService;\nimport com.thoughtworks.go.spark.Routes;\nimport com.thoughtworks.go.spark.spring.SparkSpringController;\nimport org.apache.http.HttpStatus;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\nimport spark.Request;\nimport spark.Response;\n\nimport java.io.IOException;\nimport java.util.function.Consumer;\n\nimport static spark.Spark.*;\n\n@Component\npublic class BackupConfigControllerV1 extends ApiController implements SparkSpringController, CrudController<BackupConfig> {\n\n    private final ApiAuthenticationHelper apiAuthenticationHelper;\n    private final GoConfigService goConfigService;\n\n    @Autowired\n    public BackupConfigControllerV1(ApiAuthenticationHelper apiAuthenticationHelper, GoConfigService goConfigService) {\n        super(ApiVersion.v1);\n        this.apiAuthenticationHelper = apiAuthenticationHelper;\n        this.goConfigService = goConfigService;\n    }\n\n    @Override\n    public String controllerBasePath() {\n        return Routes.BackupConfig.BASE;\n    }\n\n    @Override\n    public void setupRoutes() {\n        path(controllerBasePath(), () -> {\n            before(\"\", mimeType, this::setContentType);\n            before(\"/*\", mimeType, this::setContentType);\n            before(\"\", mimeType, this::verifyContentType);\n            before(\"/*\", mimeType, this::verifyContentType);\n\n            // change the line below to enable appropriate security\n            before(\"\", mimeType, this.apiAuthenticationHelper::checkAdminUserAnd403);\n\n            get(\"\", mimeType, this::show);\n\n            post(\"\", mimeType, this::createOrUpdate);\n            put(\"\", mimeType, this::createOrUpdate);\n\n            delete(\"\", mimeType, this::deleteBackupConfig);\n        });\n    }\n\n    public String show(Request req, Response res) throws IOException {\n        BackupConfig backupConfig = doFetchEntityFromConfig();\n\n        if (backupConfig == null) {\n            backupConfig = new BackupConfig();\n        }\n\n        return writerForTopLevelObject(req, res, jsonWriter(backupConfig));\n    }\n\n    public String createOrUpdate(Request req, Response res) throws IOException {\n        BackupConfig backupConfig = buildEntityFromRequestBody(req);\n        try {\n            goConfigService.updateConfig(new CreateOrUpdateBackupConfigCommand(backupConfig), currentUsername());\n        } catch (GoConfigInvalidException e) {\n            res.status(HttpStatus.SC_UNPROCESSABLE_ENTITY);\n            return MessageJson.create(e.getMessage(), jsonWriter(backupConfig));\n        }\n        return show(req, res);\n    }\n\n    public String deleteBackupConfig(Request req, Response res) throws IOException {\n        // to throw a NFE, if none is available\n        fetchEntityFromConfig();\n\n        goConfigService.updateConfig(new DeleteBackupConfigCommand(), currentUsername());\n\n        return renderMessage(res, 200, EntityType.BackupConfig.deleteSuccessful());\n    }\n\n    @Override\n    public String etagFor(BackupConfig entityFromServer) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public EntityType getEntityType() {\n        return EntityType.BackupConfig;\n    }\n\n    @Override\n    public BackupConfig doFetchEntityFromConfig() {\n        return goConfigService.serverConfig().getBackupConfig();\n    }\n\n    @Override\n    public BackupConfig buildEntityFromRequestBody(Request req) {\n        JsonReader jsonReader = GsonTransformer.getInstance().jsonReaderFrom(req.body());\n        return BackupConfigRepresenter.fromJSON(jsonReader);\n    }\n\n    @Override\n    public Consumer<OutputWriter> jsonWriter(BackupConfig backupConfig) {\n        return outputWriter -> BackupConfigRepresenter.toJSON(outputWriter, backupConfig);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "TreeVul",
    "idx": 700249,
    "RELATED_CWE": [
      "CWE-79",
      "CWE-918",
      "CWE-384"
    ]
  }
]