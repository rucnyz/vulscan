[
  {
    "CWE_ID": [
      "CWE-74"
    ],
    "code": "package io.dropwizard.validation.selfvalidating;\n\nimport javax.validation.ConstraintValidatorContext;\n\n/**\n * This class is a simple wrapper around the ConstraintValidatorContext of hibernate validation.\n * It collects all the violations of the SelfValidation methods of an object.\n */\npublic class ViolationCollector {\n    \n    private boolean violationOccurred = false;\n    private ConstraintValidatorContext context;\n    \n    \n    public ViolationCollector(ConstraintValidatorContext context) {\n        this.context = context;\n    }\n    \n    /**\n     * Adds a new violation to this collector. This also sets violationOccurred to true.\n     * @param msg the message of the violation\n     */\n    public void addViolation(String msg) {\n        violationOccurred = true;\n        context\n            .buildConstraintViolationWithTemplate(msg)\n            .addConstraintViolation();\n    }\n    \n    /**\n     * This method returns the wrapped context for raw access to the validation framework. If you use \n     * the context to add violations make sure to call <code>setViolationOccurred(true)</code>.\n     * @return the wrapped Hibernate ConstraintValidatorContext\n     */\n    public ConstraintValidatorContext getContext() {\n        return context;\n    }\n    \n    /**\n     * @return if any violation was collected\n     */\n    public boolean hasViolationOccurred() {\n        return violationOccurred;\n    }\n    \n    /**\n     * Manually sets if a violation occurred. This is automatically set if <code>addViolation</code> is called.\n     * @param violationOccurred if any violation was collected\n     */\n    public void setViolationOccurred(boolean violationOccurred) {\n        this.violationOccurred = violationOccurred;\n    }\n\n}",
    "target": 1,
    "language": "java",
    "dataset": "A-Manually-Curated-Dataset-of-Vulnerability-Introducing-Commits-in-Java",
    "idx": 800094,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-121",
      "CWE-122"
    ]
  },
  {
    "CWE_ID": [
      "CWE-74"
    ],
    "code": "package io.dropwizard.validation.selfvalidating;\n\nimport javax.annotation.Nullable;\nimport javax.validation.ConstraintValidatorContext;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n/**\n * This class is a simple wrapper around the ConstraintValidatorContext of hibernate validation.\n * It collects all the violations of the SelfValidation methods of an object.\n */\npublic class ViolationCollector {\n    private static final Pattern ESCAPE_PATTERN = Pattern.compile(\"\\\\$\\\\{\");\n\n    private boolean violationOccurred = false;\n    private ConstraintValidatorContext context;\n\n\n    public ViolationCollector(ConstraintValidatorContext context) {\n        this.context = context;\n    }\n\n    /**\n     * Adds a new violation to this collector. This also sets {@code violationOccurred} to {@code true}.\n     *\n     * @param message the message of the violation (any EL expression will be escaped and not parsed)\n     */\n    public void addViolation(String message) {\n        violationOccurred = true;\n        String messageTemplate = escapeEl(message);\n        context.buildConstraintViolationWithTemplate(messageTemplate)\n                .addConstraintViolation();\n    }\n\n    /**\n     * Adds a new violation to this collector. This also sets {@code violationOccurred} to {@code true}.\n     *\n     * @param propertyName the name of the property\n     * @param message      the message of the violation (any EL expression will be escaped and not parsed)\n     * @since 2.0.2\n     */\n    public void addViolation(String propertyName, String message) {\n        violationOccurred = true;\n        String messageTemplate = escapeEl(message);\n        context.buildConstraintViolationWithTemplate(messageTemplate)\n                .addPropertyNode(propertyName)\n                .addConstraintViolation();\n    }\n\n    /**\n     * Adds a new violation to this collector. This also sets {@code violationOccurred} to {@code true}.\n     *\n     * @param propertyName the name of the property with the violation\n     * @param index        the index of the element with the violation\n     * @param message      the message of the violation (any EL expression will be escaped and not parsed)\n     * @since 2.0.2\n     */\n    public void addViolation(String propertyName, Integer index, String message) {\n        violationOccurred = true;\n        String messageTemplate = escapeEl(message);\n        context.buildConstraintViolationWithTemplate(messageTemplate)\n                .addPropertyNode(propertyName)\n                .addBeanNode().inIterable().atIndex(index)\n                .addConstraintViolation();\n    }\n\n    /**\n     * Adds a new violation to this collector. This also sets {@code violationOccurred} to {@code true}.\n     *\n     * @param propertyName the name of the property with the violation\n     * @param key          the key of the element with the violation\n     * @param message      the message of the violation (any EL expression will be escaped and not parsed)\n     * @since 2.0.2\n     */\n    public void addViolation(String propertyName, String key, String message) {\n        violationOccurred = true;\n        String messageTemplate = escapeEl(message);\n        context.buildConstraintViolationWithTemplate(messageTemplate)\n                .addPropertyNode(propertyName)\n                .addBeanNode().inIterable().atKey(key)\n                .addConstraintViolation();\n    }\n\n    @Nullable\n    private String escapeEl(@Nullable String s) {\n        if (s == null || s.isEmpty()) {\n            return s;\n        }\n\n        final Matcher m = ESCAPE_PATTERN.matcher(s);\n        final StringBuffer sb = new StringBuffer(s.length() + 16);\n        while (m.find()) {\n            m.appendReplacement(sb, \"\\\\\\\\\\\\${\");\n        }\n        m.appendTail(sb);\n\n        return sb.toString();\n    }\n\n    /**\n     * This method returns the wrapped context for raw access to the validation framework. If you use\n     * the context to add violations make sure to call <code>setViolationOccurred(true)</code>.\n     *\n     * @return the wrapped Hibernate ConstraintValidatorContext\n     */\n    public ConstraintValidatorContext getContext() {\n        return context;\n    }\n\n    /**\n     * @return if any violation was collected\n     */\n    public boolean hasViolationOccurred() {\n        return violationOccurred;\n    }\n\n    /**\n     * Manually sets if a violation occurred. This is automatically set if <code>addViolation</code> is called.\n     *\n     * @param violationOccurred if any violation was collected\n     */\n    public void setViolationOccurred(boolean violationOccurred) {\n        this.violationOccurred = violationOccurred;\n    }\n\n}",
    "target": 0,
    "language": "java",
    "dataset": "A-Manually-Curated-Dataset-of-Vulnerability-Introducing-Commits-in-Java",
    "idx": 800095,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-121",
      "CWE-122"
    ]
  },
  {
    "CWE_ID": [
      "CWE-74"
    ],
    "code": "package io.onedev.server;\n\nimport java.io.Serializable;\nimport java.lang.reflect.AnnotatedElement;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.ForkJoinPool;\nimport java.util.concurrent.ForkJoinTask;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.RejectedExecutionException;\nimport java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.TimeoutException;\n\nimport javax.inject.Singleton;\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.EntityNotFoundException;\nimport javax.persistence.OneToMany;\nimport javax.persistence.Transient;\nimport javax.persistence.Version;\nimport javax.validation.Configuration;\nimport javax.validation.Validation;\nimport javax.validation.Validator;\nimport javax.validation.ValidatorFactory;\n\nimport org.apache.shiro.authc.credential.PasswordService;\nimport org.apache.shiro.authz.UnauthorizedException;\nimport org.apache.shiro.guice.aop.ShiroAopModule;\nimport org.apache.shiro.mgt.RememberMeManager;\nimport org.apache.shiro.realm.Realm;\nimport org.apache.shiro.web.filter.mgt.FilterChainManager;\nimport org.apache.shiro.web.filter.mgt.FilterChainResolver;\nimport org.apache.shiro.web.mgt.WebSecurityManager;\nimport org.apache.shiro.web.servlet.ShiroFilter;\nimport org.apache.wicket.Application;\nimport org.apache.wicket.core.request.mapper.StalePageException;\nimport org.apache.wicket.protocol.http.PageExpiredException;\nimport org.apache.wicket.protocol.http.WebApplication;\nimport org.apache.wicket.protocol.http.WicketFilter;\nimport org.apache.wicket.protocol.http.WicketServlet;\nimport org.eclipse.jetty.servlet.ServletContextHandler;\nimport org.eclipse.jetty.websocket.api.WebSocketPolicy;\nimport org.glassfish.jersey.server.ResourceConfig;\nimport org.glassfish.jersey.servlet.ServletContainer;\nimport org.hibernate.CallbackException;\nimport org.hibernate.Interceptor;\nimport org.hibernate.ObjectNotFoundException;\nimport org.hibernate.Session;\nimport org.hibernate.SessionFactory;\nimport org.hibernate.StaleStateException;\nimport org.hibernate.boot.model.naming.PhysicalNamingStrategy;\nimport org.hibernate.collection.internal.PersistentBag;\nimport org.hibernate.exception.ConstraintViolationException;\nimport org.hibernate.type.Type;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Sets;\nimport com.google.inject.Provider;\nimport com.google.inject.matcher.AbstractMatcher;\nimport com.google.inject.matcher.Matchers;\nimport com.thoughtworks.xstream.XStream;\nimport com.thoughtworks.xstream.annotations.XStreamOmitField;\nimport com.thoughtworks.xstream.converters.basic.NullConverter;\nimport com.thoughtworks.xstream.converters.extended.ISO8601DateConverter;\nimport com.thoughtworks.xstream.converters.extended.ISO8601SqlTimestampConverter;\nimport com.thoughtworks.xstream.converters.reflection.ReflectionProvider;\nimport com.thoughtworks.xstream.core.JVM;\nimport com.thoughtworks.xstream.mapper.MapperWrapper;\nimport com.vladsch.flexmark.Extension;\n\nimport io.onedev.commons.launcher.bootstrap.Bootstrap;\nimport io.onedev.commons.launcher.loader.AbstractPlugin;\nimport io.onedev.commons.launcher.loader.AbstractPluginModule;\nimport io.onedev.commons.launcher.loader.ImplementationProvider;\nimport io.onedev.commons.utils.ExceptionUtils;\nimport io.onedev.commons.utils.StringUtils;\nimport io.onedev.server.buildspec.job.DefaultJobManager;\nimport io.onedev.server.buildspec.job.JobManager;\nimport io.onedev.server.buildspec.job.log.DefaultLogManager;\nimport io.onedev.server.buildspec.job.log.LogManager;\nimport io.onedev.server.buildspec.job.log.instruction.LogInstruction;\nimport io.onedev.server.entitymanager.BuildDependenceManager;\nimport io.onedev.server.entitymanager.BuildManager;\nimport io.onedev.server.entitymanager.BuildParamManager;\nimport io.onedev.server.entitymanager.BuildQuerySettingManager;\nimport io.onedev.server.entitymanager.CodeCommentManager;\nimport io.onedev.server.entitymanager.CodeCommentQuerySettingManager;\nimport io.onedev.server.entitymanager.CodeCommentRelationManager;\nimport io.onedev.server.entitymanager.CodeCommentReplyManager;\nimport io.onedev.server.entitymanager.CommitQuerySettingManager;\nimport io.onedev.server.entitymanager.GroupAuthorizationManager;\nimport io.onedev.server.entitymanager.GroupManager;\nimport io.onedev.server.entitymanager.IssueChangeManager;\nimport io.onedev.server.entitymanager.IssueCommentManager;\nimport io.onedev.server.entitymanager.IssueFieldManager;\nimport io.onedev.server.entitymanager.IssueManager;\nimport io.onedev.server.entitymanager.IssueQuerySettingManager;\nimport io.onedev.server.entitymanager.IssueVoteManager;\nimport io.onedev.server.entitymanager.IssueWatchManager;\nimport io.onedev.server.entitymanager.MembershipManager;\nimport io.onedev.server.entitymanager.MilestoneManager;\nimport io.onedev.server.entitymanager.ProjectManager;\nimport io.onedev.server.entitymanager.PullRequestBuildManager;\nimport io.onedev.server.entitymanager.PullRequestChangeManager;\nimport io.onedev.server.entitymanager.PullRequestCommentManager;\nimport io.onedev.server.entitymanager.PullRequestManager;\nimport io.onedev.server.entitymanager.PullRequestQuerySettingManager;\nimport io.onedev.server.entitymanager.PullRequestReviewManager;\nimport io.onedev.server.entitymanager.PullRequestUpdateManager;\nimport io.onedev.server.entitymanager.PullRequestWatchManager;\nimport io.onedev.server.entitymanager.RoleManager;\nimport io.onedev.server.entitymanager.SettingManager;\nimport io.onedev.server.entitymanager.UrlManager;\nimport io.onedev.server.entitymanager.UserAuthorizationManager;\nimport io.onedev.server.entitymanager.UserManager;\nimport io.onedev.server.entitymanager.impl.DefaultBuildDependenceManager;\nimport io.onedev.server.entitymanager.impl.DefaultBuildManager;\nimport io.onedev.server.entitymanager.impl.DefaultBuildParamManager;\nimport io.onedev.server.entitymanager.impl.DefaultBuildQuerySettingManager;\nimport io.onedev.server.entitymanager.impl.DefaultCodeCommentManager;\nimport io.onedev.server.entitymanager.impl.DefaultCodeCommentQuerySettingManager;\nimport io.onedev.server.entitymanager.impl.DefaultCodeCommentRelationManager;\nimport io.onedev.server.entitymanager.impl.DefaultCodeCommentReplyManager;\nimport io.onedev.server.entitymanager.impl.DefaultCommitQuerySettingManager;\nimport io.onedev.server.entitymanager.impl.DefaultGroupAuthorizationManager;\nimport io.onedev.server.entitymanager.impl.DefaultGroupManager;\nimport io.onedev.server.entitymanager.impl.DefaultIssueChangeManager;\nimport io.onedev.server.entitymanager.impl.DefaultIssueCommentManager;\nimport io.onedev.server.entitymanager.impl.DefaultIssueFieldManager;\nimport io.onedev.server.entitymanager.impl.DefaultIssueManager;\nimport io.onedev.server.entitymanager.impl.DefaultIssueQuerySettingManager;\nimport io.onedev.server.entitymanager.impl.DefaultIssueVoteManager;\nimport io.onedev.server.entitymanager.impl.DefaultIssueWatchManager;\nimport io.onedev.server.entitymanager.impl.DefaultMembershipManager;\nimport io.onedev.server.entitymanager.impl.DefaultMilestoneManager;\nimport io.onedev.server.entitymanager.impl.DefaultProjectManager;\nimport io.onedev.server.entitymanager.impl.DefaultPullRequestBuildManager;\nimport io.onedev.server.entitymanager.impl.DefaultPullRequestChangeManager;\nimport io.onedev.server.entitymanager.impl.DefaultPullRequestCommentManager;\nimport io.onedev.server.entitymanager.impl.DefaultPullRequestManager;\nimport io.onedev.server.entitymanager.impl.DefaultPullRequestQuerySettingManager;\nimport io.onedev.server.entitymanager.impl.DefaultPullRequestReviewManager;\nimport io.onedev.server.entitymanager.impl.DefaultPullRequestUpdateManager;\nimport io.onedev.server.entitymanager.impl.DefaultPullRequestWatchManager;\nimport io.onedev.server.entitymanager.impl.DefaultRoleManager;\nimport io.onedev.server.entitymanager.impl.DefaultSettingManager;\nimport io.onedev.server.entitymanager.impl.DefaultUserAuthorizationManager;\nimport io.onedev.server.entitymanager.impl.DefaultUserManager;\nimport io.onedev.server.git.GitFilter;\nimport io.onedev.server.git.GitPostReceiveCallback;\nimport io.onedev.server.git.GitPreReceiveCallback;\nimport io.onedev.server.git.config.GitConfig;\nimport io.onedev.server.infomanager.CodeCommentRelationInfoManager;\nimport io.onedev.server.infomanager.CommitInfoManager;\nimport io.onedev.server.infomanager.DefaultCodeCommentRelationInfoManager;\nimport io.onedev.server.infomanager.DefaultCommitInfoManager;\nimport io.onedev.server.infomanager.DefaultUserInfoManager;\nimport io.onedev.server.infomanager.UserInfoManager;\nimport io.onedev.server.maintenance.ApplyDatabaseConstraints;\nimport io.onedev.server.maintenance.BackupDatabase;\nimport io.onedev.server.maintenance.CheckDataVersion;\nimport io.onedev.server.maintenance.CleanDatabase;\nimport io.onedev.server.maintenance.DataManager;\nimport io.onedev.server.maintenance.DefaultDataManager;\nimport io.onedev.server.maintenance.ResetAdminPassword;\nimport io.onedev.server.maintenance.RestoreDatabase;\nimport io.onedev.server.maintenance.Upgrade;\nimport io.onedev.server.model.support.administration.GroovyScript;\nimport io.onedev.server.model.support.administration.authenticator.Authenticator;\nimport io.onedev.server.model.support.administration.jobexecutor.AutoDiscoveredJobExecutor;\nimport io.onedev.server.model.support.administration.jobexecutor.JobExecutor;\nimport io.onedev.server.notification.BuildNotificationManager;\nimport io.onedev.server.notification.CodeCommentNotificationManager;\nimport io.onedev.server.notification.CommitNotificationManager;\nimport io.onedev.server.notification.DefaultMailManager;\nimport io.onedev.server.notification.IssueNotificationManager;\nimport io.onedev.server.notification.MailManager;\nimport io.onedev.server.notification.PullRequestNotificationManager;\nimport io.onedev.server.notification.WebHookManager;\nimport io.onedev.server.persistence.DefaultIdManager;\nimport io.onedev.server.persistence.DefaultPersistManager;\nimport io.onedev.server.persistence.DefaultSessionManager;\nimport io.onedev.server.persistence.DefaultTransactionManager;\nimport io.onedev.server.persistence.HibernateInterceptor;\nimport io.onedev.server.persistence.IdManager;\nimport io.onedev.server.persistence.PersistListener;\nimport io.onedev.server.persistence.PersistManager;\nimport io.onedev.server.persistence.PrefixedNamingStrategy;\nimport io.onedev.server.persistence.SessionFactoryProvider;\nimport io.onedev.server.persistence.SessionInterceptor;\nimport io.onedev.server.persistence.SessionManager;\nimport io.onedev.server.persistence.SessionProvider;\nimport io.onedev.server.persistence.TransactionInterceptor;\nimport io.onedev.server.persistence.TransactionManager;\nimport io.onedev.server.persistence.annotation.Sessional;\nimport io.onedev.server.persistence.annotation.Transactional;\nimport io.onedev.server.persistence.dao.Dao;\nimport io.onedev.server.persistence.dao.DefaultDao;\nimport io.onedev.server.rest.RestConstants;\nimport io.onedev.server.rest.jersey.DefaultServletContainer;\nimport io.onedev.server.rest.jersey.JerseyConfigurator;\nimport io.onedev.server.rest.jersey.ResourceConfigProvider;\nimport io.onedev.server.search.code.DefaultIndexManager;\nimport io.onedev.server.search.code.DefaultSearchManager;\nimport io.onedev.server.search.code.IndexManager;\nimport io.onedev.server.search.code.SearchManager;\nimport io.onedev.server.security.BasicAuthenticationFilter;\nimport io.onedev.server.security.CodePullAuthorizationSource;\nimport io.onedev.server.security.FilterChainConfigurator;\nimport io.onedev.server.security.OneAuthorizingRealm;\nimport io.onedev.server.security.OneFilterChainResolver;\nimport io.onedev.server.security.OnePasswordService;\nimport io.onedev.server.security.OneRememberMeManager;\nimport io.onedev.server.security.OneWebSecurityManager;\nimport io.onedev.server.storage.AttachmentStorageManager;\nimport io.onedev.server.storage.DefaultAttachmentStorageManager;\nimport io.onedev.server.storage.DefaultStorageManager;\nimport io.onedev.server.storage.StorageManager;\nimport io.onedev.server.util.SecurityUtils;\nimport io.onedev.server.util.jackson.ObjectMapperConfigurator;\nimport io.onedev.server.util.jackson.ObjectMapperProvider;\nimport io.onedev.server.util.jackson.git.GitObjectMapperConfigurator;\nimport io.onedev.server.util.jackson.hibernate.HibernateObjectMapperConfigurator;\nimport io.onedev.server.util.jetty.DefaultJettyRunner;\nimport io.onedev.server.util.jetty.JettyRunner;\nimport io.onedev.server.util.markdown.DefaultMarkdownManager;\nimport io.onedev.server.util.markdown.EntityReferenceManager;\nimport io.onedev.server.util.markdown.MarkdownManager;\nimport io.onedev.server.util.markdown.MarkdownProcessor;\nimport io.onedev.server.util.schedule.DefaultTaskScheduler;\nimport io.onedev.server.util.schedule.TaskScheduler;\nimport io.onedev.server.util.script.ScriptContribution;\nimport io.onedev.server.util.validation.DefaultEntityValidator;\nimport io.onedev.server.util.validation.EntityValidator;\nimport io.onedev.server.util.validation.ValidatorProvider;\nimport io.onedev.server.util.work.BatchWorkManager;\nimport io.onedev.server.util.work.DefaultBatchWorkManager;\nimport io.onedev.server.util.work.DefaultWorkExecutor;\nimport io.onedev.server.util.work.WorkExecutor;\nimport io.onedev.server.util.xstream.CollectionConverter;\nimport io.onedev.server.util.xstream.HibernateProxyConverter;\nimport io.onedev.server.util.xstream.MapConverter;\nimport io.onedev.server.util.xstream.ReflectionConverter;\nimport io.onedev.server.util.xstream.StringConverter;\nimport io.onedev.server.util.xstream.VersionedDocumentConverter;\nimport io.onedev.server.web.DefaultUrlManager;\nimport io.onedev.server.web.DefaultWicketFilter;\nimport io.onedev.server.web.DefaultWicketServlet;\nimport io.onedev.server.web.ExpectedExceptionContribution;\nimport io.onedev.server.web.OneWebApplication;\nimport io.onedev.server.web.ResourcePackScopeContribution;\nimport io.onedev.server.web.WebApplicationConfigurator;\nimport io.onedev.server.web.avatar.AvatarManager;\nimport io.onedev.server.web.avatar.DefaultAvatarManager;\nimport io.onedev.server.web.component.diff.DiffRenderer;\nimport io.onedev.server.web.component.markdown.AttachmentUploadServlet;\nimport io.onedev.server.web.component.markdown.SourcePositionTrackExtension;\nimport io.onedev.server.web.component.markdown.emoji.EmojiExtension;\nimport io.onedev.server.web.component.taskbutton.TaskButton;\nimport io.onedev.server.web.editable.DefaultEditSupportRegistry;\nimport io.onedev.server.web.editable.EditSupport;\nimport io.onedev.server.web.editable.EditSupportLocator;\nimport io.onedev.server.web.editable.EditSupportRegistry;\nimport io.onedev.server.web.mapper.OnePageMapper;\nimport io.onedev.server.web.page.DashboardPage;\nimport io.onedev.server.web.page.base.BasePage;\nimport io.onedev.server.web.page.layout.BuildListTab;\nimport io.onedev.server.web.page.layout.IssueListTab;\nimport io.onedev.server.web.page.layout.MainTab;\nimport io.onedev.server.web.page.layout.ProjectListTab;\nimport io.onedev.server.web.page.layout.PullRequestListTab;\nimport io.onedev.server.web.page.layout.UICustomization;\nimport io.onedev.server.web.page.project.blob.render.BlobRendererContribution;\nimport io.onedev.server.web.page.test.TestPage;\nimport io.onedev.server.web.websocket.BuildEventBroadcaster;\nimport io.onedev.server.web.websocket.CodeCommentEventBroadcaster;\nimport io.onedev.server.web.websocket.CommitIndexedBroadcaster;\nimport io.onedev.server.web.websocket.DefaultWebSocketManager;\nimport io.onedev.server.web.websocket.IssueEventBroadcaster;\nimport io.onedev.server.web.websocket.PullRequestEventBroadcaster;\nimport io.onedev.server.web.websocket.WebSocketManager;\nimport io.onedev.server.web.websocket.WebSocketPolicyProvider;\n\n/**\n * NOTE: Do not forget to rename moduleClass property defined in the pom if you've renamed this class.\n *\n */\npublic class CoreModule extends AbstractPluginModule {\n\n\t@Override\n\tprotected void configure() {\n\t\tsuper.configure();\n\t\t\n\t\tbind(JettyRunner.class).to(DefaultJettyRunner.class);\n\t\tbind(ServletContextHandler.class).toProvider(DefaultJettyRunner.class);\n\t\t\n\t\tbind(ObjectMapper.class).toProvider(ObjectMapperProvider.class).in(Singleton.class);\n\t\t\n\t\tbind(ValidatorFactory.class).toProvider(new com.google.inject.Provider<ValidatorFactory>() {\n\n\t\t\t@Override\n\t\t\tpublic ValidatorFactory get() {\n\t\t\t\tConfiguration<?> configuration = Validation.byDefaultProvider().configure();\n\t\t\t\treturn configuration.buildValidatorFactory();\n\t\t\t}\n\t\t\t\n\t\t}).in(Singleton.class);\n\t\t\n\t\tbind(Validator.class).toProvider(ValidatorProvider.class).in(Singleton.class);\n\n\t\t// configure markdown\n\t\tbind(MarkdownManager.class).to(DefaultMarkdownManager.class);\t\t\n\t\t\n\t\tconfigurePersistence();\n\t\tconfigureRestServices();\n\t\tconfigureWeb();\n\t\tconfigureBuild();\n\t\t\n\t\tbind(GitConfig.class).toProvider(GitConfigProvider.class);\n\n\t\t/*\n\t\t * Declare bindings explicitly instead of using ImplementedBy annotation as\n\t\t * HK2 to guice bridge can only search in explicit bindings in Guice   \n\t\t */\n\t\tbind(StorageManager.class).to(DefaultStorageManager.class);\n\t\tbind(SettingManager.class).to(DefaultSettingManager.class);\n\t\tbind(DataManager.class).to(DefaultDataManager.class);\n\t\tbind(TaskScheduler.class).to(DefaultTaskScheduler.class);\n\t\tbind(PullRequestCommentManager.class).to(DefaultPullRequestCommentManager.class);\n\t\tbind(CodeCommentManager.class).to(DefaultCodeCommentManager.class);\n\t\tbind(PullRequestManager.class).to(DefaultPullRequestManager.class);\n\t\tbind(PullRequestUpdateManager.class).to(DefaultPullRequestUpdateManager.class);\n\t\tbind(ProjectManager.class).to(DefaultProjectManager.class);\n\t\tbind(UserManager.class).to(DefaultUserManager.class);\n\t\tbind(PullRequestReviewManager.class).to(DefaultPullRequestReviewManager.class);\n\t\tbind(BuildManager.class).to(DefaultBuildManager.class);\n\t\tbind(BuildDependenceManager.class).to(DefaultBuildDependenceManager.class);\n\t\tbind(JobManager.class).to(DefaultJobManager.class);\n\t\tbind(LogManager.class).to(DefaultLogManager.class);\n\t\tbind(PullRequestBuildManager.class).to(DefaultPullRequestBuildManager.class);\n\t\tbind(MailManager.class).to(DefaultMailManager.class);\n\t\tbind(IssueManager.class).to(DefaultIssueManager.class);\n\t\tbind(IssueFieldManager.class).to(DefaultIssueFieldManager.class);\n\t\tbind(BuildParamManager.class).to(DefaultBuildParamManager.class);\n\t\tbind(UserAuthorizationManager.class).to(DefaultUserAuthorizationManager.class);\n\t\tbind(GroupAuthorizationManager.class).to(DefaultGroupAuthorizationManager.class);\n\t\tbind(PullRequestWatchManager.class).to(DefaultPullRequestWatchManager.class);\n\t\tbind(RoleManager.class).to(DefaultRoleManager.class);\n\t\tbind(CommitInfoManager.class).to(DefaultCommitInfoManager.class);\n\t\tbind(UserInfoManager.class).to(DefaultUserInfoManager.class);\n\t\tbind(BatchWorkManager.class).to(DefaultBatchWorkManager.class);\n\t\tbind(GroupManager.class).to(DefaultGroupManager.class);\n\t\tbind(MembershipManager.class).to(DefaultMembershipManager.class);\n\t\tbind(PullRequestChangeManager.class).to(DefaultPullRequestChangeManager.class);\n\t\tbind(CodeCommentReplyManager.class).to(DefaultCodeCommentReplyManager.class);\n\t\tbind(AttachmentStorageManager.class).to(DefaultAttachmentStorageManager.class);\n\t\tbind(CodeCommentRelationInfoManager.class).to(DefaultCodeCommentRelationInfoManager.class);\n\t\tbind(CodeCommentRelationManager.class).to(DefaultCodeCommentRelationManager.class);\n\t\tbind(WorkExecutor.class).to(DefaultWorkExecutor.class);\n\t\tbind(PullRequestNotificationManager.class);\n\t\tbind(CommitNotificationManager.class);\n\t\tbind(BuildNotificationManager.class);\n\t\tbind(IssueNotificationManager.class);\n\t\tbind(EntityReferenceManager.class);\n\t\tbind(CodeCommentNotificationManager.class);\n\t\tbind(CodeCommentManager.class).to(DefaultCodeCommentManager.class);\n\t\tbind(IssueWatchManager.class).to(DefaultIssueWatchManager.class);\n\t\tbind(IssueChangeManager.class).to(DefaultIssueChangeManager.class);\n\t\tbind(IssueVoteManager.class).to(DefaultIssueVoteManager.class);\n\t\tbind(MilestoneManager.class).to(DefaultMilestoneManager.class);\n\t\tbind(Session.class).toProvider(SessionProvider.class);\n\t\tbind(EntityManager.class).toProvider(SessionProvider.class);\n\t\tbind(SessionFactory.class).toProvider(SessionFactoryProvider.class);\n\t\tbind(EntityManagerFactory.class).toProvider(SessionFactoryProvider.class);\n\t\tbind(IssueCommentManager.class).to(DefaultIssueCommentManager.class);\n\t\tbind(IssueQuerySettingManager.class).to(DefaultIssueQuerySettingManager.class);\n\t\tbind(PullRequestQuerySettingManager.class).to(DefaultPullRequestQuerySettingManager.class);\n\t\tbind(CodeCommentQuerySettingManager.class).to(DefaultCodeCommentQuerySettingManager.class);\n\t\tbind(CommitQuerySettingManager.class).to(DefaultCommitQuerySettingManager.class);\n\t\tbind(BuildQuerySettingManager.class).to(DefaultBuildQuerySettingManager.class);\n\t\tbind(WebHookManager.class);\n\n\t\tcontribute(ObjectMapperConfigurator.class, GitObjectMapperConfigurator.class);\n\t    contribute(ObjectMapperConfigurator.class, HibernateObjectMapperConfigurator.class);\n\t    \n\t\tbind(Realm.class).to(OneAuthorizingRealm.class);\n\t\tbind(RememberMeManager.class).to(OneRememberMeManager.class);\n\t\tbind(WebSecurityManager.class).to(OneWebSecurityManager.class);\n\t\tbind(FilterChainResolver.class).to(OneFilterChainResolver.class);\n\t\tbind(BasicAuthenticationFilter.class);\n\t\tbind(PasswordService.class).to(OnePasswordService.class);\n\t\tbind(ShiroFilter.class);\n\t\tinstall(new ShiroAopModule());\n        contribute(FilterChainConfigurator.class, new FilterChainConfigurator() {\n\n            @Override\n            public void configure(FilterChainManager filterChainManager) {\n                filterChainManager.createChain(\"/**/info/refs\", \"noSessionCreation, authcBasic\");\n                filterChainManager.createChain(\"/**/git-upload-pack\", \"noSessionCreation, authcBasic\");\n                filterChainManager.createChain(\"/**/git-receive-pack\", \"noSessionCreation, authcBasic\");\n            }\n            \n        });\n        contributeFromPackage(Authenticator.class, Authenticator.class);\n        \n\t\tcontribute(ImplementationProvider.class, new ImplementationProvider() {\n\n\t\t\t@Override\n\t\t\tpublic Class<?> getAbstractClass() {\n\t\t\t\treturn JobExecutor.class;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic Collection<Class<?>> getImplementations() {\n\t\t\t\treturn Sets.newHashSet(AutoDiscoveredJobExecutor.class);\n\t\t\t}\n\t\t\t\n\t\t});\n\t\t\n\t\tcontribute(CodePullAuthorizationSource.class, DefaultJobManager.class);\n        \n\t\tbind(IndexManager.class).to(DefaultIndexManager.class);\n\t\tbind(SearchManager.class).to(DefaultSearchManager.class);\n\t\t\n\t\tbind(EntityValidator.class).to(DefaultEntityValidator.class);\n\t\t\n\t\tbind(GitFilter.class);\n\t\tbind(GitPreReceiveCallback.class);\n\t\tbind(GitPostReceiveCallback.class);\n\t\t\n\t    bind(ExecutorService.class).toProvider(new Provider<ExecutorService>() {\n\n\t\t\t@Override\n\t\t\tpublic ExecutorService get() {\n\t\t        return new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS, \n\t\t        \t\tnew SynchronousQueue<Runnable>()) {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void execute(Runnable command) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tsuper.execute(SecurityUtils.inheritSubject(command));\n\t\t\t\t\t\t} catch (RejectedExecutionException e) {\n\t\t\t\t\t\t\tif (!isShutdown())\n\t\t\t\t\t\t\t\tthrow ExceptionUtils.unchecked(e);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t        };\n\t\t\t}\n\t    \t\n\t    }).in(Singleton.class);\n\t    \n\t    bind(ForkJoinPool.class).toInstance(new ForkJoinPool() {\n\n\t\t\t@Override\n\t\t\tpublic ForkJoinTask<?> submit(Runnable task) {\n\t\t\t\treturn super.submit(SecurityUtils.inheritSubject(task));\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void execute(Runnable task) {\n\t\t\t\tsuper.execute(SecurityUtils.inheritSubject(task));\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic <T> ForkJoinTask<T> submit(Callable<T> task) {\n\t\t\t\treturn super.submit(SecurityUtils.inheritSubject(task));\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic <T> ForkJoinTask<T> submit(Runnable task, T result) {\n\t\t\t\treturn super.submit(SecurityUtils.inheritSubject(task), result);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic <T> T invokeAny(Collection<? extends Callable<T>> tasks)\n\t\t\t\t\tthrows InterruptedException, ExecutionException {\n\t\t\t\treturn super.invokeAny(SecurityUtils.inheritSubject(tasks));\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic <T> T invokeAny(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)\n\t\t\t\t\tthrows InterruptedException, ExecutionException, TimeoutException {\n\t\t\t\treturn super.invokeAny(SecurityUtils.inheritSubject(tasks), timeout, unit);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks, \n\t\t\t\t\tlong timeout, TimeUnit unit) throws InterruptedException {\n\t\t\t\treturn super.invokeAll(SecurityUtils.inheritSubject(tasks), timeout, unit);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks) {\n\t\t\t\treturn super.invokeAll(SecurityUtils.inheritSubject(tasks));\n\t\t\t}\n\n\t    });\n\t}\n\t\n\tprivate void configureRestServices() {\n\t\tbind(ResourceConfig.class).toProvider(ResourceConfigProvider.class).in(Singleton.class);\n\t\tbind(ServletContainer.class).to(DefaultServletContainer.class);\n\t\t\n\t\tcontribute(FilterChainConfigurator.class, new FilterChainConfigurator() {\n\n\t\t\t@Override\n\t\t\tpublic void configure(FilterChainManager filterChainManager) {\n\t\t\t\tfilterChainManager.createChain(\"/rest/**\", \"noSessionCreation, authcBasic\");\n\t\t\t}\n\t\t\t\n\t\t});\n\t\t\n\t\tcontribute(JerseyConfigurator.class, new JerseyConfigurator() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void configure(ResourceConfig resourceConfig) {\n\t\t\t\tresourceConfig.packages(RestConstants.class.getPackage().getName());\n\t\t\t}\n\t\t\t\n\t\t});\n\t}\n\n\tprivate void configureWeb() {\n\t\tbind(WicketServlet.class).to(DefaultWicketServlet.class);\n\t\tbind(WicketFilter.class).to(DefaultWicketFilter.class);\n\t\tbind(WebSocketPolicy.class).toProvider(WebSocketPolicyProvider.class);\n\t\tbind(EditSupportRegistry.class).to(DefaultEditSupportRegistry.class);\n\t\tbind(WebSocketManager.class).to(DefaultWebSocketManager.class);\n\n\t\tbind(AttachmentUploadServlet.class);\n\t\t\n\t\tcontributeFromPackage(EditSupport.class, EditSupport.class);\n\t\t\n\t\tbind(WebApplication.class).to(OneWebApplication.class);\n\t\tbind(Application.class).to(OneWebApplication.class);\n\t\tbind(AvatarManager.class).to(DefaultAvatarManager.class);\n\t\tbind(WebSocketManager.class).to(DefaultWebSocketManager.class);\n\t\t\n\t\tcontributeFromPackage(EditSupport.class, EditSupportLocator.class);\n\t\t\n\t\tcontribute(WebApplicationConfigurator.class, new WebApplicationConfigurator() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void configure(WebApplication application) {\n\t\t\t\tapplication.mount(new OnePageMapper(\"/test\", TestPage.class));\n\t\t\t}\n\t\t\t\n\t\t});\n\t\t\n\t\tbind(CommitIndexedBroadcaster.class);\n\t\t\n\t\tcontributeFromPackage(DiffRenderer.class, DiffRenderer.class);\n\t\tcontributeFromPackage(BlobRendererContribution.class, BlobRendererContribution.class);\n\n\t\tcontribute(Extension.class, new EmojiExtension());\n\t\tcontribute(Extension.class, new SourcePositionTrackExtension());\n\t\t\n\t\tcontributeFromPackage(MarkdownProcessor.class, MarkdownProcessor.class);\n\n\t\tcontribute(ResourcePackScopeContribution.class, new ResourcePackScopeContribution() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic Collection<Class<?>> getResourcePackScopes() {\n\t\t\t\treturn Lists.newArrayList(OneWebApplication.class);\n\t\t\t}\n\t\t\t\n\t\t});\n\t\tcontribute(ExpectedExceptionContribution.class, new ExpectedExceptionContribution() {\n\t\t\t\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\t@Override\n\t\t\tpublic Collection<Class<? extends Exception>> getExpectedExceptionClasses() {\n\t\t\t\treturn Sets.newHashSet(ConstraintViolationException.class, EntityNotFoundException.class, \n\t\t\t\t\t\tObjectNotFoundException.class, StaleStateException.class, UnauthorizedException.class, \n\t\t\t\t\t\tOneException.class, PageExpiredException.class, StalePageException.class);\n\t\t\t}\n\t\t\t\n\t\t});\n\n\t\tbind(UrlManager.class).to(DefaultUrlManager.class);\n\t\tbind(CodeCommentEventBroadcaster.class);\n\t\tbind(PullRequestEventBroadcaster.class);\n\t\tbind(IssueEventBroadcaster.class);\n\t\tbind(BuildEventBroadcaster.class);\n\t\t\n\t\tbind(TaskButton.TaskFutureManager.class);\n\t\t\n\t\tbind(UICustomization.class).toInstance(new UICustomization() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic Class<? extends BasePage> getHomePage() {\n\t\t\t\treturn DashboardPage.class;\n\t\t\t}\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic List<MainTab> getMainTabs() {\n\t\t\t\treturn Lists.newArrayList(\n\t\t\t\t\t\tnew ProjectListTab(), new IssueListTab(), \n\t\t\t\t\t\tnew PullRequestListTab(), new BuildListTab());\n\t\t\t}\n\n\t\t});\n\t}\n\t\n\tprivate void configureBuild() {\n\t\tcontribute(ScriptContribution.class, new ScriptContribution() {\n\n\t\t\t@Override\n\t\t\tpublic GroovyScript getScript() {\n\t\t\t\tGroovyScript script = new GroovyScript();\n\t\t\t\tscript.setName(\"determine-build-failure-investigator\");\n\t\t\t\tscript.setContent(Lists.newArrayList(\"io.onedev.server.util.script.ScriptContribution.determineBuildFailureInvestigator()\"));\n\t\t\t\treturn script;\n\t\t\t}\n\t\t\t\n\t\t});\n\t\tcontribute(ScriptContribution.class, new ScriptContribution() {\n\n\t\t\t@Override\n\t\t\tpublic GroovyScript getScript() {\n\t\t\t\tGroovyScript script = new GroovyScript();\n\t\t\t\tscript.setName(\"get-build-number\");\n\t\t\t\tscript.setContent(Lists.newArrayList(\"io.onedev.server.util.script.ScriptContribution.getBuildNumber()\"));\n\t\t\t\treturn script;\n\t\t\t}\n\t\t\t\n\t\t});\n\t}\n\t\n\tprivate void configurePersistence() {\n\t\t// Use an optional binding here in case our client does not like to \n\t\t// start persist service provided by this plugin\n\t\tbind(Interceptor.class).to(HibernateInterceptor.class);\n\t\tbind(PhysicalNamingStrategy.class).toInstance(new PrefixedNamingStrategy(\"o_\"));\n\t\t\n\t\tbind(SessionManager.class).to(DefaultSessionManager.class);\n\t\tbind(TransactionManager.class).to(DefaultTransactionManager.class);\n\t\tbind(IdManager.class).to(DefaultIdManager.class);\n\t\tbind(Dao.class).to(DefaultDao.class);\n\t\t\n\t    TransactionInterceptor transactionInterceptor = new TransactionInterceptor();\n\t    requestInjection(transactionInterceptor);\n\t    \n\t    bindInterceptor(Matchers.any(), new AbstractMatcher<AnnotatedElement>() {\n\n\t\t\t@Override\n\t\t\tpublic boolean matches(AnnotatedElement element) {\n\t\t\t\treturn element.isAnnotationPresent(Transactional.class) && !((Method) element).isSynthetic();\n\t\t\t}\n\t    \t\n\t    }, transactionInterceptor);\n\t    \n\t    SessionInterceptor sessionInterceptor = new SessionInterceptor();\n\t    requestInjection(sessionInterceptor);\n\t    \n\t    bindInterceptor(Matchers.any(), new AbstractMatcher<AnnotatedElement>() {\n\n\t\t\t@Override\n\t\t\tpublic boolean matches(AnnotatedElement element) {\n\t\t\t\treturn element.isAnnotationPresent(Sessional.class) && !((Method) element).isSynthetic();\n\t\t\t}\n\t    \t\n\t    }, sessionInterceptor);\n\t    \n\t    contributeFromPackage(LogInstruction.class, LogInstruction.class);\n\t    \n\t    contribute(PersistListener.class, new PersistListener() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic boolean onSave(Object entity, Serializable id, Object[] state, String[] propertyNames, Type[] types)\n\t\t\t\t\tthrows CallbackException {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic boolean onLoad(Object entity, Serializable id, Object[] state, String[] propertyNames, Type[] types)\n\t\t\t\t\tthrows CallbackException {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic boolean onFlushDirty(Object entity, Serializable id, Object[] currentState, Object[] previousState,\n\t\t\t\t\tString[] propertyNames, Type[] types) throws CallbackException {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void onDelete(Object entity, Serializable id, Object[] state, String[] propertyNames, Type[] types)\n\t\t\t\t\tthrows CallbackException {\n\t\t\t}\n\n\t\t});\n\t    \n\t\tbind(XStream.class).toProvider(new com.google.inject.Provider<XStream>() {\n\n\t\t\t@SuppressWarnings(\"rawtypes\")\n\t\t\t@Override\n\t\t\tpublic XStream get() {\n\t\t\t\tReflectionProvider reflectionProvider = JVM.newReflectionProvider();\n\t\t\t\tXStream xstream = new XStream(reflectionProvider) {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tprotected MapperWrapper wrapMapper(MapperWrapper next) {\n\t\t\t\t\t\treturn new MapperWrapper(next) {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic boolean shouldSerializeMember(Class definedIn, String fieldName) {\n\t\t\t\t\t\t\t\tField field = reflectionProvider.getField(definedIn, fieldName);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\treturn field.getAnnotation(XStreamOmitField.class) == null && \n\t\t\t\t\t\t\t\t\t\tfield.getAnnotation(Transient.class) == null && \n\t\t\t\t\t\t\t\t\t\tfield.getAnnotation(OneToMany.class) == null &&\n\t\t\t\t\t\t\t\t\t\tfield.getAnnotation(Version.class) == null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic String serializedClass(Class type) {\n\t\t\t\t\t\t\t\tif (type == null)\n\t\t\t\t\t\t\t\t\treturn super.serializedClass(type);\n\t\t\t\t\t\t\t\telse if (type == PersistentBag.class)\n\t\t\t\t\t\t\t\t\treturn super.serializedClass(ArrayList.class);\n\t\t\t\t\t\t\t\telse if (type.getName().contains(\"$HibernateProxy$\"))\n\t\t\t\t\t\t\t\t\treturn StringUtils.substringBefore(type.getName(), \"$HibernateProxy$\");\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\treturn super.serializedClass(type);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t};\n\t\t\t\tXStream.setupDefaultSecurity(xstream);\n\t\t\t\txstream.allowTypesByWildcard(new String[] {\"io.onedev.**\"});\t\t\t\t\n\t\t\t\t\n\t\t\t\t// register NullConverter as highest; otherwise NPE when unmarshal a map \n\t\t\t\t// containing an entry with value set to null.\n\t\t\t\txstream.registerConverter(new NullConverter(), XStream.PRIORITY_VERY_HIGH);\n\t\t\t\txstream.registerConverter(new StringConverter(), XStream.PRIORITY_VERY_HIGH);\n\t\t\t\txstream.registerConverter(new VersionedDocumentConverter(), XStream.PRIORITY_VERY_HIGH);\n\t\t\t\txstream.registerConverter(new HibernateProxyConverter(), XStream.PRIORITY_VERY_HIGH);\n\t\t\t\txstream.registerConverter(new CollectionConverter(xstream.getMapper()), XStream.PRIORITY_VERY_HIGH);\n\t\t\t\txstream.registerConverter(new MapConverter(xstream.getMapper()), XStream.PRIORITY_VERY_HIGH);\n\t\t\t\txstream.registerConverter(new ISO8601DateConverter(), XStream.PRIORITY_VERY_HIGH);\n\t\t\t\txstream.registerConverter(new ISO8601SqlTimestampConverter(), XStream.PRIORITY_VERY_HIGH); \n\t\t\t\txstream.registerConverter(new ReflectionConverter(xstream.getMapper(), xstream.getReflectionProvider()), \n\t\t\t\t\t\tXStream.PRIORITY_VERY_LOW);\n\t\t\t\txstream.autodetectAnnotations(true);\n\t\t\t\treturn xstream;\n\t\t\t}\n\t\t\t\n\t\t}).in(Singleton.class);\n\t\t\n\t\tif (Bootstrap.command != null) {\n\t\t\tif (RestoreDatabase.COMMAND.equals(Bootstrap.command.getName()))\n\t\t\t\tbind(PersistManager.class).to(RestoreDatabase.class);\n\t\t\telse if (ApplyDatabaseConstraints.COMMAND.equals(Bootstrap.command.getName()))\n\t\t\t\tbind(PersistManager.class).to(ApplyDatabaseConstraints.class);\n\t\t\telse if (BackupDatabase.COMMAND.equals(Bootstrap.command.getName()))\n\t\t\t\tbind(PersistManager.class).to(BackupDatabase.class);\n\t\t\telse if (CheckDataVersion.COMMAND.equals(Bootstrap.command.getName()))\n\t\t\t\tbind(PersistManager.class).to(CheckDataVersion.class);\n\t\t\telse if (Upgrade.COMMAND.equals(Bootstrap.command.getName()))\n\t\t\t\tbind(PersistManager.class).to(Upgrade.class);\n\t\t\telse if (CleanDatabase.COMMAND.equals(Bootstrap.command.getName()))\n\t\t\t\tbind(PersistManager.class).to(CleanDatabase.class);\n\t\t\telse if (ResetAdminPassword.COMMAND.equals(Bootstrap.command.getName()))\n\t\t\t\tbind(PersistManager.class).to(ResetAdminPassword.class);\n\t\t\telse\t\n\t\t\t\tthrow new RuntimeException(\"Unrecognized command: \" + Bootstrap.command.getName());\n\t\t} else {\n\t\t\tbind(PersistManager.class).to(DefaultPersistManager.class);\n\t\t}\t\t\n\t}\n\t\n\t@Override\n\tprotected Class<? extends AbstractPlugin> getPluginClass() {\n\t\treturn OneDev.class;\n\t}\n\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "TreeVul",
    "idx": 700240,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-121",
      "CWE-122"
    ]
  },
  {
    "CWE_ID": [
      "CWE-74"
    ],
    "code": "package io.onedev.server;\n\nimport java.io.Serializable;\nimport java.lang.reflect.AnnotatedElement;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.ForkJoinPool;\nimport java.util.concurrent.ForkJoinTask;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.RejectedExecutionException;\nimport java.util.concurrent.SynchronousQueue;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.TimeoutException;\n\nimport javax.inject.Singleton;\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.EntityNotFoundException;\nimport javax.persistence.OneToMany;\nimport javax.persistence.Transient;\nimport javax.persistence.Version;\nimport javax.validation.Configuration;\nimport javax.validation.Validation;\nimport javax.validation.Validator;\nimport javax.validation.ValidatorFactory;\n\nimport org.apache.shiro.authc.credential.PasswordService;\nimport org.apache.shiro.authz.UnauthorizedException;\nimport org.apache.shiro.guice.aop.ShiroAopModule;\nimport org.apache.shiro.mgt.RememberMeManager;\nimport org.apache.shiro.realm.Realm;\nimport org.apache.shiro.web.filter.mgt.FilterChainManager;\nimport org.apache.shiro.web.filter.mgt.FilterChainResolver;\nimport org.apache.shiro.web.mgt.WebSecurityManager;\nimport org.apache.shiro.web.servlet.ShiroFilter;\nimport org.apache.wicket.Application;\nimport org.apache.wicket.core.request.mapper.StalePageException;\nimport org.apache.wicket.protocol.http.PageExpiredException;\nimport org.apache.wicket.protocol.http.WebApplication;\nimport org.apache.wicket.protocol.http.WicketFilter;\nimport org.apache.wicket.protocol.http.WicketServlet;\nimport org.eclipse.jetty.servlet.ServletContextHandler;\nimport org.eclipse.jetty.websocket.api.WebSocketPolicy;\nimport org.glassfish.jersey.server.ResourceConfig;\nimport org.glassfish.jersey.servlet.ServletContainer;\nimport org.hibernate.CallbackException;\nimport org.hibernate.Interceptor;\nimport org.hibernate.ObjectNotFoundException;\nimport org.hibernate.Session;\nimport org.hibernate.SessionFactory;\nimport org.hibernate.StaleStateException;\nimport org.hibernate.boot.model.naming.PhysicalNamingStrategy;\nimport org.hibernate.collection.internal.PersistentBag;\nimport org.hibernate.exception.ConstraintViolationException;\nimport org.hibernate.type.Type;\nimport org.hibernate.validator.messageinterpolation.ParameterMessageInterpolator;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Sets;\nimport com.google.inject.Provider;\nimport com.google.inject.matcher.AbstractMatcher;\nimport com.google.inject.matcher.Matchers;\nimport com.thoughtworks.xstream.XStream;\nimport com.thoughtworks.xstream.annotations.XStreamOmitField;\nimport com.thoughtworks.xstream.converters.basic.NullConverter;\nimport com.thoughtworks.xstream.converters.extended.ISO8601DateConverter;\nimport com.thoughtworks.xstream.converters.extended.ISO8601SqlTimestampConverter;\nimport com.thoughtworks.xstream.converters.reflection.ReflectionProvider;\nimport com.thoughtworks.xstream.core.JVM;\nimport com.thoughtworks.xstream.mapper.MapperWrapper;\nimport com.vladsch.flexmark.Extension;\n\nimport io.onedev.commons.launcher.bootstrap.Bootstrap;\nimport io.onedev.commons.launcher.loader.AbstractPlugin;\nimport io.onedev.commons.launcher.loader.AbstractPluginModule;\nimport io.onedev.commons.launcher.loader.ImplementationProvider;\nimport io.onedev.commons.utils.ExceptionUtils;\nimport io.onedev.commons.utils.StringUtils;\nimport io.onedev.server.buildspec.job.DefaultJobManager;\nimport io.onedev.server.buildspec.job.JobManager;\nimport io.onedev.server.buildspec.job.log.DefaultLogManager;\nimport io.onedev.server.buildspec.job.log.LogManager;\nimport io.onedev.server.buildspec.job.log.instruction.LogInstruction;\nimport io.onedev.server.entitymanager.BuildDependenceManager;\nimport io.onedev.server.entitymanager.BuildManager;\nimport io.onedev.server.entitymanager.BuildParamManager;\nimport io.onedev.server.entitymanager.BuildQuerySettingManager;\nimport io.onedev.server.entitymanager.CodeCommentManager;\nimport io.onedev.server.entitymanager.CodeCommentQuerySettingManager;\nimport io.onedev.server.entitymanager.CodeCommentRelationManager;\nimport io.onedev.server.entitymanager.CodeCommentReplyManager;\nimport io.onedev.server.entitymanager.CommitQuerySettingManager;\nimport io.onedev.server.entitymanager.GroupAuthorizationManager;\nimport io.onedev.server.entitymanager.GroupManager;\nimport io.onedev.server.entitymanager.IssueChangeManager;\nimport io.onedev.server.entitymanager.IssueCommentManager;\nimport io.onedev.server.entitymanager.IssueFieldManager;\nimport io.onedev.server.entitymanager.IssueManager;\nimport io.onedev.server.entitymanager.IssueQuerySettingManager;\nimport io.onedev.server.entitymanager.IssueVoteManager;\nimport io.onedev.server.entitymanager.IssueWatchManager;\nimport io.onedev.server.entitymanager.MembershipManager;\nimport io.onedev.server.entitymanager.MilestoneManager;\nimport io.onedev.server.entitymanager.ProjectManager;\nimport io.onedev.server.entitymanager.PullRequestBuildManager;\nimport io.onedev.server.entitymanager.PullRequestChangeManager;\nimport io.onedev.server.entitymanager.PullRequestCommentManager;\nimport io.onedev.server.entitymanager.PullRequestManager;\nimport io.onedev.server.entitymanager.PullRequestQuerySettingManager;\nimport io.onedev.server.entitymanager.PullRequestReviewManager;\nimport io.onedev.server.entitymanager.PullRequestUpdateManager;\nimport io.onedev.server.entitymanager.PullRequestWatchManager;\nimport io.onedev.server.entitymanager.RoleManager;\nimport io.onedev.server.entitymanager.SettingManager;\nimport io.onedev.server.entitymanager.UrlManager;\nimport io.onedev.server.entitymanager.UserAuthorizationManager;\nimport io.onedev.server.entitymanager.UserManager;\nimport io.onedev.server.entitymanager.impl.DefaultBuildDependenceManager;\nimport io.onedev.server.entitymanager.impl.DefaultBuildManager;\nimport io.onedev.server.entitymanager.impl.DefaultBuildParamManager;\nimport io.onedev.server.entitymanager.impl.DefaultBuildQuerySettingManager;\nimport io.onedev.server.entitymanager.impl.DefaultCodeCommentManager;\nimport io.onedev.server.entitymanager.impl.DefaultCodeCommentQuerySettingManager;\nimport io.onedev.server.entitymanager.impl.DefaultCodeCommentRelationManager;\nimport io.onedev.server.entitymanager.impl.DefaultCodeCommentReplyManager;\nimport io.onedev.server.entitymanager.impl.DefaultCommitQuerySettingManager;\nimport io.onedev.server.entitymanager.impl.DefaultGroupAuthorizationManager;\nimport io.onedev.server.entitymanager.impl.DefaultGroupManager;\nimport io.onedev.server.entitymanager.impl.DefaultIssueChangeManager;\nimport io.onedev.server.entitymanager.impl.DefaultIssueCommentManager;\nimport io.onedev.server.entitymanager.impl.DefaultIssueFieldManager;\nimport io.onedev.server.entitymanager.impl.DefaultIssueManager;\nimport io.onedev.server.entitymanager.impl.DefaultIssueQuerySettingManager;\nimport io.onedev.server.entitymanager.impl.DefaultIssueVoteManager;\nimport io.onedev.server.entitymanager.impl.DefaultIssueWatchManager;\nimport io.onedev.server.entitymanager.impl.DefaultMembershipManager;\nimport io.onedev.server.entitymanager.impl.DefaultMilestoneManager;\nimport io.onedev.server.entitymanager.impl.DefaultProjectManager;\nimport io.onedev.server.entitymanager.impl.DefaultPullRequestBuildManager;\nimport io.onedev.server.entitymanager.impl.DefaultPullRequestChangeManager;\nimport io.onedev.server.entitymanager.impl.DefaultPullRequestCommentManager;\nimport io.onedev.server.entitymanager.impl.DefaultPullRequestManager;\nimport io.onedev.server.entitymanager.impl.DefaultPullRequestQuerySettingManager;\nimport io.onedev.server.entitymanager.impl.DefaultPullRequestReviewManager;\nimport io.onedev.server.entitymanager.impl.DefaultPullRequestUpdateManager;\nimport io.onedev.server.entitymanager.impl.DefaultPullRequestWatchManager;\nimport io.onedev.server.entitymanager.impl.DefaultRoleManager;\nimport io.onedev.server.entitymanager.impl.DefaultSettingManager;\nimport io.onedev.server.entitymanager.impl.DefaultUserAuthorizationManager;\nimport io.onedev.server.entitymanager.impl.DefaultUserManager;\nimport io.onedev.server.git.GitFilter;\nimport io.onedev.server.git.GitPostReceiveCallback;\nimport io.onedev.server.git.GitPreReceiveCallback;\nimport io.onedev.server.git.config.GitConfig;\nimport io.onedev.server.infomanager.CodeCommentRelationInfoManager;\nimport io.onedev.server.infomanager.CommitInfoManager;\nimport io.onedev.server.infomanager.DefaultCodeCommentRelationInfoManager;\nimport io.onedev.server.infomanager.DefaultCommitInfoManager;\nimport io.onedev.server.infomanager.DefaultUserInfoManager;\nimport io.onedev.server.infomanager.UserInfoManager;\nimport io.onedev.server.maintenance.ApplyDatabaseConstraints;\nimport io.onedev.server.maintenance.BackupDatabase;\nimport io.onedev.server.maintenance.CheckDataVersion;\nimport io.onedev.server.maintenance.CleanDatabase;\nimport io.onedev.server.maintenance.DataManager;\nimport io.onedev.server.maintenance.DefaultDataManager;\nimport io.onedev.server.maintenance.ResetAdminPassword;\nimport io.onedev.server.maintenance.RestoreDatabase;\nimport io.onedev.server.maintenance.Upgrade;\nimport io.onedev.server.model.support.administration.GroovyScript;\nimport io.onedev.server.model.support.administration.authenticator.Authenticator;\nimport io.onedev.server.model.support.administration.jobexecutor.AutoDiscoveredJobExecutor;\nimport io.onedev.server.model.support.administration.jobexecutor.JobExecutor;\nimport io.onedev.server.notification.BuildNotificationManager;\nimport io.onedev.server.notification.CodeCommentNotificationManager;\nimport io.onedev.server.notification.CommitNotificationManager;\nimport io.onedev.server.notification.DefaultMailManager;\nimport io.onedev.server.notification.IssueNotificationManager;\nimport io.onedev.server.notification.MailManager;\nimport io.onedev.server.notification.PullRequestNotificationManager;\nimport io.onedev.server.notification.WebHookManager;\nimport io.onedev.server.persistence.DefaultIdManager;\nimport io.onedev.server.persistence.DefaultPersistManager;\nimport io.onedev.server.persistence.DefaultSessionManager;\nimport io.onedev.server.persistence.DefaultTransactionManager;\nimport io.onedev.server.persistence.HibernateInterceptor;\nimport io.onedev.server.persistence.IdManager;\nimport io.onedev.server.persistence.PersistListener;\nimport io.onedev.server.persistence.PersistManager;\nimport io.onedev.server.persistence.PrefixedNamingStrategy;\nimport io.onedev.server.persistence.SessionFactoryProvider;\nimport io.onedev.server.persistence.SessionInterceptor;\nimport io.onedev.server.persistence.SessionManager;\nimport io.onedev.server.persistence.SessionProvider;\nimport io.onedev.server.persistence.TransactionInterceptor;\nimport io.onedev.server.persistence.TransactionManager;\nimport io.onedev.server.persistence.annotation.Sessional;\nimport io.onedev.server.persistence.annotation.Transactional;\nimport io.onedev.server.persistence.dao.Dao;\nimport io.onedev.server.persistence.dao.DefaultDao;\nimport io.onedev.server.rest.RestConstants;\nimport io.onedev.server.rest.jersey.DefaultServletContainer;\nimport io.onedev.server.rest.jersey.JerseyConfigurator;\nimport io.onedev.server.rest.jersey.ResourceConfigProvider;\nimport io.onedev.server.search.code.DefaultIndexManager;\nimport io.onedev.server.search.code.DefaultSearchManager;\nimport io.onedev.server.search.code.IndexManager;\nimport io.onedev.server.search.code.SearchManager;\nimport io.onedev.server.security.BasicAuthenticationFilter;\nimport io.onedev.server.security.CodePullAuthorizationSource;\nimport io.onedev.server.security.FilterChainConfigurator;\nimport io.onedev.server.security.OneAuthorizingRealm;\nimport io.onedev.server.security.OneFilterChainResolver;\nimport io.onedev.server.security.OnePasswordService;\nimport io.onedev.server.security.OneRememberMeManager;\nimport io.onedev.server.security.OneWebSecurityManager;\nimport io.onedev.server.storage.AttachmentStorageManager;\nimport io.onedev.server.storage.DefaultAttachmentStorageManager;\nimport io.onedev.server.storage.DefaultStorageManager;\nimport io.onedev.server.storage.StorageManager;\nimport io.onedev.server.util.SecurityUtils;\nimport io.onedev.server.util.jackson.ObjectMapperConfigurator;\nimport io.onedev.server.util.jackson.ObjectMapperProvider;\nimport io.onedev.server.util.jackson.git.GitObjectMapperConfigurator;\nimport io.onedev.server.util.jackson.hibernate.HibernateObjectMapperConfigurator;\nimport io.onedev.server.util.jetty.DefaultJettyRunner;\nimport io.onedev.server.util.jetty.JettyRunner;\nimport io.onedev.server.util.markdown.DefaultMarkdownManager;\nimport io.onedev.server.util.markdown.EntityReferenceManager;\nimport io.onedev.server.util.markdown.MarkdownManager;\nimport io.onedev.server.util.markdown.MarkdownProcessor;\nimport io.onedev.server.util.schedule.DefaultTaskScheduler;\nimport io.onedev.server.util.schedule.TaskScheduler;\nimport io.onedev.server.util.script.ScriptContribution;\nimport io.onedev.server.util.validation.DefaultEntityValidator;\nimport io.onedev.server.util.validation.EntityValidator;\nimport io.onedev.server.util.validation.ValidatorProvider;\nimport io.onedev.server.util.work.BatchWorkManager;\nimport io.onedev.server.util.work.DefaultBatchWorkManager;\nimport io.onedev.server.util.work.DefaultWorkExecutor;\nimport io.onedev.server.util.work.WorkExecutor;\nimport io.onedev.server.util.xstream.CollectionConverter;\nimport io.onedev.server.util.xstream.HibernateProxyConverter;\nimport io.onedev.server.util.xstream.MapConverter;\nimport io.onedev.server.util.xstream.ReflectionConverter;\nimport io.onedev.server.util.xstream.StringConverter;\nimport io.onedev.server.util.xstream.VersionedDocumentConverter;\nimport io.onedev.server.web.DefaultUrlManager;\nimport io.onedev.server.web.DefaultWicketFilter;\nimport io.onedev.server.web.DefaultWicketServlet;\nimport io.onedev.server.web.ExpectedExceptionContribution;\nimport io.onedev.server.web.OneWebApplication;\nimport io.onedev.server.web.ResourcePackScopeContribution;\nimport io.onedev.server.web.WebApplicationConfigurator;\nimport io.onedev.server.web.avatar.AvatarManager;\nimport io.onedev.server.web.avatar.DefaultAvatarManager;\nimport io.onedev.server.web.component.diff.DiffRenderer;\nimport io.onedev.server.web.component.markdown.AttachmentUploadServlet;\nimport io.onedev.server.web.component.markdown.SourcePositionTrackExtension;\nimport io.onedev.server.web.component.markdown.emoji.EmojiExtension;\nimport io.onedev.server.web.component.taskbutton.TaskButton;\nimport io.onedev.server.web.editable.DefaultEditSupportRegistry;\nimport io.onedev.server.web.editable.EditSupport;\nimport io.onedev.server.web.editable.EditSupportLocator;\nimport io.onedev.server.web.editable.EditSupportRegistry;\nimport io.onedev.server.web.mapper.OnePageMapper;\nimport io.onedev.server.web.page.DashboardPage;\nimport io.onedev.server.web.page.base.BasePage;\nimport io.onedev.server.web.page.layout.BuildListTab;\nimport io.onedev.server.web.page.layout.IssueListTab;\nimport io.onedev.server.web.page.layout.MainTab;\nimport io.onedev.server.web.page.layout.ProjectListTab;\nimport io.onedev.server.web.page.layout.PullRequestListTab;\nimport io.onedev.server.web.page.layout.UICustomization;\nimport io.onedev.server.web.page.project.blob.render.BlobRendererContribution;\nimport io.onedev.server.web.page.test.TestPage;\nimport io.onedev.server.web.websocket.BuildEventBroadcaster;\nimport io.onedev.server.web.websocket.CodeCommentEventBroadcaster;\nimport io.onedev.server.web.websocket.CommitIndexedBroadcaster;\nimport io.onedev.server.web.websocket.DefaultWebSocketManager;\nimport io.onedev.server.web.websocket.IssueEventBroadcaster;\nimport io.onedev.server.web.websocket.PullRequestEventBroadcaster;\nimport io.onedev.server.web.websocket.WebSocketManager;\nimport io.onedev.server.web.websocket.WebSocketPolicyProvider;\n\n/**\n * NOTE: Do not forget to rename moduleClass property defined in the pom if you've renamed this class.\n *\n */\npublic class CoreModule extends AbstractPluginModule {\n\n\t@Override\n\tprotected void configure() {\n\t\tsuper.configure();\n\t\t\n\t\tbind(JettyRunner.class).to(DefaultJettyRunner.class);\n\t\tbind(ServletContextHandler.class).toProvider(DefaultJettyRunner.class);\n\t\t\n\t\tbind(ObjectMapper.class).toProvider(ObjectMapperProvider.class).in(Singleton.class);\n\t\t\n\t\tbind(ValidatorFactory.class).toProvider(new com.google.inject.Provider<ValidatorFactory>() {\n\n\t\t\t@Override\n\t\t\tpublic ValidatorFactory get() {\n\t\t\t\tConfiguration<?> configuration = Validation\n\t\t\t\t\t\t.byDefaultProvider()\n\t\t\t\t\t\t.configure()\n\t\t\t\t\t\t.messageInterpolator(new ParameterMessageInterpolator());\n\t\t\t\treturn configuration.buildValidatorFactory();\n\t\t\t}\n\t\t\t\n\t\t}).in(Singleton.class);\n\t\t\n\t\tbind(Validator.class).toProvider(ValidatorProvider.class).in(Singleton.class);\n\n\t\t// configure markdown\n\t\tbind(MarkdownManager.class).to(DefaultMarkdownManager.class);\t\t\n\t\t\n\t\tconfigurePersistence();\n\t\tconfigureRestServices();\n\t\tconfigureWeb();\n\t\tconfigureBuild();\n\t\t\n\t\tbind(GitConfig.class).toProvider(GitConfigProvider.class);\n\n\t\t/*\n\t\t * Declare bindings explicitly instead of using ImplementedBy annotation as\n\t\t * HK2 to guice bridge can only search in explicit bindings in Guice   \n\t\t */\n\t\tbind(StorageManager.class).to(DefaultStorageManager.class);\n\t\tbind(SettingManager.class).to(DefaultSettingManager.class);\n\t\tbind(DataManager.class).to(DefaultDataManager.class);\n\t\tbind(TaskScheduler.class).to(DefaultTaskScheduler.class);\n\t\tbind(PullRequestCommentManager.class).to(DefaultPullRequestCommentManager.class);\n\t\tbind(CodeCommentManager.class).to(DefaultCodeCommentManager.class);\n\t\tbind(PullRequestManager.class).to(DefaultPullRequestManager.class);\n\t\tbind(PullRequestUpdateManager.class).to(DefaultPullRequestUpdateManager.class);\n\t\tbind(ProjectManager.class).to(DefaultProjectManager.class);\n\t\tbind(UserManager.class).to(DefaultUserManager.class);\n\t\tbind(PullRequestReviewManager.class).to(DefaultPullRequestReviewManager.class);\n\t\tbind(BuildManager.class).to(DefaultBuildManager.class);\n\t\tbind(BuildDependenceManager.class).to(DefaultBuildDependenceManager.class);\n\t\tbind(JobManager.class).to(DefaultJobManager.class);\n\t\tbind(LogManager.class).to(DefaultLogManager.class);\n\t\tbind(PullRequestBuildManager.class).to(DefaultPullRequestBuildManager.class);\n\t\tbind(MailManager.class).to(DefaultMailManager.class);\n\t\tbind(IssueManager.class).to(DefaultIssueManager.class);\n\t\tbind(IssueFieldManager.class).to(DefaultIssueFieldManager.class);\n\t\tbind(BuildParamManager.class).to(DefaultBuildParamManager.class);\n\t\tbind(UserAuthorizationManager.class).to(DefaultUserAuthorizationManager.class);\n\t\tbind(GroupAuthorizationManager.class).to(DefaultGroupAuthorizationManager.class);\n\t\tbind(PullRequestWatchManager.class).to(DefaultPullRequestWatchManager.class);\n\t\tbind(RoleManager.class).to(DefaultRoleManager.class);\n\t\tbind(CommitInfoManager.class).to(DefaultCommitInfoManager.class);\n\t\tbind(UserInfoManager.class).to(DefaultUserInfoManager.class);\n\t\tbind(BatchWorkManager.class).to(DefaultBatchWorkManager.class);\n\t\tbind(GroupManager.class).to(DefaultGroupManager.class);\n\t\tbind(MembershipManager.class).to(DefaultMembershipManager.class);\n\t\tbind(PullRequestChangeManager.class).to(DefaultPullRequestChangeManager.class);\n\t\tbind(CodeCommentReplyManager.class).to(DefaultCodeCommentReplyManager.class);\n\t\tbind(AttachmentStorageManager.class).to(DefaultAttachmentStorageManager.class);\n\t\tbind(CodeCommentRelationInfoManager.class).to(DefaultCodeCommentRelationInfoManager.class);\n\t\tbind(CodeCommentRelationManager.class).to(DefaultCodeCommentRelationManager.class);\n\t\tbind(WorkExecutor.class).to(DefaultWorkExecutor.class);\n\t\tbind(PullRequestNotificationManager.class);\n\t\tbind(CommitNotificationManager.class);\n\t\tbind(BuildNotificationManager.class);\n\t\tbind(IssueNotificationManager.class);\n\t\tbind(EntityReferenceManager.class);\n\t\tbind(CodeCommentNotificationManager.class);\n\t\tbind(CodeCommentManager.class).to(DefaultCodeCommentManager.class);\n\t\tbind(IssueWatchManager.class).to(DefaultIssueWatchManager.class);\n\t\tbind(IssueChangeManager.class).to(DefaultIssueChangeManager.class);\n\t\tbind(IssueVoteManager.class).to(DefaultIssueVoteManager.class);\n\t\tbind(MilestoneManager.class).to(DefaultMilestoneManager.class);\n\t\tbind(Session.class).toProvider(SessionProvider.class);\n\t\tbind(EntityManager.class).toProvider(SessionProvider.class);\n\t\tbind(SessionFactory.class).toProvider(SessionFactoryProvider.class);\n\t\tbind(EntityManagerFactory.class).toProvider(SessionFactoryProvider.class);\n\t\tbind(IssueCommentManager.class).to(DefaultIssueCommentManager.class);\n\t\tbind(IssueQuerySettingManager.class).to(DefaultIssueQuerySettingManager.class);\n\t\tbind(PullRequestQuerySettingManager.class).to(DefaultPullRequestQuerySettingManager.class);\n\t\tbind(CodeCommentQuerySettingManager.class).to(DefaultCodeCommentQuerySettingManager.class);\n\t\tbind(CommitQuerySettingManager.class).to(DefaultCommitQuerySettingManager.class);\n\t\tbind(BuildQuerySettingManager.class).to(DefaultBuildQuerySettingManager.class);\n\t\tbind(WebHookManager.class);\n\n\t\tcontribute(ObjectMapperConfigurator.class, GitObjectMapperConfigurator.class);\n\t    contribute(ObjectMapperConfigurator.class, HibernateObjectMapperConfigurator.class);\n\t    \n\t\tbind(Realm.class).to(OneAuthorizingRealm.class);\n\t\tbind(RememberMeManager.class).to(OneRememberMeManager.class);\n\t\tbind(WebSecurityManager.class).to(OneWebSecurityManager.class);\n\t\tbind(FilterChainResolver.class).to(OneFilterChainResolver.class);\n\t\tbind(BasicAuthenticationFilter.class);\n\t\tbind(PasswordService.class).to(OnePasswordService.class);\n\t\tbind(ShiroFilter.class);\n\t\tinstall(new ShiroAopModule());\n        contribute(FilterChainConfigurator.class, new FilterChainConfigurator() {\n\n            @Override\n            public void configure(FilterChainManager filterChainManager) {\n                filterChainManager.createChain(\"/**/info/refs\", \"noSessionCreation, authcBasic\");\n                filterChainManager.createChain(\"/**/git-upload-pack\", \"noSessionCreation, authcBasic\");\n                filterChainManager.createChain(\"/**/git-receive-pack\", \"noSessionCreation, authcBasic\");\n            }\n            \n        });\n        contributeFromPackage(Authenticator.class, Authenticator.class);\n        \n\t\tcontribute(ImplementationProvider.class, new ImplementationProvider() {\n\n\t\t\t@Override\n\t\t\tpublic Class<?> getAbstractClass() {\n\t\t\t\treturn JobExecutor.class;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic Collection<Class<?>> getImplementations() {\n\t\t\t\treturn Sets.newHashSet(AutoDiscoveredJobExecutor.class);\n\t\t\t}\n\t\t\t\n\t\t});\n\t\t\n\t\tcontribute(CodePullAuthorizationSource.class, DefaultJobManager.class);\n        \n\t\tbind(IndexManager.class).to(DefaultIndexManager.class);\n\t\tbind(SearchManager.class).to(DefaultSearchManager.class);\n\t\t\n\t\tbind(EntityValidator.class).to(DefaultEntityValidator.class);\n\t\t\n\t\tbind(GitFilter.class);\n\t\tbind(GitPreReceiveCallback.class);\n\t\tbind(GitPostReceiveCallback.class);\n\t\t\n\t    bind(ExecutorService.class).toProvider(new Provider<ExecutorService>() {\n\n\t\t\t@Override\n\t\t\tpublic ExecutorService get() {\n\t\t        return new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS, \n\t\t        \t\tnew SynchronousQueue<Runnable>()) {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void execute(Runnable command) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tsuper.execute(SecurityUtils.inheritSubject(command));\n\t\t\t\t\t\t} catch (RejectedExecutionException e) {\n\t\t\t\t\t\t\tif (!isShutdown())\n\t\t\t\t\t\t\t\tthrow ExceptionUtils.unchecked(e);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t        };\n\t\t\t}\n\t    \t\n\t    }).in(Singleton.class);\n\t    \n\t    bind(ForkJoinPool.class).toInstance(new ForkJoinPool() {\n\n\t\t\t@Override\n\t\t\tpublic ForkJoinTask<?> submit(Runnable task) {\n\t\t\t\treturn super.submit(SecurityUtils.inheritSubject(task));\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void execute(Runnable task) {\n\t\t\t\tsuper.execute(SecurityUtils.inheritSubject(task));\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic <T> ForkJoinTask<T> submit(Callable<T> task) {\n\t\t\t\treturn super.submit(SecurityUtils.inheritSubject(task));\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic <T> ForkJoinTask<T> submit(Runnable task, T result) {\n\t\t\t\treturn super.submit(SecurityUtils.inheritSubject(task), result);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic <T> T invokeAny(Collection<? extends Callable<T>> tasks)\n\t\t\t\t\tthrows InterruptedException, ExecutionException {\n\t\t\t\treturn super.invokeAny(SecurityUtils.inheritSubject(tasks));\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic <T> T invokeAny(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)\n\t\t\t\t\tthrows InterruptedException, ExecutionException, TimeoutException {\n\t\t\t\treturn super.invokeAny(SecurityUtils.inheritSubject(tasks), timeout, unit);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks, \n\t\t\t\t\tlong timeout, TimeUnit unit) throws InterruptedException {\n\t\t\t\treturn super.invokeAll(SecurityUtils.inheritSubject(tasks), timeout, unit);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks) {\n\t\t\t\treturn super.invokeAll(SecurityUtils.inheritSubject(tasks));\n\t\t\t}\n\n\t    });\n\t}\n\t\n\tprivate void configureRestServices() {\n\t\tbind(ResourceConfig.class).toProvider(ResourceConfigProvider.class).in(Singleton.class);\n\t\tbind(ServletContainer.class).to(DefaultServletContainer.class);\n\t\t\n\t\tcontribute(FilterChainConfigurator.class, new FilterChainConfigurator() {\n\n\t\t\t@Override\n\t\t\tpublic void configure(FilterChainManager filterChainManager) {\n\t\t\t\tfilterChainManager.createChain(\"/rest/**\", \"noSessionCreation, authcBasic\");\n\t\t\t}\n\t\t\t\n\t\t});\n\t\t\n\t\tcontribute(JerseyConfigurator.class, new JerseyConfigurator() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void configure(ResourceConfig resourceConfig) {\n\t\t\t\tresourceConfig.packages(RestConstants.class.getPackage().getName());\n\t\t\t}\n\t\t\t\n\t\t});\n\t}\n\n\tprivate void configureWeb() {\n\t\tbind(WicketServlet.class).to(DefaultWicketServlet.class);\n\t\tbind(WicketFilter.class).to(DefaultWicketFilter.class);\n\t\tbind(WebSocketPolicy.class).toProvider(WebSocketPolicyProvider.class);\n\t\tbind(EditSupportRegistry.class).to(DefaultEditSupportRegistry.class);\n\t\tbind(WebSocketManager.class).to(DefaultWebSocketManager.class);\n\n\t\tbind(AttachmentUploadServlet.class);\n\t\t\n\t\tcontributeFromPackage(EditSupport.class, EditSupport.class);\n\t\t\n\t\tbind(WebApplication.class).to(OneWebApplication.class);\n\t\tbind(Application.class).to(OneWebApplication.class);\n\t\tbind(AvatarManager.class).to(DefaultAvatarManager.class);\n\t\tbind(WebSocketManager.class).to(DefaultWebSocketManager.class);\n\t\t\n\t\tcontributeFromPackage(EditSupport.class, EditSupportLocator.class);\n\t\t\n\t\tcontribute(WebApplicationConfigurator.class, new WebApplicationConfigurator() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void configure(WebApplication application) {\n\t\t\t\tapplication.mount(new OnePageMapper(\"/test\", TestPage.class));\n\t\t\t}\n\t\t\t\n\t\t});\n\t\t\n\t\tbind(CommitIndexedBroadcaster.class);\n\t\t\n\t\tcontributeFromPackage(DiffRenderer.class, DiffRenderer.class);\n\t\tcontributeFromPackage(BlobRendererContribution.class, BlobRendererContribution.class);\n\n\t\tcontribute(Extension.class, new EmojiExtension());\n\t\tcontribute(Extension.class, new SourcePositionTrackExtension());\n\t\t\n\t\tcontributeFromPackage(MarkdownProcessor.class, MarkdownProcessor.class);\n\n\t\tcontribute(ResourcePackScopeContribution.class, new ResourcePackScopeContribution() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic Collection<Class<?>> getResourcePackScopes() {\n\t\t\t\treturn Lists.newArrayList(OneWebApplication.class);\n\t\t\t}\n\t\t\t\n\t\t});\n\t\tcontribute(ExpectedExceptionContribution.class, new ExpectedExceptionContribution() {\n\t\t\t\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\t@Override\n\t\t\tpublic Collection<Class<? extends Exception>> getExpectedExceptionClasses() {\n\t\t\t\treturn Sets.newHashSet(ConstraintViolationException.class, EntityNotFoundException.class, \n\t\t\t\t\t\tObjectNotFoundException.class, StaleStateException.class, UnauthorizedException.class, \n\t\t\t\t\t\tOneException.class, PageExpiredException.class, StalePageException.class);\n\t\t\t}\n\t\t\t\n\t\t});\n\n\t\tbind(UrlManager.class).to(DefaultUrlManager.class);\n\t\tbind(CodeCommentEventBroadcaster.class);\n\t\tbind(PullRequestEventBroadcaster.class);\n\t\tbind(IssueEventBroadcaster.class);\n\t\tbind(BuildEventBroadcaster.class);\n\t\t\n\t\tbind(TaskButton.TaskFutureManager.class);\n\t\t\n\t\tbind(UICustomization.class).toInstance(new UICustomization() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic Class<? extends BasePage> getHomePage() {\n\t\t\t\treturn DashboardPage.class;\n\t\t\t}\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic List<MainTab> getMainTabs() {\n\t\t\t\treturn Lists.newArrayList(\n\t\t\t\t\t\tnew ProjectListTab(), new IssueListTab(), \n\t\t\t\t\t\tnew PullRequestListTab(), new BuildListTab());\n\t\t\t}\n\n\t\t});\n\t}\n\t\n\tprivate void configureBuild() {\n\t\tcontribute(ScriptContribution.class, new ScriptContribution() {\n\n\t\t\t@Override\n\t\t\tpublic GroovyScript getScript() {\n\t\t\t\tGroovyScript script = new GroovyScript();\n\t\t\t\tscript.setName(\"determine-build-failure-investigator\");\n\t\t\t\tscript.setContent(Lists.newArrayList(\"io.onedev.server.util.script.ScriptContribution.determineBuildFailureInvestigator()\"));\n\t\t\t\treturn script;\n\t\t\t}\n\t\t\t\n\t\t});\n\t\tcontribute(ScriptContribution.class, new ScriptContribution() {\n\n\t\t\t@Override\n\t\t\tpublic GroovyScript getScript() {\n\t\t\t\tGroovyScript script = new GroovyScript();\n\t\t\t\tscript.setName(\"get-build-number\");\n\t\t\t\tscript.setContent(Lists.newArrayList(\"io.onedev.server.util.script.ScriptContribution.getBuildNumber()\"));\n\t\t\t\treturn script;\n\t\t\t}\n\t\t\t\n\t\t});\n\t}\n\t\n\tprivate void configurePersistence() {\n\t\t// Use an optional binding here in case our client does not like to \n\t\t// start persist service provided by this plugin\n\t\tbind(Interceptor.class).to(HibernateInterceptor.class);\n\t\tbind(PhysicalNamingStrategy.class).toInstance(new PrefixedNamingStrategy(\"o_\"));\n\t\t\n\t\tbind(SessionManager.class).to(DefaultSessionManager.class);\n\t\tbind(TransactionManager.class).to(DefaultTransactionManager.class);\n\t\tbind(IdManager.class).to(DefaultIdManager.class);\n\t\tbind(Dao.class).to(DefaultDao.class);\n\t\t\n\t    TransactionInterceptor transactionInterceptor = new TransactionInterceptor();\n\t    requestInjection(transactionInterceptor);\n\t    \n\t    bindInterceptor(Matchers.any(), new AbstractMatcher<AnnotatedElement>() {\n\n\t\t\t@Override\n\t\t\tpublic boolean matches(AnnotatedElement element) {\n\t\t\t\treturn element.isAnnotationPresent(Transactional.class) && !((Method) element).isSynthetic();\n\t\t\t}\n\t    \t\n\t    }, transactionInterceptor);\n\t    \n\t    SessionInterceptor sessionInterceptor = new SessionInterceptor();\n\t    requestInjection(sessionInterceptor);\n\t    \n\t    bindInterceptor(Matchers.any(), new AbstractMatcher<AnnotatedElement>() {\n\n\t\t\t@Override\n\t\t\tpublic boolean matches(AnnotatedElement element) {\n\t\t\t\treturn element.isAnnotationPresent(Sessional.class) && !((Method) element).isSynthetic();\n\t\t\t}\n\t    \t\n\t    }, sessionInterceptor);\n\t    \n\t    contributeFromPackage(LogInstruction.class, LogInstruction.class);\n\t    \n\t    contribute(PersistListener.class, new PersistListener() {\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic boolean onSave(Object entity, Serializable id, Object[] state, String[] propertyNames, Type[] types)\n\t\t\t\t\tthrows CallbackException {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic boolean onLoad(Object entity, Serializable id, Object[] state, String[] propertyNames, Type[] types)\n\t\t\t\t\tthrows CallbackException {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic boolean onFlushDirty(Object entity, Serializable id, Object[] currentState, Object[] previousState,\n\t\t\t\t\tString[] propertyNames, Type[] types) throws CallbackException {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void onDelete(Object entity, Serializable id, Object[] state, String[] propertyNames, Type[] types)\n\t\t\t\t\tthrows CallbackException {\n\t\t\t}\n\n\t\t});\n\t    \n\t\tbind(XStream.class).toProvider(new com.google.inject.Provider<XStream>() {\n\n\t\t\t@SuppressWarnings(\"rawtypes\")\n\t\t\t@Override\n\t\t\tpublic XStream get() {\n\t\t\t\tReflectionProvider reflectionProvider = JVM.newReflectionProvider();\n\t\t\t\tXStream xstream = new XStream(reflectionProvider) {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tprotected MapperWrapper wrapMapper(MapperWrapper next) {\n\t\t\t\t\t\treturn new MapperWrapper(next) {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic boolean shouldSerializeMember(Class definedIn, String fieldName) {\n\t\t\t\t\t\t\t\tField field = reflectionProvider.getField(definedIn, fieldName);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\treturn field.getAnnotation(XStreamOmitField.class) == null && \n\t\t\t\t\t\t\t\t\t\tfield.getAnnotation(Transient.class) == null && \n\t\t\t\t\t\t\t\t\t\tfield.getAnnotation(OneToMany.class) == null &&\n\t\t\t\t\t\t\t\t\t\tfield.getAnnotation(Version.class) == null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic String serializedClass(Class type) {\n\t\t\t\t\t\t\t\tif (type == null)\n\t\t\t\t\t\t\t\t\treturn super.serializedClass(type);\n\t\t\t\t\t\t\t\telse if (type == PersistentBag.class)\n\t\t\t\t\t\t\t\t\treturn super.serializedClass(ArrayList.class);\n\t\t\t\t\t\t\t\telse if (type.getName().contains(\"$HibernateProxy$\"))\n\t\t\t\t\t\t\t\t\treturn StringUtils.substringBefore(type.getName(), \"$HibernateProxy$\");\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\treturn super.serializedClass(type);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t};\n\t\t\t\tXStream.setupDefaultSecurity(xstream);\n\t\t\t\txstream.allowTypesByWildcard(new String[] {\"io.onedev.**\"});\t\t\t\t\n\t\t\t\t\n\t\t\t\t// register NullConverter as highest; otherwise NPE when unmarshal a map \n\t\t\t\t// containing an entry with value set to null.\n\t\t\t\txstream.registerConverter(new NullConverter(), XStream.PRIORITY_VERY_HIGH);\n\t\t\t\txstream.registerConverter(new StringConverter(), XStream.PRIORITY_VERY_HIGH);\n\t\t\t\txstream.registerConverter(new VersionedDocumentConverter(), XStream.PRIORITY_VERY_HIGH);\n\t\t\t\txstream.registerConverter(new HibernateProxyConverter(), XStream.PRIORITY_VERY_HIGH);\n\t\t\t\txstream.registerConverter(new CollectionConverter(xstream.getMapper()), XStream.PRIORITY_VERY_HIGH);\n\t\t\t\txstream.registerConverter(new MapConverter(xstream.getMapper()), XStream.PRIORITY_VERY_HIGH);\n\t\t\t\txstream.registerConverter(new ISO8601DateConverter(), XStream.PRIORITY_VERY_HIGH);\n\t\t\t\txstream.registerConverter(new ISO8601SqlTimestampConverter(), XStream.PRIORITY_VERY_HIGH); \n\t\t\t\txstream.registerConverter(new ReflectionConverter(xstream.getMapper(), xstream.getReflectionProvider()), \n\t\t\t\t\t\tXStream.PRIORITY_VERY_LOW);\n\t\t\t\txstream.autodetectAnnotations(true);\n\t\t\t\treturn xstream;\n\t\t\t}\n\t\t\t\n\t\t}).in(Singleton.class);\n\t\t\n\t\tif (Bootstrap.command != null) {\n\t\t\tif (RestoreDatabase.COMMAND.equals(Bootstrap.command.getName()))\n\t\t\t\tbind(PersistManager.class).to(RestoreDatabase.class);\n\t\t\telse if (ApplyDatabaseConstraints.COMMAND.equals(Bootstrap.command.getName()))\n\t\t\t\tbind(PersistManager.class).to(ApplyDatabaseConstraints.class);\n\t\t\telse if (BackupDatabase.COMMAND.equals(Bootstrap.command.getName()))\n\t\t\t\tbind(PersistManager.class).to(BackupDatabase.class);\n\t\t\telse if (CheckDataVersion.COMMAND.equals(Bootstrap.command.getName()))\n\t\t\t\tbind(PersistManager.class).to(CheckDataVersion.class);\n\t\t\telse if (Upgrade.COMMAND.equals(Bootstrap.command.getName()))\n\t\t\t\tbind(PersistManager.class).to(Upgrade.class);\n\t\t\telse if (CleanDatabase.COMMAND.equals(Bootstrap.command.getName()))\n\t\t\t\tbind(PersistManager.class).to(CleanDatabase.class);\n\t\t\telse if (ResetAdminPassword.COMMAND.equals(Bootstrap.command.getName()))\n\t\t\t\tbind(PersistManager.class).to(ResetAdminPassword.class);\n\t\t\telse\t\n\t\t\t\tthrow new RuntimeException(\"Unrecognized command: \" + Bootstrap.command.getName());\n\t\t} else {\n\t\t\tbind(PersistManager.class).to(DefaultPersistManager.class);\n\t\t}\t\t\n\t}\n\t\n\t@Override\n\tprotected Class<? extends AbstractPlugin> getPluginClass() {\n\t\treturn OneDev.class;\n\t}\n\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "TreeVul",
    "idx": 700241,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-121",
      "CWE-122"
    ]
  },
  {
    "CWE_ID": [
      "CWE-74"
    ],
    "code": "package io.onedev.server.migration;\n\nimport java.beans.IntrospectionException;\nimport java.beans.PropertyDescriptor;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.hibernate.proxy.HibernateProxyHelper;\nimport org.yaml.snakeyaml.DumperOptions;\nimport org.yaml.snakeyaml.DumperOptions.FlowStyle;\nimport org.yaml.snakeyaml.Yaml;\nimport org.yaml.snakeyaml.constructor.Constructor;\nimport org.yaml.snakeyaml.emitter.Emitter;\nimport org.yaml.snakeyaml.introspector.BeanAccess;\nimport org.yaml.snakeyaml.introspector.MethodProperty;\nimport org.yaml.snakeyaml.introspector.Property;\nimport org.yaml.snakeyaml.introspector.PropertyUtils;\nimport org.yaml.snakeyaml.nodes.MappingNode;\nimport org.yaml.snakeyaml.nodes.Node;\nimport org.yaml.snakeyaml.nodes.NodeTuple;\nimport org.yaml.snakeyaml.nodes.ScalarNode;\nimport org.yaml.snakeyaml.nodes.Tag;\nimport org.yaml.snakeyaml.representer.Representer;\nimport org.yaml.snakeyaml.resolver.Resolver;\nimport org.yaml.snakeyaml.serializer.Serializer;\n\nimport edu.emory.mathcs.backport.java.util.Collections;\nimport io.onedev.commons.launcher.loader.ImplementationRegistry;\nimport io.onedev.commons.utils.ClassUtils;\nimport io.onedev.server.OneDev;\nimport io.onedev.server.GeneralException;\nimport io.onedev.server.util.BeanUtils;\nimport io.onedev.server.web.editable.annotation.Editable;\n\npublic class VersionedYamlDoc extends MappingNode {\n\n\tpublic VersionedYamlDoc(MappingNode wrapped) {\n\t\tsuper(wrapped.getTag(), wrapped.getValue(), wrapped.getFlowStyle());\n\t}\n\t\n\tpublic static VersionedYamlDoc fromYaml(String yaml) {\n\t\treturn new VersionedYamlDoc((MappingNode) new OneYaml().compose(new StringReader(yaml)));\n\t}\n\t\n\t@SuppressWarnings(\"unchecked\")\n\tpublic <T> T toBean(Class<T> beanClass) {\n        setTag(new Tag(beanClass));\n        \n\t\tif (getVersion() != null) {\n\t\t\ttry {\n\t\t\t\tMigrationHelper.migrate(getVersion(), beanClass.newInstance(), this);\n\t\t\t\tremoveVersion();\n\t\t\t} catch (InstantiationException | IllegalAccessException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\t\t\n        return (T) new OneYaml().construct(this);\n\t}\n\t\n\tpublic static VersionedYamlDoc fromBean(Object bean) {\n\t\tVersionedYamlDoc doc = new VersionedYamlDoc((MappingNode) new OneYaml().represent(bean));\n\t\tdoc.setVersion(MigrationHelper.getVersion(HibernateProxyHelper.getClassWithoutInitializingProxy(bean)));\n\t\treturn doc;\n\t}\n\t\n\tprivate String getVersion() {\n\t\tfor (NodeTuple tuple: getValue()) {\n\t\t\tScalarNode keyNode = (ScalarNode) tuple.getKeyNode();\n\t\t\tif (keyNode.getValue().equals(\"version\")) \n\t\t\t\treturn ((ScalarNode)tuple.getValueNode()).getValue();\n\t\t}\n\t\tthrow new GeneralException(\"Unable to find version\");\n\t}\n\t\n\tprivate void removeVersion() {\n\t\tfor (Iterator<NodeTuple> it = getValue().iterator(); it.hasNext();) {\n\t\t\tScalarNode keyNode = (ScalarNode) it.next().getKeyNode();\n\t\t\tif (keyNode.getValue().equals(\"version\")) \n\t\t\t\tit.remove();\n\t\t}\n\t}\n\t\n\tprivate void setVersion(String version) {\n\t\tScalarNode versionNode = null;\n\t\tfor (NodeTuple tuple:  getValue()) {\n\t\t\tScalarNode keyNode = (ScalarNode) tuple.getKeyNode();\n\t\t\tif (keyNode.getValue().equals(\"version\")) {\n\t\t\t\t((ScalarNode) tuple.getValueNode()).setValue(version);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (versionNode == null) {\n\t\t\tScalarNode keyNode = new ScalarNode(Tag.STR, \"version\", null, null, DumperOptions.ScalarStyle.PLAIN);\n\t\t\tversionNode = new ScalarNode(Tag.INT, version, null, null, DumperOptions.ScalarStyle.PLAIN);\n\t\t\tgetValue().add(0, new NodeTuple(keyNode, versionNode));\n\t\t}\n\t}\n\t\n\tpublic String toYaml() {\n\t\tStringWriter writer = new StringWriter();\n\t\tDumperOptions dumperOptions = new DumperOptions();\n\t\tSerializer serializer = new Serializer(new Emitter(writer, dumperOptions), \n\t\t\t\tnew Resolver(), dumperOptions, Tag.MAP);\n\t\ttry {\n\t\t\tserializer.open();\n\t\t\tserializer.serialize(this);\n\t\t\tserializer.close();\n\t\t\treturn writer.toString();\n\t\t} catch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n\t\n\tprivate static class OneConstructor extends Constructor {\n\t\t\n\t\tpublic Object construct(Node node) {\n\t\t\treturn constructDocument(node);\n\t\t}\n\n\t\t@Override\n\t\tprotected Class<?> getClassForNode(Node node) {\n\t\t\tClass<?> type = node.getType();\n\t\t\tif (type.getAnnotation(Editable.class) != null && !ClassUtils.isConcrete(type)) {\n\t\t\t\tImplementationRegistry registry = OneDev.getInstance(ImplementationRegistry.class);\n\t\t\t\tfor (Class<?> implementationClass: registry.getImplementations(node.getType())) {\n\t\t\t\t\tString implementationTag = new Tag(\"!\" + implementationClass.getSimpleName()).getValue();\n\t\t\t\t\tif (implementationTag.equals(node.getTag().getValue()))\n\t\t\t\t\t\treturn implementationClass;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn super.getClassForNode(node);\n\t\t}\n\t\t\n\t}\n\t\n\tprivate static class OneYaml extends Yaml {\n\n\t\tOneYaml() {\n\t\t\tsuper(newConstructor(), newRepresenter());\n\t\t\t\n\t\t\t/*\n\t\t\t * Use property here as yaml will be read by human and we want to make \n\t\t\t * it consistent with presented in UI \n\t\t\t */\n\t\t\tsetBeanAccess(BeanAccess.PROPERTY);\n\t\t}\n\t\t\n\t\tprivate static Representer newRepresenter() {\n\t\t\tRepresenter representer = new Representer() {\n\t\t\t\t\n\t\t\t    @SuppressWarnings(\"rawtypes\")\n\t\t\t\t@Override\n\t\t\t    protected NodeTuple representJavaBeanProperty(Object javaBean, Property property, \n\t\t\t    \t\tObject propertyValue,Tag customTag) {\n\t\t\t        if (propertyValue == null \n\t\t\t        \t\t|| propertyValue instanceof Collection && ((Collection) propertyValue).isEmpty()\n\t\t\t        \t\t|| propertyValue instanceof Map && ((Map) propertyValue).isEmpty()) { \n\t\t\t        \treturn null;\n\t\t\t        } else {\n\t\t\t        \treturn super.representJavaBeanProperty(javaBean, property, propertyValue, customTag);\n\t\t\t        }\n\t\t\t    }\n\n\t\t\t};\n\t\t\trepresenter.setDefaultFlowStyle(FlowStyle.BLOCK);\n\t\t\trepresenter.setPropertyUtils(new PropertyUtils() {\n\n\t\t\t\t@Override\n\t\t\t\tprotected Set<Property> createPropertySet(Class<? extends Object> type, BeanAccess bAccess) {\n\t\t\t\t\tList<Property> properties = new ArrayList<>();\n\t\t\t\t\tMap<String, Integer> orders = new HashMap<>();\n\t\t\t\t\tif (type.getAnnotation(Editable.class) != null) {\n\t\t\t\t\t\tfor (Method getter: BeanUtils.findGetters(type)) {\n\t\t\t\t\t\t\tEditable editable = getter.getAnnotation(Editable.class);\n\t\t\t\t\t\t\tMethod setter = BeanUtils.findSetter(getter);\n\t\t\t\t\t\t\tif (editable != null && setter != null) {\n\t\t\t\t\t\t\t\tString propertyName = BeanUtils.getPropertyName(getter);\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tproperties.add(new MethodProperty(new PropertyDescriptor(propertyName, getter, setter)));\n\t\t\t\t\t\t\t\t} catch (IntrospectionException e) {\n\t\t\t\t\t\t\t\t\tthrow new RuntimeException(e);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\torders.put(propertyName, editable.order());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tCollections.sort(properties, new Comparator<Property>() {\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic int compare(Property o1, Property o2) {\n\t\t\t\t\t\t\treturn orders.get(o1.getName()) - orders.get(o2.getName());\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t});\n\t\t\t\t\treturn new LinkedHashSet<>(properties);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t});\n\t\t\treturn representer;\n\t\t}\n\t\t\n\t\tprivate static OneConstructor newConstructor() {\n\t\t\treturn new OneConstructor();\n\t\t}\n\t\t\n\t\tpublic Object construct(Node node) {\n\t        return ((OneConstructor)constructor).construct(node);\n\t\t}\n\t    \n\t}\n\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "TreeVul",
    "idx": 700242,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-121",
      "CWE-122"
    ]
  },
  {
    "CWE_ID": [
      "CWE-74"
    ],
    "code": "package io.onedev.server.migration;\n\nimport java.beans.IntrospectionException;\nimport java.beans.PropertyDescriptor;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.hibernate.proxy.HibernateProxyHelper;\nimport org.yaml.snakeyaml.DumperOptions;\nimport org.yaml.snakeyaml.DumperOptions.FlowStyle;\nimport org.yaml.snakeyaml.Yaml;\nimport org.yaml.snakeyaml.constructor.Constructor;\nimport org.yaml.snakeyaml.emitter.Emitter;\nimport org.yaml.snakeyaml.introspector.BeanAccess;\nimport org.yaml.snakeyaml.introspector.MethodProperty;\nimport org.yaml.snakeyaml.introspector.Property;\nimport org.yaml.snakeyaml.introspector.PropertyUtils;\nimport org.yaml.snakeyaml.nodes.MappingNode;\nimport org.yaml.snakeyaml.nodes.Node;\nimport org.yaml.snakeyaml.nodes.NodeTuple;\nimport org.yaml.snakeyaml.nodes.ScalarNode;\nimport org.yaml.snakeyaml.nodes.Tag;\nimport org.yaml.snakeyaml.representer.Representer;\nimport org.yaml.snakeyaml.resolver.Resolver;\nimport org.yaml.snakeyaml.serializer.Serializer;\n\nimport edu.emory.mathcs.backport.java.util.Collections;\nimport io.onedev.commons.launcher.loader.ImplementationRegistry;\nimport io.onedev.commons.utils.ClassUtils;\nimport io.onedev.server.GeneralException;\nimport io.onedev.server.OneDev;\nimport io.onedev.server.util.BeanUtils;\nimport io.onedev.server.web.editable.annotation.Editable;\n\npublic class VersionedYamlDoc extends MappingNode {\n\n\tpublic VersionedYamlDoc(MappingNode wrapped) {\n\t\tsuper(wrapped.getTag(), wrapped.getValue(), wrapped.getFlowStyle());\n\t}\n\t\n\tpublic static VersionedYamlDoc fromYaml(String yaml) {\n\t\treturn new VersionedYamlDoc((MappingNode) new OneYaml().compose(new StringReader(yaml)));\n\t}\n\t\n\t@SuppressWarnings(\"unchecked\")\n\tpublic <T> T toBean(Class<T> beanClass) {\n        setTag(new Tag(beanClass));\n\t\tif (getVersion() != null) {\n\t\t\ttry {\n\t\t\t\tMigrationHelper.migrate(getVersion(), beanClass.newInstance(), this);\n\t\t\t\tremoveVersion();\n\t\t\t} catch (InstantiationException | IllegalAccessException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\t\t\n        return (T) new OneYaml().construct(this);\n\t}\n\t\n\tpublic static VersionedYamlDoc fromBean(Object bean) {\n\t\tVersionedYamlDoc doc = new VersionedYamlDoc((MappingNode) new OneYaml().represent(bean));\n\t\tdoc.setVersion(MigrationHelper.getVersion(HibernateProxyHelper.getClassWithoutInitializingProxy(bean)));\n\t\treturn doc;\n\t}\n\t\n\tprivate String getVersion() {\n\t\tfor (NodeTuple tuple: getValue()) {\n\t\t\tScalarNode keyNode = (ScalarNode) tuple.getKeyNode();\n\t\t\tif (keyNode.getValue().equals(\"version\")) \n\t\t\t\treturn ((ScalarNode)tuple.getValueNode()).getValue();\n\t\t}\n\t\tthrow new GeneralException(\"Unable to find version\");\n\t}\n\t\n\tprivate void removeVersion() {\n\t\tfor (Iterator<NodeTuple> it = getValue().iterator(); it.hasNext();) {\n\t\t\tScalarNode keyNode = (ScalarNode) it.next().getKeyNode();\n\t\t\tif (keyNode.getValue().equals(\"version\")) \n\t\t\t\tit.remove();\n\t\t}\n\t}\n\t\n\tprivate void setVersion(String version) {\n\t\tScalarNode versionNode = null;\n\t\tfor (NodeTuple tuple:  getValue()) {\n\t\t\tScalarNode keyNode = (ScalarNode) tuple.getKeyNode();\n\t\t\tif (keyNode.getValue().equals(\"version\")) {\n\t\t\t\t((ScalarNode) tuple.getValueNode()).setValue(version);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (versionNode == null) {\n\t\t\tScalarNode keyNode = new ScalarNode(Tag.STR, \"version\", null, null, DumperOptions.ScalarStyle.PLAIN);\n\t\t\tversionNode = new ScalarNode(Tag.INT, version, null, null, DumperOptions.ScalarStyle.PLAIN);\n\t\t\tgetValue().add(0, new NodeTuple(keyNode, versionNode));\n\t\t}\n\t}\n\t\n\tpublic String toYaml() {\n\t\tStringWriter writer = new StringWriter();\n\t\tDumperOptions dumperOptions = new DumperOptions();\n\t\tSerializer serializer = new Serializer(new Emitter(writer, dumperOptions), \n\t\t\t\tnew Resolver(), dumperOptions, Tag.MAP);\n\t\ttry {\n\t\t\tserializer.open();\n\t\t\tserializer.serialize(this);\n\t\t\tserializer.close();\n\t\t\treturn writer.toString();\n\t\t} catch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n\t\n\tprivate static class OneConstructor extends Constructor {\n\t\t\n\t\tpublic Object construct(Node node) {\n\t\t\treturn constructDocument(node);\n\t\t}\n\n\t\t@Override\n\t\tprotected Class<?> getClassForNode(Node node) {\n\t\t\tif (node instanceof VersionedYamlDoc) {\n\t\t\t\treturn super.getClassForNode(node);\n\t\t\t} else {\n\t\t\t\tClass<?> type = node.getType();\n\t\t\t\tif (type.getAnnotation(Editable.class) == null) {\n\t\t\t\t\t// Do not deserialize unknown classes to avoid security vulnerabilities\n\t\t\t\t\tthrow new IllegalStateException(String.format(\"Unexpected yaml node (type: %s, tag: %s)\", \n\t\t\t\t\t\t\ttype, node.getTag()));\n\t\t\t\t} else {\n\t\t\t\t\tif (!ClassUtils.isConcrete(type)) {\n\t\t\t\t\t\tImplementationRegistry registry = OneDev.getInstance(ImplementationRegistry.class);\n\t\t\t\t\t\tfor (Class<?> implementationClass: registry.getImplementations(node.getType())) {\n\t\t\t\t\t\t\tString implementationTag = new Tag(\"!\" + implementationClass.getSimpleName()).getValue();\n\t\t\t\t\t\t\tif (implementationTag.equals(node.getTag().getValue()))\n\t\t\t\t\t\t\t\treturn implementationClass;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn super.getClassForNode(node);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\t\n\tprivate static class OneYaml extends Yaml {\n\n\t\tOneYaml() {\n\t\t\tsuper(newConstructor(), newRepresenter());\n\t\t\t\n\t\t\t/*\n\t\t\t * Use property here as yaml will be read by human and we want to make \n\t\t\t * it consistent with presented in UI \n\t\t\t */\n\t\t\tsetBeanAccess(BeanAccess.PROPERTY);\n\t\t}\n\t\t\n\t\tprivate static Representer newRepresenter() {\n\t\t\tRepresenter representer = new Representer() {\n\t\t\t\t\n\t\t\t    @SuppressWarnings(\"rawtypes\")\n\t\t\t\t@Override\n\t\t\t    protected NodeTuple representJavaBeanProperty(Object javaBean, Property property, \n\t\t\t    \t\tObject propertyValue,Tag customTag) {\n\t\t\t        if (propertyValue == null \n\t\t\t        \t\t|| propertyValue instanceof Collection && ((Collection) propertyValue).isEmpty()\n\t\t\t        \t\t|| propertyValue instanceof Map && ((Map) propertyValue).isEmpty()) { \n\t\t\t        \treturn null;\n\t\t\t        } else {\n\t\t\t        \treturn super.representJavaBeanProperty(javaBean, property, propertyValue, customTag);\n\t\t\t        }\n\t\t\t    }\n\n\t\t\t};\n\t\t\trepresenter.setDefaultFlowStyle(FlowStyle.BLOCK);\n\t\t\trepresenter.setPropertyUtils(new PropertyUtils() {\n\n\t\t\t\t@Override\n\t\t\t\tprotected Set<Property> createPropertySet(Class<? extends Object> type, BeanAccess bAccess) {\n\t\t\t\t\tList<Property> properties = new ArrayList<>();\n\t\t\t\t\tMap<String, Integer> orders = new HashMap<>();\n\t\t\t\t\tif (type.getAnnotation(Editable.class) != null) {\n\t\t\t\t\t\tfor (Method getter: BeanUtils.findGetters(type)) {\n\t\t\t\t\t\t\tEditable editable = getter.getAnnotation(Editable.class);\n\t\t\t\t\t\t\tMethod setter = BeanUtils.findSetter(getter);\n\t\t\t\t\t\t\tif (editable != null && setter != null) {\n\t\t\t\t\t\t\t\tString propertyName = BeanUtils.getPropertyName(getter);\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tproperties.add(new MethodProperty(new PropertyDescriptor(propertyName, getter, setter)));\n\t\t\t\t\t\t\t\t} catch (IntrospectionException e) {\n\t\t\t\t\t\t\t\t\tthrow new RuntimeException(e);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\torders.put(propertyName, editable.order());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tCollections.sort(properties, new Comparator<Property>() {\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic int compare(Property o1, Property o2) {\n\t\t\t\t\t\t\treturn orders.get(o1.getName()) - orders.get(o2.getName());\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t});\n\t\t\t\t\treturn new LinkedHashSet<>(properties);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t});\n\t\t\treturn representer;\n\t\t}\n\t\t\n\t\tprivate static OneConstructor newConstructor() {\n\t\t\treturn new OneConstructor();\n\t\t}\n\t\t\n\t\tpublic Object construct(Node node) {\n\t        return ((OneConstructor)constructor).construct(node);\n\t\t}\n\t    \n\t}\n\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "TreeVul",
    "idx": 700243,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-121",
      "CWE-122"
    ]
  }
]