[
  {
    "CWE_ID": [
      "CWE-668"
    ],
    "code": "/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage org.xwiki.administration.test.ui;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport javax.mail.Address;\nimport javax.mail.BodyPart;\nimport javax.mail.Multipart;\nimport javax.mail.internet.MimeMessage;\n\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.lang3.RandomStringUtils;\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.xwiki.administration.test.po.ResetPasswordCompletePage;\nimport org.xwiki.administration.test.po.ResetPasswordPage;\nimport org.xwiki.test.docker.junit5.TestConfiguration;\nimport org.xwiki.test.docker.junit5.UITest;\nimport org.xwiki.test.integration.junit.LogCaptureConfiguration;\nimport org.xwiki.test.ui.TestUtils;\nimport org.xwiki.test.ui.po.LoginPage;\n\nimport com.icegreen.greenmail.util.GreenMail;\nimport com.icegreen.greenmail.util.ServerSetupTest;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\n/**\n * Verify the Reset Password feature.\n *\n * @version $Id$\n * @since 7.0M2\n */\n@UITest(sshPorts = {\n    // Open the GreenMail port so that the XWiki instance inside a Docker container can use the SMTP server provided\n    // by GreenMail running on the host.\n    3025\n},\n    properties = {\n        // The Mail module contributes a Hibernate mapping that needs to be added to hibernate.cfg.xml\n        \"xwikiDbHbmCommonExtraMappings=mailsender.hbm.xml\",\n        // Pages created in the tests need to have PR since we ask for PR to send mails so we need to exclude them from\n        // the PR checker.\n        \"xwikiPropertiesAdditionalProperties=test.prchecker.excludePattern=.*:XWiki\\\\.ResetPassword|.*:XWiki\\\\.ResetPasswordComplete\"\n    },\n    extraJARs = {\n        // It's currently not possible to install a JAR contributing a Hibernate mapping file as an Extension. Thus\n        // we need to provide the JAR inside WEB-INF/lib. See https://jira.xwiki.org/browse/XWIKI-8271\n        \"org.xwiki.platform:xwiki-platform-mail-send-storage\"\n    }\n)\npublic class ResetPasswordIT\n{\n    private GreenMail mail;\n\n    @BeforeEach\n    public void startMail(TestUtils setup, TestConfiguration testConfiguration)\n    {\n        this.mail = new GreenMail(ServerSetupTest.SMTP);\n        this.mail.start();\n\n        configureEmail(setup, testConfiguration);\n    }\n\n    @AfterEach\n    public void stopMail(TestUtils setup, LogCaptureConfiguration logCaptureConfiguration)\n    {\n        if (this.mail != null) {\n            this.mail.stop();\n        }\n\n        restoreSettings(setup);\n        logCaptureConfiguration.registerExcludes(\"CSRFToken: Secret token verification failed, token\");\n    }\n\n    @Test\n    public void resetForgottenPassword(TestUtils setup) throws Exception\n    {\n        setup.loginAsSuperAdmin();\n\n        String userName = \"testUser\" + RandomStringUtils.randomAlphanumeric(6);\n        String password = \"password\";\n        String newPassword = \"newPassword\";\n\n        // Create a user\n        setup.createUser(userName, password, null);\n\n        // Make sure we are not logged in and go to the reset password page\n        setup.forceGuestUser();\n        ResetPasswordPage resetPasswordPage = ResetPasswordPage.gotoPage();\n\n        // Try to reset the password of a non existent user\n        resetPasswordPage.setUserName(\"SomeUserThatDoesNotExist\");\n        resetPasswordPage = resetPasswordPage.clickResetPassword();\n        assertFalse(resetPasswordPage.isResetPasswordSent());\n        assertTrue(resetPasswordPage.getMessage().contains(\"user does not exist\"));\n\n        // Try again\n        resetPasswordPage = resetPasswordPage.clickRetry();\n\n        // Try to reset the password of our user, when he has no email set\n        resetPasswordPage.setUserName(userName);\n        resetPasswordPage.clickResetPassword();\n        assertFalse(resetPasswordPage.isResetPasswordSent());\n        assertTrue(resetPasswordPage.getMessage().contains(\"email address not provided\"));\n\n        // Try again. This time, set the user's email address in the profile\n        setup.loginAsSuperAdmin();\n        setup.updateObject(\"XWiki\", userName, \"XWiki.XWikiUsers\", 0, \"email\", \"foo@bar.com\", \"form_token\",\n            setup.getSecretToken());\n        setup.forceGuestUser();\n\n        // Actually reset the user's password\n        resetPasswordPage = ResetPasswordPage.gotoPage();\n        resetPasswordPage.setUserName(userName);\n        resetPasswordPage.clickResetPassword();\n\n        // Check the result\n        assertTrue(resetPasswordPage.isResetPasswordSent());\n        // Check the emails received by the user\n        assertTrue(this.mail.waitForIncomingEmail(1));\n        MimeMessage[] receivedEmails = this.mail.getReceivedMessages();\n        assertEquals(1, receivedEmails.length);\n        MimeMessage receivedEmail = receivedEmails[0];\n        assertEquals(\"Password reset request for \" + userName, receivedEmail.getSubject());\n        String receivedMailContent = getMessageContent(receivedEmail).get(\"textPart\");\n        String passwordResetLink = getResetLink(receivedMailContent, \"xwiki%3AXWiki.\" + userName);\n        assertNotNull(passwordResetLink);\n\n        // Use the password reset link\n        setup.gotoPage(passwordResetLink);\n        // We should now be on the ResetPasswordComplete page\n        ResetPasswordCompletePage resetPasswordCompletePage = new ResetPasswordCompletePage();\n        // Check that the link was valid\n        assertTrue(resetPasswordCompletePage.isResetLinkValid());\n        resetPasswordCompletePage.setPassword(newPassword);\n        resetPasswordCompletePage.setPasswordConfirmation(newPassword);\n        resetPasswordCompletePage = resetPasswordCompletePage.clickSave();\n\n        // Check the result\n        assertTrue(resetPasswordCompletePage.isPasswordSuccessfullyReset());\n        LoginPage loginPage = resetPasswordCompletePage.clickLogin();\n\n        // Check the new password\n        loginPage.loginAs(userName, newPassword);\n        assertEquals(userName, setup.getLoggedInUserName());\n    }\n\n    private Map<String, String> getMessageContent(MimeMessage message) throws Exception\n    {\n        Map<String, String> messageMap = new HashMap<>();\n\n        Address[] addresses = message.getAllRecipients();\n        assertTrue(addresses.length == 1);\n        messageMap.put(\"recipient\", addresses[0].toString());\n\n        messageMap.put(\"subjectLine\", message.getSubject());\n\n        Multipart mp = (Multipart) message.getContent();\n\n        BodyPart plain = getPart(mp, \"text/plain\");\n        if (plain != null) {\n            messageMap.put(\"textPart\", IOUtils.toString(plain.getInputStream(), \"UTF-8\"));\n        }\n        BodyPart html = getPart(mp, \"text/html\");\n        if (html != null) {\n            messageMap.put(\"htmlPart\", IOUtils.toString(html.getInputStream(), \"UTF-8\"));\n        }\n\n        return messageMap;\n    }\n\n    private BodyPart getPart(Multipart messageContent, String mimeType) throws Exception\n    {\n        for (int i = 0; i < messageContent.getCount(); i++) {\n            BodyPart part = messageContent.getBodyPart(i);\n\n            if (part.isMimeType(mimeType)) {\n                return part;\n            }\n\n            if (part.isMimeType(\"multipart/related\") || part.isMimeType(\"multipart/alternative\")\n                || part.isMimeType(\"multipart/mixed\"))\n            {\n                BodyPart out = getPart((Multipart) part.getContent(), mimeType);\n                if (out != null) {\n                    return out;\n                }\n            }\n        }\n        return null;\n    }\n\n    private String getResetLink(String emailContent, String userName)\n    {\n        String result = null;\n\n        // Use a regex to extract the password reset link\n        Pattern resetLinkPattern = Pattern.compile(\"http[^\\\\s]+?authenticate/reset\\\\?u=\" + userName + \"\\\\&v=\\\\w+\");\n        Matcher matcher = resetLinkPattern.matcher(emailContent);\n        if (matcher.find()) {\n            result = matcher.group();\n        }\n\n        return result;\n    }\n\n    private void configureEmail(TestUtils setup, TestConfiguration testConfiguration)\n    {\n        setup.updateObject(\"Mail\", \"MailConfig\", \"Mail.SendMailConfigClass\", 0, \"host\",\n            testConfiguration.getServletEngine().getHostIP(), \"port\", \"3025\", \"sendWaitTime\", \"0\");\n    }\n\n    private void restoreSettings(TestUtils setup)\n    {\n        // Make sure we can restore the settings, so we log back with superadmin to finish the work\n        setup.loginAsSuperAdmin();\n\n        // Remove the previous version that the setup has created.\n        setup.deleteLatestVersion(\"Mail\", \"MailConfig\");\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "TreeVul",
    "idx": 700288,
    "RELATED_CWE": [
      "CWE-601",
      "CWE-502",
      "CWE-614"
    ]
  },
  {
    "CWE_ID": [
      "CWE-668"
    ],
    "code": "/*\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\npackage org.xwiki.administration.test.ui;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport javax.mail.Address;\nimport javax.mail.BodyPart;\nimport javax.mail.Multipart;\nimport javax.mail.internet.MimeMessage;\n\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.lang3.RandomStringUtils;\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.xwiki.administration.test.po.ResetPasswordCompletePage;\nimport org.xwiki.administration.test.po.ResetPasswordPage;\nimport org.xwiki.test.docker.junit5.TestConfiguration;\nimport org.xwiki.test.docker.junit5.UITest;\nimport org.xwiki.test.integration.junit.LogCaptureConfiguration;\nimport org.xwiki.test.ui.TestUtils;\nimport org.xwiki.test.ui.po.LoginPage;\n\nimport com.icegreen.greenmail.util.GreenMail;\nimport com.icegreen.greenmail.util.ServerSetupTest;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\n/**\n * Verify the Reset Password feature.\n *\n * @version $Id$\n * @since 7.0M2\n */\n@UITest(sshPorts = {\n    // Open the GreenMail port so that the XWiki instance inside a Docker container can use the SMTP server provided\n    // by GreenMail running on the host.\n    3025\n},\n    properties = {\n        // The Mail module contributes a Hibernate mapping that needs to be added to hibernate.cfg.xml\n        \"xwikiDbHbmCommonExtraMappings=mailsender.hbm.xml\",\n        // Pages created in the tests need to have PR since we ask for PR to send mails so we need to exclude them from\n        // the PR checker.\n        \"xwikiPropertiesAdditionalProperties=test.prchecker.excludePattern=.*:XWiki\\\\.ResetPassword|.*:XWiki\\\\.ResetPasswordComplete\"\n    },\n    extraJARs = {\n        // It's currently not possible to install a JAR contributing a Hibernate mapping file as an Extension. Thus\n        // we need to provide the JAR inside WEB-INF/lib. See https://jira.xwiki.org/browse/XWIKI-8271\n        \"org.xwiki.platform:xwiki-platform-mail-send-storage\"\n    }\n)\npublic class ResetPasswordIT\n{\n    private GreenMail mail;\n\n    @BeforeEach\n    public void startMail(TestUtils setup, TestConfiguration testConfiguration)\n    {\n        this.mail = new GreenMail(ServerSetupTest.SMTP);\n        this.mail.start();\n\n        configureEmail(setup, testConfiguration);\n    }\n\n    @AfterEach\n    public void stopMail(TestUtils setup, LogCaptureConfiguration logCaptureConfiguration)\n    {\n        if (this.mail != null) {\n            this.mail.stop();\n        }\n\n        restoreSettings(setup);\n        logCaptureConfiguration.registerExcludes(\"CSRFToken: Secret token verification failed, token\");\n    }\n\n    @Test\n    public void resetForgottenPassword(TestUtils setup) throws Exception\n    {\n        setup.loginAsSuperAdmin();\n\n        String userName = \"testUser\" + RandomStringUtils.randomAlphanumeric(6);\n        String password = \"password\";\n        String newPassword = \"newPassword\";\n\n        // Create a user\n        setup.createUser(userName, password, null);\n\n        // Make sure we are not logged in and go to the reset password page\n        setup.forceGuestUser();\n        ResetPasswordPage resetPasswordPage = ResetPasswordPage.gotoPage();\n\n        // Try to reset the password of a non existent user\n        resetPasswordPage.setUserName(\"SomeUserThatDoesNotExist\");\n        resetPasswordPage = resetPasswordPage.clickResetPassword();\n        assertFalse(resetPasswordPage.isResetPasswordSent());\n        assertTrue(resetPasswordPage.getMessage().contains(\"user does not exist\"));\n\n        // Try again\n        resetPasswordPage = resetPasswordPage.clickRetry();\n\n        // Try to reset the password of our user, when he has no email set\n        resetPasswordPage.setUserName(userName);\n        resetPasswordPage.clickResetPassword();\n        assertFalse(resetPasswordPage.isResetPasswordSent());\n        assertTrue(resetPasswordPage.getMessage().contains(\"email address not provided\"));\n\n        // Try again. This time, set the user's email address in the profile\n        setup.loginAsSuperAdmin();\n        setup.updateObject(\"XWiki\", userName, \"XWiki.XWikiUsers\", 0, \"email\", \"foo@bar.com\", \"form_token\",\n            setup.getSecretToken());\n        setup.forceGuestUser();\n\n        // Actually reset the user's password\n        resetPasswordPage = ResetPasswordPage.gotoPage();\n        resetPasswordPage.setUserName(userName);\n        ResetPasswordPage newResetPasswordPage = resetPasswordPage.clickResetPassword();\n        assertTrue(newResetPasswordPage.getMessage().contains(\"An e-mail was sent\"),\n            \"Actual message: \" + newResetPasswordPage.getMessage());\n        assertFalse(newResetPasswordPage.getMessage().contains(\"foo@bar.com\"),\n            \"Actual message: \" + newResetPasswordPage.getMessage());\n\n        // Check the result\n        assertTrue(resetPasswordPage.isResetPasswordSent());\n        // Check the emails received by the user\n        assertTrue(this.mail.waitForIncomingEmail(1));\n        MimeMessage[] receivedEmails = this.mail.getReceivedMessages();\n        assertEquals(1, receivedEmails.length);\n        MimeMessage receivedEmail = receivedEmails[0];\n        assertEquals(\"Password reset request for \" + userName, receivedEmail.getSubject());\n        String receivedMailContent = getMessageContent(receivedEmail).get(\"textPart\");\n        String passwordResetLink = getResetLink(receivedMailContent, \"xwiki%3AXWiki.\" + userName);\n        assertNotNull(passwordResetLink);\n\n        // Use the password reset link\n        setup.gotoPage(passwordResetLink);\n        // We should now be on the ResetPasswordComplete page\n        ResetPasswordCompletePage resetPasswordCompletePage = new ResetPasswordCompletePage();\n        // Check that the link was valid\n        assertTrue(resetPasswordCompletePage.isResetLinkValid());\n        resetPasswordCompletePage.setPassword(newPassword);\n        resetPasswordCompletePage.setPasswordConfirmation(newPassword);\n        resetPasswordCompletePage = resetPasswordCompletePage.clickSave();\n\n        // Check the result\n        assertTrue(resetPasswordCompletePage.isPasswordSuccessfullyReset());\n        LoginPage loginPage = resetPasswordCompletePage.clickLogin();\n\n        // Check the new password\n        loginPage.loginAs(userName, newPassword);\n        assertEquals(userName, setup.getLoggedInUserName());\n    }\n\n    private Map<String, String> getMessageContent(MimeMessage message) throws Exception\n    {\n        Map<String, String> messageMap = new HashMap<>();\n\n        Address[] addresses = message.getAllRecipients();\n        assertTrue(addresses.length == 1);\n        messageMap.put(\"recipient\", addresses[0].toString());\n\n        messageMap.put(\"subjectLine\", message.getSubject());\n\n        Multipart mp = (Multipart) message.getContent();\n\n        BodyPart plain = getPart(mp, \"text/plain\");\n        if (plain != null) {\n            messageMap.put(\"textPart\", IOUtils.toString(plain.getInputStream(), \"UTF-8\"));\n        }\n        BodyPart html = getPart(mp, \"text/html\");\n        if (html != null) {\n            messageMap.put(\"htmlPart\", IOUtils.toString(html.getInputStream(), \"UTF-8\"));\n        }\n\n        return messageMap;\n    }\n\n    private BodyPart getPart(Multipart messageContent, String mimeType) throws Exception\n    {\n        for (int i = 0; i < messageContent.getCount(); i++) {\n            BodyPart part = messageContent.getBodyPart(i);\n\n            if (part.isMimeType(mimeType)) {\n                return part;\n            }\n\n            if (part.isMimeType(\"multipart/related\") || part.isMimeType(\"multipart/alternative\")\n                || part.isMimeType(\"multipart/mixed\"))\n            {\n                BodyPart out = getPart((Multipart) part.getContent(), mimeType);\n                if (out != null) {\n                    return out;\n                }\n            }\n        }\n        return null;\n    }\n\n    private String getResetLink(String emailContent, String userName)\n    {\n        String result = null;\n\n        // Use a regex to extract the password reset link\n        Pattern resetLinkPattern = Pattern.compile(\"http[^\\\\s]+?authenticate/reset\\\\?u=\" + userName + \"\\\\&v=\\\\w+\");\n        Matcher matcher = resetLinkPattern.matcher(emailContent);\n        if (matcher.find()) {\n            result = matcher.group();\n        }\n\n        return result;\n    }\n\n    private void configureEmail(TestUtils setup, TestConfiguration testConfiguration)\n    {\n        setup.updateObject(\"Mail\", \"MailConfig\", \"Mail.SendMailConfigClass\", 0, \"host\",\n            testConfiguration.getServletEngine().getHostIP(), \"port\", \"3025\", \"sendWaitTime\", \"0\");\n    }\n\n    private void restoreSettings(TestUtils setup)\n    {\n        // Make sure we can restore the settings, so we log back with superadmin to finish the work\n        setup.loginAsSuperAdmin();\n\n        // Remove the previous version that the setup has created.\n        setup.deleteLatestVersion(\"Mail\", \"MailConfig\");\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "TreeVul",
    "idx": 700289,
    "RELATED_CWE": [
      "CWE-601",
      "CWE-502",
      "CWE-614"
    ]
  },
  {
    "CWE_ID": [
      "CWE-668"
    ],
    "code": "    @Override\n    public int setErrorParameter(BeforeEnterEvent event,\n            ErrorParameter<NotFoundException> parameter) {\n        \n        String additionalInfo = parameter.hasCustomMessage()? \"Reason: \" + parameter.getCustomMessage():\"\";\n        Location location = event.getLocation();\n        String path = location.getPath();\n        path = Jsoup.clean(path, Whitelist.none());\n        additionalInfo = Jsoup.clean(additionalInfo, Whitelist.none());\n\n        UI ui = event.getUI();\n        VaadinSession session = ui.getSession();\n        DeploymentConfiguration config = session.getConfiguration();\n        boolean productionMode = config.isProductionMode();\n\n        String template = getErrorHtml(productionMode);\n        template = template.replace(\"{{path}}\", path);\n        template = template.replace(\"{{additionalInfo}}\", additionalInfo);\n        String routes = getRoutes(event);\n        template = template.contains(\"{{routes}}\")? template.replace(\"{{routes}}\", routes): template;\n        \n        com.vaadin.flow.dom.Element element = getElement();\n        Html html = new Html(template);\n        element.appendChild(html.getElement());\n        return HttpServletResponse.SC_NOT_FOUND;\n    }\n",
    "target": 1,
    "language": "java",
    "dataset": "VJBench",
    "idx": 200078,
    "RELATED_CWE": [
      "CWE-601",
      "CWE-502",
      "CWE-614"
    ]
  },
  {
    "CWE_ID": [
      "CWE-668"
    ],
    "code": "    @Override\n    public int setErrorParameter(BeforeEnterEvent event,\n            ErrorParameter<NotFoundException> parameter) {\n        \n        String additionalInfo = parameter.hasCustomMessage()? \"Reason: \" + parameter.getCustomMessage():\"\";\n        Location location = event.getLocation();\n        String path = location.getPath();\n        path = Jsoup.clean(path, Whitelist.none());\n        additionalInfo = Jsoup.clean(additionalInfo, Whitelist.none());\n\n        UI ui = event.getUI();\n        VaadinSession session = ui.getSession();\n        DeploymentConfiguration config = session.getConfiguration();\n        boolean productionMode = config.isProductionMode();\n\n        String template = getErrorHtml(productionMode);\n\n        String routes = getRoutes(event);\n        template = template.contains(\"{{routes}}\")? template.replace(\"{{routes}}\", routes): template;\n        template = template.replace(\"{{additionalInfo}}\", additionalInfo);\n        template = template.replace(\"{{path}}\", path);\n\n        com.vaadin.flow.dom.Element element = getElement();\n        Html html = new Html(template);\n        element.appendChild(html.getElement());\n        return HttpServletResponse.SC_NOT_FOUND;\n    }\n",
    "target": 0,
    "language": "java",
    "dataset": "VJBench",
    "idx": 200079,
    "RELATED_CWE": [
      "CWE-601",
      "CWE-502",
      "CWE-614"
    ]
  }
]