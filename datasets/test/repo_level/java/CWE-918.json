[
  {
    "CWE_ID": [
      "CWE-918"
    ],
    "code": "/**\n * BigBlueButton open source conferencing system - http://www.bigbluebutton.org/\n * \n * Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).\n *\n * This program is free software; you can redistribute it and/or modify it under the\n * terms of the GNU Lesser General Public License as published by the Free Software\n * Foundation; either version 3.0 of the License, or (at your option) any later\n * version.\n * \n * BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License along\n * with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.\n *\n */\n\npackage org.bigbluebutton.presentation.imp;\n\nimport java.io.File;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.bigbluebutton.presentation.ConversionMessageConstants;\nimport org.bigbluebutton.presentation.SupportedFileTypes;\nimport org.bigbluebutton.presentation.UploadedPresentation;\nimport org.jodconverter.core.office.OfficeException;\nimport org.jodconverter.core.office.OfficeManager;\nimport org.jodconverter.local.LocalConverter;\nimport org.jodconverter.local.office.LocalOfficeManager;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport com.google.gson.Gson;\n\npublic class OfficeToPdfConversionService {\n  private static Logger log = LoggerFactory.getLogger(OfficeToPdfConversionService.class);\n\n  private OfficeDocumentValidator2 officeDocumentValidator;\n  private final OfficeManager officeManager;\n  private final LocalConverter documentConverter;\n  private boolean skipOfficePrecheck = false;\n\n  public OfficeToPdfConversionService() throws OfficeException {\n    officeManager = LocalOfficeManager\n      .builder()\n      .portNumbers(8100, 8101, 8102, 8103, 8104)\n      .build();\n    documentConverter = LocalConverter\n      .builder()\n      .officeManager(officeManager)\n      .filterChain(new OfficeDocumentConversionFilter())\n      .build();\n  }\n\n  /*\n   * Convert the Office document to PDF. If successful, update\n   * UploadPresentation.uploadedFile with the new PDF out and\n   * UploadPresentation.lastStepSuccessful to TRUE.\n   */\n  public UploadedPresentation convertOfficeToPdf(UploadedPresentation pres) {\n    initialize(pres);\n    if (SupportedFileTypes.isOfficeFile(pres.getFileType())) {\n      // Check if we need to precheck office document\n      if (!skipOfficePrecheck && officeDocumentValidator.isValid(pres)) {\n        Map<String, Object> logData = new HashMap<>();\n        logData.put(\"meetingId\", pres.getMeetingId());\n        logData.put(\"presId\", pres.getId());\n        logData.put(\"filename\", pres.getName());\n        logData.put(\"logCode\", \"problems_office_to_pdf_validation\");\n        logData.put(\"message\", \"Problems detected prior to converting the file to PDF.\");\n        Gson gson = new Gson();\n        String logStr = gson.toJson(logData);\n        log.warn(\" --analytics-- data={}\", logStr);\n\n        pres.setConversionStatus(ConversionMessageConstants.OFFICE_DOC_CONVERSION_INVALID_KEY);\n        return pres;\n      }\n      File pdfOutput = setupOutputPdfFile(pres);\n      if (convertOfficeDocToPdf(pres, pdfOutput)) {\n        Map<String, Object> logData = new HashMap<>();\n        logData.put(\"meetingId\", pres.getMeetingId());\n        logData.put(\"presId\", pres.getId());\n        logData.put(\"filename\", pres.getName());\n        logData.put(\"logCode\", \"office_to_pdf_success\");\n        logData.put(\"message\", \"Successfully converted office file to pdf.\");\n        Gson gson = new Gson();\n        String logStr = gson.toJson(logData);\n        log.info(\" --analytics-- data={}\", logStr);\n\n        makePdfTheUploadedFileAndSetStepAsSuccess(pres, pdfOutput);\n      } else {\n        Map<String, Object> logData = new HashMap<>();\n        logData.put(\"meetingId\", pres.getMeetingId());\n        logData.put(\"presId\", pres.getId());\n        logData.put(\"filename\", pres.getName());\n        logData.put(\"logCode\", \"office_to_pdf_failed\");\n        logData.put(\"message\", \"Failed to convert \" + pres.getUploadedFile().getAbsolutePath() + \" to Pdf.\");\n        Gson gson = new Gson();\n        String logStr = gson.toJson(logData);\n        log.warn(\" --analytics-- data={}\", logStr);\n        pres.setConversionStatus(ConversionMessageConstants.OFFICE_DOC_CONVERSION_FAILED_KEY);\n        return pres;\n      }\n    }\n    return pres;\n  }\n\n  public void initialize(UploadedPresentation pres) {\n    pres.setConversionStatus(ConversionMessageConstants.OFFICE_DOC_CONVERSION_FAILED_KEY);\n  }\n\n  private File setupOutputPdfFile(UploadedPresentation pres) {\n    File presentationFile = pres.getUploadedFile();\n    String filenameWithoutExt = presentationFile.getAbsolutePath().substring(0,\n        presentationFile.getAbsolutePath().lastIndexOf('.'));\n    return new File(filenameWithoutExt + \".pdf\");\n  }\n\n  private boolean convertOfficeDocToPdf(UploadedPresentation pres,\n      File pdfOutput) {\n    Office2PdfPageConverter converter = new Office2PdfPageConverter();\n    return converter.convert(pres.getUploadedFile(), pdfOutput, 0, pres, documentConverter);\n  }\n\n  private void makePdfTheUploadedFileAndSetStepAsSuccess(UploadedPresentation pres, File pdf) {\n    pres.setUploadedFile(pdf);\n    pres.setConversionStatus(ConversionMessageConstants.OFFICE_DOC_CONVERSION_SUCCESS_KEY);\n  }\n\n  public void setOfficeDocumentValidator(OfficeDocumentValidator2 v) {\n    officeDocumentValidator = v;\n  }\n\n  public void setSkipOfficePrecheck(boolean skipOfficePrecheck) {\n    this.skipOfficePrecheck = skipOfficePrecheck;\n  }\n\n  public void start() {\n    try {\n      officeManager.start();\n    } catch (OfficeException e) {\n      log.error(\"Could not start Office Manager\", e);\n    }\n  }\n\n  public void stop() {\n    try {\n      officeManager.stop();\n    } catch (OfficeException e) {\n      log.error(\"Could not stop Office Manager\", e);\n    }\n\n  }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "TreeVul",
    "idx": 700202,
    "RELATED_CWE": [
      "CWE-352",
      "CWE-601",
      "CWE-384"
    ]
  },
  {
    "CWE_ID": [
      "CWE-918"
    ],
    "code": "/**\n * BigBlueButton open source conferencing system - http://www.bigbluebutton.org/\n * \n * Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).\n *\n * This program is free software; you can redistribute it and/or modify it under the\n * terms of the GNU Lesser General Public License as published by the Free Software\n * Foundation; either version 3.0 of the License, or (at your option) any later\n * version.\n * \n * BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License along\n * with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.\n *\n */\npackage org.bigbluebutton.presentation.imp;\nimport java.io.File;\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.bigbluebutton.presentation.ConversionMessageConstants;\nimport org.bigbluebutton.presentation.SupportedFileTypes;\nimport org.bigbluebutton.presentation.UploadedPresentation;\nimport org.jodconverter.core.office.OfficeException;\nimport org.jodconverter.core.office.OfficeManager;\nimport org.jodconverter.local.LocalConverter;\nimport org.jodconverter.local.office.LocalOfficeManager;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport com.sun.star.document.UpdateDocMode;\nimport com.google.gson.Gson;\npublic class OfficeToPdfConversionService {\n  private static Logger log = LoggerFactory.getLogger(OfficeToPdfConversionService.class);\n  private OfficeDocumentValidator2 officeDocumentValidator;\n  private final OfficeManager officeManager;\n  private final LocalConverter documentConverter;\n  private boolean skipOfficePrecheck = false;\n  public OfficeToPdfConversionService() throws OfficeException {\n    final Map<String, Object> loadProperties = new HashMap<>();\n    loadProperties.put(\"Hidden\", true);\n    loadProperties.put(\"ReadOnly\", true);\n    loadProperties.put(\"UpdateDocMode\", UpdateDocMode.NO_UPDATE);\n    officeManager = LocalOfficeManager\n      .builder()\n      .portNumbers(8100, 8101, 8102, 8103, 8104)\n      .build();\n    documentConverter = LocalConverter\n      .builder()\n      .officeManager(officeManager)\n      .loadProperties(loadProperties)\n      .filterChain(new OfficeDocumentConversionFilter())\n      .build();\n  }\n  /*\n   * Convert the Office document to PDF. If successful, update\n   * UploadPresentation.uploadedFile with the new PDF out and\n   * UploadPresentation.lastStepSuccessful to TRUE.\n   */\n  public UploadedPresentation convertOfficeToPdf(UploadedPresentation pres) {\n    initialize(pres);\n    if (SupportedFileTypes.isOfficeFile(pres.getFileType())) {\n      // Check if we need to precheck office document\n      if (!skipOfficePrecheck && officeDocumentValidator.isValid(pres)) {\n        Map<String, Object> logData = new HashMap<>();\n        logData.put(\"meetingId\", pres.getMeetingId());\n        logData.put(\"presId\", pres.getId());\n        logData.put(\"filename\", pres.getName());\n        logData.put(\"logCode\", \"problems_office_to_pdf_validation\");\n        logData.put(\"message\", \"Problems detected prior to converting the file to PDF.\");\n        Gson gson = new Gson();\n        String logStr = gson.toJson(logData);\n        log.warn(\" --analytics-- data={}\", logStr);\n        pres.setConversionStatus(ConversionMessageConstants.OFFICE_DOC_CONVERSION_INVALID_KEY);\n        return pres;\n      }\n      File pdfOutput = setupOutputPdfFile(pres);\n      if (convertOfficeDocToPdf(pres, pdfOutput)) {\n        Map<String, Object> logData = new HashMap<>();\n        logData.put(\"meetingId\", pres.getMeetingId());\n        logData.put(\"presId\", pres.getId());\n        logData.put(\"filename\", pres.getName());\n        logData.put(\"logCode\", \"office_to_pdf_success\");\n        logData.put(\"message\", \"Successfully converted office file to pdf.\");\n        Gson gson = new Gson();\n        String logStr = gson.toJson(logData);\n        log.info(\" --analytics-- data={}\", logStr);\n        makePdfTheUploadedFileAndSetStepAsSuccess(pres, pdfOutput);\n      } else {\n        Map<String, Object> logData = new HashMap<>();\n        logData.put(\"meetingId\", pres.getMeetingId());\n        logData.put(\"presId\", pres.getId());\n        logData.put(\"filename\", pres.getName());\n        logData.put(\"logCode\", \"office_to_pdf_failed\");\n        logData.put(\"message\", \"Failed to convert \" + pres.getUploadedFile().getAbsolutePath() + \" to Pdf.\");\n        Gson gson = new Gson();\n        String logStr = gson.toJson(logData);\n        log.warn(\" --analytics-- data={}\", logStr);\n        pres.setConversionStatus(ConversionMessageConstants.OFFICE_DOC_CONVERSION_FAILED_KEY);\n        return pres;\n      }\n    }\n    return pres;\n  }\n  public void initialize(UploadedPresentation pres) {\n    pres.setConversionStatus(ConversionMessageConstants.OFFICE_DOC_CONVERSION_FAILED_KEY);\n  }\n  private File setupOutputPdfFile(UploadedPresentation pres) {\n    File presentationFile = pres.getUploadedFile();\n    String filenameWithoutExt = presentationFile.getAbsolutePath().substring(0,\n        presentationFile.getAbsolutePath().lastIndexOf('.'));\n    return new File(filenameWithoutExt + \".pdf\");\n  }\n  private boolean convertOfficeDocToPdf(UploadedPresentation pres,\n      File pdfOutput) {\n    Office2PdfPageConverter converter = new Office2PdfPageConverter();\n    return converter.convert(pres.getUploadedFile(), pdfOutput, 0, pres, documentConverter);\n  }\n  private void makePdfTheUploadedFileAndSetStepAsSuccess(UploadedPresentation pres, File pdf) {\n    pres.setUploadedFile(pdf);\n    pres.setConversionStatus(ConversionMessageConstants.OFFICE_DOC_CONVERSION_SUCCESS_KEY);\n  }\n  public void setOfficeDocumentValidator(OfficeDocumentValidator2 v) {\n    officeDocumentValidator = v;\n  }\n  public void setSkipOfficePrecheck(boolean skipOfficePrecheck) {\n    this.skipOfficePrecheck = skipOfficePrecheck;\n  }\n  public void start() {\n    try {\n      officeManager.start();\n    } catch (OfficeException e) {\n      log.error(\"Could not start Office Manager\", e);\n    }\n  }\n  public void stop() {\n    try {\n      officeManager.stop();\n    } catch (OfficeException e) {\n      log.error(\"Could not stop Office Manager\", e);\n    }\n  }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "TreeVul",
    "idx": 700203,
    "RELATED_CWE": [
      "CWE-352",
      "CWE-601",
      "CWE-384"
    ]
  }
]