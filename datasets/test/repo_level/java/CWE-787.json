[
  {
    "CWE_ID": [
      "CWE-787"
    ],
    "code": "package net.minidev.json.parser;\n\n/*\n *    Copyright 2011 JSON-SMART authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport static net.minidev.json.parser.ParseException.ERROR_UNEXPECTED_EOF;\nimport net.minidev.json.JSONValue;\nimport net.minidev.json.writer.JsonReaderI;\n\n/**\n * Parser for JSON text. Please note that JSONParser is NOT thread-safe.\n * \n * @author Uriel Chemouni &lt;uchemouni@gmail.com&gt;\n */\nclass JSONParserByteArray extends JSONParserMemory {\n\tprivate byte[] in;\n\n\tpublic JSONParserByteArray(int permissiveMode) {\n\t\tsuper(permissiveMode);\n\t}\n\n\t/**\n\t * use to return Primitive Type, or String, Or JsonObject or JsonArray\n\t * generated by a ContainerFactory\n\t */\n\tpublic Object parse(byte[] in) throws ParseException {\n\t\treturn parse(in, JSONValue.defaultReader.DEFAULT);\n\t}\n\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\n\t/**\n\t * use to return Primitive Type, or String, Or JsonObject or JsonArray\n\t * generated by a ContainerFactory\n\t */\n\tpublic <T> T parse(byte[] in, JsonReaderI<T> mapper) throws ParseException {\n\t\tthis.base = mapper.base;\n\t\tthis.in = in;\n\t\tthis.len = in.length;\n\t\treturn parse(mapper);\n\t}\n\n\tprotected void extractString(int beginIndex, int endIndex) {\n\t\txs = new String(in, beginIndex, endIndex - beginIndex);\n\t}\n\n\tprotected void extractStringTrim(int start, int stop) {\n\t\tbyte[] val = this.in; /* avoid getfield opcode */\n\n\t\twhile ((start < stop) && (val[start] <= ' ')) {\n\t\t\tstart++;\n\t\t}\n\t\twhile ((start < stop) && (val[stop - 1] <= ' ')) {\n\t\t\tstop--;\n\t\t}\n\t\txs = new String(in, start, stop - start);\n\t}\n\n\tprotected int indexOf(char c, int pos) {\n\t\tfor (int i = pos; pos < len; i++)\n\t\t\tif (in[i] == (byte) c)\n\t\t\t\treturn i;\n\t\treturn -1;\n\t}\n\n\tprotected void read() {\n\t\tif (++pos >= len)\n\t\t\tthis.c = EOI;\n\t\telse\n\t\t\tthis.c = (char) in[pos];\n\t}\n\n\t/**\n\t * Same as read() in memory parsing\n\t */\n\tprotected void readS() {\n\t\tif (++pos >= len)\n\t\t\tthis.c = EOI;\n\t\telse\n\t\t\tthis.c = (char) in[pos];\n\t}\n\n\t/**\n\t * read data can not be EOI\n\t */\n\tprotected void readNoEnd() throws ParseException {\n\t\tif (++pos >= len) {\n\t\t\tthis.c = EOI;\n\t\t\tthrow new ParseException(pos - 1, ERROR_UNEXPECTED_EOF, \"EOF\");\n\t\t} else\n\t\t\tthis.c = (char) in[pos];\n\t}\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "TreeVul",
    "idx": 700278,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-416",
      "CWE-415"
    ]
  },
  {
    "CWE_ID": [
      "CWE-787"
    ],
    "code": "package net.minidev.json.parser;\n\n/*\n *    Copyright 2011 JSON-SMART authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport static net.minidev.json.parser.ParseException.ERROR_UNEXPECTED_EOF;\nimport net.minidev.json.JSONValue;\nimport net.minidev.json.writer.JsonReaderI;\n\n/**\n * Parser for JSON text. Please note that JSONParser is NOT thread-safe.\n * \n * @author Uriel Chemouni &lt;uchemouni@gmail.com&gt;\n */\nclass JSONParserByteArray extends JSONParserMemory {\n\tprivate byte[] in;\n\n\tpublic JSONParserByteArray(int permissiveMode) {\n\t\tsuper(permissiveMode);\n\t}\n\n\t/**\n\t * use to return Primitive Type, or String, Or JsonObject or JsonArray\n\t * generated by a ContainerFactory\n\t */\n\tpublic Object parse(byte[] in) throws ParseException {\n\t\treturn parse(in, JSONValue.defaultReader.DEFAULT);\n\t}\n\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\t//\n\n\t/**\n\t * use to return Primitive Type, or String, Or JsonObject or JsonArray\n\t * generated by a ContainerFactory\n\t */\n\tpublic <T> T parse(byte[] in, JsonReaderI<T> mapper) throws ParseException {\n\t\tthis.base = mapper.base;\n\t\tthis.in = in;\n\t\tthis.len = in.length;\n\t\treturn parse(mapper);\n\t}\n\n\tprotected void extractString(int beginIndex, int endIndex) {\n\t\txs = new String(in, beginIndex, endIndex - beginIndex);\n\t}\n\n\tprotected void extractStringTrim(int start, int stop) {\n\t\tbyte[] val = this.in; /* avoid getfield opcode */\n\n\t\twhile ((start < stop) && (val[start] <= ' ')) {\n\t\t\tstart++;\n\t\t}\n\t\twhile ((start < stop) && (val[stop - 1] <= ' ')) {\n\t\t\tstop--;\n\t\t}\n\t\txs = new String(in, start, stop - start);\n\t}\n\n\tprotected int indexOf(char c, int pos) {\n\t\tfor (int i = pos; i < len; i++)\n\t\t\tif (in[i] == (byte) c)\n\t\t\t\treturn i;\n\t\treturn -1;\n\t}\n\n\tprotected void read() {\n\t\tif (++pos >= len)\n\t\t\tthis.c = EOI;\n\t\telse\n\t\t\tthis.c = (char) in[pos];\n\t}\n\n\t/**\n\t * Same as read() in memory parsing\n\t */\n\tprotected void readS() {\n\t\tif (++pos >= len)\n\t\t\tthis.c = EOI;\n\t\telse\n\t\t\tthis.c = (char) in[pos];\n\t}\n\n\t/**\n\t * read data can not be EOI\n\t */\n\tprotected void readNoEnd() throws ParseException {\n\t\tif (++pos >= len) {\n\t\t\tthis.c = EOI;\n\t\t\tthrow new ParseException(pos - 1, ERROR_UNEXPECTED_EOF, \"EOF\");\n\t\t} else\n\t\t\tthis.c = (char) in[pos];\n\t}\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "TreeVul",
    "idx": 700279,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-416",
      "CWE-415"
    ]
  }
]