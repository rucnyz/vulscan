[
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class YgSinIZ extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        Connection connection = null;\n        PreparedStatement preparedStatement = null;\n        ResultSet resultSet = null;\n        try {\n            \n            connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n            preparedStatement = connection.prepareStatement(\"select * from test_table\");\n            resultSet = preparedStatement.executeQuery();\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (preparedStatement != null) {\n                    preparedStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228748,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class nzRpeUz extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        if (true) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (true) {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228750,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class hMmyEMp extends AbstractTestCase {\n\n    \n    private static final boolean PRIVATE_STATIC_FINAL_TRUE = true;\n\n    private static final boolean PRIVATE_STATIC_FINAL_FALSE = false;\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228754,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class fVNCpLR extends AbstractTestCase {\n\n    \n    private boolean privateTrue = true;\n\n    private boolean privateFalse = false;\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        if (privateTrue) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (privateTrue) {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228756,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class pvwvCLS extends AbstractTestCase {\n\n    \n    private static final int PRIVATE_STATIC_FINAL_FIVE = 5;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        if (PRIVATE_STATIC_FINAL_FIVE != 5) {\n            \n            password = null;\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            \n            \n            password = \"Password1234!\";\n        } else {\n            \n            password = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n                try {\n                    \n                    connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                    preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                    resultSet = preparedStatement.executeQuery();\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n                } finally {\n                    try {\n                        if (resultSet != null) {\n                            resultSet.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                    }\n                    try {\n                        if (preparedStatement != null) {\n                            preparedStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (connection != null) {\n                            connection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n                try {\n                    \n                    connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                    preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                    resultSet = preparedStatement.executeQuery();\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n                } finally {\n                    try {\n                        if (resultSet != null) {\n                            resultSet.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                    }\n                    try {\n                        if (preparedStatement != null) {\n                            preparedStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (connection != null) {\n                            connection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228759,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class paaSSKi extends AbstractTestCase {\n\n    \n    private boolean privateReturnsTrue() {\n        return true;\n    }\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        if (privateReturnsTrue()) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (privateReturnsTrue()) {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228762,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class XlINCHR extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_TRUE) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228764,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class CwJUfcy extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        if (IO.staticFive == 5) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.staticFive == 5) {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228774,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class xIjKbjK extends AbstractTestCase {\n\n    \n    private boolean dWmGbZa = false;\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        dWmGbZa = true;\n        RYNMBky(password);\n    }\n\n    private void RYNMBky(String password) throws Throwable {\n        if (dWmGbZa) {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private boolean aRnSMVj = false;\n\n    private boolean aOWZSGn = false;\n\n    private boolean DBbhdbc = false;\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228782,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.util.logging.Level;\n\npublic class pbctxwo extends AbstractTestCase {\n\n    \n    public static boolean qRMEpGJ = false;\n\n    public void boNMSnT() throws Throwable {\n        String password = null;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        qRMEpGJ = true;\n        (new jArKsUP()).RYNMBky(password);\n    }\n\n    \n    public static boolean ydhDOMq = false;\n\n    public static boolean HHhrjCy = false;\n\n    public static boolean Pywwbtz = false;\n}\n\npublic class jArKsUP {\n\n    public void RYNMBky(String password) throws Throwable {\n        if (pbctxwo.qRMEpGJ) {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228784,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class hCkBmKs extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String passwordCopy;\n        {\n            String password;\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n            passwordCopy = password;\n        }\n        {\n            String password = passwordCopy;\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228786,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class DETgOTR extends AbstractTestCase {\n\n    private String gyxYJUG;\n\n    private String ciHMifC;\n\n    private String cgQdTaP;\n\n    private void RYNMBky() throws Throwable {\n        String password = gyxYJUG;\n        Connection connection = null;\n        PreparedStatement preparedStatement = null;\n        ResultSet resultSet = null;\n        try {\n            \n            connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n            preparedStatement = connection.prepareStatement(\"select * from test_table\");\n            resultSet = preparedStatement.executeQuery();\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (preparedStatement != null) {\n                    preparedStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        gyxYJUG = password;\n        RYNMBky();\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228792,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\n\npublic class TJQjZeC extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        (new qlIYAPp()).RYNMBky(password);\n    }\n}\n\npublic class nYusWvJ {\n\n    public void RYNMBky(String password) throws Throwable {\n        Connection connection = null;\n        PreparedStatement preparedStatement = null;\n        ResultSet resultSet = null;\n        try {\n            \n            connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n            preparedStatement = connection.prepareStatement(\"select * from test_table\");\n            resultSet = preparedStatement.executeQuery();\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (preparedStatement != null) {\n                    preparedStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n\npublic class pKVSDFm {\n\n    public void RYNMBky(String password) throws Throwable {\n        (new nYusWvJ()).RYNMBky(password);\n    }\n}\n\npublic class qlIYAPp {\n\n    public void RYNMBky(String password) throws Throwable {\n        (new pKVSDFm()).RYNMBky(password);\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228798,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\n\npublic class wOqIaaj extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        (new UIkDBgP()).RYNMBky(password);\n    }\n}\n\npublic class msQSHId {\n\n    public void RYNMBky(String password) throws Throwable {\n        (new shnGFWo()).RYNMBky(password);\n    }\n}\n\npublic class UIkDBgP {\n\n    public void RYNMBky(String password) throws Throwable {\n        (new EZRoZUJ()).RYNMBky(password);\n    }\n}\n\npublic class shnGFWo {\n\n    public void RYNMBky(String password) throws Throwable {\n        Connection connection = null;\n        PreparedStatement preparedStatement = null;\n        ResultSet resultSet = null;\n        try {\n            \n            connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n            preparedStatement = connection.prepareStatement(\"select * from test_table\");\n            resultSet = preparedStatement.executeQuery();\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (preparedStatement != null) {\n                    preparedStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n\npublic class EZRoZUJ {\n\n    public void RYNMBky(String password) throws Throwable {\n        (new msQSHId()).RYNMBky(password);\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228800,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.util.logging.Level;\n\npublic class TGHBTjO extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        String[] passwordArray = new String[5];\n        passwordArray[2] = password;\n        (new CBdeylT()).RYNMBky(passwordArray);\n    }\n}\n\npublic class CBdeylT {\n\n    public void RYNMBky(String[] passwordArray) throws Throwable {\n        String password = passwordArray[2];\n        Connection connection = null;\n        PreparedStatement preparedStatement = null;\n        ResultSet resultSet = null;\n        try {\n            \n            connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n            preparedStatement = connection.prepareStatement(\"select * from test_table\");\n            resultSet = preparedStatement.executeQuery();\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (preparedStatement != null) {\n                    preparedStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228804,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.util.Vector;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.util.logging.Level;\n\npublic class koVQpxh extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        Vector<String> passwordVector = new Vector<String>(5);\n        passwordVector.add(0, password);\n        passwordVector.add(1, password);\n        passwordVector.add(2, password);\n        (new EwRKdJl()).RYNMBky(passwordVector);\n    }\n}\n\npublic class EwRKdJl {\n\n    public void RYNMBky(Vector<String> passwordVector) throws Throwable {\n        String password = passwordVector.remove(2);\n        Connection connection = null;\n        PreparedStatement preparedStatement = null;\n        ResultSet resultSet = null;\n        try {\n            \n            connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n            preparedStatement = connection.prepareStatement(\"select * from test_table\");\n            resultSet = preparedStatement.executeQuery();\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (preparedStatement != null) {\n                    preparedStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228812,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.util.HashMap;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.util.logging.Level;\n\npublic class poailrL extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        HashMap<Integer, String> passwordHashMap = new HashMap<Integer, String>();\n        passwordHashMap.put(0, password);\n        passwordHashMap.put(1, password);\n        passwordHashMap.put(2, password);\n        (new QgNFpTF()).RYNMBky(passwordHashMap);\n    }\n}\n\npublic class QgNFpTF {\n\n    public void RYNMBky(HashMap<Integer, String> passwordHashMap) throws Throwable {\n        String password = passwordHashMap.get(2);\n        Connection connection = null;\n        PreparedStatement preparedStatement = null;\n        ResultSet resultSet = null;\n        try {\n            \n            connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n            preparedStatement = connection.prepareStatement(\"select * from test_table\");\n            resultSet = preparedStatement.executeQuery();\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (preparedStatement != null) {\n                    preparedStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228816,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.ByteArrayInputStream;\nimport java.io.ObjectInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class oiQWVNJ extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        \n        ByteArrayOutputStream streamByteArrayOutput = null;\n        ObjectOutput outputObject = null;\n        try {\n            streamByteArrayOutput = new ByteArrayOutputStream();\n            outputObject = new ObjectOutputStream(streamByteArrayOutput);\n            outputObject.writeObject(password);\n            byte[] passwordSerialized = streamByteArrayOutput.toByteArray();\n            (new YOyHwrf()).RYNMBky(passwordSerialized);\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"IQdccST\", exceptIO);\n        } finally {\n            \n            try {\n                if (outputObject != null) {\n                    outputObject.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"LgADWEx\", exceptIO);\n            }\n            try {\n                if (streamByteArrayOutput != null) {\n                    streamByteArrayOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"vFutZps\", exceptIO);\n            }\n        }\n    }\n}\n\npublic class YOyHwrf {\n\n    public void RYNMBky(byte[] passwordSerialized) throws Throwable {\n        \n        ByteArrayInputStream streamByteArrayInput = null;\n        ObjectInputStream streamObjectInput = null;\n        try {\n            streamByteArrayInput = new ByteArrayInputStream(passwordSerialized);\n            streamObjectInput = new ObjectInputStream(streamByteArrayInput);\n            String password = (String) streamObjectInput.readObject();\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VcFIKxo\", exceptIO);\n        } catch (ClassNotFoundException exceptClassNotFound) {\n            IO.logger.log(Level.WARNING, \"XOCCPfT\", exceptClassNotFound);\n        } finally {\n            \n            try {\n                if (streamObjectInput != null) {\n                    streamObjectInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"kpDMUXH\", exceptIO);\n            }\n            try {\n                if (streamByteArrayInput != null) {\n                    streamByteArrayInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"oiWyzFb\", exceptIO);\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228818,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class VYunYND extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        if (5 == 5) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (5 == 5) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228824,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class yeAlRFF extends AbstractTestCase {\n\n    \n    private static final int PRIVATE_STATIC_FINAL_FIVE = 5;\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228830,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class yeAlRFF extends AbstractTestCase {\n\n    \n    private static final int PRIVATE_STATIC_FINAL_FIVE = 5;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        if (PRIVATE_STATIC_FINAL_FIVE != 5) {\n            \n            password = null;\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            \n            \n            password = \"Password1234!\";\n        } else {\n            \n            password = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228831,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class ehCoEyi extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        if (IO.staticTrue) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.staticTrue) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228838,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class bQWnEEG extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        if (IO.staticFive == 5) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.staticFive == 5) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228846,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class cGahifO extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        while (true) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n            break;\n        }\n        while (true) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n            break;\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228850,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class MQdiFta extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        \n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        for (int j = 0; j < 1; j++) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228852,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class ULEiyrs extends AbstractTestCase {\n\n    \n    private boolean dWmGbZa = false;\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        dWmGbZa = true;\n        RYNMBky(password);\n    }\n\n    private void RYNMBky(String password) throws Throwable {\n        if (dWmGbZa) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private boolean aRnSMVj = false;\n\n    private boolean aOWZSGn = false;\n\n    private boolean DBbhdbc = false;\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228854,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class wteWuqr extends AbstractTestCase {\n\n    \n    public static boolean qRMEpGJ = false;\n\n    public void boNMSnT() throws Throwable {\n        String password = null;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        qRMEpGJ = true;\n        (new PhYnygf()).RYNMBky(password);\n    }\n\n    \n    public static boolean ydhDOMq = false;\n\n    public static boolean HHhrjCy = false;\n\n    public static boolean Pywwbtz = false;\n}\n\npublic class PhYnygf {\n\n    public void RYNMBky(String password) throws Throwable {\n        if (wteWuqr.qRMEpGJ) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        } else {\n            \n            password = null;\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228856,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class CBjOATK extends AbstractTestCase {\n\n    private String ImBBndW() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        return password;\n    }\n\n    public void boNMSnT() throws Throwable {\n        String password = ImBBndW();\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228862,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class IBXXphT extends AbstractTestCase {\n\n    private String gyxYJUG;\n\n    private String ciHMifC;\n\n    private String cgQdTaP;\n\n    private void RYNMBky() throws Throwable {\n        String password = gyxYJUG;\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        gyxYJUG = password;\n        RYNMBky();\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228864,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\n\npublic class TEOISTx extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        (new jnEHolH()).RYNMBky(password);\n    }\n}\n\npublic class jnEHolH {\n\n    public void RYNMBky(String password) throws Throwable {\n        (new JRSbbwL()).RYNMBky(password);\n    }\n}\n\npublic class JRSbbwL {\n\n    public void RYNMBky(String password) throws Throwable {\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228868,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\n\npublic class FCCTrul extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        (new ZNPjhOs()).RYNMBky(password);\n    }\n}\n\npublic class ZNPjhOs {\n\n    public void RYNMBky(String password) throws Throwable {\n        (new JSCCLcQ()).RYNMBky(password);\n    }\n}\n\npublic class SWJWduS {\n\n    public void RYNMBky(String password) throws Throwable {\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n}\n\npublic class JSCCLcQ {\n\n    public void RYNMBky(String password) throws Throwable {\n        (new SWJWduS()).RYNMBky(password);\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228870,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class tFdpmBN extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        (new HzWsWaD()).RYNMBky(password);\n    }\n}\n\npublic class sVwjmKk {\n\n    public void RYNMBky(String password) throws Throwable {\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n}\n\npublic class XgUdRWD {\n\n    public void RYNMBky(String password) throws Throwable {\n        (new OdEejmu()).RYNMBky(password);\n    }\n}\n\npublic class OdEejmu {\n\n    public void RYNMBky(String password) throws Throwable {\n        (new sVwjmKk()).RYNMBky(password);\n    }\n}\n\npublic class HzWsWaD {\n\n    public void RYNMBky(String password) throws Throwable {\n        (new XgUdRWD()).RYNMBky(password);\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228872,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\n\npublic class gCPFVXX {\n\n    \n    public void fDqjRYE(String[] passwordArray) throws Throwable {\n        String password = passwordArray[2];\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n\n    \n    public void KgJSeXB(String[] passwordArray) throws Throwable {\n        String password = passwordArray[2];\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            {\n                Cipher aesCipher = Cipher.getInstance(\"AES\");\n                \n                SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n            }\n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n}\n\npublic class gqSsbdB extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String password;\n        \n        \n        password = \"Password1234!\";\n        String[] passwordArray = new String[5];\n        passwordArray[2] = password;\n        (new gCPFVXX()).fDqjRYE(passwordArray);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        String[] passwordArray = new String[5];\n        passwordArray[2] = password;\n        (new gCPFVXX()).KgJSeXB(passwordArray);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228877,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class LdFrUas {\n\n    \n    public void fDqjRYE() throws Throwable {\n        String password = dQSsHhW.password;\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n\n    \n    public void KgJSeXB() throws Throwable {\n        String password = dQSsHhW.password;\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            {\n                Cipher aesCipher = Cipher.getInstance(\"AES\");\n                \n                SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n            }\n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n}\n\npublic class dQSsHhW extends AbstractTestCase {\n\n    public static String password;\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        \n        \n        password = \"Password1234!\";\n        (new LdFrUas()).fDqjRYE();\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        (new LdFrUas()).KgJSeXB();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228881,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.util.Vector;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class EEzxzMD extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        Vector<String> passwordVector = new Vector<String>(5);\n        passwordVector.add(0, password);\n        passwordVector.add(1, password);\n        passwordVector.add(2, password);\n        (new XwcmeFx()).RYNMBky(passwordVector);\n    }\n}\n\npublic class XwcmeFx {\n\n    public void RYNMBky(Vector<String> passwordVector) throws Throwable {\n        String password = passwordVector.remove(2);\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228884,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.util.HashMap;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class SiklAuL extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        HashMap<Integer, String> passwordHashMap = new HashMap<Integer, String>();\n        passwordHashMap.put(0, password);\n        passwordHashMap.put(1, password);\n        passwordHashMap.put(2, password);\n        (new ROVJhJZ()).RYNMBky(passwordHashMap);\n    }\n}\n\npublic class ROVJhJZ {\n\n    public void RYNMBky(HashMap<Integer, String> passwordHashMap) throws Throwable {\n        String password = passwordHashMap.get(2);\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228888,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class ylYdBId extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        if (true) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (true) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228894,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class mfrzsdv extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        switch(6) {\n            case 6:\n                password = \"\";\n                \n                \n                {\n                    URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                    BufferedReader readerBuffered = null;\n                    InputStreamReader readerInputStream = null;\n                    try {\n                        readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                        readerBuffered = new BufferedReader(readerInputStream);\n                        \n                        \n                        password = readerBuffered.readLine();\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                    } finally {\n                        \n                        try {\n                            if (readerBuffered != null) {\n                                readerBuffered.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                        }\n                        try {\n                            if (readerInputStream != null) {\n                                readerInputStream.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                password = null;\n                break;\n        }\n        switch(7) {\n            case 7:\n                if (password != null) {\n                    \n                    PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                    IO.writeLine(credentials.toString());\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228920,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class mfrzsdv extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        switch(5) {\n            case 6:\n                \n                password = null;\n                break;\n            default:\n                \n                \n                password = \"Password1234!\";\n                break;\n        }\n        switch(7) {\n            case 7:\n                if (password != null) {\n                    \n                    PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                    IO.writeLine(credentials.toString());\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        switch(6) {\n            case 6:\n                \n                \n                password = \"Password1234!\";\n                break;\n            default:\n                \n                password = null;\n                break;\n        }\n        switch(7) {\n            case 7:\n                if (password != null) {\n                    \n                    PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                    IO.writeLine(credentials.toString());\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        switch(6) {\n            case 6:\n                password = \"\";\n                \n                \n                {\n                    URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                    BufferedReader readerBuffered = null;\n                    InputStreamReader readerInputStream = null;\n                    try {\n                        readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                        readerBuffered = new BufferedReader(readerInputStream);\n                        \n                        \n                        password = readerBuffered.readLine();\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                    } finally {\n                        \n                        try {\n                            if (readerBuffered != null) {\n                                readerBuffered.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                        }\n                        try {\n                            if (readerInputStream != null) {\n                                readerInputStream.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                password = null;\n                break;\n        }\n        switch(8) {\n            case 7:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n            default:\n                if (password != null) {\n                    \n                    {\n                        Cipher aesCipher = Cipher.getInstance(\"AES\");\n                        \n                        SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                        aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                        password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                    }\n                    PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                    IO.writeLine(credentials.toString());\n                }\n                break;\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        switch(6) {\n            case 6:\n                password = \"\";\n                \n                \n                {\n                    URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                    BufferedReader readerBuffered = null;\n                    InputStreamReader readerInputStream = null;\n                    try {\n                        readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                        readerBuffered = new BufferedReader(readerInputStream);\n                        \n                        \n                        password = readerBuffered.readLine();\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                    } finally {\n                        \n                        try {\n                            if (readerBuffered != null) {\n                                readerBuffered.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                        }\n                        try {\n                            if (readerInputStream != null) {\n                                readerInputStream.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                password = null;\n                break;\n        }\n        switch(7) {\n            case 7:\n                if (password != null) {\n                    \n                    {\n                        Cipher aesCipher = Cipher.getInstance(\"AES\");\n                        \n                        SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                        aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                        password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                    }\n                    PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                    IO.writeLine(credentials.toString());\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228921,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class zCGgjiM extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        while (true) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n            break;\n        }\n        while (true) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n            break;\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228922,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class zCGgjiM extends AbstractTestCase {\n\n    \n    private void EXrOlJC() throws Throwable {\n        String password;\n        while (true) {\n            \n            \n            password = \"Password1234!\";\n            break;\n        }\n        while (true) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n            break;\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String password;\n        while (true) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n            break;\n        }\n        while (true) {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n            break;\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228923,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class lhLUpdO extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String passwordCopy;\n        {\n            String password;\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n            passwordCopy = password;\n        }\n        {\n            String password = passwordCopy;\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228930,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class oBrAhDK extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    private void fDqjRYE(String password) throws Throwable {\n        if (password != null) {\n            \n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n            IO.writeLine(credentials.toString());\n        }\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String password;\n        \n        \n        password = \"Password1234!\";\n        fDqjRYE(password);\n    }\n\n    private void KgJSeXB(String password) throws Throwable {\n        if (password != null) {\n            \n            {\n                Cipher aesCipher = Cipher.getInstance(\"AES\");\n                \n                SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n            }\n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n            IO.writeLine(credentials.toString());\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        KgJSeXB(password);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228933,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\n\npublic class mpTTHLC extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        (new KJRBYGl()).RYNMBky(password);\n    }\n}\n\npublic class KJRBYGl {\n\n    public void RYNMBky(String password) throws Throwable {\n        if (password != null) {\n            \n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n            IO.writeLine(credentials.toString());\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228938,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class WMDDiKQ extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        (new flNaCwF()).RYNMBky(password);\n    }\n}\n\npublic class fWtHOWn {\n\n    public void RYNMBky(String password) throws Throwable {\n        if (password != null) {\n            \n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n            IO.writeLine(credentials.toString());\n        }\n    }\n}\n\npublic class flNaCwF {\n\n    public void RYNMBky(String password) throws Throwable {\n        (new lQnVRQH()).RYNMBky(password);\n    }\n}\n\npublic class JnHjHkJ {\n\n    public void RYNMBky(String password) throws Throwable {\n        (new fWtHOWn()).RYNMBky(password);\n    }\n}\n\npublic class lQnVRQH {\n\n    public void RYNMBky(String password) throws Throwable {\n        (new JnHjHkJ()).RYNMBky(password);\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228944,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.util.HashMap;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\n\npublic class qcjNRyQ extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        HashMap<Integer, String> passwordHashMap = new HashMap<Integer, String>();\n        passwordHashMap.put(0, password);\n        passwordHashMap.put(1, password);\n        passwordHashMap.put(2, password);\n        (new OOLjVKw()).RYNMBky(passwordHashMap);\n    }\n}\n\npublic class OOLjVKw {\n\n    public void RYNMBky(HashMap<Integer, String> passwordHashMap) throws Throwable {\n        String password = passwordHashMap.get(2);\n        if (password != null) {\n            \n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n            IO.writeLine(credentials.toString());\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228960,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectOutput;\nimport java.io.ObjectOutputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.net.URL;\nimport java.net.URLConnection;\n\npublic class cKrQTdS extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        \n        ByteArrayOutputStream streamByteArrayOutput = null;\n        ObjectOutput outputObject = null;\n        try {\n            streamByteArrayOutput = new ByteArrayOutputStream();\n            outputObject = new ObjectOutputStream(streamByteArrayOutput);\n            outputObject.writeObject(password);\n            byte[] passwordSerialized = streamByteArrayOutput.toByteArray();\n            (new GKlCVzP()).RYNMBky(passwordSerialized);\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"IQdccST\", exceptIO);\n        } finally {\n            \n            try {\n                if (outputObject != null) {\n                    outputObject.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"LgADWEx\", exceptIO);\n            }\n            try {\n                if (streamByteArrayOutput != null) {\n                    streamByteArrayOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"vFutZps\", exceptIO);\n            }\n        }\n    }\n}\n\npublic class GKlCVzP {\n\n    public void RYNMBky(byte[] passwordSerialized) throws Throwable {\n        \n        ByteArrayInputStream streamByteArrayInput = null;\n        ObjectInputStream streamObjectInput = null;\n        try {\n            streamByteArrayInput = new ByteArrayInputStream(passwordSerialized);\n            streamObjectInput = new ObjectInputStream(streamByteArrayInput);\n            String password = (String) streamObjectInput.readObject();\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VcFIKxo\", exceptIO);\n        } catch (ClassNotFoundException exceptClassNotFound) {\n            IO.logger.log(Level.WARNING, \"XOCCPfT\", exceptClassNotFound);\n        } finally {\n            \n            try {\n                if (streamObjectInput != null) {\n                    streamObjectInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"kpDMUXH\", exceptIO);\n            }\n            try {\n                if (streamByteArrayInput != null) {\n                    streamByteArrayInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"oiWyzFb\", exceptIO);\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228962,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class DVuMJhW extends AbstractTestCase {\n\n    \n    private static final boolean PRIVATE_STATIC_FINAL_TRUE = true;\n\n    private static final boolean PRIVATE_STATIC_FINAL_FALSE = false;\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228970,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class EVzEwUu extends AbstractTestCase {\n\n    \n    private static final int PRIVATE_STATIC_FINAL_FIVE = 5;\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228974,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class BwPVQke extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        if (IO.staticTrue) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.staticTrue) {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228982,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class hgGUqnx extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        if (IO.staticReturnsFalse()) {\n            \n            password = null;\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (IO.staticReturnsTrue()) {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        if (IO.staticReturnsTrue()) {\n            \n            \n            password = \"Password1234!\";\n        } else {\n            \n            password = null;\n        }\n        if (IO.staticReturnsTrue()) {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        if (IO.staticReturnsTrue()) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.staticReturnsFalse()) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n                try {\n                    \n                    connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                    preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                    resultSet = preparedStatement.executeQuery();\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n                } finally {\n                    try {\n                        if (resultSet != null) {\n                            resultSet.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                    }\n                    try {\n                        if (preparedStatement != null) {\n                            preparedStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (connection != null) {\n                            connection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        if (IO.staticReturnsTrue()) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.staticReturnsTrue()) {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n                try {\n                    \n                    connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                    preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                    resultSet = preparedStatement.executeQuery();\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n                } finally {\n                    try {\n                        if (resultSet != null) {\n                            resultSet.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                    }\n                    try {\n                        if (preparedStatement != null) {\n                            preparedStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (connection != null) {\n                            connection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228985,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class HlkIxIt extends AbstractTestCase {\n\n    private void RYNMBky(String password) throws Throwable {\n        Connection connection = null;\n        PreparedStatement preparedStatement = null;\n        ResultSet resultSet = null;\n        try {\n            \n            connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n            preparedStatement = connection.prepareStatement(\"select * from test_table\");\n            resultSet = preparedStatement.executeQuery();\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (preparedStatement != null) {\n                    preparedStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        RYNMBky(password);\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229004,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class KmOGfnz extends AbstractTestCase {\n\n    private String gyxYJUG;\n\n    private String ciHMifC;\n\n    private String cgQdTaP;\n\n    private void RYNMBky() throws Throwable {\n        String password = gyxYJUG;\n        Connection connection = null;\n        PreparedStatement preparedStatement = null;\n        ResultSet resultSet = null;\n        try {\n            \n            connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n            preparedStatement = connection.prepareStatement(\"select * from test_table\");\n            resultSet = preparedStatement.executeQuery();\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (preparedStatement != null) {\n                    preparedStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        gyxYJUG = password;\n        RYNMBky();\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229008,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\n\npublic class TAUIqAR extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        (new eaofvUd()).RYNMBky(password);\n    }\n}\n\npublic class eaofvUd {\n\n    public void RYNMBky(String password) throws Throwable {\n        Connection connection = null;\n        PreparedStatement preparedStatement = null;\n        ResultSet resultSet = null;\n        try {\n            \n            connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n            preparedStatement = connection.prepareStatement(\"select * from test_table\");\n            resultSet = preparedStatement.executeQuery();\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (preparedStatement != null) {\n                    preparedStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229010,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.util.logging.Level;\n\npublic class oPgBgMv extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        (new iQrKYgU()).RYNMBky(password);\n    }\n}\n\npublic class YmgKdGz {\n\n    public void RYNMBky(String password) throws Throwable {\n        Connection connection = null;\n        PreparedStatement preparedStatement = null;\n        ResultSet resultSet = null;\n        try {\n            \n            connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n            preparedStatement = connection.prepareStatement(\"select * from test_table\");\n            resultSet = preparedStatement.executeQuery();\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (preparedStatement != null) {\n                    preparedStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n\npublic class iQrKYgU {\n\n    public void RYNMBky(String password) throws Throwable {\n        (new AKNcwEf()).RYNMBky(password);\n    }\n}\n\npublic class AKNcwEf {\n\n    public void RYNMBky(String password) throws Throwable {\n        (new YmgKdGz()).RYNMBky(password);\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229014,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.util.logging.Level;\n\npublic class FidhniK extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        (new zogExSc()).RYNMBky(password);\n    }\n}\n\npublic class ZCNFYMM {\n\n    public void RYNMBky(String password) throws Throwable {\n        Connection connection = null;\n        PreparedStatement preparedStatement = null;\n        ResultSet resultSet = null;\n        try {\n            \n            connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n            preparedStatement = connection.prepareStatement(\"select * from test_table\");\n            resultSet = preparedStatement.executeQuery();\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (preparedStatement != null) {\n                    preparedStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n\npublic class zogExSc {\n\n    public void RYNMBky(String password) throws Throwable {\n        (new NkEyukB()).RYNMBky(password);\n    }\n}\n\npublic class NkEyukB {\n\n    public void RYNMBky(String password) throws Throwable {\n        (new chNRhuZ()).RYNMBky(password);\n    }\n}\n\npublic class chNRhuZ {\n\n    public void RYNMBky(String password) throws Throwable {\n        (new ZCNFYMM()).RYNMBky(password);\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229016,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.util.logging.Level;\n\npublic class ZCNFYMM {\n\n    \n    public void fDqjRYE(String password) throws Throwable {\n        Connection connection = null;\n        PreparedStatement preparedStatement = null;\n        ResultSet resultSet = null;\n        try {\n            \n            connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n            preparedStatement = connection.prepareStatement(\"select * from test_table\");\n            resultSet = preparedStatement.executeQuery();\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (preparedStatement != null) {\n                    preparedStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    public void KgJSeXB(String password) throws Throwable {\n        if (password != null) {\n            \n            {\n                Cipher aesCipher = Cipher.getInstance(\"AES\");\n                \n                SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n            }\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n\npublic class zogExSc {\n\n    \n    public void fDqjRYE(String password) throws Throwable {\n        (new NkEyukB()).fDqjRYE(password);\n    }\n\n    \n    public void KgJSeXB(String password) throws Throwable {\n        (new NkEyukB()).KgJSeXB(password);\n    }\n}\n\npublic class NkEyukB {\n\n    \n    public void fDqjRYE(String password) throws Throwable {\n        (new chNRhuZ()).fDqjRYE(password);\n    }\n\n    \n    public void KgJSeXB(String password) throws Throwable {\n        (new chNRhuZ()).KgJSeXB(password);\n    }\n}\n\npublic class chNRhuZ {\n\n    \n    public void fDqjRYE(String password) throws Throwable {\n        (new ZCNFYMM()).fDqjRYE(password);\n    }\n\n    \n    public void KgJSeXB(String password) throws Throwable {\n        (new ZCNFYMM()).KgJSeXB(password);\n    }\n}\n\npublic class FidhniK extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String password;\n        \n        \n        password = \"Password1234!\";\n        (new zogExSc()).fDqjRYE(password);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        (new zogExSc()).KgJSeXB(password);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229017,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.util.logging.Level;\n\npublic class hOKPnnx extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        (new sRMqmel()).RYNMBky((Object) password);\n    }\n}\n\npublic class sRMqmel {\n\n    public void RYNMBky(Object passwordObject) throws Throwable {\n        String password = (String) passwordObject;\n        Connection connection = null;\n        PreparedStatement preparedStatement = null;\n        ResultSet resultSet = null;\n        try {\n            \n            connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n            preparedStatement = connection.prepareStatement(\"select * from test_table\");\n            resultSet = preparedStatement.executeQuery();\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (preparedStatement != null) {\n                    preparedStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229026,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.util.HashMap;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\n\npublic class JKVKMTV extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        HashMap<Integer, String> passwordHashMap = new HashMap<Integer, String>();\n        passwordHashMap.put(0, password);\n        passwordHashMap.put(1, password);\n        passwordHashMap.put(2, password);\n        (new hELDirL()).RYNMBky(passwordHashMap);\n    }\n}\n\npublic class hELDirL {\n\n    public void RYNMBky(HashMap<Integer, String> passwordHashMap) throws Throwable {\n        String password = passwordHashMap.get(2);\n        Connection connection = null;\n        PreparedStatement preparedStatement = null;\n        ResultSet resultSet = null;\n        try {\n            \n            connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n            preparedStatement = connection.prepareStatement(\"select * from test_table\");\n            resultSet = preparedStatement.executeQuery();\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (preparedStatement != null) {\n                    preparedStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229032,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class oyVzIBf extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229036,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class eVaKBLM extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        if (true) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (true) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229038,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class SCTeCJO extends AbstractTestCase {\n\n    \n    private static final boolean PRIVATE_STATIC_FINAL_TRUE = true;\n\n    private static final boolean PRIVATE_STATIC_FINAL_FALSE = false;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        if (PRIVATE_STATIC_FINAL_FALSE) {\n            \n            password = null;\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            \n            \n            password = \"Password1234!\";\n        } else {\n            \n            password = null;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FALSE) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229043,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class VUYGqic extends AbstractTestCase {\n\n    \n    private int privateFive = 5;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        if (privateFive != 5) {\n            \n            password = null;\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (privateFive == 5) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        if (privateFive == 5) {\n            \n            \n            password = \"Password1234!\";\n        } else {\n            \n            password = null;\n        }\n        if (privateFive == 5) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        if (privateFive == 5) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (privateFive != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        if (privateFive == 5) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (privateFive == 5) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229049,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class QkOPguV extends AbstractTestCase {\n\n    \n    private boolean privateReturnsTrue() {\n        return true;\n    }\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        if (privateReturnsTrue()) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (privateReturnsTrue()) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229050,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class XyTVhMw extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_TRUE) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229052,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class IpCpXXz extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        if (IO.staticReturnsTrue()) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.staticReturnsTrue()) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229056,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class IpCpXXz extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        if (IO.staticReturnsFalse()) {\n            \n            password = null;\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (IO.staticReturnsTrue()) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        if (IO.staticReturnsTrue()) {\n            \n            \n            password = \"Password1234!\";\n        } else {\n            \n            password = null;\n        }\n        if (IO.staticReturnsTrue()) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        if (IO.staticReturnsTrue()) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.staticReturnsFalse()) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        if (IO.staticReturnsTrue()) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.staticReturnsTrue()) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229057,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class xSeYTrE extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        while (true) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n            break;\n        }\n        while (true) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n            break;\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229066,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class owkGQqd extends AbstractTestCase {\n\n    \n    private boolean dWmGbZa = false;\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        dWmGbZa = true;\n        RYNMBky(password);\n    }\n\n    private void RYNMBky(String password) throws Throwable {\n        if (dWmGbZa) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private boolean aRnSMVj = false;\n\n    private boolean aOWZSGn = false;\n\n    private boolean DBbhdbc = false;\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229070,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class RNTqAQL extends AbstractTestCase {\n\n    private String ImBBndW() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        return password;\n    }\n\n    public void boNMSnT() throws Throwable {\n        String password = ImBBndW();\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229078,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class avQlOAx extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        (new OuGSSiM()).RYNMBky(password);\n    }\n}\n\npublic class OuGSSiM {\n\n    public void RYNMBky(String password) throws Throwable {\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229082,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\n\npublic class CouBxgI extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        String[] passwordArray = new String[5];\n        passwordArray[2] = password;\n        (new yKyrPnz()).RYNMBky(passwordArray);\n    }\n}\n\npublic class yKyrPnz {\n\n    public void RYNMBky(String[] passwordArray) throws Throwable {\n        String password = passwordArray[2];\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229092,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\n\npublic class SvYhuvf extends AbstractTestCase {\n\n    static class Container {\n\n        public String containerOne;\n    }\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        Container passwordContainer = new Container();\n        passwordContainer.containerOne = password;\n        (new NmLNKQK()).RYNMBky(passwordContainer);\n    }\n}\n\npublic class NmLNKQK {\n\n    public void RYNMBky(SvYhuvf.Container passwordContainer) throws Throwable {\n        String password = passwordContainer.containerOne;\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229094,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class jNBbuDQ extends AbstractTestCase {\n\n    public static String password;\n\n    public void boNMSnT() throws Throwable {\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        (new hWnpdap()).RYNMBky();\n    }\n}\n\npublic class hWnpdap {\n\n    public void RYNMBky() throws Throwable {\n        String password = jNBbuDQ.password;\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229096,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.util.Vector;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class kZIviwf extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        Vector<String> passwordVector = new Vector<String>(5);\n        passwordVector.add(0, password);\n        passwordVector.add(1, password);\n        passwordVector.add(2, password);\n        (new phCSPhR()).RYNMBky(passwordVector);\n    }\n}\n\npublic class phCSPhR {\n\n    public void RYNMBky(Vector<String> passwordVector) throws Throwable {\n        String password = passwordVector.remove(2);\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229100,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectOutput;\nimport java.io.ObjectOutputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.net.Socket;\n\npublic class cKHuWHL extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        \n        ByteArrayOutputStream streamByteArrayOutput = null;\n        ObjectOutput outputObject = null;\n        try {\n            streamByteArrayOutput = new ByteArrayOutputStream();\n            outputObject = new ObjectOutputStream(streamByteArrayOutput);\n            outputObject.writeObject(password);\n            byte[] passwordSerialized = streamByteArrayOutput.toByteArray();\n            (new xrNoeUW()).RYNMBky(passwordSerialized);\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"IQdccST\", exceptIO);\n        } finally {\n            \n            try {\n                if (outputObject != null) {\n                    outputObject.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"LgADWEx\", exceptIO);\n            }\n            try {\n                if (streamByteArrayOutput != null) {\n                    streamByteArrayOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"vFutZps\", exceptIO);\n            }\n        }\n    }\n}\n\npublic class xrNoeUW {\n\n    public void RYNMBky(byte[] passwordSerialized) throws Throwable {\n        \n        ByteArrayInputStream streamByteArrayInput = null;\n        ObjectInputStream streamObjectInput = null;\n        try {\n            streamByteArrayInput = new ByteArrayInputStream(passwordSerialized);\n            streamObjectInput = new ObjectInputStream(streamByteArrayInput);\n            String password = (String) streamObjectInput.readObject();\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VcFIKxo\", exceptIO);\n        } catch (ClassNotFoundException exceptClassNotFound) {\n            IO.logger.log(Level.WARNING, \"XOCCPfT\", exceptClassNotFound);\n        } finally {\n            \n            try {\n                if (streamObjectInput != null) {\n                    streamObjectInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"kpDMUXH\", exceptIO);\n            }\n            try {\n                if (streamByteArrayInput != null) {\n                    streamByteArrayInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"oiWyzFb\", exceptIO);\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229106,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class DVQpOjs extends AbstractTestCase {\n\n    \n    private static final boolean PRIVATE_STATIC_FINAL_TRUE = true;\n\n    private static final boolean PRIVATE_STATIC_FINAL_FALSE = false;\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229114,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class UmVtBMt extends AbstractTestCase {\n\n    \n    private boolean privateTrue = true;\n\n    private boolean privateFalse = false;\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        if (privateTrue) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (privateTrue) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229116,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class eXijCFH extends AbstractTestCase {\n\n    \n    private static final int PRIVATE_STATIC_FINAL_FIVE = 5;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        if (PRIVATE_STATIC_FINAL_FIVE != 5) {\n            \n            password = null;\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            \n            \n            password = \"Password1234!\";\n        } else {\n            \n            password = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229119,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class FvBckte extends AbstractTestCase {\n\n    \n    private int privateFive = 5;\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        if (privateFive == 5) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (privateFive == 5) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229120,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class eNaoTip extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        if (IO.staticTrue) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.staticTrue) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229126,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class eNaoTip extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        if (IO.staticFalse) {\n            \n            password = null;\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (IO.staticTrue) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        if (IO.staticTrue) {\n            \n            \n            password = \"Password1234!\";\n        } else {\n            \n            password = null;\n        }\n        if (IO.staticTrue) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        if (IO.staticTrue) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.staticFalse) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        if (IO.staticTrue) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.staticTrue) {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229127,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class wOralhE extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        if (IO.staticReturnsTrue()) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.staticReturnsTrue()) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229128,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class htRfnbe extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        switch(5) {\n            case 6:\n                \n                password = null;\n                break;\n            default:\n                \n                \n                password = \"Password1234!\";\n                break;\n        }\n        switch(7) {\n            case 7:\n                if (password != null) {\n                    \n                    PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                    IO.writeLine(credentials.toString());\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        switch(6) {\n            case 6:\n                \n                \n                password = \"Password1234!\";\n                break;\n            default:\n                \n                password = null;\n                break;\n        }\n        switch(7) {\n            case 7:\n                if (password != null) {\n                    \n                    PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                    IO.writeLine(credentials.toString());\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        switch(6) {\n            case 6:\n                password = \"\";\n                \n                \n                {\n                    Socket socket = null;\n                    BufferedReader readerBuffered = null;\n                    InputStreamReader readerInputStream = null;\n                    try {\n                        \n                        socket = new Socket(\"host.example.org\", 39544);\n                        \n                        \n                        readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                        readerBuffered = new BufferedReader(readerInputStream);\n                        password = readerBuffered.readLine();\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                    } finally {\n                        \n                        try {\n                            if (readerBuffered != null) {\n                                readerBuffered.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                        }\n                        try {\n                            if (readerInputStream != null) {\n                                readerInputStream.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                        }\n                        \n                        try {\n                            if (socket != null) {\n                                socket.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                password = null;\n                break;\n        }\n        switch(8) {\n            case 7:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n            default:\n                if (password != null) {\n                    \n                    {\n                        Cipher aesCipher = Cipher.getInstance(\"AES\");\n                        \n                        SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                        aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                        password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                    }\n                    PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                    IO.writeLine(credentials.toString());\n                }\n                break;\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        switch(6) {\n            case 6:\n                password = \"\";\n                \n                \n                {\n                    Socket socket = null;\n                    BufferedReader readerBuffered = null;\n                    InputStreamReader readerInputStream = null;\n                    try {\n                        \n                        socket = new Socket(\"host.example.org\", 39544);\n                        \n                        \n                        readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                        readerBuffered = new BufferedReader(readerInputStream);\n                        password = readerBuffered.readLine();\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                    } finally {\n                        \n                        try {\n                            if (readerBuffered != null) {\n                                readerBuffered.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                        }\n                        try {\n                            if (readerInputStream != null) {\n                                readerInputStream.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                        }\n                        \n                        try {\n                            if (socket != null) {\n                                socket.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                password = null;\n                break;\n        }\n        switch(7) {\n            case 7:\n                if (password != null) {\n                    \n                    {\n                        Cipher aesCipher = Cipher.getInstance(\"AES\");\n                        \n                        SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                        aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                        password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                    }\n                    PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                    IO.writeLine(credentials.toString());\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229137,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class IJKxkBC extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        while (true) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n            break;\n        }\n        while (true) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n            break;\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229138,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class bqhndLE extends AbstractTestCase {\n\n    private String ImBBndW() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        return password;\n    }\n\n    public void boNMSnT() throws Throwable {\n        String password = ImBBndW();\n        if (password != null) {\n            \n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n            IO.writeLine(credentials.toString());\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229150,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class BSlxGUo extends AbstractTestCase {\n\n    private String gyxYJUG;\n\n    private String ciHMifC;\n\n    private String cgQdTaP;\n\n    private void RYNMBky() throws Throwable {\n        String password = gyxYJUG;\n        if (password != null) {\n            \n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n            IO.writeLine(credentials.toString());\n        }\n    }\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        gyxYJUG = password;\n        RYNMBky();\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229152,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class hPXNkLY extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        (new pIKeWXA()).RYNMBky(password);\n    }\n}\n\npublic class uGCamfz {\n\n    public void RYNMBky(String password) throws Throwable {\n        if (password != null) {\n            \n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n            IO.writeLine(credentials.toString());\n        }\n    }\n}\n\npublic class pIKeWXA {\n\n    public void RYNMBky(String password) throws Throwable {\n        (new rhhvMsy()).RYNMBky(password);\n    }\n}\n\npublic class rhhvMsy {\n\n    public void RYNMBky(String password) throws Throwable {\n        (new uGCamfz()).RYNMBky(password);\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229158,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.util.HashMap;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class YvTgPuY extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        HashMap<Integer, String> passwordHashMap = new HashMap<Integer, String>();\n        passwordHashMap.put(0, password);\n        passwordHashMap.put(1, password);\n        passwordHashMap.put(2, password);\n        (new yiHtabT()).RYNMBky(passwordHashMap);\n    }\n}\n\npublic class yiHtabT {\n\n    public void RYNMBky(HashMap<Integer, String> passwordHashMap) throws Throwable {\n        String password = passwordHashMap.get(2);\n        if (password != null) {\n            \n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n            IO.writeLine(credentials.toString());\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229176,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.util.HashMap;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class yiHtabT {\n\n    \n    public void fDqjRYE(HashMap<Integer, String> passwordHashMap) throws Throwable {\n        String password = passwordHashMap.get(2);\n        if (password != null) {\n            \n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n            IO.writeLine(credentials.toString());\n        }\n    }\n\n    \n    public void KgJSeXB(HashMap<Integer, String> passwordHashMap) throws Throwable {\n        String password = passwordHashMap.get(2);\n        if (password != null) {\n            \n            {\n                Cipher aesCipher = Cipher.getInstance(\"AES\");\n                \n                SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n            }\n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n            IO.writeLine(credentials.toString());\n        }\n    }\n}\n\npublic class YvTgPuY extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String password;\n        \n        \n        password = \"Password1234!\";\n        HashMap<Integer, String> passwordHashMap = new HashMap<Integer, String>();\n        passwordHashMap.put(0, password);\n        passwordHashMap.put(1, password);\n        passwordHashMap.put(2, password);\n        (new yiHtabT()).fDqjRYE(passwordHashMap);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        HashMap<Integer, String> passwordHashMap = new HashMap<Integer, String>();\n        passwordHashMap.put(0, password);\n        passwordHashMap.put(1, password);\n        passwordHashMap.put(2, password);\n        (new yiHtabT()).KgJSeXB(passwordHashMap);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229177,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class eFmJhzO extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            ServerSocket listener = null;\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                listener = new ServerSocket(39543);\n                socket = listener.accept();\n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n                try {\n                    if (listener != null) {\n                        listener.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                }\n            }\n        }\n        Connection connection = null;\n        PreparedStatement preparedStatement = null;\n        ResultSet resultSet = null;\n        try {\n            \n            connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n            preparedStatement = connection.prepareStatement(\"select * from test_table\");\n            resultSet = preparedStatement.executeQuery();\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (preparedStatement != null) {\n                    preparedStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229180,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class oEpBkeq extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        if (true) {\n            password = \"\";\n            \n            \n            {\n                ServerSocket listener = null;\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    listener = new ServerSocket(39543);\n                    socket = listener.accept();\n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                    try {\n                        if (listener != null) {\n                            listener.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (true) {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229182,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.util.logging.Level;\n\npublic class AlnpZsN extends AbstractTestCase {\n\n    \n    public static boolean qRMEpGJ = false;\n\n    public void boNMSnT() throws Throwable {\n        String password = null;\n        password = \"\";\n        \n        \n        {\n            ServerSocket listener = null;\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                listener = new ServerSocket(39543);\n                socket = listener.accept();\n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n                try {\n                    if (listener != null) {\n                        listener.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                }\n            }\n        }\n        qRMEpGJ = true;\n        (new TvzAuIa()).RYNMBky(password);\n    }\n\n    \n    public static boolean ydhDOMq = false;\n\n    public static boolean HHhrjCy = false;\n\n    public static boolean Pywwbtz = false;\n}\n\npublic class TvzAuIa {\n\n    public void RYNMBky(String password) throws Throwable {\n        if (AlnpZsN.qRMEpGJ) {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229216,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class TCtRlqM extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String passwordCopy;\n        {\n            String password;\n            password = \"\";\n            \n            \n            {\n                ServerSocket listener = null;\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    listener = new ServerSocket(39543);\n                    socket = listener.accept();\n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                    try {\n                        if (listener != null) {\n                            listener.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                    }\n                }\n            }\n            passwordCopy = password;\n        }\n        {\n            String password = passwordCopy;\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229218,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class kOcAEjH extends AbstractTestCase {\n\n    private void RYNMBky(String password) throws Throwable {\n        Connection connection = null;\n        PreparedStatement preparedStatement = null;\n        ResultSet resultSet = null;\n        try {\n            \n            connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n            preparedStatement = connection.prepareStatement(\"select * from test_table\");\n            resultSet = preparedStatement.executeQuery();\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (preparedStatement != null) {\n                    preparedStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            ServerSocket listener = null;\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                listener = new ServerSocket(39543);\n                socket = listener.accept();\n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n                try {\n                    if (listener != null) {\n                        listener.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                }\n            }\n        }\n        RYNMBky(password);\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229220,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class jWsIBmv extends AbstractTestCase {\n\n    private String gyxYJUG;\n\n    private String ciHMifC;\n\n    private String cgQdTaP;\n\n    private void RYNMBky() throws Throwable {\n        String password = gyxYJUG;\n        Connection connection = null;\n        PreparedStatement preparedStatement = null;\n        ResultSet resultSet = null;\n        try {\n            \n            connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n            preparedStatement = connection.prepareStatement(\"select * from test_table\");\n            resultSet = preparedStatement.executeQuery();\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (preparedStatement != null) {\n                    preparedStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            ServerSocket listener = null;\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                listener = new ServerSocket(39543);\n                socket = listener.accept();\n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n                try {\n                    if (listener != null) {\n                        listener.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                }\n            }\n        }\n        gyxYJUG = password;\n        RYNMBky();\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229224,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\n\npublic class iCHCvIb extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            ServerSocket listener = null;\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                listener = new ServerSocket(39543);\n                socket = listener.accept();\n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n                try {\n                    if (listener != null) {\n                        listener.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                }\n            }\n        }\n        (new OYgNchl()).RYNMBky(password);\n    }\n}\n\npublic class OYgNchl {\n\n    public void RYNMBky(String password) throws Throwable {\n        Connection connection = null;\n        PreparedStatement preparedStatement = null;\n        ResultSet resultSet = null;\n        try {\n            \n            connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n            preparedStatement = connection.prepareStatement(\"select * from test_table\");\n            resultSet = preparedStatement.executeQuery();\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (preparedStatement != null) {\n                    preparedStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229226,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.util.logging.Level;\n\npublic class KpSfILM extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            ServerSocket listener = null;\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                listener = new ServerSocket(39543);\n                socket = listener.accept();\n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n                try {\n                    if (listener != null) {\n                        listener.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                }\n            }\n        }\n        String[] passwordArray = new String[5];\n        passwordArray[2] = password;\n        (new aUlufzU()).RYNMBky(passwordArray);\n    }\n}\n\npublic class aUlufzU {\n\n    public void RYNMBky(String[] passwordArray) throws Throwable {\n        String password = passwordArray[2];\n        Connection connection = null;\n        PreparedStatement preparedStatement = null;\n        ResultSet resultSet = null;\n        try {\n            \n            connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n            preparedStatement = connection.prepareStatement(\"select * from test_table\");\n            resultSet = preparedStatement.executeQuery();\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (preparedStatement != null) {\n                    preparedStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229236,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.util.Vector;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.util.logging.Level;\n\npublic class PxBDRVu extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            ServerSocket listener = null;\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                listener = new ServerSocket(39543);\n                socket = listener.accept();\n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n                try {\n                    if (listener != null) {\n                        listener.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                }\n            }\n        }\n        Vector<String> passwordVector = new Vector<String>(5);\n        passwordVector.add(0, password);\n        passwordVector.add(1, password);\n        passwordVector.add(2, password);\n        (new JdVIQwm()).RYNMBky(passwordVector);\n    }\n}\n\npublic class JdVIQwm {\n\n    public void RYNMBky(Vector<String> passwordVector) throws Throwable {\n        String password = passwordVector.remove(2);\n        Connection connection = null;\n        PreparedStatement preparedStatement = null;\n        ResultSet resultSet = null;\n        try {\n            \n            connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n            preparedStatement = connection.prepareStatement(\"select * from test_table\");\n            resultSet = preparedStatement.executeQuery();\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (preparedStatement != null) {\n                    preparedStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229244,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectOutput;\nimport java.io.ObjectOutputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.net.Socket;\nimport java.net.ServerSocket;\n\npublic class LuXBgrK extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            ServerSocket listener = null;\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                listener = new ServerSocket(39543);\n                socket = listener.accept();\n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n                try {\n                    if (listener != null) {\n                        listener.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                }\n            }\n        }\n        \n        ByteArrayOutputStream streamByteArrayOutput = null;\n        ObjectOutput outputObject = null;\n        try {\n            streamByteArrayOutput = new ByteArrayOutputStream();\n            outputObject = new ObjectOutputStream(streamByteArrayOutput);\n            outputObject.writeObject(password);\n            byte[] passwordSerialized = streamByteArrayOutput.toByteArray();\n            (new RrtCpVb()).RYNMBky(passwordSerialized);\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"IQdccST\", exceptIO);\n        } finally {\n            \n            try {\n                if (outputObject != null) {\n                    outputObject.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"LgADWEx\", exceptIO);\n            }\n            try {\n                if (streamByteArrayOutput != null) {\n                    streamByteArrayOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"vFutZps\", exceptIO);\n            }\n        }\n    }\n}\n\npublic class RrtCpVb {\n\n    public void RYNMBky(byte[] passwordSerialized) throws Throwable {\n        \n        ByteArrayInputStream streamByteArrayInput = null;\n        ObjectInputStream streamObjectInput = null;\n        try {\n            streamByteArrayInput = new ByteArrayInputStream(passwordSerialized);\n            streamObjectInput = new ObjectInputStream(streamByteArrayInput);\n            String password = (String) streamObjectInput.readObject();\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VcFIKxo\", exceptIO);\n        } catch (ClassNotFoundException exceptClassNotFound) {\n            IO.logger.log(Level.WARNING, \"XOCCPfT\", exceptClassNotFound);\n        } finally {\n            \n            try {\n                if (streamObjectInput != null) {\n                    streamObjectInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"kpDMUXH\", exceptIO);\n            }\n            try {\n                if (streamByteArrayInput != null) {\n                    streamByteArrayInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"oiWyzFb\", exceptIO);\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229250,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class tABcQAZ extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        if (5 == 5) {\n            password = \"\";\n            \n            \n            {\n                ServerSocket listener = null;\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    listener = new ServerSocket(39543);\n                    socket = listener.accept();\n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                    try {\n                        if (listener != null) {\n                            listener.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (5 == 5) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229256,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class hncXtuR extends AbstractTestCase {\n\n    \n    private boolean privateReturnsTrue() {\n        return true;\n    }\n\n    private boolean privateReturnsFalse() {\n        return false;\n    }\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        if (privateReturnsFalse()) {\n            \n            password = null;\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (privateReturnsTrue()) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        if (privateReturnsTrue()) {\n            \n            \n            password = \"Password1234!\";\n        } else {\n            \n            password = null;\n        }\n        if (privateReturnsTrue()) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        if (privateReturnsTrue()) {\n            password = \"\";\n            \n            \n            {\n                ServerSocket listener = null;\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    listener = new ServerSocket(39543);\n                    socket = listener.accept();\n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                    try {\n                        if (listener != null) {\n                            listener.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (privateReturnsFalse()) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        if (privateReturnsTrue()) {\n            password = \"\";\n            \n            \n            {\n                ServerSocket listener = null;\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    listener = new ServerSocket(39543);\n                    socket = listener.accept();\n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                    try {\n                        if (listener != null) {\n                            listener.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (privateReturnsTrue()) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229267,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class PQjUeyA extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_TRUE) {\n            password = \"\";\n            \n            \n            {\n                ServerSocket listener = null;\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    listener = new ServerSocket(39543);\n                    socket = listener.accept();\n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                    try {\n                        if (listener != null) {\n                            listener.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229268,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class PQjUeyA extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_FALSE) {\n            \n            password = null;\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_TRUE) {\n            \n            \n            password = \"Password1234!\";\n        } else {\n            \n            password = null;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_TRUE) {\n            password = \"\";\n            \n            \n            {\n                ServerSocket listener = null;\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    listener = new ServerSocket(39543);\n                    socket = listener.accept();\n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                    try {\n                        if (listener != null) {\n                            listener.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.STATIC_FINAL_FALSE) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_TRUE) {\n            password = \"\";\n            \n            \n            {\n                ServerSocket listener = null;\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    listener = new ServerSocket(39543);\n                    socket = listener.accept();\n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                    try {\n                        if (listener != null) {\n                            listener.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229269,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class gYXrOOc extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        if (IO.staticReturnsTrue()) {\n            password = \"\";\n            \n            \n            {\n                ServerSocket listener = null;\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    listener = new ServerSocket(39543);\n                    socket = listener.accept();\n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                    try {\n                        if (listener != null) {\n                            listener.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.staticReturnsTrue()) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229272,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class RWKJKVY extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        if (IO.staticReturnsTrueOrFalse()) {\n            password = \"\";\n            \n            \n            {\n                ServerSocket listener = null;\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    listener = new ServerSocket(39543);\n                    socket = listener.accept();\n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                    try {\n                        if (listener != null) {\n                            listener.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (IO.staticReturnsTrueOrFalse()) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        } else {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229274,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class RwdMLLl extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_FIVE != 5) {\n            \n            password = null;\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            \n            \n            password = \"Password1234!\";\n        } else {\n            \n            password = null;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            password = \"\";\n            \n            \n            {\n                ServerSocket listener = null;\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    listener = new ServerSocket(39543);\n                    socket = listener.accept();\n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                    try {\n                        if (listener != null) {\n                            listener.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.STATIC_FINAL_FIVE != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            password = \"\";\n            \n            \n            {\n                ServerSocket listener = null;\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    listener = new ServerSocket(39543);\n                    socket = listener.accept();\n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                    try {\n                        if (listener != null) {\n                            listener.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229277,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class qqpjyCc extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        switch(6) {\n            case 6:\n                password = \"\";\n                \n                \n                {\n                    ServerSocket listener = null;\n                    Socket socket = null;\n                    BufferedReader readerBuffered = null;\n                    InputStreamReader readerInputStream = null;\n                    try {\n                        \n                        listener = new ServerSocket(39543);\n                        socket = listener.accept();\n                        readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                        readerBuffered = new BufferedReader(readerInputStream);\n                        \n                        password = readerBuffered.readLine();\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                    } finally {\n                        \n                        try {\n                            if (readerBuffered != null) {\n                                readerBuffered.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                        }\n                        try {\n                            if (readerInputStream != null) {\n                                readerInputStream.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                        }\n                        \n                        try {\n                            if (socket != null) {\n                                socket.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                        }\n                        try {\n                            if (listener != null) {\n                                listener.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                password = null;\n                break;\n        }\n        switch(7) {\n            case 7:\n                if (password != null) {\n                    KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                    \n                    KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                    IO.writeLine(key.toString());\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229280,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\n\npublic class ddUNUjn extends AbstractTestCase {\n\n    \n    public static boolean qRMEpGJ = false;\n\n    public void boNMSnT() throws Throwable {\n        String password = null;\n        password = \"\";\n        \n        \n        {\n            ServerSocket listener = null;\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                listener = new ServerSocket(39543);\n                socket = listener.accept();\n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n                try {\n                    if (listener != null) {\n                        listener.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                }\n            }\n        }\n        qRMEpGJ = true;\n        (new howSaUb()).RYNMBky(password);\n    }\n\n    \n    public static boolean ydhDOMq = false;\n\n    public static boolean HHhrjCy = false;\n\n    public static boolean Pywwbtz = false;\n}\n\npublic class howSaUb {\n\n    public void RYNMBky(String password) throws Throwable {\n        if (ddUNUjn.qRMEpGJ) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        } else {\n            \n            password = null;\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229288,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class eArAdju extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String passwordCopy;\n        {\n            String password;\n            password = \"\";\n            \n            \n            {\n                ServerSocket listener = null;\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    listener = new ServerSocket(39543);\n                    socket = listener.accept();\n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                    try {\n                        if (listener != null) {\n                            listener.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                    }\n                }\n            }\n            passwordCopy = password;\n        }\n        {\n            String password = passwordCopy;\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229290,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class hDBWDVt extends AbstractTestCase {\n\n    private void RYNMBky(String password) throws Throwable {\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            ServerSocket listener = null;\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                listener = new ServerSocket(39543);\n                socket = listener.accept();\n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n                try {\n                    if (listener != null) {\n                        listener.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                }\n            }\n        }\n        RYNMBky(password);\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229292,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class YMchxTO extends AbstractTestCase {\n\n    public static String password;\n\n    public void boNMSnT() throws Throwable {\n        password = \"\";\n        \n        \n        {\n            ServerSocket listener = null;\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                listener = new ServerSocket(39543);\n                socket = listener.accept();\n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n                try {\n                    if (listener != null) {\n                        listener.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                }\n            }\n        }\n        (new zfasmNi()).RYNMBky();\n    }\n}\n\npublic class zfasmNi {\n\n    public void RYNMBky() throws Throwable {\n        String password = YMchxTO.password;\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229312,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.util.Vector;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class LTAHDEp extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            ServerSocket listener = null;\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                listener = new ServerSocket(39543);\n                socket = listener.accept();\n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n                try {\n                    if (listener != null) {\n                        listener.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                }\n            }\n        }\n        Vector<String> passwordVector = new Vector<String>(5);\n        passwordVector.add(0, password);\n        passwordVector.add(1, password);\n        passwordVector.add(2, password);\n        (new AefssCd()).RYNMBky(passwordVector);\n    }\n}\n\npublic class AefssCd {\n\n    public void RYNMBky(Vector<String> passwordVector) throws Throwable {\n        String password = passwordVector.remove(2);\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229316,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class YLGIQnL extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            ServerSocket listener = null;\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                listener = new ServerSocket(39543);\n                socket = listener.accept();\n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n                try {\n                    if (listener != null) {\n                        listener.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                }\n            }\n        }\n        if (password != null) {\n            \n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n            IO.writeLine(credentials.toString());\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229324,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class McTLjbS extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        if (true) {\n            password = \"\";\n            \n            \n            {\n                ServerSocket listener = null;\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    listener = new ServerSocket(39543);\n                    socket = listener.accept();\n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                    try {\n                        if (listener != null) {\n                            listener.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (true) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229326,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class NFQqLDy extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        if (5 == 5) {\n            password = \"\";\n            \n            \n            {\n                ServerSocket listener = null;\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    listener = new ServerSocket(39543);\n                    socket = listener.accept();\n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                    try {\n                        if (listener != null) {\n                            listener.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (5 == 5) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229328,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class GHVLUDu extends AbstractTestCase {\n\n    \n    private boolean privateTrue = true;\n\n    private boolean privateFalse = false;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        if (privateFalse) {\n            \n            password = null;\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (privateTrue) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        if (privateTrue) {\n            \n            \n            password = \"Password1234!\";\n        } else {\n            \n            password = null;\n        }\n        if (privateTrue) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        if (privateTrue) {\n            password = \"\";\n            \n            \n            {\n                ServerSocket listener = null;\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    listener = new ServerSocket(39543);\n                    socket = listener.accept();\n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                    try {\n                        if (listener != null) {\n                            listener.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (privateFalse) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        if (privateTrue) {\n            password = \"\";\n            \n            \n            {\n                ServerSocket listener = null;\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    listener = new ServerSocket(39543);\n                    socket = listener.accept();\n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                    try {\n                        if (listener != null) {\n                            listener.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (privateTrue) {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229333,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class phfPLUM extends AbstractTestCase {\n\n    \n    private boolean privateReturnsTrue() {\n        return true;\n    }\n\n    private boolean privateReturnsFalse() {\n        return false;\n    }\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        if (privateReturnsFalse()) {\n            \n            password = null;\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (privateReturnsTrue()) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        if (privateReturnsTrue()) {\n            \n            \n            password = \"Password1234!\";\n        } else {\n            \n            password = null;\n        }\n        if (privateReturnsTrue()) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        if (privateReturnsTrue()) {\n            password = \"\";\n            \n            \n            {\n                ServerSocket listener = null;\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    listener = new ServerSocket(39543);\n                    socket = listener.accept();\n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                    try {\n                        if (listener != null) {\n                            listener.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (privateReturnsFalse()) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        if (privateReturnsTrue()) {\n            password = \"\";\n            \n            \n            {\n                ServerSocket listener = null;\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    listener = new ServerSocket(39543);\n                    socket = listener.accept();\n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                    try {\n                        if (listener != null) {\n                            listener.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (privateReturnsTrue()) {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229339,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class WpOsBWT extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_TRUE) {\n            password = \"\";\n            \n            \n            {\n                ServerSocket listener = null;\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    listener = new ServerSocket(39543);\n                    socket = listener.accept();\n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                    try {\n                        if (listener != null) {\n                            listener.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229340,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class DxaZTIg extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        if (IO.staticTrue) {\n            password = \"\";\n            \n            \n            {\n                ServerSocket listener = null;\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    listener = new ServerSocket(39543);\n                    socket = listener.accept();\n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                    try {\n                        if (listener != null) {\n                            listener.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.staticTrue) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229342,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class bfYJmfU extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        switch(5) {\n            case 6:\n                \n                password = null;\n                break;\n            default:\n                \n                \n                password = \"Password1234!\";\n                break;\n        }\n        switch(7) {\n            case 7:\n                if (password != null) {\n                    \n                    PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                    IO.writeLine(credentials.toString());\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        switch(6) {\n            case 6:\n                \n                \n                password = \"Password1234!\";\n                break;\n            default:\n                \n                password = null;\n                break;\n        }\n        switch(7) {\n            case 7:\n                if (password != null) {\n                    \n                    PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                    IO.writeLine(credentials.toString());\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        switch(6) {\n            case 6:\n                password = \"\";\n                \n                \n                {\n                    ServerSocket listener = null;\n                    Socket socket = null;\n                    BufferedReader readerBuffered = null;\n                    InputStreamReader readerInputStream = null;\n                    try {\n                        \n                        listener = new ServerSocket(39543);\n                        socket = listener.accept();\n                        readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                        readerBuffered = new BufferedReader(readerInputStream);\n                        \n                        password = readerBuffered.readLine();\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                    } finally {\n                        \n                        try {\n                            if (readerBuffered != null) {\n                                readerBuffered.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                        }\n                        try {\n                            if (readerInputStream != null) {\n                                readerInputStream.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                        }\n                        \n                        try {\n                            if (socket != null) {\n                                socket.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                        }\n                        try {\n                            if (listener != null) {\n                                listener.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                password = null;\n                break;\n        }\n        switch(8) {\n            case 7:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n            default:\n                if (password != null) {\n                    \n                    {\n                        Cipher aesCipher = Cipher.getInstance(\"AES\");\n                        \n                        SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                        aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                        password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                    }\n                    PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                    IO.writeLine(credentials.toString());\n                }\n                break;\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        switch(6) {\n            case 6:\n                password = \"\";\n                \n                \n                {\n                    ServerSocket listener = null;\n                    Socket socket = null;\n                    BufferedReader readerBuffered = null;\n                    InputStreamReader readerInputStream = null;\n                    try {\n                        \n                        listener = new ServerSocket(39543);\n                        socket = listener.accept();\n                        readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                        readerBuffered = new BufferedReader(readerInputStream);\n                        \n                        password = readerBuffered.readLine();\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                    } finally {\n                        \n                        try {\n                            if (readerBuffered != null) {\n                                readerBuffered.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                        }\n                        try {\n                            if (readerInputStream != null) {\n                                readerInputStream.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                        }\n                        \n                        try {\n                            if (socket != null) {\n                                socket.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                        }\n                        try {\n                            if (listener != null) {\n                                listener.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                password = null;\n                break;\n        }\n        switch(7) {\n            case 7:\n                if (password != null) {\n                    \n                    {\n                        Cipher aesCipher = Cipher.getInstance(\"AES\");\n                        \n                        SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                        aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                        password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                    }\n                    PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                    IO.writeLine(credentials.toString());\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229353,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class BTvIBgG extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        \n        password = \"\";\n        \n        \n        {\n            ServerSocket listener = null;\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                listener = new ServerSocket(39543);\n                socket = listener.accept();\n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n                try {\n                    if (listener != null) {\n                        listener.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                }\n            }\n        }\n        for (int j = 0; j < 1; j++) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229356,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class HaMCrEl extends AbstractTestCase {\n\n    \n    public static boolean qRMEpGJ = false;\n\n    public void boNMSnT() throws Throwable {\n        String password = null;\n        password = \"\";\n        \n        \n        {\n            ServerSocket listener = null;\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                listener = new ServerSocket(39543);\n                socket = listener.accept();\n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n                try {\n                    if (listener != null) {\n                        listener.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                }\n            }\n        }\n        qRMEpGJ = true;\n        (new mEnSKVe()).RYNMBky(password);\n    }\n\n    \n    public static boolean ydhDOMq = false;\n\n    public static boolean HHhrjCy = false;\n\n    public static boolean Pywwbtz = false;\n}\n\npublic class mEnSKVe {\n\n    public void RYNMBky(String password) throws Throwable {\n        if (HaMCrEl.qRMEpGJ) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        } else {\n            \n            password = null;\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229360,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class RnQjQdt extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            ServerSocket listener = null;\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                listener = new ServerSocket(39543);\n                socket = listener.accept();\n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n                try {\n                    if (listener != null) {\n                        listener.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                }\n            }\n        }\n        (new pBEadaq()).RYNMBky(password);\n    }\n}\n\npublic class pBEadaq {\n\n    public void RYNMBky(String password) throws Throwable {\n        if (password != null) {\n            \n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n            IO.writeLine(credentials.toString());\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229370,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\n\npublic class HASaNPX extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            ServerSocket listener = null;\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                listener = new ServerSocket(39543);\n                socket = listener.accept();\n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n                try {\n                    if (listener != null) {\n                        listener.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                }\n            }\n        }\n        (new HLTazZS()).RYNMBky(password);\n    }\n}\n\npublic class HLTazZS {\n\n    public void RYNMBky(String password) throws Throwable {\n        (new gRxEJKi()).RYNMBky(password);\n    }\n}\n\npublic class glCkgqT {\n\n    public void RYNMBky(String password) throws Throwable {\n        if (password != null) {\n            \n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n            IO.writeLine(credentials.toString());\n        }\n    }\n}\n\npublic class gRxEJKi {\n\n    public void RYNMBky(String password) throws Throwable {\n        (new glCkgqT()).RYNMBky(password);\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229374,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\n\npublic class srQdUYa extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password = (new eiKyEYU()).ImBBndW();\n        if (password != null) {\n            \n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n            IO.writeLine(credentials.toString());\n        }\n    }\n}\n\npublic class eiKyEYU {\n\n    public String ImBBndW() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            ServerSocket listener = null;\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                listener = new ServerSocket(39543);\n                socket = listener.accept();\n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n                try {\n                    if (listener != null) {\n                        listener.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                }\n            }\n        }\n        return password;\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229378,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.util.HashMap;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\n\npublic class jHqisYf {\n\n    \n    public void fDqjRYE(HashMap<Integer, String> passwordHashMap) throws Throwable {\n        String password = passwordHashMap.get(2);\n        if (password != null) {\n            \n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n            IO.writeLine(credentials.toString());\n        }\n    }\n\n    \n    public void KgJSeXB(HashMap<Integer, String> passwordHashMap) throws Throwable {\n        String password = passwordHashMap.get(2);\n        if (password != null) {\n            \n            {\n                Cipher aesCipher = Cipher.getInstance(\"AES\");\n                \n                SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n            }\n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n            IO.writeLine(credentials.toString());\n        }\n    }\n}\n\npublic class QASsLSN extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String password;\n        \n        \n        password = \"Password1234!\";\n        HashMap<Integer, String> passwordHashMap = new HashMap<Integer, String>();\n        passwordHashMap.put(0, password);\n        passwordHashMap.put(1, password);\n        passwordHashMap.put(2, password);\n        (new jHqisYf()).fDqjRYE(passwordHashMap);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            ServerSocket listener = null;\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                listener = new ServerSocket(39543);\n                socket = listener.accept();\n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n                try {\n                    if (listener != null) {\n                        listener.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                }\n            }\n        }\n        HashMap<Integer, String> passwordHashMap = new HashMap<Integer, String>();\n        passwordHashMap.put(0, password);\n        passwordHashMap.put(1, password);\n        passwordHashMap.put(2, password);\n        (new jHqisYf()).KgJSeXB(passwordHashMap);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229393,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.*;\nimport java.net.*;\nimport java.util.logging.Level;\nimport javax.net.ssl.SSLSocketFactory;\nimport javax.net.ssl.SSLSocket;\n\npublic class JqUjnQW extends AbstractTestCase {\n\n    \n    private boolean privateTrue = true;\n\n    private boolean privateFalse = false;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (privateFalse) {\n            \n            data = null;\n        } else {\n            \n            data = \"Hello World\";\n        }\n        if (privateTrue) {\n            Socket socket = null;\n            PrintWriter writer = null;\n            try {\n                socket = new Socket(\"remote_host\", 1337);\n                writer = new PrintWriter(socket.getOutputStream(), true);\n                \n                writer.println(data);\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"AhUmAwz\", exceptIO);\n            } finally {\n                if (writer != null) {\n                    writer.close();\n                }\n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (privateTrue) {\n            \n            data = \"Hello World\";\n        } else {\n            \n            data = null;\n        }\n        if (privateTrue) {\n            Socket socket = null;\n            PrintWriter writer = null;\n            try {\n                socket = new Socket(\"remote_host\", 1337);\n                writer = new PrintWriter(socket.getOutputStream(), true);\n                \n                writer.println(data);\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"AhUmAwz\", exceptIO);\n            } finally {\n                if (writer != null) {\n                    writer.close();\n                }\n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (privateTrue) {\n            \n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", \"AP@ssw0rd\".toCharArray());\n            \n            data = new String(credentials.getPassword());\n        } else {\n            \n            data = null;\n        }\n        if (privateFalse) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            SSLSocketFactory sslsSocketFactory = null;\n            SSLSocket sslSocket = null;\n            PrintWriter writer = null;\n            try {\n                sslsSocketFactory = (SSLSocketFactory) SSLSocketFactory.getDefault();\n                sslSocket = (SSLSocket) sslsSocketFactory.createSocket(\"remote_host\", 1337);\n                writer = new PrintWriter(sslSocket.getOutputStream(), true);\n                \n                writer.println(data);\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"AhUmAwz\", exceptIO);\n            } finally {\n                if (writer != null) {\n                    writer.close();\n                }\n                try {\n                    if (sslSocket != null) {\n                        sslSocket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"DefHlKb\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (privateTrue) {\n            \n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", \"AP@ssw0rd\".toCharArray());\n            \n            data = new String(credentials.getPassword());\n        } else {\n            \n            data = null;\n        }\n        if (privateTrue) {\n            SSLSocketFactory sslsSocketFactory = null;\n            SSLSocket sslSocket = null;\n            PrintWriter writer = null;\n            try {\n                sslsSocketFactory = (SSLSocketFactory) SSLSocketFactory.getDefault();\n                sslSocket = (SSLSocket) sslsSocketFactory.createSocket(\"remote_host\", 1337);\n                writer = new PrintWriter(sslSocket.getOutputStream(), true);\n                \n                writer.println(data);\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"AhUmAwz\", exceptIO);\n            } finally {\n                if (writer != null) {\n                    writer.close();\n                }\n                try {\n                    if (sslSocket != null) {\n                        sslSocket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"DefHlKb\", exceptIO);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229405,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.*;\nimport java.net.*;\nimport java.util.logging.Level;\nimport javax.net.ssl.SSLSocketFactory;\nimport javax.net.ssl.SSLSocket;\n\npublic class lsWsjir extends AbstractTestCase {\n\n    \n    private boolean privateReturnsTrue() {\n        return true;\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (privateReturnsTrue()) {\n            \n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", \"AP@ssw0rd\".toCharArray());\n            \n            data = new String(credentials.getPassword());\n        } else {\n            \n            data = null;\n        }\n        if (privateReturnsTrue()) {\n            Socket socket = null;\n            PrintWriter writer = null;\n            try {\n                socket = new Socket(\"remote_host\", 1337);\n                writer = new PrintWriter(socket.getOutputStream(), true);\n                \n                writer.println(data);\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"AhUmAwz\", exceptIO);\n            } finally {\n                if (writer != null) {\n                    writer.close();\n                }\n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229410,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.*;\nimport java.net.*;\nimport java.util.logging.Level;\nimport javax.net.ssl.SSLSocketFactory;\nimport javax.net.ssl.SSLSocket;\n\npublic class IqilcEi extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_TRUE) {\n            \n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", \"AP@ssw0rd\".toCharArray());\n            \n            data = new String(credentials.getPassword());\n        } else {\n            \n            data = null;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            Socket socket = null;\n            PrintWriter writer = null;\n            try {\n                socket = new Socket(\"remote_host\", 1337);\n                writer = new PrintWriter(socket.getOutputStream(), true);\n                \n                writer.println(data);\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"AhUmAwz\", exceptIO);\n            } finally {\n                if (writer != null) {\n                    writer.close();\n                }\n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229412,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.*;\nimport java.net.*;\nimport java.util.logging.Level;\nimport javax.net.ssl.SSLSocketFactory;\nimport javax.net.ssl.SSLSocket;\n\npublic class mhbevFj extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrueOrFalse()) {\n            \n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", \"AP@ssw0rd\".toCharArray());\n            \n            data = new String(credentials.getPassword());\n        } else {\n            \n            data = \"Hello World\";\n        }\n        if (IO.staticReturnsTrueOrFalse()) {\n            Socket socket = null;\n            PrintWriter writer = null;\n            try {\n                socket = new Socket(\"remote_host\", 1337);\n                writer = new PrintWriter(socket.getOutputStream(), true);\n                \n                writer.println(data);\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"AhUmAwz\", exceptIO);\n            } finally {\n                if (writer != null) {\n                    writer.close();\n                }\n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        } else {\n            SSLSocketFactory sslsSocketFactory = null;\n            SSLSocket sslSocket = null;\n            PrintWriter writer = null;\n            try {\n                sslsSocketFactory = (SSLSocketFactory) SSLSocketFactory.getDefault();\n                sslSocket = (SSLSocket) sslsSocketFactory.createSocket(\"remote_host\", 1337);\n                writer = new PrintWriter(sslSocket.getOutputStream(), true);\n                \n                writer.println(data);\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"AhUmAwz\", exceptIO);\n            } finally {\n                if (writer != null) {\n                    writer.close();\n                }\n                try {\n                    if (sslSocket != null) {\n                        sslSocket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"DefHlKb\", exceptIO);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229418,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.*;\nimport java.net.*;\nimport java.util.logging.Level;\nimport javax.net.ssl.SSLSocketFactory;\nimport javax.net.ssl.SSLSocket;\n\npublic class UUMADBd extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        switch(6) {\n            case 6:\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", \"AP@ssw0rd\".toCharArray());\n                \n                data = new String(credentials.getPassword());\n                break;\n            default:\n                \n                data = null;\n                break;\n        }\n        switch(7) {\n            case 7:\n                Socket socket = null;\n                PrintWriter writer = null;\n                try {\n                    socket = new Socket(\"remote_host\", 1337);\n                    writer = new PrintWriter(socket.getOutputStream(), true);\n                    \n                    writer.println(data);\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"AhUmAwz\", exceptIO);\n                } finally {\n                    if (writer != null) {\n                        writer.close();\n                    }\n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229424,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.*;\nimport java.net.*;\nimport java.util.logging.Level;\nimport javax.net.ssl.SSLSocketFactory;\nimport javax.net.ssl.SSLSocket;\n\npublic class Wuzbcjm extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String dataCopy;\n        {\n            String data;\n            \n            data = \"Hello World\";\n            dataCopy = data;\n        }\n        {\n            String data = dataCopy;\n            Socket socket = null;\n            PrintWriter writer = null;\n            try {\n                socket = new Socket(\"remote_host\", 1337);\n                writer = new PrintWriter(socket.getOutputStream(), true);\n                \n                writer.println(data);\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"AhUmAwz\", exceptIO);\n            } finally {\n                if (writer != null) {\n                    writer.close();\n                }\n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String dataCopy;\n        {\n            String data;\n            \n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", \"AP@ssw0rd\".toCharArray());\n            \n            data = new String(credentials.getPassword());\n            dataCopy = data;\n        }\n        {\n            String data = dataCopy;\n            SSLSocketFactory sslsSocketFactory = null;\n            SSLSocket sslSocket = null;\n            PrintWriter writer = null;\n            try {\n                sslsSocketFactory = (SSLSocketFactory) SSLSocketFactory.getDefault();\n                sslSocket = (SSLSocket) sslsSocketFactory.createSocket(\"remote_host\", 1337);\n                writer = new PrintWriter(sslSocket.getOutputStream(), true);\n                \n                writer.println(data);\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"AhUmAwz\", exceptIO);\n            } finally {\n                if (writer != null) {\n                    writer.close();\n                }\n                try {\n                    if (sslSocket != null) {\n                        sslSocket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"DefHlKb\", exceptIO);\n                }\n            }\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229435,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.*;\nimport java.net.*;\nimport java.util.logging.Level;\nimport javax.net.ssl.SSLSocketFactory;\nimport javax.net.ssl.SSLSocket;\n\npublic class nzoloXF extends AbstractTestCase {\n\n    private void RYNMBky(String data) throws Throwable {\n        Socket socket = null;\n        PrintWriter writer = null;\n        try {\n            socket = new Socket(\"remote_host\", 1337);\n            writer = new PrintWriter(socket.getOutputStream(), true);\n            \n            writer.println(data);\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"AhUmAwz\", exceptIO);\n        } finally {\n            if (writer != null) {\n                writer.close();\n            }\n            try {\n                if (socket != null) {\n                    socket.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n            }\n        }\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        PasswordAuthentication credentials = new PasswordAuthentication(\"user\", \"AP@ssw0rd\".toCharArray());\n        \n        data = new String(credentials.getPassword());\n        RYNMBky(data);\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229436,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.*;\nimport java.net.*;\nimport java.util.logging.Level;\nimport javax.net.ssl.SSLSocketFactory;\nimport javax.net.ssl.SSLSocket;\n\npublic class nzoloXF extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    private void fDqjRYE(String data) throws Throwable {\n        Socket socket = null;\n        PrintWriter writer = null;\n        try {\n            socket = new Socket(\"remote_host\", 1337);\n            writer = new PrintWriter(socket.getOutputStream(), true);\n            \n            writer.println(data);\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"AhUmAwz\", exceptIO);\n        } finally {\n            if (writer != null) {\n                writer.close();\n            }\n            try {\n                if (socket != null) {\n                    socket.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"Hello World\";\n        fDqjRYE(data);\n    }\n\n    private void KgJSeXB(String data) throws Throwable {\n        SSLSocketFactory sslsSocketFactory = null;\n        SSLSocket sslSocket = null;\n        PrintWriter writer = null;\n        try {\n            sslsSocketFactory = (SSLSocketFactory) SSLSocketFactory.getDefault();\n            sslSocket = (SSLSocket) sslsSocketFactory.createSocket(\"remote_host\", 1337);\n            writer = new PrintWriter(sslSocket.getOutputStream(), true);\n            \n            writer.println(data);\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"AhUmAwz\", exceptIO);\n        } finally {\n            if (writer != null) {\n                writer.close();\n            }\n            try {\n                if (sslSocket != null) {\n                    sslSocket.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"DefHlKb\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        \n        PasswordAuthentication credentials = new PasswordAuthentication(\"user\", \"AP@ssw0rd\".toCharArray());\n        \n        data = new String(credentials.getPassword());\n        KgJSeXB(data);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229437,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.*;\nimport java.net.*;\nimport java.util.logging.Level;\nimport javax.net.ssl.SSLSocketFactory;\nimport javax.net.ssl.SSLSocket;\n\npublic class gURQNZc extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        PasswordAuthentication credentials = new PasswordAuthentication(\"user\", \"AP@ssw0rd\".toCharArray());\n        \n        data = new String(credentials.getPassword());\n        (new yqPzWfm()).RYNMBky(data);\n    }\n}\n\npublic class yqPzWfm {\n\n    public void RYNMBky(String data) throws Throwable {\n        Socket socket = null;\n        PrintWriter writer = null;\n        try {\n            socket = new Socket(\"remote_host\", 1337);\n            writer = new PrintWriter(socket.getOutputStream(), true);\n            \n            writer.println(data);\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"AhUmAwz\", exceptIO);\n        } finally {\n            if (writer != null) {\n                writer.close();\n            }\n            try {\n                if (socket != null) {\n                    socket.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229442,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.*;\nimport java.net.*;\nimport java.util.logging.Level;\nimport javax.net.ssl.SSLSocketFactory;\nimport javax.net.ssl.SSLSocket;\n\npublic class EoNniVY extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        PasswordAuthentication credentials = new PasswordAuthentication(\"user\", \"AP@ssw0rd\".toCharArray());\n        \n        data = new String(credentials.getPassword());\n        String[] dataArray = new String[5];\n        dataArray[2] = data;\n        (new LNYWSDu()).RYNMBky(dataArray);\n    }\n}\n\npublic class LNYWSDu {\n\n    public void RYNMBky(String[] dataArray) throws Throwable {\n        String data = dataArray[2];\n        Socket socket = null;\n        PrintWriter writer = null;\n        try {\n            socket = new Socket(\"remote_host\", 1337);\n            writer = new PrintWriter(socket.getOutputStream(), true);\n            \n            writer.println(data);\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"AhUmAwz\", exceptIO);\n        } finally {\n            if (writer != null) {\n                writer.close();\n            }\n            try {\n                if (socket != null) {\n                    socket.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229452,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.*;\nimport java.net.PasswordAuthentication;\n\npublic class nGNATeO extends AbstractTestCase {\n\n    public static String data;\n\n    public void boNMSnT() throws Throwable {\n        \n        PasswordAuthentication credentials = new PasswordAuthentication(\"user\", \"AP@ssw0rd\".toCharArray());\n        \n        data = new String(credentials.getPassword());\n        (new xArqbxa()).RYNMBky();\n    }\n}\n\npublic class xArqbxa {\n\n    public void RYNMBky() throws Throwable {\n        String data = nGNATeO.data;\n        Socket socket = null;\n        PrintWriter writer = null;\n        try {\n            socket = new Socket(\"remote_host\", 1337);\n            writer = new PrintWriter(socket.getOutputStream(), true);\n            \n            writer.println(data);\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"AhUmAwz\", exceptIO);\n        } finally {\n            if (writer != null) {\n                writer.close();\n            }\n            try {\n                if (socket != null) {\n                    socket.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229456,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.util.HashMap;\nimport java.io.*;\nimport java.net.PasswordAuthentication;\n\npublic class GHHMjDe extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        PasswordAuthentication credentials = new PasswordAuthentication(\"user\", \"AP@ssw0rd\".toCharArray());\n        \n        data = new String(credentials.getPassword());\n        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();\n        dataHashMap.put(0, data);\n        dataHashMap.put(1, data);\n        dataHashMap.put(2, data);\n        (new LEzmioK()).RYNMBky(dataHashMap);\n    }\n}\n\npublic class LEzmioK {\n\n    public void RYNMBky(HashMap<Integer, String> dataHashMap) throws Throwable {\n        String data = dataHashMap.get(2);\n        Socket socket = null;\n        PrintWriter writer = null;\n        try {\n            socket = new Socket(\"remote_host\", 1337);\n            writer = new PrintWriter(socket.getOutputStream(), true);\n            \n            writer.println(data);\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"AhUmAwz\", exceptIO);\n        } finally {\n            if (writer != null) {\n                writer.close();\n            }\n            try {\n                if (socket != null) {\n                    socket.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229464,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class SohqPmt extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        if (false) {\n            \n            password = null;\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (true) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        if (true) {\n            \n            \n            password = \"Password1234!\";\n        } else {\n            \n            password = null;\n        }\n        if (true) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        if (true) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (false) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        if (true) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (true) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228823,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class qVBRIwh extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        if (IO.staticReturnsFalse()) {\n            \n            password = null;\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (IO.staticReturnsTrue()) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        if (IO.staticReturnsTrue()) {\n            \n            \n            password = \"Password1234!\";\n        } else {\n            \n            password = null;\n        }\n        if (IO.staticReturnsTrue()) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        if (IO.staticReturnsTrue()) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.staticReturnsFalse()) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        if (IO.staticReturnsTrue()) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.staticReturnsTrue()) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228841,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class RyryqcU extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_FIVE != 5) {\n            \n            password = null;\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            \n            \n            password = \"Password1234!\";\n        } else {\n            \n            password = null;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.STATIC_FINAL_FIVE != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228845,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class DLgpYXN extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        switch(5) {\n            case 6:\n                \n                password = null;\n                break;\n            default:\n                \n                \n                password = \"Password1234!\";\n                break;\n        }\n        switch(7) {\n            case 7:\n                if (password != null) {\n                    KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                    \n                    KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                    IO.writeLine(key.toString());\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        switch(6) {\n            case 6:\n                \n                \n                password = \"Password1234!\";\n                break;\n            default:\n                \n                password = null;\n                break;\n        }\n        switch(7) {\n            case 7:\n                if (password != null) {\n                    KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                    \n                    KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                    IO.writeLine(key.toString());\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        switch(6) {\n            case 6:\n                password = \"\";\n                \n                \n                {\n                    URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                    BufferedReader readerBuffered = null;\n                    InputStreamReader readerInputStream = null;\n                    try {\n                        readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                        readerBuffered = new BufferedReader(readerInputStream);\n                        \n                        \n                        password = readerBuffered.readLine();\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                    } finally {\n                        \n                        try {\n                            if (readerBuffered != null) {\n                                readerBuffered.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                        }\n                        try {\n                            if (readerInputStream != null) {\n                                readerInputStream.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                password = null;\n                break;\n        }\n        switch(8) {\n            case 7:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n            default:\n                if (password != null) {\n                    KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                    \n                    {\n                        Cipher aesCipher = Cipher.getInstance(\"AES\");\n                        \n                        SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                        aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                        password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                    }\n                    KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                    IO.writeLine(key.toString());\n                }\n                break;\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        switch(6) {\n            case 6:\n                password = \"\";\n                \n                \n                {\n                    URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                    BufferedReader readerBuffered = null;\n                    InputStreamReader readerInputStream = null;\n                    try {\n                        readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                        readerBuffered = new BufferedReader(readerInputStream);\n                        \n                        \n                        password = readerBuffered.readLine();\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                    } finally {\n                        \n                        try {\n                            if (readerBuffered != null) {\n                                readerBuffered.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                        }\n                        try {\n                            if (readerInputStream != null) {\n                                readerInputStream.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                password = null;\n                break;\n        }\n        switch(7) {\n            case 7:\n                if (password != null) {\n                    KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                    \n                    {\n                        Cipher aesCipher = Cipher.getInstance(\"AES\");\n                        \n                        SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                        aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                        password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                    }\n                    KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                    IO.writeLine(key.toString());\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228849,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class tsMaadk extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        if (5 == 5) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (5 == 5) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228896,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class TqRlaiG extends AbstractTestCase {\n\n    \n    private boolean dWmGbZa = false;\n\n    \n    private boolean aRnSMVj = false;\n\n    private boolean aOWZSGn = false;\n\n    private boolean DBbhdbc = false;\n\n    public void JttWLtS() throws Throwable {\n        uytpYbp();\n        OQsEKDS();\n        EXrOlJC();\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        aRnSMVj = false;\n        ZpnQtvQ(password);\n    }\n\n    private void ZpnQtvQ(String password) throws Throwable {\n        if (aRnSMVj) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        aOWZSGn = true;\n        VmywRrZ(password);\n    }\n\n    private void VmywRrZ(String password) throws Throwable {\n        if (aOWZSGn) {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String password;\n        \n        \n        password = \"Password1234!\";\n        DBbhdbc = true;\n        fDqjRYE(password);\n    }\n\n    private void fDqjRYE(String password) throws Throwable {\n        if (DBbhdbc) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228927,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class XtIRrou extends AbstractTestCase {\n\n    private String gyxYJUG;\n\n    private String ciHMifC;\n\n    private String cgQdTaP;\n\n    private void RYNMBky() throws Throwable {\n        String password = gyxYJUG;\n        if (password != null) {\n            \n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n            IO.writeLine(credentials.toString());\n        }\n    }\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        gyxYJUG = password;\n        RYNMBky();\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228936,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\n\npublic class kPYoFWF {\n\n    \n    public void fDqjRYE() throws Throwable {\n        String password = ssuxXjr.password;\n        if (password != null) {\n            \n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n            IO.writeLine(credentials.toString());\n        }\n    }\n\n    \n    public void KgJSeXB() throws Throwable {\n        String password = ssuxXjr.password;\n        if (password != null) {\n            \n            {\n                Cipher aesCipher = Cipher.getInstance(\"AES\");\n                \n                SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n            }\n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n            IO.writeLine(credentials.toString());\n        }\n    }\n}\n\npublic class ssuxXjr extends AbstractTestCase {\n\n    public static String password;\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        \n        \n        password = \"Password1234!\";\n        (new kPYoFWF()).fDqjRYE();\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        (new kPYoFWF()).KgJSeXB();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228953,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class KPIAHzR extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String password;\n        \n        \n        password = \"Password1234!\";\n        Connection connection = null;\n        PreparedStatement preparedStatement = null;\n        ResultSet resultSet = null;\n        try {\n            \n            connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n            preparedStatement = connection.prepareStatement(\"select * from test_table\");\n            resultSet = preparedStatement.executeQuery();\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (preparedStatement != null) {\n                    preparedStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        if (password != null) {\n            \n            {\n                Cipher aesCipher = Cipher.getInstance(\"AES\");\n                \n                SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n            }\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228965,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class uveBCvm extends AbstractTestCase {\n\n    \n    private int privateFive = 5;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        if (privateFive != 5) {\n            \n            password = null;\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (privateFive == 5) {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        if (privateFive == 5) {\n            \n            \n            password = \"Password1234!\";\n        } else {\n            \n            password = null;\n        }\n        if (privateFive == 5) {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        if (privateFive == 5) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (privateFive != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n                try {\n                    \n                    connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                    preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                    resultSet = preparedStatement.executeQuery();\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n                } finally {\n                    try {\n                        if (resultSet != null) {\n                            resultSet.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                    }\n                    try {\n                        if (preparedStatement != null) {\n                            preparedStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (connection != null) {\n                            connection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        if (privateFive == 5) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (privateFive == 5) {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n                try {\n                    \n                    connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                    preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                    resultSet = preparedStatement.executeQuery();\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n                } finally {\n                    try {\n                        if (resultSet != null) {\n                            resultSet.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                    }\n                    try {\n                        if (preparedStatement != null) {\n                            preparedStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (connection != null) {\n                            connection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228977,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class bcPoPjK extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_FIVE != 5) {\n            \n            password = null;\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            \n            \n            password = \"Password1234!\";\n        } else {\n            \n            password = null;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.STATIC_FINAL_FIVE != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n                try {\n                    \n                    connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                    preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                    resultSet = preparedStatement.executeQuery();\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n                } finally {\n                    try {\n                        if (resultSet != null) {\n                            resultSet.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                    }\n                    try {\n                        if (preparedStatement != null) {\n                            preparedStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (connection != null) {\n                            connection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n                try {\n                    \n                    connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                    preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                    resultSet = preparedStatement.executeQuery();\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n                } finally {\n                    try {\n                        if (resultSet != null) {\n                            resultSet.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                    }\n                    try {\n                        if (preparedStatement != null) {\n                            preparedStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (connection != null) {\n                            connection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228989,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.util.logging.Level;\n\npublic class sRMqmel {\n\n    \n    public void fDqjRYE(Object passwordObject) throws Throwable {\n        String password = (String) passwordObject;\n        Connection connection = null;\n        PreparedStatement preparedStatement = null;\n        ResultSet resultSet = null;\n        try {\n            \n            connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n            preparedStatement = connection.prepareStatement(\"select * from test_table\");\n            resultSet = preparedStatement.executeQuery();\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (preparedStatement != null) {\n                    preparedStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    public void KgJSeXB(Object passwordObject) throws Throwable {\n        String password = (String) passwordObject;\n        if (password != null) {\n            \n            {\n                Cipher aesCipher = Cipher.getInstance(\"AES\");\n                \n                SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n            }\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n\npublic class hOKPnnx extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String password;\n        \n        \n        password = \"Password1234!\";\n        (new sRMqmel()).fDqjRYE((Object) password);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        (new sRMqmel()).KgJSeXB((Object) password);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229027,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class eVaKBLM extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        if (false) {\n            \n            password = null;\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (true) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        if (true) {\n            \n            \n            password = \"Password1234!\";\n        } else {\n            \n            password = null;\n        }\n        if (true) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        if (true) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (false) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        if (true) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (true) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229039,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class SCTeCJO extends AbstractTestCase {\n\n    \n    private static final boolean PRIVATE_STATIC_FINAL_TRUE = true;\n\n    private static final boolean PRIVATE_STATIC_FINAL_FALSE = false;\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229042,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class NiAGROp extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        if (IO.staticReturnsTrueOrFalse()) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (IO.staticReturnsTrueOrFalse()) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        } else {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229058,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class NiAGROp extends AbstractTestCase {\n\n    \n    private void EXrOlJC() throws Throwable {\n        String password;\n        if (IO.staticReturnsTrueOrFalse()) {\n            \n            \n            password = \"Password1234!\";\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (IO.staticReturnsTrueOrFalse()) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        } else {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String password;\n        if (IO.staticReturnsTrueOrFalse()) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        }\n        if (IO.staticReturnsTrueOrFalse()) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        } else {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229059,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class DVQpOjs extends AbstractTestCase {\n\n    \n    private static final boolean PRIVATE_STATIC_FINAL_TRUE = true;\n\n    private static final boolean PRIVATE_STATIC_FINAL_FALSE = false;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        if (PRIVATE_STATIC_FINAL_FALSE) {\n            \n            password = null;\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            \n            \n            password = \"Password1234!\";\n        } else {\n            \n            password = null;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FALSE) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229115,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class MunyVBh extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        if (5 == 5) {\n            password = \"\";\n            \n            \n            {\n                ServerSocket listener = null;\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    listener = new ServerSocket(39543);\n                    socket = listener.accept();\n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                    try {\n                        if (listener != null) {\n                            listener.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (5 == 5) {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229184,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class QMYrwVS extends AbstractTestCase {\n\n    \n    private static final boolean PRIVATE_STATIC_FINAL_TRUE = true;\n\n    private static final boolean PRIVATE_STATIC_FINAL_FALSE = false;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        if (PRIVATE_STATIC_FINAL_FALSE) {\n            \n            password = null;\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            \n            \n            password = \"Password1234!\";\n        } else {\n            \n            password = null;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            password = \"\";\n            \n            \n            {\n                ServerSocket listener = null;\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    listener = new ServerSocket(39543);\n                    socket = listener.accept();\n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                    try {\n                        if (listener != null) {\n                            listener.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FALSE) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n                try {\n                    \n                    connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                    preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                    resultSet = preparedStatement.executeQuery();\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n                } finally {\n                    try {\n                        if (resultSet != null) {\n                            resultSet.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                    }\n                    try {\n                        if (preparedStatement != null) {\n                            preparedStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (connection != null) {\n                            connection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            password = \"\";\n            \n            \n            {\n                ServerSocket listener = null;\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    listener = new ServerSocket(39543);\n                    socket = listener.accept();\n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                    try {\n                        if (listener != null) {\n                            listener.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n                try {\n                    \n                    connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                    preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                    resultSet = preparedStatement.executeQuery();\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n                } finally {\n                    try {\n                        if (resultSet != null) {\n                            resultSet.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                    }\n                    try {\n                        if (preparedStatement != null) {\n                            preparedStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (connection != null) {\n                            connection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229187,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\n\npublic class HHrbOAj {\n\n    \n    public void fDqjRYE(String password) throws Throwable {\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n\n    \n    public void KgJSeXB(String password) throws Throwable {\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            {\n                Cipher aesCipher = Cipher.getInstance(\"AES\");\n                \n                SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n            }\n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n}\n\npublic class eFepRHr extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String password;\n        \n        \n        password = \"Password1234!\";\n        (new HHrbOAj()).fDqjRYE(password);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            ServerSocket listener = null;\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                listener = new ServerSocket(39543);\n                socket = listener.accept();\n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n                try {\n                    if (listener != null) {\n                        listener.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                }\n            }\n        }\n        (new HHrbOAj()).KgJSeXB(password);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229299,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\n\npublic class znpWPlT {\n\n    \n    public void fDqjRYE(String password) throws Throwable {\n        (new OuSPkVP()).fDqjRYE(password);\n    }\n\n    \n    public void KgJSeXB(String password) throws Throwable {\n        (new OuSPkVP()).KgJSeXB(password);\n    }\n}\n\npublic class OuSPkVP {\n\n    \n    public void fDqjRYE(String password) throws Throwable {\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n\n    \n    public void KgJSeXB(String password) throws Throwable {\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            {\n                Cipher aesCipher = Cipher.getInstance(\"AES\");\n                \n                SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n            }\n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n}\n\npublic class PsNLrte {\n\n    \n    public void fDqjRYE(String password) throws Throwable {\n        (new znpWPlT()).fDqjRYE(password);\n    }\n\n    \n    public void KgJSeXB(String password) throws Throwable {\n        (new znpWPlT()).KgJSeXB(password);\n    }\n}\n\npublic class CnOyQww extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String password;\n        \n        \n        password = \"Password1234!\";\n        (new PsNLrte()).fDqjRYE(password);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            ServerSocket listener = null;\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                listener = new ServerSocket(39543);\n                socket = listener.accept();\n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n                try {\n                    if (listener != null) {\n                        listener.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                }\n            }\n        }\n        (new PsNLrte()).KgJSeXB(password);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229303,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class wuPYWGS extends AbstractTestCase {\n\n    static class Container {\n\n        public String containerOne;\n    }\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            ServerSocket listener = null;\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                listener = new ServerSocket(39543);\n                socket = listener.accept();\n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n                try {\n                    if (listener != null) {\n                        listener.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                }\n            }\n        }\n        Container passwordContainer = new Container();\n        passwordContainer.containerOne = password;\n        (new YHFiWOC()).RYNMBky(passwordContainer);\n    }\n}\n\npublic class YHFiWOC {\n\n    public void RYNMBky(wuPYWGS.Container passwordContainer) throws Throwable {\n        String password = passwordContainer.containerOne;\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229310,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectOutput;\nimport java.io.ObjectOutputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.net.Socket;\nimport java.net.ServerSocket;\n\npublic class xGpzIGJ extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            ServerSocket listener = null;\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                listener = new ServerSocket(39543);\n                socket = listener.accept();\n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n                try {\n                    if (listener != null) {\n                        listener.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                }\n            }\n        }\n        \n        ByteArrayOutputStream streamByteArrayOutput = null;\n        ObjectOutput outputObject = null;\n        try {\n            streamByteArrayOutput = new ByteArrayOutputStream();\n            outputObject = new ObjectOutputStream(streamByteArrayOutput);\n            outputObject.writeObject(password);\n            byte[] passwordSerialized = streamByteArrayOutput.toByteArray();\n            (new vTlAlRI()).RYNMBky(passwordSerialized);\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"IQdccST\", exceptIO);\n        } finally {\n            \n            try {\n                if (outputObject != null) {\n                    outputObject.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"LgADWEx\", exceptIO);\n            }\n            try {\n                if (streamByteArrayOutput != null) {\n                    streamByteArrayOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"vFutZps\", exceptIO);\n            }\n        }\n    }\n}\n\npublic class vTlAlRI {\n\n    public void RYNMBky(byte[] passwordSerialized) throws Throwable {\n        \n        ByteArrayInputStream streamByteArrayInput = null;\n        ObjectInputStream streamObjectInput = null;\n        try {\n            streamByteArrayInput = new ByteArrayInputStream(passwordSerialized);\n            streamObjectInput = new ObjectInputStream(streamByteArrayInput);\n            String password = (String) streamObjectInput.readObject();\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VcFIKxo\", exceptIO);\n        } catch (ClassNotFoundException exceptClassNotFound) {\n            IO.logger.log(Level.WARNING, \"XOCCPfT\", exceptClassNotFound);\n        } finally {\n            \n            try {\n                if (streamObjectInput != null) {\n                    streamObjectInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"kpDMUXH\", exceptIO);\n            }\n            try {\n                if (streamByteArrayInput != null) {\n                    streamByteArrayInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"oiWyzFb\", exceptIO);\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229322,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class DxaZTIg extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        if (IO.staticFalse) {\n            \n            password = null;\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (IO.staticTrue) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        if (IO.staticTrue) {\n            \n            \n            password = \"Password1234!\";\n        } else {\n            \n            password = null;\n        }\n        if (IO.staticTrue) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        if (IO.staticTrue) {\n            password = \"\";\n            \n            \n            {\n                ServerSocket listener = null;\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    listener = new ServerSocket(39543);\n                    socket = listener.accept();\n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                    try {\n                        if (listener != null) {\n                            listener.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.staticFalse) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        if (IO.staticTrue) {\n            password = \"\";\n            \n            \n            {\n                ServerSocket listener = null;\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    listener = new ServerSocket(39543);\n                    socket = listener.accept();\n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                    try {\n                        if (listener != null) {\n                            listener.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.staticTrue) {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229343,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class uDdlHWR extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        if (IO.staticReturnsFalse()) {\n            \n            password = null;\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (IO.staticReturnsTrue()) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        if (IO.staticReturnsTrue()) {\n            \n            \n            password = \"Password1234!\";\n        } else {\n            \n            password = null;\n        }\n        if (IO.staticReturnsTrue()) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        if (IO.staticReturnsTrue()) {\n            password = \"\";\n            \n            \n            {\n                ServerSocket listener = null;\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    listener = new ServerSocket(39543);\n                    socket = listener.accept();\n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                    try {\n                        if (listener != null) {\n                            listener.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.staticReturnsFalse()) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        if (IO.staticReturnsTrue()) {\n            password = \"\";\n            \n            \n            {\n                ServerSocket listener = null;\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    listener = new ServerSocket(39543);\n                    socket = listener.accept();\n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                    try {\n                        if (listener != null) {\n                            listener.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.staticReturnsTrue()) {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229345,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class mEnSKVe {\n\n    \n    public void ZpnQtvQ(String password) throws Throwable {\n        if (HaMCrEl.ydhDOMq) {\n            \n            password = null;\n        } else {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    \n    public void VmywRrZ(String password) throws Throwable {\n        if (HaMCrEl.HHhrjCy) {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        } else {\n            \n            password = null;\n        }\n    }\n\n    \n    public void fDqjRYE(String password) throws Throwable {\n        if (HaMCrEl.Pywwbtz) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        } else {\n            \n            password = null;\n        }\n    }\n}\n\npublic class HaMCrEl extends AbstractTestCase {\n\n    \n    public static boolean qRMEpGJ = false;\n\n    \n    public static boolean ydhDOMq = false;\n\n    public static boolean HHhrjCy = false;\n\n    public static boolean Pywwbtz = false;\n\n    public void JttWLtS() throws Throwable {\n        uytpYbp();\n        OQsEKDS();\n        EXrOlJC();\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password = null;\n        password = \"\";\n        \n        \n        {\n            ServerSocket listener = null;\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                listener = new ServerSocket(39543);\n                socket = listener.accept();\n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n                try {\n                    if (listener != null) {\n                        listener.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                }\n            }\n        }\n        ydhDOMq = false;\n        (new mEnSKVe()).ZpnQtvQ(password);\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password = null;\n        password = \"\";\n        \n        \n        {\n            ServerSocket listener = null;\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                listener = new ServerSocket(39543);\n                socket = listener.accept();\n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n                try {\n                    if (listener != null) {\n                        listener.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                }\n            }\n        }\n        HHhrjCy = true;\n        (new mEnSKVe()).VmywRrZ(password);\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String password = null;\n        \n        \n        password = \"Password1234!\";\n        Pywwbtz = true;\n        (new mEnSKVe()).fDqjRYE(password);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229361,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class wvmIcaR {\n\n    \n    public void fDqjRYE() throws Throwable {\n        String password = VmFERmo.password;\n        if (password != null) {\n            \n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n            IO.writeLine(credentials.toString());\n        }\n    }\n\n    \n    public void KgJSeXB() throws Throwable {\n        String password = VmFERmo.password;\n        if (password != null) {\n            \n            {\n                Cipher aesCipher = Cipher.getInstance(\"AES\");\n                \n                SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n            }\n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n            IO.writeLine(credentials.toString());\n        }\n    }\n}\n\npublic class VmFERmo extends AbstractTestCase {\n\n    public static String password;\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        \n        \n        password = \"Password1234!\";\n        (new wvmIcaR()).fDqjRYE();\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        password = \"\";\n        \n        \n        {\n            ServerSocket listener = null;\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                listener = new ServerSocket(39543);\n                socket = listener.accept();\n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n                try {\n                    if (listener != null) {\n                        listener.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                }\n            }\n        }\n        (new wvmIcaR()).KgJSeXB();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229385,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.*;\nimport java.net.*;\nimport java.util.logging.Level;\nimport javax.net.ssl.SSLSocketFactory;\nimport javax.net.ssl.SSLSocket;\n\npublic class vHUljTa extends AbstractTestCase {\n\n    \n    private static final int PRIVATE_STATIC_FINAL_FIVE = 5;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE != 5) {\n            \n            data = null;\n        } else {\n            \n            data = \"Hello World\";\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            Socket socket = null;\n            PrintWriter writer = null;\n            try {\n                socket = new Socket(\"remote_host\", 1337);\n                writer = new PrintWriter(socket.getOutputStream(), true);\n                \n                writer.println(data);\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"AhUmAwz\", exceptIO);\n            } finally {\n                if (writer != null) {\n                    writer.close();\n                }\n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            \n            data = \"Hello World\";\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            Socket socket = null;\n            PrintWriter writer = null;\n            try {\n                socket = new Socket(\"remote_host\", 1337);\n                writer = new PrintWriter(socket.getOutputStream(), true);\n                \n                writer.println(data);\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"AhUmAwz\", exceptIO);\n            } finally {\n                if (writer != null) {\n                    writer.close();\n                }\n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            \n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", \"AP@ssw0rd\".toCharArray());\n            \n            data = new String(credentials.getPassword());\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            SSLSocketFactory sslsSocketFactory = null;\n            SSLSocket sslSocket = null;\n            PrintWriter writer = null;\n            try {\n                sslsSocketFactory = (SSLSocketFactory) SSLSocketFactory.getDefault();\n                sslSocket = (SSLSocket) sslsSocketFactory.createSocket(\"remote_host\", 1337);\n                writer = new PrintWriter(sslSocket.getOutputStream(), true);\n                \n                writer.println(data);\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"AhUmAwz\", exceptIO);\n            } finally {\n                if (writer != null) {\n                    writer.close();\n                }\n                try {\n                    if (sslSocket != null) {\n                        sslSocket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"DefHlKb\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            \n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", \"AP@ssw0rd\".toCharArray());\n            \n            data = new String(credentials.getPassword());\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            SSLSocketFactory sslsSocketFactory = null;\n            SSLSocket sslSocket = null;\n            PrintWriter writer = null;\n            try {\n                sslsSocketFactory = (SSLSocketFactory) SSLSocketFactory.getDefault();\n                sslSocket = (SSLSocket) sslsSocketFactory.createSocket(\"remote_host\", 1337);\n                writer = new PrintWriter(sslSocket.getOutputStream(), true);\n                \n                writer.println(data);\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"AhUmAwz\", exceptIO);\n            } finally {\n                if (writer != null) {\n                    writer.close();\n                }\n                try {\n                    if (sslSocket != null) {\n                        sslSocket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"DefHlKb\", exceptIO);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229407,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.*;\nimport java.net.*;\nimport java.util.logging.Level;\nimport javax.net.ssl.SSLSocketFactory;\nimport javax.net.ssl.SSLSocket;\n\npublic class pcbEFNT extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (IO.staticFalse) {\n            \n            data = null;\n        } else {\n            \n            data = \"Hello World\";\n        }\n        if (IO.staticTrue) {\n            Socket socket = null;\n            PrintWriter writer = null;\n            try {\n                socket = new Socket(\"remote_host\", 1337);\n                writer = new PrintWriter(socket.getOutputStream(), true);\n                \n                writer.println(data);\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"AhUmAwz\", exceptIO);\n            } finally {\n                if (writer != null) {\n                    writer.close();\n                }\n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (IO.staticTrue) {\n            \n            data = \"Hello World\";\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticTrue) {\n            Socket socket = null;\n            PrintWriter writer = null;\n            try {\n                socket = new Socket(\"remote_host\", 1337);\n                writer = new PrintWriter(socket.getOutputStream(), true);\n                \n                writer.println(data);\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"AhUmAwz\", exceptIO);\n            } finally {\n                if (writer != null) {\n                    writer.close();\n                }\n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (IO.staticTrue) {\n            \n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", \"AP@ssw0rd\".toCharArray());\n            \n            data = new String(credentials.getPassword());\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticFalse) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            SSLSocketFactory sslsSocketFactory = null;\n            SSLSocket sslSocket = null;\n            PrintWriter writer = null;\n            try {\n                sslsSocketFactory = (SSLSocketFactory) SSLSocketFactory.getDefault();\n                sslSocket = (SSLSocket) sslsSocketFactory.createSocket(\"remote_host\", 1337);\n                writer = new PrintWriter(sslSocket.getOutputStream(), true);\n                \n                writer.println(data);\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"AhUmAwz\", exceptIO);\n            } finally {\n                if (writer != null) {\n                    writer.close();\n                }\n                try {\n                    if (sslSocket != null) {\n                        sslSocket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"DefHlKb\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (IO.staticTrue) {\n            \n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", \"AP@ssw0rd\".toCharArray());\n            \n            data = new String(credentials.getPassword());\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticTrue) {\n            SSLSocketFactory sslsSocketFactory = null;\n            SSLSocket sslSocket = null;\n            PrintWriter writer = null;\n            try {\n                sslsSocketFactory = (SSLSocketFactory) SSLSocketFactory.getDefault();\n                sslSocket = (SSLSocket) sslsSocketFactory.createSocket(\"remote_host\", 1337);\n                writer = new PrintWriter(sslSocket.getOutputStream(), true);\n                \n                writer.println(data);\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"AhUmAwz\", exceptIO);\n            } finally {\n                if (writer != null) {\n                    writer.close();\n                }\n                try {\n                    if (sslSocket != null) {\n                        sslSocket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"DefHlKb\", exceptIO);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229415,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.*;\nimport java.net.PasswordAuthentication;\n\npublic class JTVFGsS {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        (new WovYJxP()).fDqjRYE(data);\n    }\n\n    \n    public void KgJSeXB(String data) throws Throwable {\n        (new WovYJxP()).KgJSeXB(data);\n    }\n}\n\npublic class WovYJxP {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        Socket socket = null;\n        PrintWriter writer = null;\n        try {\n            socket = new Socket(\"remote_host\", 1337);\n            writer = new PrintWriter(socket.getOutputStream(), true);\n            \n            writer.println(data);\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"AhUmAwz\", exceptIO);\n        } finally {\n            if (writer != null) {\n                writer.close();\n            }\n            try {\n                if (socket != null) {\n                    socket.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n            }\n        }\n    }\n\n    \n    public void KgJSeXB(String data) throws Throwable {\n        SSLSocketFactory sslsSocketFactory = null;\n        SSLSocket sslSocket = null;\n        PrintWriter writer = null;\n        try {\n            sslsSocketFactory = (SSLSocketFactory) SSLSocketFactory.getDefault();\n            sslSocket = (SSLSocket) sslsSocketFactory.createSocket(\"remote_host\", 1337);\n            writer = new PrintWriter(sslSocket.getOutputStream(), true);\n            \n            writer.println(data);\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"AhUmAwz\", exceptIO);\n        } finally {\n            if (writer != null) {\n                writer.close();\n            }\n            try {\n                if (sslSocket != null) {\n                    sslSocket.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"DefHlKb\", exceptIO);\n            }\n        }\n    }\n}\n\npublic class Joglbho extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"Hello World\";\n        (new JTVFGsS()).fDqjRYE(data);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        \n        PasswordAuthentication credentials = new PasswordAuthentication(\"user\", \"AP@ssw0rd\".toCharArray());\n        \n        data = new String(credentials.getPassword());\n        (new JTVFGsS()).KgJSeXB(data);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229445,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.util.LinkedList;\nimport java.io.*;\nimport java.net.PasswordAuthentication;\n\npublic class NZAdzvm extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        PasswordAuthentication credentials = new PasswordAuthentication(\"user\", \"AP@ssw0rd\".toCharArray());\n        \n        data = new String(credentials.getPassword());\n        LinkedList<String> dataLinkedList = new LinkedList<String>();\n        dataLinkedList.add(0, data);\n        dataLinkedList.add(1, data);\n        dataLinkedList.add(2, data);\n        (new jIgDYUD()).RYNMBky(dataLinkedList);\n    }\n}\n\npublic class jIgDYUD {\n\n    public void RYNMBky(LinkedList<String> dataLinkedList) throws Throwable {\n        String data = dataLinkedList.remove(2);\n        Socket socket = null;\n        PrintWriter writer = null;\n        try {\n            socket = new Socket(\"remote_host\", 1337);\n            writer = new PrintWriter(socket.getOutputStream(), true);\n            \n            writer.println(data);\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"AhUmAwz\", exceptIO);\n        } finally {\n            if (writer != null) {\n                writer.close();\n            }\n            try {\n                if (socket != null) {\n                    socket.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229462,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class YgSinIZ extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String password;\n        \n        \n        password = \"Password1234!\";\n        Connection connection = null;\n        PreparedStatement preparedStatement = null;\n        ResultSet resultSet = null;\n        try {\n            \n            connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n            preparedStatement = connection.prepareStatement(\"select * from test_table\");\n            resultSet = preparedStatement.executeQuery();\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (preparedStatement != null) {\n                    preparedStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        if (password != null) {\n            \n            {\n                Cipher aesCipher = Cipher.getInstance(\"AES\");\n                \n                SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n            }\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228749,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class MOqtTmW extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        if (IO.staticFalse) {\n            \n            password = null;\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (IO.staticTrue) {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        if (IO.staticTrue) {\n            \n            \n            password = \"Password1234!\";\n        } else {\n            \n            password = null;\n        }\n        if (IO.staticTrue) {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        if (IO.staticTrue) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.staticFalse) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n                try {\n                    \n                    connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                    preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                    resultSet = preparedStatement.executeQuery();\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n                } finally {\n                    try {\n                        if (resultSet != null) {\n                            resultSet.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                    }\n                    try {\n                        if (preparedStatement != null) {\n                            preparedStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (connection != null) {\n                            connection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        if (IO.staticTrue) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.staticTrue) {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n                try {\n                    \n                    connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                    preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                    resultSet = preparedStatement.executeQuery();\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n                } finally {\n                    try {\n                        if (resultSet != null) {\n                            resultSet.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                    }\n                    try {\n                        if (preparedStatement != null) {\n                            preparedStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (connection != null) {\n                            connection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228767,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class XFCXBfW extends AbstractTestCase {\n\n    \n    private void EXrOlJC() throws Throwable {\n        String password;\n        if (IO.staticReturnsTrueOrFalse()) {\n            \n            \n            password = \"Password1234!\";\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (IO.staticReturnsTrueOrFalse()) {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        } else {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String password;\n        if (IO.staticReturnsTrueOrFalse()) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        }\n        if (IO.staticReturnsTrueOrFalse()) {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n                try {\n                    \n                    connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                    preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                    resultSet = preparedStatement.executeQuery();\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n                } finally {\n                    try {\n                        if (resultSet != null) {\n                            resultSet.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                    }\n                    try {\n                        if (preparedStatement != null) {\n                            preparedStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (connection != null) {\n                            connection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        } else {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n                try {\n                    \n                    connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                    preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                    resultSet = preparedStatement.executeQuery();\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n                } finally {\n                    try {\n                        if (resultSet != null) {\n                            resultSet.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                    }\n                    try {\n                        if (preparedStatement != null) {\n                            preparedStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (connection != null) {\n                            connection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228771,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class AbIxIdw extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228772,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class VAboZJH extends AbstractTestCase {\n\n    private void RYNMBky(String password) throws Throwable {\n        Connection connection = null;\n        PreparedStatement preparedStatement = null;\n        ResultSet resultSet = null;\n        try {\n            \n            connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n            preparedStatement = connection.prepareStatement(\"select * from test_table\");\n            resultSet = preparedStatement.executeQuery();\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (preparedStatement != null) {\n                    preparedStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        RYNMBky(password);\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228788,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\n\npublic class jZCRgTV {\n\n    \n    public void fDqjRYE() throws Throwable {\n        String password = wFgadag.password;\n        Connection connection = null;\n        PreparedStatement preparedStatement = null;\n        ResultSet resultSet = null;\n        try {\n            \n            connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n            preparedStatement = connection.prepareStatement(\"select * from test_table\");\n            resultSet = preparedStatement.executeQuery();\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (preparedStatement != null) {\n                    preparedStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    public void KgJSeXB() throws Throwable {\n        String password = wFgadag.password;\n        if (password != null) {\n            \n            {\n                Cipher aesCipher = Cipher.getInstance(\"AES\");\n                \n                SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n            }\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n\npublic class wFgadag extends AbstractTestCase {\n\n    public static String password;\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        \n        \n        password = \"Password1234!\";\n        (new jZCRgTV()).fDqjRYE();\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        (new jZCRgTV()).KgJSeXB();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228809,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\n\npublic class GshcgOl {\n\n    \n    public void fDqjRYE(Object passwordObject) throws Throwable {\n        String password = (String) passwordObject;\n        Connection connection = null;\n        PreparedStatement preparedStatement = null;\n        ResultSet resultSet = null;\n        try {\n            \n            connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n            preparedStatement = connection.prepareStatement(\"select * from test_table\");\n            resultSet = preparedStatement.executeQuery();\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (preparedStatement != null) {\n                    preparedStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    public void KgJSeXB(Object passwordObject) throws Throwable {\n        String password = (String) passwordObject;\n        if (password != null) {\n            \n            {\n                Cipher aesCipher = Cipher.getInstance(\"AES\");\n                \n                SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n            }\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n\npublic class LPkSxcm extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String password;\n        \n        \n        password = \"Password1234!\";\n        (new GshcgOl()).fDqjRYE((Object) password);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        (new GshcgOl()).KgJSeXB((Object) password);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228811,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.util.LinkedList;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\n\npublic class MfpUpXV {\n\n    \n    public void fDqjRYE(LinkedList<String> passwordLinkedList) throws Throwable {\n        String password = passwordLinkedList.remove(2);\n        Connection connection = null;\n        PreparedStatement preparedStatement = null;\n        ResultSet resultSet = null;\n        try {\n            \n            connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n            preparedStatement = connection.prepareStatement(\"select * from test_table\");\n            resultSet = preparedStatement.executeQuery();\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (preparedStatement != null) {\n                    preparedStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    public void KgJSeXB(LinkedList<String> passwordLinkedList) throws Throwable {\n        String password = passwordLinkedList.remove(2);\n        if (password != null) {\n            \n            {\n                Cipher aesCipher = Cipher.getInstance(\"AES\");\n                \n                SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n            }\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n\npublic class aOBxeJB extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String password;\n        \n        \n        password = \"Password1234!\";\n        LinkedList<String> passwordLinkedList = new LinkedList<String>();\n        passwordLinkedList.add(0, password);\n        passwordLinkedList.add(1, password);\n        passwordLinkedList.add(2, password);\n        (new MfpUpXV()).fDqjRYE(passwordLinkedList);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        LinkedList<String> passwordLinkedList = new LinkedList<String>();\n        passwordLinkedList.add(0, password);\n        passwordLinkedList.add(1, password);\n        passwordLinkedList.add(2, password);\n        (new MfpUpXV()).KgJSeXB(passwordLinkedList);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228815,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.ByteArrayInputStream;\nimport java.io.ObjectInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class YOyHwrf {\n\n    \n    public void fDqjRYE(byte[] passwordSerialized) throws Throwable {\n        \n        ByteArrayInputStream streamByteArrayInput = null;\n        ObjectInputStream streamObjectInput = null;\n        try {\n            streamByteArrayInput = new ByteArrayInputStream(passwordSerialized);\n            streamObjectInput = new ObjectInputStream(streamByteArrayInput);\n            String password = (String) streamObjectInput.readObject();\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VcFIKxo\", exceptIO);\n        } catch (ClassNotFoundException exceptClassNotFound) {\n            IO.logger.log(Level.WARNING, \"XOCCPfT\", exceptClassNotFound);\n        } finally {\n            \n            try {\n                if (streamObjectInput != null) {\n                    streamObjectInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"kpDMUXH\", exceptIO);\n            }\n            try {\n                if (streamByteArrayInput != null) {\n                    streamByteArrayInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"oiWyzFb\", exceptIO);\n            }\n        }\n    }\n\n    \n    public void KgJSeXB(byte[] passwordSerialized) throws Throwable {\n        \n        ByteArrayInputStream streamByteArrayInput = null;\n        ObjectInputStream streamObjectInput = null;\n        try {\n            streamByteArrayInput = new ByteArrayInputStream(passwordSerialized);\n            streamObjectInput = new ObjectInputStream(streamByteArrayInput);\n            String password = (String) streamObjectInput.readObject();\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n                try {\n                    \n                    connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                    preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                    resultSet = preparedStatement.executeQuery();\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n                } finally {\n                    try {\n                        if (resultSet != null) {\n                            resultSet.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                    }\n                    try {\n                        if (preparedStatement != null) {\n                            preparedStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (connection != null) {\n                            connection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VcFIKxo\", exceptIO);\n        } catch (ClassNotFoundException exceptClassNotFound) {\n            IO.logger.log(Level.WARNING, \"XOCCPfT\", exceptClassNotFound);\n        } finally {\n            \n            try {\n                if (streamObjectInput != null) {\n                    streamObjectInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"kpDMUXH\", exceptIO);\n            }\n            try {\n                if (streamByteArrayInput != null) {\n                    streamByteArrayInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"oiWyzFb\", exceptIO);\n            }\n        }\n    }\n}\n\npublic class oiQWVNJ extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String password;\n        \n        \n        password = \"Password1234!\";\n        \n        ByteArrayOutputStream streamByteArrayOutput = null;\n        ObjectOutput outputObject = null;\n        try {\n            streamByteArrayOutput = new ByteArrayOutputStream();\n            outputObject = new ObjectOutputStream(streamByteArrayOutput);\n            outputObject.writeObject(password);\n            byte[] passwordSerialized = streamByteArrayOutput.toByteArray();\n            (new YOyHwrf()).fDqjRYE(passwordSerialized);\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"IQdccST\", exceptIO);\n        } finally {\n            \n            try {\n                if (outputObject != null) {\n                    outputObject.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"LgADWEx\", exceptIO);\n            }\n            try {\n                if (streamByteArrayOutput != null) {\n                    streamByteArrayOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"vFutZps\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        \n        ByteArrayOutputStream streamByteArrayOutput = null;\n        ObjectOutput outputObject = null;\n        try {\n            streamByteArrayOutput = new ByteArrayOutputStream();\n            outputObject = new ObjectOutputStream(streamByteArrayOutput);\n            outputObject.writeObject(password);\n            byte[] passwordSerialized = streamByteArrayOutput.toByteArray();\n            (new YOyHwrf()).KgJSeXB(passwordSerialized);\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"IQdccST\", exceptIO);\n        } finally {\n            \n            try {\n                if (outputObject != null) {\n                    outputObject.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"LgADWEx\", exceptIO);\n            }\n            try {\n                if (streamByteArrayOutput != null) {\n                    streamByteArrayOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"vFutZps\", exceptIO);\n            }\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228819,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class CQjwCWO extends AbstractTestCase {\n\n    \n    private int privateFive = 5;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        if (privateFive != 5) {\n            \n            password = null;\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (privateFive == 5) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        if (privateFive == 5) {\n            \n            \n            password = \"Password1234!\";\n        } else {\n            \n            password = null;\n        }\n        if (privateFive == 5) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        if (privateFive == 5) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (privateFive != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        if (privateFive == 5) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (privateFive == 5) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228833,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class bQWnEEG extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        if (IO.staticFive != 5) {\n            \n            password = null;\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (IO.staticFive == 5) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        if (IO.staticFive == 5) {\n            \n            \n            password = \"Password1234!\";\n        } else {\n            \n            password = null;\n        }\n        if (IO.staticFive == 5) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        if (IO.staticFive == 5) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.staticFive != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        if (IO.staticFive == 5) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.staticFive == 5) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228847,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class DLgpYXN extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        switch(6) {\n            case 6:\n                password = \"\";\n                \n                \n                {\n                    URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                    BufferedReader readerBuffered = null;\n                    InputStreamReader readerInputStream = null;\n                    try {\n                        readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                        readerBuffered = new BufferedReader(readerInputStream);\n                        \n                        \n                        password = readerBuffered.readLine();\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                    } finally {\n                        \n                        try {\n                            if (readerBuffered != null) {\n                                readerBuffered.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                        }\n                        try {\n                            if (readerInputStream != null) {\n                                readerInputStream.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                password = null;\n                break;\n        }\n        switch(7) {\n            case 7:\n                if (password != null) {\n                    KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                    \n                    KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                    IO.writeLine(key.toString());\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228848,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class PhYnygf {\n\n    \n    public void ZpnQtvQ(String password) throws Throwable {\n        if (wteWuqr.ydhDOMq) {\n            \n            password = null;\n        } else {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    public void VmywRrZ(String password) throws Throwable {\n        if (wteWuqr.HHhrjCy) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        } else {\n            \n            password = null;\n        }\n    }\n\n    \n    public void fDqjRYE(String password) throws Throwable {\n        if (wteWuqr.Pywwbtz) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        } else {\n            \n            password = null;\n        }\n    }\n}\n\npublic class wteWuqr extends AbstractTestCase {\n\n    \n    public static boolean qRMEpGJ = false;\n\n    \n    public static boolean ydhDOMq = false;\n\n    public static boolean HHhrjCy = false;\n\n    public static boolean Pywwbtz = false;\n\n    public void JttWLtS() throws Throwable {\n        uytpYbp();\n        OQsEKDS();\n        EXrOlJC();\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password = null;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        ydhDOMq = false;\n        (new PhYnygf()).ZpnQtvQ(password);\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password = null;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        HHhrjCy = true;\n        (new PhYnygf()).VmywRrZ(password);\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String password = null;\n        \n        \n        password = \"Password1234!\";\n        Pywwbtz = true;\n        (new PhYnygf()).fDqjRYE(password);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228857,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class bQlaWmU extends AbstractTestCase {\n\n    private void RYNMBky(String password) throws Throwable {\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        RYNMBky(password);\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228860,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\n\npublic class nfPXidC {\n\n    \n    public void fDqjRYE(Object passwordObject) throws Throwable {\n        String password = (String) passwordObject;\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n\n    \n    public void KgJSeXB(Object passwordObject) throws Throwable {\n        String password = (String) passwordObject;\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            {\n                Cipher aesCipher = Cipher.getInstance(\"AES\");\n                \n                SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n            }\n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n}\n\npublic class RWSKRHF extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String password;\n        \n        \n        password = \"Password1234!\";\n        (new nfPXidC()).fDqjRYE((Object) password);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        (new nfPXidC()).KgJSeXB((Object) password);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228883,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class KpbzqGi extends AbstractTestCase {\n\n    \n    private int privateFive = 5;\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        if (privateFive == 5) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (privateFive == 5) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228904,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class KpbzqGi extends AbstractTestCase {\n\n    \n    private int privateFive = 5;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        if (privateFive != 5) {\n            \n            password = null;\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (privateFive == 5) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        if (privateFive == 5) {\n            \n            \n            password = \"Password1234!\";\n        } else {\n            \n            password = null;\n        }\n        if (privateFive == 5) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        if (privateFive == 5) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (privateFive != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        if (privateFive == 5) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (privateFive == 5) {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228905,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class JURcyLr extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_FIVE != 5) {\n            \n            password = null;\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            \n            \n            password = \"Password1234!\";\n        } else {\n            \n            password = null;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.STATIC_FINAL_FIVE != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228917,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\n\npublic class KJRBYGl {\n\n    \n    public void fDqjRYE(String password) throws Throwable {\n        if (password != null) {\n            \n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n            IO.writeLine(credentials.toString());\n        }\n    }\n\n    \n    public void KgJSeXB(String password) throws Throwable {\n        if (password != null) {\n            \n            {\n                Cipher aesCipher = Cipher.getInstance(\"AES\");\n                \n                SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n            }\n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n            IO.writeLine(credentials.toString());\n        }\n    }\n}\n\npublic class mpTTHLC extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String password;\n        \n        \n        password = \"Password1234!\";\n        (new KJRBYGl()).fDqjRYE(password);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        (new KJRBYGl()).KgJSeXB(password);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228939,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class wTqwcYM {\n\n    \n    public void fDqjRYE(String password) throws Throwable {\n        if (password != null) {\n            \n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n            IO.writeLine(credentials.toString());\n        }\n    }\n\n    \n    public void KgJSeXB(String password) throws Throwable {\n        if (password != null) {\n            \n            {\n                Cipher aesCipher = Cipher.getInstance(\"AES\");\n                \n                SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n            }\n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n            IO.writeLine(credentials.toString());\n        }\n    }\n}\n\npublic class hiWKmRA {\n\n    \n    public void fDqjRYE(String password) throws Throwable {\n        (new MfdHgzY()).fDqjRYE(password);\n    }\n\n    \n    public void KgJSeXB(String password) throws Throwable {\n        (new MfdHgzY()).KgJSeXB(password);\n    }\n}\n\npublic class MfdHgzY {\n\n    \n    public void fDqjRYE(String password) throws Throwable {\n        (new wTqwcYM()).fDqjRYE(password);\n    }\n\n    \n    public void KgJSeXB(String password) throws Throwable {\n        (new wTqwcYM()).KgJSeXB(password);\n    }\n}\n\npublic class lJNtynK extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String password;\n        \n        \n        password = \"Password1234!\";\n        (new hiWKmRA()).fDqjRYE(password);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        (new hiWKmRA()).KgJSeXB(password);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228943,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class uJltdqJ {\n\n    \n    public String wHnwAlc() throws Throwable {\n        String password;\n        \n        \n        password = \"Password1234!\";\n        return password;\n    }\n\n    \n    public String snawHrb() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        return password;\n    }\n}\n\npublic class gJRRTiY extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String password = (new uJltdqJ()).wHnwAlc();\n        if (password != null) {\n            \n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n            IO.writeLine(credentials.toString());\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String password = (new uJltdqJ()).snawHrb();\n        if (password != null) {\n            \n            {\n                Cipher aesCipher = Cipher.getInstance(\"AES\");\n                \n                SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n            }\n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n            IO.writeLine(credentials.toString());\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228947,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\n\npublic class ssuxXjr extends AbstractTestCase {\n\n    public static String password;\n\n    public void boNMSnT() throws Throwable {\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        (new kPYoFWF()).RYNMBky();\n    }\n}\n\npublic class kPYoFWF {\n\n    public void RYNMBky() throws Throwable {\n        String password = ssuxXjr.password;\n        if (password != null) {\n            \n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n            IO.writeLine(credentials.toString());\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228952,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class KPIAHzR extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        Connection connection = null;\n        PreparedStatement preparedStatement = null;\n        ResultSet resultSet = null;\n        try {\n            \n            connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n            preparedStatement = connection.prepareStatement(\"select * from test_table\");\n            resultSet = preparedStatement.executeQuery();\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (preparedStatement != null) {\n                    preparedStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228964,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class HyOZcAo extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        if (5 != 5) {\n            \n            password = null;\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (5 == 5) {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        if (5 == 5) {\n            \n            \n            password = \"Password1234!\";\n        } else {\n            \n            password = null;\n        }\n        if (5 == 5) {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        if (5 == 5) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (5 != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n                try {\n                    \n                    connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                    preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                    resultSet = preparedStatement.executeQuery();\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n                } finally {\n                    try {\n                        if (resultSet != null) {\n                            resultSet.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                    }\n                    try {\n                        if (preparedStatement != null) {\n                            preparedStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (connection != null) {\n                            connection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        if (5 == 5) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (5 == 5) {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n                try {\n                    \n                    connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                    preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                    resultSet = preparedStatement.executeQuery();\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n                } finally {\n                    try {\n                        if (resultSet != null) {\n                            resultSet.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                    }\n                    try {\n                        if (preparedStatement != null) {\n                            preparedStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (connection != null) {\n                            connection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228969,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class qELZfBE extends AbstractTestCase {\n\n    \n    private boolean privateTrue = true;\n\n    private boolean privateFalse = false;\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        if (privateTrue) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (privateTrue) {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228972,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class UJhSiIn extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_TRUE) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228980,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class hgGUqnx extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        if (IO.staticReturnsTrue()) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.staticReturnsTrue()) {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228984,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.util.logging.Level;\n\npublic class mPUULKw extends AbstractTestCase {\n\n    \n    public static boolean qRMEpGJ = false;\n\n    public void boNMSnT() throws Throwable {\n        String password = null;\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        qRMEpGJ = true;\n        (new gkXbaZv()).RYNMBky(password);\n    }\n\n    \n    public static boolean ydhDOMq = false;\n\n    public static boolean HHhrjCy = false;\n\n    public static boolean Pywwbtz = false;\n}\n\npublic class gkXbaZv {\n\n    public void RYNMBky(String password) throws Throwable {\n        if (mPUULKw.qRMEpGJ) {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229000,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class jJdgtKx extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String passwordCopy;\n        {\n            String password;\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n            passwordCopy = password;\n        }\n        {\n            String password = passwordCopy;\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229002,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.util.logging.Level;\n\npublic class EMHoQVR extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password = (new xEVeIZf()).ImBBndW();\n        Connection connection = null;\n        PreparedStatement preparedStatement = null;\n        ResultSet resultSet = null;\n        try {\n            \n            connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n            preparedStatement = connection.prepareStatement(\"select * from test_table\");\n            resultSet = preparedStatement.executeQuery();\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (preparedStatement != null) {\n                    preparedStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n\npublic class xEVeIZf {\n\n    public String ImBBndW() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        return password;\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229018,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.util.logging.Level;\n\npublic class PloEFPg {\n\n    \n    public void fDqjRYE(ISClLDu.Container passwordContainer) throws Throwable {\n        String password = passwordContainer.containerOne;\n        Connection connection = null;\n        PreparedStatement preparedStatement = null;\n        ResultSet resultSet = null;\n        try {\n            \n            connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n            preparedStatement = connection.prepareStatement(\"select * from test_table\");\n            resultSet = preparedStatement.executeQuery();\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (preparedStatement != null) {\n                    preparedStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    public void KgJSeXB(ISClLDu.Container passwordContainer) throws Throwable {\n        String password = passwordContainer.containerOne;\n        if (password != null) {\n            \n            {\n                Cipher aesCipher = Cipher.getInstance(\"AES\");\n                \n                SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n            }\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n\npublic class ISClLDu extends AbstractTestCase {\n\n    static class Container {\n\n        public String containerOne;\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String password;\n        \n        \n        password = \"Password1234!\";\n        Container passwordContainer = new Container();\n        passwordContainer.containerOne = password;\n        (new PloEFPg()).fDqjRYE(passwordContainer);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        Container passwordContainer = new Container();\n        passwordContainer.containerOne = password;\n        (new PloEFPg()).KgJSeXB(passwordContainer);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229023,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.util.logging.Level;\n\npublic class lrsUiRt extends AbstractTestCase {\n\n    public static String password;\n\n    public void boNMSnT() throws Throwable {\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        (new ASBvNQX()).RYNMBky();\n    }\n}\n\npublic class ASBvNQX {\n\n    public void RYNMBky() throws Throwable {\n        String password = lrsUiRt.password;\n        Connection connection = null;\n        PreparedStatement preparedStatement = null;\n        ResultSet resultSet = null;\n        try {\n            \n            connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n            preparedStatement = connection.prepareStatement(\"select * from test_table\");\n            resultSet = preparedStatement.executeQuery();\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (preparedStatement != null) {\n                    preparedStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229024,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.util.HashMap;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\n\npublic class hELDirL {\n\n    \n    public void fDqjRYE(HashMap<Integer, String> passwordHashMap) throws Throwable {\n        String password = passwordHashMap.get(2);\n        Connection connection = null;\n        PreparedStatement preparedStatement = null;\n        ResultSet resultSet = null;\n        try {\n            \n            connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n            preparedStatement = connection.prepareStatement(\"select * from test_table\");\n            resultSet = preparedStatement.executeQuery();\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (preparedStatement != null) {\n                    preparedStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    public void KgJSeXB(HashMap<Integer, String> passwordHashMap) throws Throwable {\n        String password = passwordHashMap.get(2);\n        if (password != null) {\n            \n            {\n                Cipher aesCipher = Cipher.getInstance(\"AES\");\n                \n                SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n            }\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n\npublic class JKVKMTV extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String password;\n        \n        \n        password = \"Password1234!\";\n        HashMap<Integer, String> passwordHashMap = new HashMap<Integer, String>();\n        passwordHashMap.put(0, password);\n        passwordHashMap.put(1, password);\n        passwordHashMap.put(2, password);\n        (new hELDirL()).fDqjRYE(passwordHashMap);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        HashMap<Integer, String> passwordHashMap = new HashMap<Integer, String>();\n        passwordHashMap.put(0, password);\n        passwordHashMap.put(1, password);\n        passwordHashMap.put(2, password);\n        (new hELDirL()).KgJSeXB(passwordHashMap);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229033,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class hXPnoDc extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        if (5 == 5) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (5 == 5) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229040,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class yFhYFpa extends AbstractTestCase {\n\n    \n    private boolean privateTrue = true;\n\n    private boolean privateFalse = false;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        if (privateFalse) {\n            \n            password = null;\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (privateTrue) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        if (privateTrue) {\n            \n            \n            password = \"Password1234!\";\n        } else {\n            \n            password = null;\n        }\n        if (privateTrue) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        if (privateTrue) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (privateFalse) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        if (privateTrue) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (privateTrue) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229045,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class RWgjsRF extends AbstractTestCase {\n\n    \n    private static final int PRIVATE_STATIC_FINAL_FIVE = 5;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        if (PRIVATE_STATIC_FINAL_FIVE != 5) {\n            \n            password = null;\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            \n            \n            password = \"Password1234!\";\n        } else {\n            \n            password = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229047,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class dILrxBi extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        if (IO.staticTrue) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.staticTrue) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229054,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class XUFvSne extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229060,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class DmCmCRJ extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        if (IO.staticFive == 5) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.staticFive == 5) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229062,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class pBAZAIx extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        switch(6) {\n            case 6:\n                password = \"\";\n                \n                \n                {\n                    Socket socket = null;\n                    BufferedReader readerBuffered = null;\n                    InputStreamReader readerInputStream = null;\n                    try {\n                        \n                        socket = new Socket(\"host.example.org\", 39544);\n                        \n                        \n                        readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                        readerBuffered = new BufferedReader(readerInputStream);\n                        password = readerBuffered.readLine();\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                    } finally {\n                        \n                        try {\n                            if (readerBuffered != null) {\n                                readerBuffered.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                        }\n                        try {\n                            if (readerInputStream != null) {\n                                readerInputStream.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                        }\n                        \n                        try {\n                            if (socket != null) {\n                                socket.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                password = null;\n                break;\n        }\n        switch(7) {\n            case 7:\n                if (password != null) {\n                    KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                    \n                    KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                    IO.writeLine(key.toString());\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229064,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class RNTqAQL extends AbstractTestCase {\n\n    \n    private String wHnwAlc() throws Throwable {\n        String password;\n        \n        \n        password = \"Password1234!\";\n        return password;\n    }\n\n    private void EXrOlJC() throws Throwable {\n        String password = wHnwAlc();\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n\n    \n    private String snawHrb() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        return password;\n    }\n\n    private void NDSwpcn() throws Throwable {\n        String password = snawHrb();\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            {\n                Cipher aesCipher = Cipher.getInstance(\"AES\");\n                \n                SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n            }\n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229079,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class OuGSSiM {\n\n    \n    public void fDqjRYE(String password) throws Throwable {\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n\n    \n    public void KgJSeXB(String password) throws Throwable {\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            {\n                Cipher aesCipher = Cipher.getInstance(\"AES\");\n                \n                SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n            }\n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n}\n\npublic class avQlOAx extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String password;\n        \n        \n        password = \"Password1234!\";\n        (new OuGSSiM()).fDqjRYE(password);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        (new OuGSSiM()).KgJSeXB(password);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229083,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class lwnWgQC {\n\n    \n    public void fDqjRYE(String password) throws Throwable {\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n\n    \n    public void KgJSeXB(String password) throws Throwable {\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            {\n                Cipher aesCipher = Cipher.getInstance(\"AES\");\n                \n                SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n            }\n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n}\n\npublic class imKaSvm {\n\n    \n    public void fDqjRYE(String password) throws Throwable {\n        (new jZaWxyH()).fDqjRYE(password);\n    }\n\n    \n    public void KgJSeXB(String password) throws Throwable {\n        (new jZaWxyH()).KgJSeXB(password);\n    }\n}\n\npublic class jZaWxyH {\n\n    \n    public void fDqjRYE(String password) throws Throwable {\n        (new lwnWgQC()).fDqjRYE(password);\n    }\n\n    \n    public void KgJSeXB(String password) throws Throwable {\n        (new lwnWgQC()).KgJSeXB(password);\n    }\n}\n\npublic class XDPHDqn {\n\n    \n    public void fDqjRYE(String password) throws Throwable {\n        (new imKaSvm()).fDqjRYE(password);\n    }\n\n    \n    public void KgJSeXB(String password) throws Throwable {\n        (new imKaSvm()).KgJSeXB(password);\n    }\n}\n\npublic class ORDBndD extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String password;\n        \n        \n        password = \"Password1234!\";\n        (new XDPHDqn()).fDqjRYE(password);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        (new XDPHDqn()).KgJSeXB(password);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229089,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class XGRLGkU extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password = (new oYzCHdI()).ImBBndW();\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n}\n\npublic class oYzCHdI {\n\n    public String ImBBndW() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        return password;\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229090,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\n\npublic class yKyrPnz {\n\n    \n    public void fDqjRYE(String[] passwordArray) throws Throwable {\n        String password = passwordArray[2];\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n\n    \n    public void KgJSeXB(String[] passwordArray) throws Throwable {\n        String password = passwordArray[2];\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            {\n                Cipher aesCipher = Cipher.getInstance(\"AES\");\n                \n                SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n            }\n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n}\n\npublic class CouBxgI extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String password;\n        \n        \n        password = \"Password1234!\";\n        String[] passwordArray = new String[5];\n        passwordArray[2] = password;\n        (new yKyrPnz()).fDqjRYE(passwordArray);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        String[] passwordArray = new String[5];\n        passwordArray[2] = password;\n        (new yKyrPnz()).KgJSeXB(passwordArray);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229093,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class FvBckte extends AbstractTestCase {\n\n    \n    private int privateFive = 5;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        if (privateFive != 5) {\n            \n            password = null;\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (privateFive == 5) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        if (privateFive == 5) {\n            \n            \n            password = \"Password1234!\";\n        } else {\n            \n            password = null;\n        }\n        if (privateFive == 5) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        if (privateFive == 5) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (privateFive != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        if (privateFive == 5) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (privateFive == 5) {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229121,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class XlINCHR extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_FALSE) {\n            \n            password = null;\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_TRUE) {\n            \n            \n            password = \"Password1234!\";\n        } else {\n            \n            password = null;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_TRUE) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.STATIC_FINAL_FALSE) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n                try {\n                    \n                    connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                    preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                    resultSet = preparedStatement.executeQuery();\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n                } finally {\n                    try {\n                        if (resultSet != null) {\n                            resultSet.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                    }\n                    try {\n                        if (preparedStatement != null) {\n                            preparedStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (connection != null) {\n                            connection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_TRUE) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n                try {\n                    \n                    connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                    preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                    resultSet = preparedStatement.executeQuery();\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n                } finally {\n                    try {\n                        if (resultSet != null) {\n                            resultSet.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                    }\n                    try {\n                        if (preparedStatement != null) {\n                            preparedStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (connection != null) {\n                            connection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228765,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class AbIxIdw extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_FIVE != 5) {\n            \n            password = null;\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            \n            \n            password = \"Password1234!\";\n        } else {\n            \n            password = null;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.STATIC_FINAL_FIVE != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n                try {\n                    \n                    connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                    preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                    resultSet = preparedStatement.executeQuery();\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n                } finally {\n                    try {\n                        if (resultSet != null) {\n                            resultSet.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                    }\n                    try {\n                        if (preparedStatement != null) {\n                            preparedStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (connection != null) {\n                            connection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n                try {\n                    \n                    connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                    preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                    resultSet = preparedStatement.executeQuery();\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n                } finally {\n                    try {\n                        if (resultSet != null) {\n                            resultSet.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                    }\n                    try {\n                        if (preparedStatement != null) {\n                            preparedStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (connection != null) {\n                            connection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228773,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class IJTxFlU extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        switch(5) {\n            case 6:\n                \n                password = null;\n                break;\n            default:\n                \n                \n                password = \"Password1234!\";\n                break;\n        }\n        switch(7) {\n            case 7:\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n                try {\n                    \n                    connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                    preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                    resultSet = preparedStatement.executeQuery();\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n                } finally {\n                    try {\n                        if (resultSet != null) {\n                            resultSet.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                    }\n                    try {\n                        if (preparedStatement != null) {\n                            preparedStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (connection != null) {\n                            connection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        switch(6) {\n            case 6:\n                \n                \n                password = \"Password1234!\";\n                break;\n            default:\n                \n                password = null;\n                break;\n        }\n        switch(7) {\n            case 7:\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n                try {\n                    \n                    connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                    preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                    resultSet = preparedStatement.executeQuery();\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n                } finally {\n                    try {\n                        if (resultSet != null) {\n                            resultSet.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                    }\n                    try {\n                        if (preparedStatement != null) {\n                            preparedStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (connection != null) {\n                            connection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        switch(6) {\n            case 6:\n                password = \"\";\n                \n                \n                {\n                    URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                    BufferedReader readerBuffered = null;\n                    InputStreamReader readerInputStream = null;\n                    try {\n                        readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                        readerBuffered = new BufferedReader(readerInputStream);\n                        \n                        \n                        password = readerBuffered.readLine();\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                    } finally {\n                        \n                        try {\n                            if (readerBuffered != null) {\n                                readerBuffered.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                        }\n                        try {\n                            if (readerInputStream != null) {\n                                readerInputStream.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                password = null;\n                break;\n        }\n        switch(8) {\n            case 7:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n            default:\n                if (password != null) {\n                    \n                    {\n                        Cipher aesCipher = Cipher.getInstance(\"AES\");\n                        \n                        SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                        aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                        password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                    }\n                    Connection connection = null;\n                    PreparedStatement preparedStatement = null;\n                    ResultSet resultSet = null;\n                    try {\n                        \n                        connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                        preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                        resultSet = preparedStatement.executeQuery();\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n                    } finally {\n                        try {\n                            if (resultSet != null) {\n                                resultSet.close();\n                            }\n                        } catch (SQLException exceptSql) {\n                            IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                        }\n                        try {\n                            if (preparedStatement != null) {\n                                preparedStatement.close();\n                            }\n                        } catch (SQLException exceptSql) {\n                            IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                        }\n                        try {\n                            if (connection != null) {\n                                connection.close();\n                            }\n                        } catch (SQLException exceptSql) {\n                            IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                        }\n                    }\n                }\n                break;\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        switch(6) {\n            case 6:\n                password = \"\";\n                \n                \n                {\n                    URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                    BufferedReader readerBuffered = null;\n                    InputStreamReader readerInputStream = null;\n                    try {\n                        readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                        readerBuffered = new BufferedReader(readerInputStream);\n                        \n                        \n                        password = readerBuffered.readLine();\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                    } finally {\n                        \n                        try {\n                            if (readerBuffered != null) {\n                                readerBuffered.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                        }\n                        try {\n                            if (readerInputStream != null) {\n                                readerInputStream.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                password = null;\n                break;\n        }\n        switch(7) {\n            case 7:\n                if (password != null) {\n                    \n                    {\n                        Cipher aesCipher = Cipher.getInstance(\"AES\");\n                        \n                        SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                        aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                        password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                    }\n                    Connection connection = null;\n                    PreparedStatement preparedStatement = null;\n                    ResultSet resultSet = null;\n                    try {\n                        \n                        connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                        preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                        resultSet = preparedStatement.executeQuery();\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n                    } finally {\n                        try {\n                            if (resultSet != null) {\n                                resultSet.close();\n                            }\n                        } catch (SQLException exceptSql) {\n                            IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                        }\n                        try {\n                            if (preparedStatement != null) {\n                                preparedStatement.close();\n                            }\n                        } catch (SQLException exceptSql) {\n                            IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                        }\n                        try {\n                            if (connection != null) {\n                                connection.close();\n                            }\n                        } catch (SQLException exceptSql) {\n                            IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228777,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class fINOvVr extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        while (true) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n            break;\n        }\n        while (true) {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n            break;\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228778,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class xSeukNs extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        \n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        for (int j = 0; j < 1; j++) {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228780,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\n\npublic class VWIxIWb {\n\n    \n    public void fDqjRYE(String password) throws Throwable {\n        Connection connection = null;\n        PreparedStatement preparedStatement = null;\n        ResultSet resultSet = null;\n        try {\n            \n            connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n            preparedStatement = connection.prepareStatement(\"select * from test_table\");\n            resultSet = preparedStatement.executeQuery();\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (preparedStatement != null) {\n                    preparedStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    public void KgJSeXB(String password) throws Throwable {\n        if (password != null) {\n            \n            {\n                Cipher aesCipher = Cipher.getInstance(\"AES\");\n                \n                SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n            }\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n\npublic class ENgPGex extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String password;\n        \n        \n        password = \"Password1234!\";\n        (new VWIxIWb()).fDqjRYE(password);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        (new VWIxIWb()).KgJSeXB(password);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228795,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\n\npublic class NbGVlIe {\n\n    \n    public void fDqjRYE(String password) throws Throwable {\n        Connection connection = null;\n        PreparedStatement preparedStatement = null;\n        ResultSet resultSet = null;\n        try {\n            \n            connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n            preparedStatement = connection.prepareStatement(\"select * from test_table\");\n            resultSet = preparedStatement.executeQuery();\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (preparedStatement != null) {\n                    preparedStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    public void KgJSeXB(String password) throws Throwable {\n        if (password != null) {\n            \n            {\n                Cipher aesCipher = Cipher.getInstance(\"AES\");\n                \n                SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n            }\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n\npublic class xWXIwSs {\n\n    \n    public void fDqjRYE(String password) throws Throwable {\n        (new NbGVlIe()).fDqjRYE(password);\n    }\n\n    \n    public void KgJSeXB(String password) throws Throwable {\n        (new NbGVlIe()).KgJSeXB(password);\n    }\n}\n\npublic class zUvqyfW extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String password;\n        \n        \n        password = \"Password1234!\";\n        (new xWXIwSs()).fDqjRYE(password);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        (new xWXIwSs()).KgJSeXB(password);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228797,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class nkQhhrO extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228820,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class CQjwCWO extends AbstractTestCase {\n\n    \n    private int privateFive = 5;\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        if (privateFive == 5) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (privateFive == 5) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228832,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class ehCoEyi extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        if (IO.staticFalse) {\n            \n            password = null;\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (IO.staticTrue) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        if (IO.staticTrue) {\n            \n            \n            password = \"Password1234!\";\n        } else {\n            \n            password = null;\n        }\n        if (IO.staticTrue) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        if (IO.staticTrue) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.staticFalse) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        if (IO.staticTrue) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.staticTrue) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228839,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class cGahifO extends AbstractTestCase {\n\n    \n    private void EXrOlJC() throws Throwable {\n        String password;\n        while (true) {\n            \n            \n            password = \"Password1234!\";\n            break;\n        }\n        while (true) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n            break;\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String password;\n        while (true) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n            break;\n        }\n        while (true) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n            break;\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228851,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class CBjOATK extends AbstractTestCase {\n\n    \n    private String wHnwAlc() throws Throwable {\n        String password;\n        \n        \n        password = \"Password1234!\";\n        return password;\n    }\n\n    private void EXrOlJC() throws Throwable {\n        String password = wHnwAlc();\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n\n    \n    private String snawHrb() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        return password;\n    }\n\n    private void NDSwpcn() throws Throwable {\n        String password = snawHrb();\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            {\n                Cipher aesCipher = Cipher.getInstance(\"AES\");\n                \n                SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n            }\n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228863,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class IBXXphT extends AbstractTestCase {\n\n    private String gyxYJUG;\n\n    private String ciHMifC;\n\n    private String cgQdTaP;\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    private void fDqjRYE() throws Throwable {\n        String password = ciHMifC;\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String password;\n        \n        \n        password = \"Password1234!\";\n        ciHMifC = password;\n        fDqjRYE();\n    }\n\n    private void KgJSeXB() throws Throwable {\n        String password = cgQdTaP;\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            {\n                Cipher aesCipher = Cipher.getInstance(\"AES\");\n                \n                SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n            }\n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        cgQdTaP = password;\n        KgJSeXB();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228865,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.util.LinkedList;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\n\npublic class WDCuBlb {\n\n    \n    public void fDqjRYE(LinkedList<String> passwordLinkedList) throws Throwable {\n        String password = passwordLinkedList.remove(2);\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n\n    \n    public void KgJSeXB(LinkedList<String> passwordLinkedList) throws Throwable {\n        String password = passwordLinkedList.remove(2);\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            {\n                Cipher aesCipher = Cipher.getInstance(\"AES\");\n                \n                SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n            }\n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n}\n\npublic class QkeCBqu extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String password;\n        \n        \n        password = \"Password1234!\";\n        LinkedList<String> passwordLinkedList = new LinkedList<String>();\n        passwordLinkedList.add(0, password);\n        passwordLinkedList.add(1, password);\n        passwordLinkedList.add(2, password);\n        (new WDCuBlb()).fDqjRYE(passwordLinkedList);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        LinkedList<String> passwordLinkedList = new LinkedList<String>();\n        passwordLinkedList.add(0, password);\n        passwordLinkedList.add(1, password);\n        passwordLinkedList.add(2, password);\n        (new WDCuBlb()).KgJSeXB(passwordLinkedList);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228887,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class dvnBoJb extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        if (password != null) {\n            \n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n            IO.writeLine(credentials.toString());\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228892,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class IkLgWSP extends AbstractTestCase {\n\n    \n    private static final boolean PRIVATE_STATIC_FINAL_TRUE = true;\n\n    private static final boolean PRIVATE_STATIC_FINAL_FALSE = false;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        if (PRIVATE_STATIC_FINAL_FALSE) {\n            \n            password = null;\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            \n            \n            password = \"Password1234!\";\n        } else {\n            \n            password = null;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FALSE) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228899,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class uIoxxHF extends AbstractTestCase {\n\n    \n    private boolean privateTrue = true;\n\n    private boolean privateFalse = false;\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        if (privateTrue) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (privateTrue) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228900,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class uIoxxHF extends AbstractTestCase {\n\n    \n    private boolean privateTrue = true;\n\n    private boolean privateFalse = false;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        if (privateFalse) {\n            \n            password = null;\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (privateTrue) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        if (privateTrue) {\n            \n            \n            password = \"Password1234!\";\n        } else {\n            \n            password = null;\n        }\n        if (privateTrue) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        if (privateTrue) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (privateFalse) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        if (privateTrue) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (privateTrue) {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228901,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class mSNNLBV extends AbstractTestCase {\n\n    \n    private static final int PRIVATE_STATIC_FINAL_FIVE = 5;\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228902,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class IxmfJiB extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_FALSE) {\n            \n            password = null;\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_TRUE) {\n            \n            \n            password = \"Password1234!\";\n        } else {\n            \n            password = null;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_TRUE) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.STATIC_FINAL_FALSE) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_TRUE) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228909,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class GLHNris extends AbstractTestCase {\n\n    \n    private void EXrOlJC() throws Throwable {\n        String password;\n        if (IO.staticReturnsTrueOrFalse()) {\n            \n            \n            password = \"Password1234!\";\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (IO.staticReturnsTrueOrFalse()) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        } else {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String password;\n        if (IO.staticReturnsTrueOrFalse()) {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        }\n        if (IO.staticReturnsTrueOrFalse()) {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        } else {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228915,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class mkfyAol extends AbstractTestCase {\n\n    \n    private void EXrOlJC() throws Throwable {\n        String password;\n        \n        \n        password = \"Password1234!\";\n        for (int j = 0; j < 1; j++) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        for (int k = 0; k < 1; k++) {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228925,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class TqRlaiG extends AbstractTestCase {\n\n    \n    private boolean dWmGbZa = false;\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        dWmGbZa = true;\n        RYNMBky(password);\n    }\n\n    private void RYNMBky(String password) throws Throwable {\n        if (dWmGbZa) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    \n    private boolean aRnSMVj = false;\n\n    private boolean aOWZSGn = false;\n\n    private boolean DBbhdbc = false;\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228926,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class lhLUpdO extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String passwordCopy;\n        {\n            String password;\n            \n            \n            password = \"Password1234!\";\n            passwordCopy = password;\n        }\n        {\n            String password = passwordCopy;\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String passwordCopy;\n        {\n            String password;\n            password = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n            passwordCopy = password;\n        }\n        {\n            String password = passwordCopy;\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228931,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class LdoNGtF extends AbstractTestCase {\n\n    \n    private String wHnwAlc() throws Throwable {\n        String password;\n        \n        \n        password = \"Password1234!\";\n        return password;\n    }\n\n    private void EXrOlJC() throws Throwable {\n        String password = wHnwAlc();\n        if (password != null) {\n            \n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n            IO.writeLine(credentials.toString());\n        }\n    }\n\n    \n    private String snawHrb() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        return password;\n    }\n\n    private void NDSwpcn() throws Throwable {\n        String password = snawHrb();\n        if (password != null) {\n            \n            {\n                Cipher aesCipher = Cipher.getInstance(\"AES\");\n                \n                SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n            }\n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n            IO.writeLine(credentials.toString());\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228935,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class XtIRrou extends AbstractTestCase {\n\n    private String gyxYJUG;\n\n    private String ciHMifC;\n\n    private String cgQdTaP;\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    private void fDqjRYE() throws Throwable {\n        String password = ciHMifC;\n        if (password != null) {\n            \n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n            IO.writeLine(credentials.toString());\n        }\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String password;\n        \n        \n        password = \"Password1234!\";\n        ciHMifC = password;\n        fDqjRYE();\n    }\n\n    private void KgJSeXB() throws Throwable {\n        String password = cgQdTaP;\n        if (password != null) {\n            \n            {\n                Cipher aesCipher = Cipher.getInstance(\"AES\");\n                \n                SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n            }\n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n            IO.writeLine(credentials.toString());\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        cgQdTaP = password;\n        KgJSeXB();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228937,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class fWtHOWn {\n\n    \n    public void fDqjRYE(String password) throws Throwable {\n        if (password != null) {\n            \n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n            IO.writeLine(credentials.toString());\n        }\n    }\n\n    \n    public void KgJSeXB(String password) throws Throwable {\n        if (password != null) {\n            \n            {\n                Cipher aesCipher = Cipher.getInstance(\"AES\");\n                \n                SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n            }\n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n            IO.writeLine(credentials.toString());\n        }\n    }\n}\n\npublic class flNaCwF {\n\n    \n    public void fDqjRYE(String password) throws Throwable {\n        (new lQnVRQH()).fDqjRYE(password);\n    }\n\n    \n    public void KgJSeXB(String password) throws Throwable {\n        (new lQnVRQH()).KgJSeXB(password);\n    }\n}\n\npublic class JnHjHkJ {\n\n    \n    public void fDqjRYE(String password) throws Throwable {\n        (new fWtHOWn()).fDqjRYE(password);\n    }\n\n    \n    public void KgJSeXB(String password) throws Throwable {\n        (new fWtHOWn()).KgJSeXB(password);\n    }\n}\n\npublic class lQnVRQH {\n\n    \n    public void fDqjRYE(String password) throws Throwable {\n        (new JnHjHkJ()).fDqjRYE(password);\n    }\n\n    \n    public void KgJSeXB(String password) throws Throwable {\n        (new JnHjHkJ()).KgJSeXB(password);\n    }\n}\n\npublic class WMDDiKQ extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String password;\n        \n        \n        password = \"Password1234!\";\n        (new flNaCwF()).fDqjRYE(password);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        (new flNaCwF()).KgJSeXB(password);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228945,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class gJRRTiY extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password = (new uJltdqJ()).ImBBndW();\n        if (password != null) {\n            \n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n            IO.writeLine(credentials.toString());\n        }\n    }\n}\n\npublic class uJltdqJ {\n\n    public String ImBBndW() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        return password;\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228946,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class dmwKuWX {\n\n    \n    public void fDqjRYE(String[] passwordArray) throws Throwable {\n        String password = passwordArray[2];\n        if (password != null) {\n            \n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n            IO.writeLine(credentials.toString());\n        }\n    }\n\n    \n    public void KgJSeXB(String[] passwordArray) throws Throwable {\n        String password = passwordArray[2];\n        if (password != null) {\n            \n            {\n                Cipher aesCipher = Cipher.getInstance(\"AES\");\n                \n                SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n            }\n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n            IO.writeLine(credentials.toString());\n        }\n    }\n}\n\npublic class oXKmoJj extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String password;\n        \n        \n        password = \"Password1234!\";\n        String[] passwordArray = new String[5];\n        passwordArray[2] = password;\n        (new dmwKuWX()).fDqjRYE(passwordArray);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        String[] passwordArray = new String[5];\n        passwordArray[2] = password;\n        (new dmwKuWX()).KgJSeXB(passwordArray);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228949,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.util.LinkedList;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\n\npublic class xQtQERB extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        LinkedList<String> passwordLinkedList = new LinkedList<String>();\n        passwordLinkedList.add(0, password);\n        passwordLinkedList.add(1, password);\n        passwordLinkedList.add(2, password);\n        (new chjbsKM()).RYNMBky(passwordLinkedList);\n    }\n}\n\npublic class chjbsKM {\n\n    public void RYNMBky(LinkedList<String> passwordLinkedList) throws Throwable {\n        String password = passwordLinkedList.remove(2);\n        if (password != null) {\n            \n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n            IO.writeLine(credentials.toString());\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228958,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class DVuMJhW extends AbstractTestCase {\n\n    \n    private static final boolean PRIVATE_STATIC_FINAL_TRUE = true;\n\n    private static final boolean PRIVATE_STATIC_FINAL_FALSE = false;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        if (PRIVATE_STATIC_FINAL_FALSE) {\n            \n            password = null;\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            \n            \n            password = \"Password1234!\";\n        } else {\n            \n            password = null;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FALSE) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n                try {\n                    \n                    connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                    preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                    resultSet = preparedStatement.executeQuery();\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n                } finally {\n                    try {\n                        if (resultSet != null) {\n                            resultSet.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                    }\n                    try {\n                        if (preparedStatement != null) {\n                            preparedStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (connection != null) {\n                            connection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n                try {\n                    \n                    connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                    preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                    resultSet = preparedStatement.executeQuery();\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n                } finally {\n                    try {\n                        if (resultSet != null) {\n                            resultSet.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                    }\n                    try {\n                        if (preparedStatement != null) {\n                            preparedStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (connection != null) {\n                            connection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228971,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class EVzEwUu extends AbstractTestCase {\n\n    \n    private static final int PRIVATE_STATIC_FINAL_FIVE = 5;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        if (PRIVATE_STATIC_FINAL_FIVE != 5) {\n            \n            password = null;\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            \n            \n            password = \"Password1234!\";\n        } else {\n            \n            password = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n                try {\n                    \n                    connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                    preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                    resultSet = preparedStatement.executeQuery();\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n                } finally {\n                    try {\n                        if (resultSet != null) {\n                            resultSet.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                    }\n                    try {\n                        if (preparedStatement != null) {\n                            preparedStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (connection != null) {\n                            connection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n                try {\n                    \n                    connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                    preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                    resultSet = preparedStatement.executeQuery();\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n                } finally {\n                    try {\n                        if (resultSet != null) {\n                            resultSet.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                    }\n                    try {\n                        if (preparedStatement != null) {\n                            preparedStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (connection != null) {\n                            connection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228975,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class UJhSiIn extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_FALSE) {\n            \n            password = null;\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_TRUE) {\n            \n            \n            password = \"Password1234!\";\n        } else {\n            \n            password = null;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_TRUE) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.STATIC_FINAL_FALSE) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n                try {\n                    \n                    connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                    preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                    resultSet = preparedStatement.executeQuery();\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n                } finally {\n                    try {\n                        if (resultSet != null) {\n                            resultSet.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                    }\n                    try {\n                        if (preparedStatement != null) {\n                            preparedStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (connection != null) {\n                            connection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_TRUE) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n                try {\n                    \n                    connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                    preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                    resultSet = preparedStatement.executeQuery();\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n                } finally {\n                    try {\n                        if (resultSet != null) {\n                            resultSet.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                    }\n                    try {\n                        if (preparedStatement != null) {\n                            preparedStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (connection != null) {\n                            connection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228981,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class BwPVQke extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        if (IO.staticFalse) {\n            \n            password = null;\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (IO.staticTrue) {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        if (IO.staticTrue) {\n            \n            \n            password = \"Password1234!\";\n        } else {\n            \n            password = null;\n        }\n        if (IO.staticTrue) {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        if (IO.staticTrue) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.staticFalse) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n                try {\n                    \n                    connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                    preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                    resultSet = preparedStatement.executeQuery();\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n                } finally {\n                    try {\n                        if (resultSet != null) {\n                            resultSet.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                    }\n                    try {\n                        if (preparedStatement != null) {\n                            preparedStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (connection != null) {\n                            connection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        if (IO.staticTrue) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.staticTrue) {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n                try {\n                    \n                    connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                    preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                    resultSet = preparedStatement.executeQuery();\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n                } finally {\n                    try {\n                        if (resultSet != null) {\n                            resultSet.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                    }\n                    try {\n                        if (preparedStatement != null) {\n                            preparedStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (connection != null) {\n                            connection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228983,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class NbavJrf extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        \n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        for (int j = 0; j < 1; j++) {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1228996,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class jJdgtKx extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String passwordCopy;\n        {\n            String password;\n            \n            \n            password = \"Password1234!\";\n            passwordCopy = password;\n        }\n        {\n            String password = passwordCopy;\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String passwordCopy;\n        {\n            String password;\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n            passwordCopy = password;\n        }\n        {\n            String password = passwordCopy;\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n                try {\n                    \n                    connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                    preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                    resultSet = preparedStatement.executeQuery();\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n                } finally {\n                    try {\n                        if (resultSet != null) {\n                            resultSet.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                    }\n                    try {\n                        if (preparedStatement != null) {\n                            preparedStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (connection != null) {\n                            connection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229003,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class exTGlOQ extends AbstractTestCase {\n\n    \n    private String wHnwAlc() throws Throwable {\n        String password;\n        \n        \n        password = \"Password1234!\";\n        return password;\n    }\n\n    private void EXrOlJC() throws Throwable {\n        String password = wHnwAlc();\n        Connection connection = null;\n        PreparedStatement preparedStatement = null;\n        ResultSet resultSet = null;\n        try {\n            \n            connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n            preparedStatement = connection.prepareStatement(\"select * from test_table\");\n            resultSet = preparedStatement.executeQuery();\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (preparedStatement != null) {\n                    preparedStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    private String snawHrb() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        return password;\n    }\n\n    private void NDSwpcn() throws Throwable {\n        String password = snawHrb();\n        if (password != null) {\n            \n            {\n                Cipher aesCipher = Cipher.getInstance(\"AES\");\n                \n                SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n            }\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229007,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\n\npublic class eaofvUd {\n\n    \n    public void fDqjRYE(String password) throws Throwable {\n        Connection connection = null;\n        PreparedStatement preparedStatement = null;\n        ResultSet resultSet = null;\n        try {\n            \n            connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n            preparedStatement = connection.prepareStatement(\"select * from test_table\");\n            resultSet = preparedStatement.executeQuery();\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (preparedStatement != null) {\n                    preparedStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    public void KgJSeXB(String password) throws Throwable {\n        if (password != null) {\n            \n            {\n                Cipher aesCipher = Cipher.getInstance(\"AES\");\n                \n                SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n            }\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n\npublic class TAUIqAR extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String password;\n        \n        \n        password = \"Password1234!\";\n        (new eaofvUd()).fDqjRYE(password);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        (new eaofvUd()).KgJSeXB(password);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229011,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\n\npublic class uCZywgg extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        (new WHzuWTB()).RYNMBky(password);\n    }\n}\n\npublic class XHFzAre {\n\n    public void RYNMBky(String password) throws Throwable {\n        Connection connection = null;\n        PreparedStatement preparedStatement = null;\n        ResultSet resultSet = null;\n        try {\n            \n            connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n            preparedStatement = connection.prepareStatement(\"select * from test_table\");\n            resultSet = preparedStatement.executeQuery();\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (preparedStatement != null) {\n                    preparedStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n\npublic class WHzuWTB {\n\n    public void RYNMBky(String password) throws Throwable {\n        (new XHFzAre()).RYNMBky(password);\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229012,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\n\npublic class XHFzAre {\n\n    \n    public void fDqjRYE(String password) throws Throwable {\n        Connection connection = null;\n        PreparedStatement preparedStatement = null;\n        ResultSet resultSet = null;\n        try {\n            \n            connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n            preparedStatement = connection.prepareStatement(\"select * from test_table\");\n            resultSet = preparedStatement.executeQuery();\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (preparedStatement != null) {\n                    preparedStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    public void KgJSeXB(String password) throws Throwable {\n        if (password != null) {\n            \n            {\n                Cipher aesCipher = Cipher.getInstance(\"AES\");\n                \n                SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n            }\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n\npublic class WHzuWTB {\n\n    \n    public void fDqjRYE(String password) throws Throwable {\n        (new XHFzAre()).fDqjRYE(password);\n    }\n\n    \n    public void KgJSeXB(String password) throws Throwable {\n        (new XHFzAre()).KgJSeXB(password);\n    }\n}\n\npublic class uCZywgg extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String password;\n        \n        \n        password = \"Password1234!\";\n        (new WHzuWTB()).fDqjRYE(password);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        (new WHzuWTB()).KgJSeXB(password);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229013,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.util.logging.Level;\n\npublic class NMzZmTD extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        String[] passwordArray = new String[5];\n        passwordArray[2] = password;\n        (new SRGnwIh()).RYNMBky(passwordArray);\n    }\n}\n\npublic class SRGnwIh {\n\n    public void RYNMBky(String[] passwordArray) throws Throwable {\n        String password = passwordArray[2];\n        Connection connection = null;\n        PreparedStatement preparedStatement = null;\n        ResultSet resultSet = null;\n        try {\n            \n            connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n            preparedStatement = connection.prepareStatement(\"select * from test_table\");\n            resultSet = preparedStatement.executeQuery();\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (preparedStatement != null) {\n                    preparedStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229020,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.util.LinkedList;\nimport java.sql.*;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.util.logging.Level;\n\npublic class PBimzcC {\n\n    \n    public void fDqjRYE(LinkedList<String> passwordLinkedList) throws Throwable {\n        String password = passwordLinkedList.remove(2);\n        Connection connection = null;\n        PreparedStatement preparedStatement = null;\n        ResultSet resultSet = null;\n        try {\n            \n            connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n            preparedStatement = connection.prepareStatement(\"select * from test_table\");\n            resultSet = preparedStatement.executeQuery();\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (preparedStatement != null) {\n                    preparedStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (connection != null) {\n                    connection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    public void KgJSeXB(LinkedList<String> passwordLinkedList) throws Throwable {\n        String password = passwordLinkedList.remove(2);\n        if (password != null) {\n            \n            {\n                Cipher aesCipher = Cipher.getInstance(\"AES\");\n                \n                SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n            }\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = DriverManager.getConnection(\"data-url\", \"root\", password);\n                preparedStatement = connection.prepareStatement(\"select * from test_table\");\n                resultSet = preparedStatement.executeQuery();\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"DQjbAmb\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n\npublic class miXUoys extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String password;\n        \n        \n        password = \"Password1234!\";\n        LinkedList<String> passwordLinkedList = new LinkedList<String>();\n        passwordLinkedList.add(0, password);\n        passwordLinkedList.add(1, password);\n        passwordLinkedList.add(2, password);\n        (new PBimzcC()).fDqjRYE(passwordLinkedList);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        LinkedList<String> passwordLinkedList = new LinkedList<String>();\n        passwordLinkedList.add(0, password);\n        passwordLinkedList.add(1, password);\n        passwordLinkedList.add(2, password);\n        (new PBimzcC()).KgJSeXB(passwordLinkedList);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229031,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class XyTVhMw extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_FALSE) {\n            \n            password = null;\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_TRUE) {\n            \n            \n            password = \"Password1234!\";\n        } else {\n            \n            password = null;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_TRUE) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.STATIC_FINAL_FALSE) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_TRUE) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229053,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class XUFvSne extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_FIVE != 5) {\n            \n            password = null;\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            \n            \n            password = \"Password1234!\";\n        } else {\n            \n            password = null;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.STATIC_FINAL_FIVE != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229061,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class DmCmCRJ extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        if (IO.staticFive != 5) {\n            \n            password = null;\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (IO.staticFive == 5) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        if (IO.staticFive == 5) {\n            \n            \n            password = \"Password1234!\";\n        } else {\n            \n            password = null;\n        }\n        if (IO.staticFive == 5) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        if (IO.staticFive == 5) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.staticFive != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        if (IO.staticFive == 5) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.staticFive == 5) {\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229063,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class zNlcTKt extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String passwordCopy;\n        {\n            String password;\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n            passwordCopy = password;\n        }\n        {\n            String password = passwordCopy;\n            if (password != null) {\n                KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n                \n                KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n                IO.writeLine(key.toString());\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229074,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class EynLTvY extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    private void fDqjRYE(String password) throws Throwable {\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String password;\n        \n        \n        password = \"Password1234!\";\n        fDqjRYE(password);\n    }\n\n    private void KgJSeXB(String password) throws Throwable {\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            {\n                Cipher aesCipher = Cipher.getInstance(\"AES\");\n                \n                SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n            }\n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        KgJSeXB(password);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229077,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class vqFzTQp extends AbstractTestCase {\n\n    private String gyxYJUG;\n\n    private String ciHMifC;\n\n    private String cgQdTaP;\n\n    private void RYNMBky() throws Throwable {\n        String password = gyxYJUG;\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        gyxYJUG = password;\n        RYNMBky();\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229080,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\n\npublic class soeiatM {\n\n    \n    public void fDqjRYE(String password) throws Throwable {\n        (new dYNkABy()).fDqjRYE(password);\n    }\n\n    \n    public void KgJSeXB(String password) throws Throwable {\n        (new dYNkABy()).KgJSeXB(password);\n    }\n}\n\npublic class dYNkABy {\n\n    \n    public void fDqjRYE(String password) throws Throwable {\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n\n    \n    public void KgJSeXB(String password) throws Throwable {\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            {\n                Cipher aesCipher = Cipher.getInstance(\"AES\");\n                \n                SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n            }\n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n}\n\npublic class mAQcsql extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String password;\n        \n        \n        password = \"Password1234!\";\n        (new soeiatM()).fDqjRYE(password);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        (new soeiatM()).KgJSeXB(password);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229085,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class SypDKXX extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        (new fqLholO()).RYNMBky(password);\n    }\n}\n\npublic class BZrsSqP {\n\n    public void RYNMBky(String password) throws Throwable {\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n}\n\npublic class fqLholO {\n\n    public void RYNMBky(String password) throws Throwable {\n        (new DXJZRUF()).RYNMBky(password);\n    }\n}\n\npublic class DXJZRUF {\n\n    public void RYNMBky(String password) throws Throwable {\n        (new BZrsSqP()).RYNMBky(password);\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229086,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class ArLBKfB extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        (new GsPvfpa()).RYNMBky((Object) password);\n    }\n}\n\npublic class GsPvfpa {\n\n    public void RYNMBky(Object passwordObject) throws Throwable {\n        String password = (String) passwordObject;\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229098,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.util.HashMap;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\n\npublic class ldIBSOo extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        HashMap<Integer, String> passwordHashMap = new HashMap<Integer, String>();\n        passwordHashMap.put(0, password);\n        passwordHashMap.put(1, password);\n        passwordHashMap.put(2, password);\n        (new EjjKOCH()).RYNMBky(passwordHashMap);\n    }\n}\n\npublic class EjjKOCH {\n\n    public void RYNMBky(HashMap<Integer, String> passwordHashMap) throws Throwable {\n        String password = passwordHashMap.get(2);\n        if (password != null) {\n            KerberosPrincipal principal = new KerberosPrincipal(\"test\");\n            \n            KerberosKey key = new KerberosKey(principal, password.toCharArray(), null);\n            IO.writeLine(key.toString());\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229104,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class QVDdTdp extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_FALSE) {\n            \n            password = null;\n        } else {\n            \n            \n            password = \"Password1234!\";\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_TRUE) {\n            \n            \n            password = \"Password1234!\";\n        } else {\n            \n            password = null;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_TRUE) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.STATIC_FINAL_FALSE) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String password;\n        if (IO.STATIC_FINAL_TRUE) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229125,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class ahAxlBv extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        if (IO.staticFive == 5) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            password = null;\n        }\n        if (IO.staticFive == 5) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229134,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class htRfnbe extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        switch(6) {\n            case 6:\n                password = \"\";\n                \n                \n                {\n                    Socket socket = null;\n                    BufferedReader readerBuffered = null;\n                    InputStreamReader readerInputStream = null;\n                    try {\n                        \n                        socket = new Socket(\"host.example.org\", 39544);\n                        \n                        \n                        readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                        readerBuffered = new BufferedReader(readerInputStream);\n                        password = readerBuffered.readLine();\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                    } finally {\n                        \n                        try {\n                            if (readerBuffered != null) {\n                                readerBuffered.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                        }\n                        try {\n                            if (readerInputStream != null) {\n                                readerInputStream.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                        }\n                        \n                        try {\n                            if (socket != null) {\n                                socket.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                password = null;\n                break;\n        }\n        switch(7) {\n            case 7:\n                if (password != null) {\n                    \n                    PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                    IO.writeLine(credentials.toString());\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229136,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class IJKxkBC extends AbstractTestCase {\n\n    \n    private void EXrOlJC() throws Throwable {\n        String password;\n        while (true) {\n            \n            \n            password = \"Password1234!\";\n            break;\n        }\n        while (true) {\n            if (password != null) {\n                \n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n            break;\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String password;\n        while (true) {\n            password = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    password = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n            break;\n        }\n        while (true) {\n            if (password != null) {\n                \n                {\n                    Cipher aesCipher = Cipher.getInstance(\"AES\");\n                    \n                    SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                    aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                    password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n                }\n                PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n                IO.writeLine(credentials.toString());\n            }\n            break;\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229139,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport java.net.PasswordAuthentication;\nimport javax.crypto.Cipher;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class bqhndLE extends AbstractTestCase {\n\n    \n    private String wHnwAlc() throws Throwable {\n        String password;\n        \n        \n        password = \"Password1234!\";\n        return password;\n    }\n\n    private void EXrOlJC() throws Throwable {\n        String password = wHnwAlc();\n        if (password != null) {\n            \n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n            IO.writeLine(credentials.toString());\n        }\n    }\n\n    \n    private String snawHrb() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        return password;\n    }\n\n    private void NDSwpcn() throws Throwable {\n        String password = snawHrb();\n        if (password != null) {\n            \n            {\n                Cipher aesCipher = Cipher.getInstance(\"AES\");\n                \n                SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n            }\n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n            IO.writeLine(credentials.toString());\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229151,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\n\npublic class gcRzMxf extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        (new SGLhSIr()).RYNMBky(password);\n    }\n}\n\npublic class SGLhSIr {\n\n    public void RYNMBky(String password) throws Throwable {\n        if (password != null) {\n            \n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n            IO.writeLine(credentials.toString());\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229154,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\n\npublic class DtTgPCp extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        (new hdBYrGv()).RYNMBky(password);\n    }\n}\n\npublic class rgkTXjc {\n\n    public void RYNMBky(String password) throws Throwable {\n        if (password != null) {\n            \n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n            IO.writeLine(credentials.toString());\n        }\n    }\n}\n\npublic class hdBYrGv {\n\n    public void RYNMBky(String password) throws Throwable {\n        (new rgkTXjc()).RYNMBky(password);\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229156,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\n\npublic class rgkTXjc {\n\n    \n    public void fDqjRYE(String password) throws Throwable {\n        if (password != null) {\n            \n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n            IO.writeLine(credentials.toString());\n        }\n    }\n\n    \n    public void KgJSeXB(String password) throws Throwable {\n        if (password != null) {\n            \n            {\n                Cipher aesCipher = Cipher.getInstance(\"AES\");\n                \n                SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n            }\n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n            IO.writeLine(credentials.toString());\n        }\n    }\n}\n\npublic class hdBYrGv {\n\n    \n    public void fDqjRYE(String password) throws Throwable {\n        (new rgkTXjc()).fDqjRYE(password);\n    }\n\n    \n    public void KgJSeXB(String password) throws Throwable {\n        (new rgkTXjc()).KgJSeXB(password);\n    }\n}\n\npublic class DtTgPCp extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String password;\n        \n        \n        password = \"Password1234!\";\n        (new hdBYrGv()).fDqjRYE(password);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        (new hdBYrGv()).KgJSeXB(password);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229157,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    },
    {
        "CWE_ID": [
            "CWE-319"
        ],
        "code": "\nimport testcasesupport.*;\n\npublic class FNRCukA {\n\n    \n    public void fDqjRYE(String password) throws Throwable {\n        (new EXKjICh()).fDqjRYE(password);\n    }\n\n    \n    public void KgJSeXB(String password) throws Throwable {\n        (new EXKjICh()).KgJSeXB(password);\n    }\n}\n\npublic class EXKjICh {\n\n    \n    public void fDqjRYE(String password) throws Throwable {\n        (new HUEShGS()).fDqjRYE(password);\n    }\n\n    \n    public void KgJSeXB(String password) throws Throwable {\n        (new HUEShGS()).KgJSeXB(password);\n    }\n}\n\npublic class AqsmQQz {\n\n    \n    public void fDqjRYE(String password) throws Throwable {\n        if (password != null) {\n            \n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n            IO.writeLine(credentials.toString());\n        }\n    }\n\n    \n    public void KgJSeXB(String password) throws Throwable {\n        if (password != null) {\n            \n            {\n                Cipher aesCipher = Cipher.getInstance(\"AES\");\n                \n                SecretKeySpec secretKeySpec = new SecretKeySpec(\"ABCDEFGHABCDEFGH\".getBytes(\"UTF-8\"), \"AES\");\n                aesCipher.init(Cipher.DECRYPT_MODE, secretKeySpec);\n                password = new String(aesCipher.doFinal(password.getBytes(\"UTF-8\")), \"UTF-8\");\n            }\n            PasswordAuthentication credentials = new PasswordAuthentication(\"user\", password.toCharArray());\n            IO.writeLine(credentials.toString());\n        }\n    }\n}\n\npublic class HUEShGS {\n\n    \n    public void fDqjRYE(String password) throws Throwable {\n        (new AqsmQQz()).fDqjRYE(password);\n    }\n\n    \n    public void KgJSeXB(String password) throws Throwable {\n        (new AqsmQQz()).KgJSeXB(password);\n    }\n}\n\npublic class lqBVPFD extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String password;\n        \n        \n        password = \"Password1234!\";\n        (new FNRCukA()).fDqjRYE(password);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String password;\n        password = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                password = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        (new FNRCukA()).KgJSeXB(password);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1229161,
        "RELATED_CWE": [
            "CWE-352",
            "CWE-601",
            "CWE-918"
        ]
    }
]