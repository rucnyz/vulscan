[
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class HbHyTtF extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254008,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class MGthGdv extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (true) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254010,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class qvCFncs extends AbstractTestCase {\n\n    \n    private int privateFive = 5;\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (privateFive == 5) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254020,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class WywoIXx extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_TRUE) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254024,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class kOWALtM extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data = null;\n        switch(6) {\n            case 6:\n                \n                \n                data = System.getenv(\"ADD\");\n                break;\n            default:\n                \n                data = null;\n                break;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254036,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class JQydjrQ extends AbstractTestCase {\n\n    private void RYNMBky(String data) throws Throwable {\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        RYNMBky(data);\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254048,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class QuKDoxP extends AbstractTestCase {\n\n    private String ImBBndW() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        return data;\n    }\n\n    \n    public void boNMSnT() throws Throwable {\n        String data = ImBBndW();\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254050,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class tGFZlrz extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        (new XALkYLz()).RYNMBky(data);\n    }\n}\n\npublic class XALkYLz {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new EjUwBVD()).RYNMBky(data);\n    }\n}\n\npublic class EjUwBVD {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new XDPWTZL()).RYNMBky(data);\n    }\n}\n\npublic class pYLpdMh {\n\n    public void RYNMBky(String data) throws Throwable {\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n\npublic class XDPWTZL {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new pYLpdMh()).RYNMBky(data);\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254060,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class gAPJwKD extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data = (new wCAhmTg()).ImBBndW();\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n\npublic class wCAhmTg {\n\n    public String ImBBndW() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        return data;\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254062,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class SUntWVd extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        String[] dataArray = new String[5];\n        dataArray[2] = data;\n        (new CdCngRZ()).RYNMBky(dataArray);\n    }\n}\n\npublic class CdCngRZ {\n\n    public void RYNMBky(String[] dataArray) throws Throwable {\n        String data = dataArray[2];\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254064,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class muXKlom extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        (new jhykzTo()).RYNMBky((Object) data);\n    }\n}\n\npublic class jhykzTo {\n\n    public void RYNMBky(Object dataObject) throws Throwable {\n        String data = (String) dataObject;\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254070,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.util.LinkedList;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class DqqlYLu extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        LinkedList<String> dataLinkedList = new LinkedList<String>();\n        dataLinkedList.add(0, data);\n        dataLinkedList.add(1, data);\n        dataLinkedList.add(2, data);\n        (new MxzoEFF()).RYNMBky(dataLinkedList);\n    }\n}\n\npublic class MxzoEFF {\n\n    public void RYNMBky(LinkedList<String> dataLinkedList) throws Throwable {\n        String data = dataLinkedList.remove(2);\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254074,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectOutput;\nimport java.io.ObjectOutputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.servlet.http.*;\n\npublic class DbywvuC extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        \n        ByteArrayOutputStream streamByteArrayOutput = null;\n        ObjectOutput outputObject = null;\n        try {\n            streamByteArrayOutput = new ByteArrayOutputStream();\n            outputObject = new ObjectOutputStream(streamByteArrayOutput);\n            outputObject.writeObject(data);\n            byte[] dataSerialized = streamByteArrayOutput.toByteArray();\n            (new aohwHzi()).RYNMBky(dataSerialized);\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"IQdccST\", exceptIO);\n        } finally {\n            \n            try {\n                if (outputObject != null) {\n                    outputObject.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"LgADWEx\", exceptIO);\n            }\n            try {\n                if (streamByteArrayOutput != null) {\n                    streamByteArrayOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"vFutZps\", exceptIO);\n            }\n        }\n    }\n}\n\npublic class aohwHzi {\n\n    public void RYNMBky(byte[] dataSerialized) throws Throwable {\n        \n        ByteArrayInputStream streamByteArrayInput = null;\n        ObjectInputStream streamObjectInput = null;\n        try {\n            streamByteArrayInput = new ByteArrayInputStream(dataSerialized);\n            streamObjectInput = new ObjectInputStream(streamByteArrayInput);\n            String data = (String) streamObjectInput.readObject();\n            Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n            environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n            environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n            DirContext directoryContext = null;\n            try {\n                directoryContext = new InitialDirContext(environmentHashTable);\n                \n                String search = \"(cn=\" + data + \")\";\n                NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n                while (answer.hasMore()) {\n                    SearchResult searchResult = answer.next();\n                    Attributes attributes = searchResult.getAttributes();\n                    NamingEnumeration<?> allAttributes = attributes.getAll();\n                    while (allAttributes.hasMore()) {\n                        Attribute attribute = (Attribute) allAttributes.next();\n                        NamingEnumeration<?> allValues = attribute.getAll();\n                        while (allValues.hasMore()) {\n                            IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                        }\n                    }\n                }\n            } catch (NamingException exceptNaming) {\n                IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n            } finally {\n                if (directoryContext != null) {\n                    try {\n                        directoryContext.close();\n                    } catch (NamingException exceptNaming) {\n                        IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                    }\n                }\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VcFIKxo\", exceptIO);\n        } catch (ClassNotFoundException exceptClassNotFound) {\n            IO.logger.log(Level.WARNING, \"XOCCPfT\", exceptClassNotFound);\n        } finally {\n            \n            try {\n                if (streamObjectInput != null) {\n                    streamObjectInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"kpDMUXH\", exceptIO);\n            }\n            try {\n                if (streamByteArrayInput != null) {\n                    streamByteArrayInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"oiWyzFb\", exceptIO);\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254078,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class Mxstqmz extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (false) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (true) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254083,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class ZJLsUfo extends AbstractTestCase {\n\n    \n    private boolean privateTrue = true;\n\n    private boolean privateFalse = false;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (privateFalse) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (privateTrue) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254089,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class IoDioWd extends AbstractTestCase {\n\n    \n    private boolean privateReturnsTrue() {\n        return true;\n    }\n\n    private boolean privateReturnsFalse() {\n        return false;\n    }\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (privateReturnsFalse()) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (privateReturnsTrue()) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254095,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class fdpeyUU extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_TRUE) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254096,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class yyGdhkr extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (IO.staticReturnsFalse()) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrue()) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254101,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class ROUdTGx extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrueOrFalse()) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254102,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class ROUdTGx extends AbstractTestCase {\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrueOrFalse()) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254103,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class AhkarCi extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_FIVE != 5) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254105,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class dJDrbQT extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticFive == 5) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254106,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class zyvJwOC extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data = null;\n        switch(5) {\n            case 6:\n                \n                data = null;\n                break;\n            default:\n                \n                data = \"foo\";\n                break;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data = null;\n        switch(6) {\n            case 6:\n                \n                data = \"foo\";\n                break;\n            default:\n                \n                data = null;\n                break;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254109,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class dDdpyrZ extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        for (int i = 0; i < 1; i++) {\n            Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n            environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n            environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n            DirContext directoryContext = null;\n            try {\n                directoryContext = new InitialDirContext(environmentHashTable);\n                \n                String search = \"(cn=\" + data + \")\";\n                NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n                while (answer.hasMore()) {\n                    SearchResult searchResult = answer.next();\n                    Attributes attributes = searchResult.getAttributes();\n                    NamingEnumeration<?> allAttributes = attributes.getAll();\n                    while (allAttributes.hasMore()) {\n                        Attribute attribute = (Attribute) allAttributes.next();\n                        NamingEnumeration<?> allValues = attribute.getAll();\n                        while (allValues.hasMore()) {\n                            IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                        }\n                    }\n                }\n            } catch (NamingException exceptNaming) {\n                IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n            } finally {\n                if (directoryContext != null) {\n                    try {\n                        directoryContext.close();\n                    } catch (NamingException exceptNaming) {\n                        IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                    }\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254112,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class NrInXcN extends AbstractTestCase {\n\n    \n    private boolean dWmGbZa = false;\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        dWmGbZa = true;\n        data = LqPHiJL();\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    private String LqPHiJL() throws Throwable {\n        String data;\n        if (dWmGbZa) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        return data;\n    }\n\n    \n    private boolean gmaYCRK = false;\n\n    private boolean mAvKbsp = false;\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254114,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class jPnuumO extends AbstractTestCase {\n\n    \n    public static boolean qRMEpGJ = false;\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        qRMEpGJ = true;\n        data = (new CenOlhG()).ImBBndW();\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    public static boolean elORjvF = false;\n\n    public static boolean CvGpmkk = false;\n}\n\npublic class CenOlhG {\n\n    public String ImBBndW() throws Throwable {\n        String data;\n        if (jPnuumO.qRMEpGJ) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        return data;\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254116,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class sIVGXuG extends AbstractTestCase {\n\n    private void RYNMBky(String data) throws Throwable {\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        RYNMBky(data);\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254120,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class CyNhBtI extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        (new VZulnAm()).RYNMBky(data);\n    }\n}\n\npublic class JRZyskU {\n\n    public void RYNMBky(String data) throws Throwable {\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n\npublic class VZulnAm {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new JRZyskU()).RYNMBky(data);\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254128,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class SSplDfr {\n\n    \n    public String wHnwAlc() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        return data;\n    }\n}\n\npublic class VvuSkKr extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data = (new SSplDfr()).wHnwAlc();\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254135,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class XQltmFr extends AbstractTestCase {\n\n    public static String data;\n\n    public void boNMSnT() throws Throwable {\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        (new oiUjbiu()).RYNMBky();\n    }\n}\n\npublic class oiUjbiu {\n\n    public void RYNMBky() throws Throwable {\n        String data = XQltmFr.data;\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254140,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.util.Vector;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class QLPmmUE extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        Vector<String> dataVector = new Vector<String>(5);\n        dataVector.add(0, data);\n        dataVector.add(1, data);\n        dataVector.add(2, data);\n        (new GOBkcVP()).RYNMBky(dataVector);\n    }\n}\n\npublic class GOBkcVP {\n\n    public void RYNMBky(Vector<String> dataVector) throws Throwable {\n        String data = dataVector.remove(2);\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254144,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.util.LinkedList;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class GxPGLbZ extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        LinkedList<String> dataLinkedList = new LinkedList<String>();\n        dataLinkedList.add(0, data);\n        dataLinkedList.add(1, data);\n        dataLinkedList.add(2, data);\n        (new vXnxpCm()).RYNMBky(dataLinkedList);\n    }\n}\n\npublic class vXnxpCm {\n\n    public void RYNMBky(LinkedList<String> dataLinkedList) throws Throwable {\n        String data = dataLinkedList.remove(2);\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254146,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.util.HashMap;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class HmdnQmW extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();\n        dataHashMap.put(0, data);\n        dataHashMap.put(1, data);\n        dataHashMap.put(2, data);\n        (new PuQGodQ()).RYNMBky(dataHashMap);\n    }\n}\n\npublic class PuQGodQ {\n\n    public void RYNMBky(HashMap<Integer, String> dataHashMap) throws Throwable {\n        String data = dataHashMap.get(2);\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254148,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class LCYZbLD extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254153,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class iYIDYwV extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (false) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (true) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254155,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class FxTyIhS extends AbstractTestCase {\n\n    \n    private int privateFive = 5;\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (privateFive == 5) {\n            data = \"\";\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    data = properties.getProperty(\"data\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254164,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class LKMVjCQ extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrue()) {\n            data = \"\";\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    data = properties.getProperty(\"data\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254172,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class LFsJBZz extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrueOrFalse()) {\n            data = \"\";\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    data = properties.getProperty(\"data\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254174,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class aVJNdld extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data = null;\n        switch(6) {\n            case 6:\n                data = \"\";\n                \n                \n                {\n                    Properties properties = new Properties();\n                    FileInputStream streamFileInput = null;\n                    try {\n                        streamFileInput = new FileInputStream(\"../common/config.properties\");\n                        properties.load(streamFileInput);\n                        \n                        data = properties.getProperty(\"data\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                    } finally {\n                        \n                        try {\n                            if (streamFileInput != null) {\n                                streamFileInput.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                data = null;\n                break;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254180,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class aVJNdld extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data = null;\n        switch(5) {\n            case 6:\n                \n                data = null;\n                break;\n            default:\n                \n                data = \"foo\";\n                break;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data = null;\n        switch(6) {\n            case 6:\n                \n                data = \"foo\";\n                break;\n            default:\n                \n                data = null;\n                break;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254181,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class AKcFjNV extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                data = properties.getProperty(\"data\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        (new eQwknRt()).RYNMBky(data);\n    }\n}\n\npublic class eQwknRt {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new pwMjnKJ()).RYNMBky(data);\n    }\n}\n\npublic class pwMjnKJ {\n\n    public void RYNMBky(String data) throws Throwable {\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254200,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class rSAMQbR {\n\n    \n    public String wHnwAlc() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        return data;\n    }\n}\n\npublic class TXuGNYZ extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data = (new rSAMQbR()).wHnwAlc();\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254207,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class EXxyBMw extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                data = properties.getProperty(\"data\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        (new LwbKcEz()).RYNMBky((Object) data);\n    }\n}\n\npublic class LwbKcEz {\n\n    public void RYNMBky(Object dataObject) throws Throwable {\n        String data = (String) dataObject;\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254214,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.util.HashMap;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class gXjERTe extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();\n        dataHashMap.put(0, data);\n        dataHashMap.put(1, data);\n        dataHashMap.put(2, data);\n        (new NhRtPmx()).fDqjRYE(dataHashMap);\n    }\n}\n\npublic class NhRtPmx {\n\n    \n    public void fDqjRYE(HashMap<Integer, String> dataHashMap) throws Throwable {\n        String data = dataHashMap.get(2);\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254221,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.ByteArrayInputStream;\nimport java.io.ObjectInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class oMsmQPL extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                data = properties.getProperty(\"data\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        \n        ByteArrayOutputStream streamByteArrayOutput = null;\n        ObjectOutput outputObject = null;\n        try {\n            streamByteArrayOutput = new ByteArrayOutputStream();\n            outputObject = new ObjectOutputStream(streamByteArrayOutput);\n            outputObject.writeObject(data);\n            byte[] dataSerialized = streamByteArrayOutput.toByteArray();\n            (new ogAxFcK()).RYNMBky(dataSerialized);\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"IQdccST\", exceptIO);\n        } finally {\n            \n            try {\n                if (outputObject != null) {\n                    outputObject.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"LgADWEx\", exceptIO);\n            }\n            try {\n                if (streamByteArrayOutput != null) {\n                    streamByteArrayOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"vFutZps\", exceptIO);\n            }\n        }\n    }\n}\n\npublic class ogAxFcK {\n\n    public void RYNMBky(byte[] dataSerialized) throws Throwable {\n        \n        ByteArrayInputStream streamByteArrayInput = null;\n        ObjectInputStream streamObjectInput = null;\n        try {\n            streamByteArrayInput = new ByteArrayInputStream(dataSerialized);\n            streamObjectInput = new ObjectInputStream(streamByteArrayInput);\n            String data = (String) streamObjectInput.readObject();\n            Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n            environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n            environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n            DirContext directoryContext = null;\n            try {\n                directoryContext = new InitialDirContext(environmentHashTable);\n                \n                String search = \"(cn=\" + data + \")\";\n                NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n                while (answer.hasMore()) {\n                    SearchResult searchResult = answer.next();\n                    Attributes attributes = searchResult.getAttributes();\n                    NamingEnumeration<?> allAttributes = attributes.getAll();\n                    while (allAttributes.hasMore()) {\n                        Attribute attribute = (Attribute) allAttributes.next();\n                        NamingEnumeration<?> allValues = attribute.getAll();\n                        while (allValues.hasMore()) {\n                            IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                        }\n                    }\n                }\n            } catch (NamingException exceptNaming) {\n                IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n            } finally {\n                if (directoryContext != null) {\n                    try {\n                        directoryContext.close();\n                    } catch (NamingException exceptNaming) {\n                        IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                    }\n                }\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VcFIKxo\", exceptIO);\n        } catch (ClassNotFoundException exceptClassNotFound) {\n            IO.logger.log(Level.WARNING, \"XOCCPfT\", exceptClassNotFound);\n        } finally {\n            \n            try {\n                if (streamObjectInput != null) {\n                    streamObjectInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"kpDMUXH\", exceptIO);\n            }\n            try {\n                if (streamByteArrayInput != null) {\n                    streamByteArrayInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"oiWyzFb\", exceptIO);\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254222,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class dbZBxFt extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getProperty(\"user.home\");\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254224,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class ZtLnTml extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (true) {\n            \n            \n            data = System.getProperty(\"user.home\");\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254226,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class xvWjkRZ extends AbstractTestCase {\n\n    \n    private static final boolean PRIVATE_STATIC_FINAL_TRUE = true;\n\n    private static final boolean PRIVATE_STATIC_FINAL_FALSE = false;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FALSE) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254231,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class RdTYErF extends AbstractTestCase {\n\n    \n    private boolean privateTrue = true;\n\n    private boolean privateFalse = false;\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (privateTrue) {\n            \n            \n            data = System.getProperty(\"user.home\");\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254232,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class RdTYErF extends AbstractTestCase {\n\n    \n    private boolean privateTrue = true;\n\n    private boolean privateFalse = false;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (privateFalse) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (privateTrue) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254233,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class MQcLPnE extends AbstractTestCase {\n\n    \n    private int privateFive = 5;\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (privateFive == 5) {\n            \n            \n            data = System.getProperty(\"user.home\");\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254236,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class MQcLPnE extends AbstractTestCase {\n\n    \n    private int privateFive = 5;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (privateFive != 5) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (privateFive == 5) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254237,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class tpLIBVN extends AbstractTestCase {\n\n    \n    private boolean privateReturnsTrue() {\n        return true;\n    }\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (privateReturnsTrue()) {\n            \n            \n            data = System.getProperty(\"user.home\");\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254238,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class PjkbfvE extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrue()) {\n            \n            \n            data = System.getProperty(\"user.home\");\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254244,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class WgMQGqZ extends AbstractTestCase {\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrueOrFalse()) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254247,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class Edsnpuc extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            \n            \n            data = System.getProperty(\"user.home\");\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254248,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class LKDPDoE extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticFive == 5) {\n            \n            \n            data = System.getProperty(\"user.home\");\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254250,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class eEPfxjT extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data = null;\n        switch(6) {\n            case 6:\n                \n                \n                data = System.getProperty(\"user.home\");\n                break;\n            default:\n                \n                data = null;\n                break;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254252,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class jXUhFMD extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getProperty(\"user.home\");\n        for (int i = 0; i < 1; i++) {\n            Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n            environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n            environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n            DirContext directoryContext = null;\n            try {\n                directoryContext = new InitialDirContext(environmentHashTable);\n                \n                String search = \"(cn=\" + data + \")\";\n                NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n                while (answer.hasMore()) {\n                    SearchResult searchResult = answer.next();\n                    Attributes attributes = searchResult.getAttributes();\n                    NamingEnumeration<?> allAttributes = attributes.getAll();\n                    while (allAttributes.hasMore()) {\n                        Attribute attribute = (Attribute) allAttributes.next();\n                        NamingEnumeration<?> allValues = attribute.getAll();\n                        while (allValues.hasMore()) {\n                            IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                        }\n                    }\n                }\n            } catch (NamingException exceptNaming) {\n                IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n            } finally {\n                if (directoryContext != null) {\n                    try {\n                        directoryContext.close();\n                    } catch (NamingException exceptNaming) {\n                        IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                    }\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254256,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class pqNZMgD extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String dataCopy;\n        {\n            String data;\n            \n            \n            data = System.getProperty(\"user.home\");\n            dataCopy = data;\n        }\n        {\n            String data = dataCopy;\n            Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n            environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n            environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n            DirContext directoryContext = null;\n            try {\n                directoryContext = new InitialDirContext(environmentHashTable);\n                \n                String search = \"(cn=\" + data + \")\";\n                NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n                while (answer.hasMore()) {\n                    SearchResult searchResult = answer.next();\n                    Attributes attributes = searchResult.getAttributes();\n                    NamingEnumeration<?> allAttributes = attributes.getAll();\n                    while (allAttributes.hasMore()) {\n                        Attribute attribute = (Attribute) allAttributes.next();\n                        NamingEnumeration<?> allValues = attribute.getAll();\n                        while (allValues.hasMore()) {\n                            IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                        }\n                    }\n                }\n            } catch (NamingException exceptNaming) {\n                IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n            } finally {\n                if (directoryContext != null) {\n                    try {\n                        directoryContext.close();\n                    } catch (NamingException exceptNaming) {\n                        IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                    }\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254262,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class YxXygrh extends AbstractTestCase {\n\n    private String wHnwAlc() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        return data;\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data = wHnwAlc();\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254267,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class CtYGPeC extends AbstractTestCase {\n\n    private String EuzMspW;\n\n    private String vZNWMPE;\n\n    private void RYNMBky() throws Throwable {\n        String data = EuzMspW;\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getProperty(\"user.home\");\n        EuzMspW = data;\n        RYNMBky();\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254268,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class SfcyopS extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getProperty(\"user.home\");\n        (new TdlObZj()).RYNMBky(data);\n    }\n}\n\npublic class ePMZYAn {\n\n    public void RYNMBky(String data) throws Throwable {\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n\npublic class YuhSadJ {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new ePMZYAn()).RYNMBky(data);\n    }\n}\n\npublic class TdlObZj {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new YuhSadJ()).RYNMBky(data);\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254274,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class aLnUVio extends AbstractTestCase {\n\n    public static String data;\n\n    public void boNMSnT() throws Throwable {\n        \n        \n        data = System.getProperty(\"user.home\");\n        (new rqHDhkk()).RYNMBky();\n    }\n}\n\npublic class rqHDhkk {\n\n    public void RYNMBky() throws Throwable {\n        String data = aLnUVio.data;\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254284,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class fXVioCa extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getProperty(\"user.home\");\n        (new srcSuXC()).RYNMBky((Object) data);\n    }\n}\n\npublic class srcSuXC {\n\n    public void RYNMBky(Object dataObject) throws Throwable {\n        String data = (String) dataObject;\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254286,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class XCPIvBO extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (true) {\n            data = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254298,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class QJlDkwP extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (5 != 5) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (5 == 5) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254301,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class IZgwraC extends AbstractTestCase {\n\n    \n    private boolean privateTrue = true;\n\n    private boolean privateFalse = false;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (privateFalse) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (privateTrue) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254305,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class mKYnets extends AbstractTestCase {\n\n    \n    private static final int PRIVATE_STATIC_FINAL_FIVE = 5;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE != 5) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254307,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class ePCBDgd extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_TRUE) {\n            data = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254312,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class ePCBDgd extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_FALSE) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_TRUE) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254313,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class YkAYdEI extends AbstractTestCase {\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrueOrFalse()) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254319,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class ZoYDHOA extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_FIVE != 5) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254321,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class eDkXylo extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticFive == 5) {\n            data = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254322,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class ITgHecv extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data = null;\n        switch(5) {\n            case 6:\n                \n                data = null;\n                break;\n            default:\n                \n                data = \"foo\";\n                break;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data = null;\n        switch(6) {\n            case 6:\n                \n                data = \"foo\";\n                break;\n            default:\n                \n                data = null;\n                break;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254325,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class ZFXFkvK extends AbstractTestCase {\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        while (true) {\n            \n            data = \"foo\";\n            break;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254327,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class GAqNtPS extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String dataCopy;\n        {\n            String data;\n            data = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n            dataCopy = data;\n        }\n        {\n            String data = dataCopy;\n            Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n            environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n            environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n            DirContext directoryContext = null;\n            try {\n                directoryContext = new InitialDirContext(environmentHashTable);\n                \n                String search = \"(cn=\" + data + \")\";\n                NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n                while (answer.hasMore()) {\n                    SearchResult searchResult = answer.next();\n                    Attributes attributes = searchResult.getAttributes();\n                    NamingEnumeration<?> allAttributes = attributes.getAll();\n                    while (allAttributes.hasMore()) {\n                        Attribute attribute = (Attribute) allAttributes.next();\n                        NamingEnumeration<?> allValues = attribute.getAll();\n                        while (allValues.hasMore()) {\n                            IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                        }\n                    }\n                }\n            } catch (NamingException exceptNaming) {\n                IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n            } finally {\n                if (directoryContext != null) {\n                    try {\n                        directoryContext.close();\n                    } catch (NamingException exceptNaming) {\n                        IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                    }\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254334,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class iKvfgmv extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        (new VoVKpYt()).RYNMBky(data);\n    }\n}\n\npublic class VoVKpYt {\n\n    public void RYNMBky(String data) throws Throwable {\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254342,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class jtfduRT extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        (new YhINMLa()).RYNMBky(data);\n    }\n}\n\npublic class YhINMLa {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new BshvQhS()).RYNMBky(data);\n    }\n}\n\npublic class BshvQhS {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new ZdjZqnA()).RYNMBky(data);\n    }\n}\n\npublic class ZdjZqnA {\n\n    public void RYNMBky(String data) throws Throwable {\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254346,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class aMoXGlG extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        (new dNaVWFp()).RYNMBky(data);\n    }\n}\n\npublic class dNaVWFp {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new zcdMLOu()).RYNMBky(data);\n    }\n}\n\npublic class zcdMLOu {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new TicQEpw()).RYNMBky(data);\n    }\n}\n\npublic class TicQEpw {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new TTygHWL()).RYNMBky(data);\n    }\n}\n\npublic class TTygHWL {\n\n    public void RYNMBky(String data) throws Throwable {\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254348,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class KdIzfaT extends AbstractTestCase {\n\n    static class Container {\n\n        public String containerOne;\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        Container dataContainer = new Container();\n        dataContainer.containerOne = data;\n        (new YsSnpjk()).RYNMBky(dataContainer);\n    }\n}\n\npublic class YsSnpjk {\n\n    public void RYNMBky(KdIzfaT.Container dataContainer) throws Throwable {\n        String data = dataContainer.containerOne;\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254354,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class SMmPfRZ extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (true) {\n            data = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254370,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class Durfhmp extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (5 == 5) {\n            data = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254372,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class dNyYsIl extends AbstractTestCase {\n\n    \n    private boolean privateReturnsTrue() {\n        return true;\n    }\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (privateReturnsTrue()) {\n            data = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254382,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class vjEbOUs extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticTrue) {\n            data = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254386,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class vjEbOUs extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (IO.staticFalse) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (IO.staticTrue) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254387,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class kGQjbtn extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_FIVE != 5) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254393,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class LlriOIq extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticFive == 5) {\n            data = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254394,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class LlriOIq extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (IO.staticFive != 5) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (IO.staticFive == 5) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254395,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class KtQbcvb extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data = null;\n        switch(6) {\n            case 6:\n                data = \"\";\n                \n                \n                {\n                    Socket socket = null;\n                    BufferedReader readerBuffered = null;\n                    InputStreamReader readerInputStream = null;\n                    try {\n                        \n                        socket = new Socket(\"host.example.org\", 39544);\n                        \n                        readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                        readerBuffered = new BufferedReader(readerInputStream);\n                        \n                        data = readerBuffered.readLine();\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                    } finally {\n                        \n                        try {\n                            if (readerBuffered != null) {\n                                readerBuffered.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                        }\n                        try {\n                            if (readerInputStream != null) {\n                                readerInputStream.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                        }\n                        \n                        try {\n                            if (socket != null) {\n                                socket.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                data = null;\n                break;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254396,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class FOhWVaY extends AbstractTestCase {\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        while (true) {\n            \n            data = \"foo\";\n            break;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254399,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class KbWEIBY extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String dataCopy;\n        {\n            String data;\n            data = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n            dataCopy = data;\n        }\n        {\n            String data = dataCopy;\n            Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n            environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n            environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n            DirContext directoryContext = null;\n            try {\n                directoryContext = new InitialDirContext(environmentHashTable);\n                \n                String search = \"(cn=\" + data + \")\";\n                NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n                while (answer.hasMore()) {\n                    SearchResult searchResult = answer.next();\n                    Attributes attributes = searchResult.getAttributes();\n                    NamingEnumeration<?> allAttributes = attributes.getAll();\n                    while (allAttributes.hasMore()) {\n                        Attribute attribute = (Attribute) allAttributes.next();\n                        NamingEnumeration<?> allValues = attribute.getAll();\n                        while (allValues.hasMore()) {\n                            IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                        }\n                    }\n                }\n            } catch (NamingException exceptNaming) {\n                IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n            } finally {\n                if (directoryContext != null) {\n                    try {\n                        directoryContext.close();\n                    } catch (NamingException exceptNaming) {\n                        IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                    }\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254406,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class KbWEIBY extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String dataCopy;\n        {\n            String data;\n            \n            data = \"foo\";\n            dataCopy = data;\n        }\n        {\n            String data = dataCopy;\n            Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n            environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n            environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n            DirContext directoryContext = null;\n            try {\n                directoryContext = new InitialDirContext(environmentHashTable);\n                \n                String search = \"(cn=\" + data + \")\";\n                NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n                while (answer.hasMore()) {\n                    SearchResult searchResult = answer.next();\n                    Attributes attributes = searchResult.getAttributes();\n                    NamingEnumeration<?> allAttributes = attributes.getAll();\n                    while (allAttributes.hasMore()) {\n                        Attribute attribute = (Attribute) allAttributes.next();\n                        NamingEnumeration<?> allValues = attribute.getAll();\n                        while (allValues.hasMore()) {\n                            IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                        }\n                    }\n                }\n            } catch (NamingException exceptNaming) {\n                IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n            } finally {\n                if (directoryContext != null) {\n                    try {\n                        directoryContext.close();\n                    } catch (NamingException exceptNaming) {\n                        IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                    }\n                }\n            }\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254407,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class ULTkQbe extends AbstractTestCase {\n\n    private void RYNMBky(String data) throws Throwable {\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        RYNMBky(data);\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254408,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class ZBPKDlc extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        (new jwisXcJ()).RYNMBky(data);\n    }\n}\n\npublic class jwisXcJ {\n\n    public void RYNMBky(String data) throws Throwable {\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254414,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class FoXKeyG extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        (new TpHsEhA()).RYNMBky(data);\n    }\n}\n\npublic class TpHsEhA {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new KleleHA()).RYNMBky(data);\n    }\n}\n\npublic class KleleHA {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new ZkOPoHH()).RYNMBky(data);\n    }\n}\n\npublic class ZkOPoHH {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new quSThcY()).RYNMBky(data);\n    }\n}\n\npublic class quSThcY {\n\n    public void RYNMBky(String data) throws Throwable {\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254420,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\n\npublic class rFfDFth extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        String[] dataArray = new String[5];\n        dataArray[2] = data;\n        (new vMyJluO()).RYNMBky(dataArray);\n    }\n}\n\npublic class vMyJluO {\n\n    public void RYNMBky(String[] dataArray) throws Throwable {\n        String data = dataArray[2];\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254424,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.util.HashMap;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\n\npublic class UUvcwiZ extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();\n        dataHashMap.put(0, data);\n        dataHashMap.put(1, data);\n        dataHashMap.put(2, data);\n        (new AHylmUt()).RYNMBky(dataHashMap);\n    }\n}\n\npublic class AHylmUt {\n\n    public void RYNMBky(HashMap<Integer, String> dataHashMap) throws Throwable {\n        String data = dataHashMap.get(2);\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254436,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.util.HashMap;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\n\npublic class UUvcwiZ extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();\n        dataHashMap.put(0, data);\n        dataHashMap.put(1, data);\n        dataHashMap.put(2, data);\n        (new AHylmUt()).fDqjRYE(dataHashMap);\n    }\n}\n\npublic class AHylmUt {\n\n    \n    public void fDqjRYE(HashMap<Integer, String> dataHashMap) throws Throwable {\n        String data = dataHashMap.get(2);\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254437,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectOutput;\nimport java.io.ObjectOutputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.net.Socket;\n\npublic class xLBsbfg extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        \n        ByteArrayOutputStream streamByteArrayOutput = null;\n        ObjectOutput outputObject = null;\n        try {\n            streamByteArrayOutput = new ByteArrayOutputStream();\n            outputObject = new ObjectOutputStream(streamByteArrayOutput);\n            outputObject.writeObject(data);\n            byte[] dataSerialized = streamByteArrayOutput.toByteArray();\n            (new RiNtvlz()).RYNMBky(dataSerialized);\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"IQdccST\", exceptIO);\n        } finally {\n            \n            try {\n                if (outputObject != null) {\n                    outputObject.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"LgADWEx\", exceptIO);\n            }\n            try {\n                if (streamByteArrayOutput != null) {\n                    streamByteArrayOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"vFutZps\", exceptIO);\n            }\n        }\n    }\n}\n\npublic class RiNtvlz {\n\n    public void RYNMBky(byte[] dataSerialized) throws Throwable {\n        \n        ByteArrayInputStream streamByteArrayInput = null;\n        ObjectInputStream streamObjectInput = null;\n        try {\n            streamByteArrayInput = new ByteArrayInputStream(dataSerialized);\n            streamObjectInput = new ObjectInputStream(streamByteArrayInput);\n            String data = (String) streamObjectInput.readObject();\n            Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n            environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n            environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n            DirContext directoryContext = null;\n            try {\n                directoryContext = new InitialDirContext(environmentHashTable);\n                \n                String search = \"(cn=\" + data + \")\";\n                NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n                while (answer.hasMore()) {\n                    SearchResult searchResult = answer.next();\n                    Attributes attributes = searchResult.getAttributes();\n                    NamingEnumeration<?> allAttributes = attributes.getAll();\n                    while (allAttributes.hasMore()) {\n                        Attribute attribute = (Attribute) allAttributes.next();\n                        NamingEnumeration<?> allValues = attribute.getAll();\n                        while (allValues.hasMore()) {\n                            IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                        }\n                    }\n                }\n            } catch (NamingException exceptNaming) {\n                IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n            } finally {\n                if (directoryContext != null) {\n                    try {\n                        directoryContext.close();\n                    } catch (NamingException exceptNaming) {\n                        IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                    }\n                }\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VcFIKxo\", exceptIO);\n        } catch (ClassNotFoundException exceptClassNotFound) {\n            IO.logger.log(Level.WARNING, \"XOCCPfT\", exceptClassNotFound);\n        } finally {\n            \n            try {\n                if (streamObjectInput != null) {\n                    streamObjectInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"kpDMUXH\", exceptIO);\n            }\n            try {\n                if (streamByteArrayInput != null) {\n                    streamByteArrayInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"oiWyzFb\", exceptIO);\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254438,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class crjPQBG extends AbstractTestCase {\n\n    \n    private static final int PRIVATE_STATIC_FINAL_FIVE = 5;\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            data = \"\";\n            \n            {\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                \n                try {\n                    readerInputStream = new InputStreamReader(System.in, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n            \n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254450,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class HPecMkh extends AbstractTestCase {\n\n    \n    private int privateFive = 5;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (privateFive != 5) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (privateFive == 5) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254453,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class xXRfeZw extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (IO.staticFalse) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (IO.staticTrue) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254459,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class agCifRZ extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrue()) {\n            data = \"\";\n            \n            {\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                \n                try {\n                    readerInputStream = new InputStreamReader(System.in, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n            \n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254460,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class VaFQqal extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            data = \"\";\n            \n            {\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                \n                try {\n                    readerInputStream = new InputStreamReader(System.in, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n            \n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254464,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class VaFQqal extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_FIVE != 5) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254465,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class vNgOXGg extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        while (true) {\n            data = \"\";\n            \n            {\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                \n                try {\n                    readerInputStream = new InputStreamReader(System.in, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n            \n            break;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254470,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class mTxeNfo extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            \n            try {\n                readerInputStream = new InputStreamReader(System.in, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        \n        for (int i = 0; i < 1; i++) {\n            Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n            environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n            environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n            DirContext directoryContext = null;\n            try {\n                directoryContext = new InitialDirContext(environmentHashTable);\n                \n                String search = \"(cn=\" + data + \")\";\n                NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n                while (answer.hasMore()) {\n                    SearchResult searchResult = answer.next();\n                    Attributes attributes = searchResult.getAttributes();\n                    NamingEnumeration<?> allAttributes = attributes.getAll();\n                    while (allAttributes.hasMore()) {\n                        Attribute attribute = (Attribute) allAttributes.next();\n                        NamingEnumeration<?> allValues = attribute.getAll();\n                        while (allValues.hasMore()) {\n                            IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                        }\n                    }\n                }\n            } catch (NamingException exceptNaming) {\n                IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n            } finally {\n                if (directoryContext != null) {\n                    try {\n                        directoryContext.close();\n                    } catch (NamingException exceptNaming) {\n                        IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                    }\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254472,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class AAoOKvu extends AbstractTestCase {\n\n    \n    private boolean dWmGbZa = false;\n\n    \n    private boolean gmaYCRK = false;\n\n    private boolean mAvKbsp = false;\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        gmaYCRK = false;\n        data = MZKvgmW();\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    private String MZKvgmW() throws Throwable {\n        String data = null;\n        if (gmaYCRK) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        return data;\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        mAvKbsp = true;\n        data = ymJWUuP();\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    private String ymJWUuP() throws Throwable {\n        String data = null;\n        if (mAvKbsp) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        return data;\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254475,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class pljbKQm extends AbstractTestCase {\n\n    private void RYNMBky(String data) throws Throwable {\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            \n            try {\n                readerInputStream = new InputStreamReader(System.in, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        \n        RYNMBky(data);\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254480,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class dZfftVg extends AbstractTestCase {\n\n    private String wHnwAlc() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        return data;\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data = wHnwAlc();\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254483,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class oUmhfQA extends AbstractTestCase {\n\n    private String EuzMspW;\n\n    private String vZNWMPE;\n\n    private void RYNMBky() throws Throwable {\n        String data = EuzMspW;\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            \n            try {\n                readerInputStream = new InputStreamReader(System.in, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        \n        EuzMspW = data;\n        RYNMBky();\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254484,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class lysCwpa extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            \n            try {\n                readerInputStream = new InputStreamReader(System.in, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        \n        (new swUdKEh()).RYNMBky(data);\n    }\n}\n\npublic class cBqRPti {\n\n    public void RYNMBky(String data) throws Throwable {\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n\npublic class swUdKEh {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new cBqRPti()).RYNMBky(data);\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254488,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class KnTMUVb extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            \n            try {\n                readerInputStream = new InputStreamReader(System.in, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        \n        (new gTbLWYu()).RYNMBky(data);\n    }\n}\n\npublic class BYydmwc {\n\n    public void RYNMBky(String data) throws Throwable {\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n\npublic class gTbLWYu {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new LrQgNDK()).RYNMBky(data);\n    }\n}\n\npublic class LrQgNDK {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new BYydmwc()).RYNMBky(data);\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254490,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class IzfMZCu extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data = (new pNDgANh()).ImBBndW();\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n\npublic class pNDgANh {\n\n    public String ImBBndW() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            \n            try {\n                readerInputStream = new InputStreamReader(System.in, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        \n        return data;\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254494,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class kxBFrsG extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            \n            try {\n                readerInputStream = new InputStreamReader(System.in, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        \n        String[] dataArray = new String[5];\n        dataArray[2] = data;\n        (new LDOUUxw()).RYNMBky(dataArray);\n    }\n}\n\npublic class LDOUUxw {\n\n    public void RYNMBky(String[] dataArray) throws Throwable {\n        String data = dataArray[2];\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254496,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class BnJCSQv extends AbstractTestCase {\n\n    static class Container {\n\n        public String containerOne;\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            \n            try {\n                readerInputStream = new InputStreamReader(System.in, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        \n        Container dataContainer = new Container();\n        dataContainer.containerOne = data;\n        (new TuYkRTZ()).RYNMBky(dataContainer);\n    }\n}\n\npublic class TuYkRTZ {\n\n    public void RYNMBky(BnJCSQv.Container dataContainer) throws Throwable {\n        String data = dataContainer.containerOne;\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254498,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.util.LinkedList;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class AwjRdRI extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            \n            try {\n                readerInputStream = new InputStreamReader(System.in, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        \n        LinkedList<String> dataLinkedList = new LinkedList<String>();\n        dataLinkedList.add(0, data);\n        dataLinkedList.add(1, data);\n        dataLinkedList.add(2, data);\n        (new Eeqrwou()).RYNMBky(dataLinkedList);\n    }\n}\n\npublic class Eeqrwou {\n\n    public void RYNMBky(LinkedList<String> dataLinkedList) throws Throwable {\n        String data = dataLinkedList.remove(2);\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254506,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class uGpmUMc extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (true) {\n            data = \"\";\n            \n            \n            {\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n                try {\n                    \n                    connection = IO.getDBConnection();\n                    \n                    preparedStatement = connection.prepareStatement(\"select name from users where id=0\");\n                    resultSet = preparedStatement.executeQuery();\n                    \n                    data = resultSet.getString(1);\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"FMVCxkV\", exceptSql);\n                } finally {\n                    \n                    try {\n                        if (resultSet != null) {\n                            resultSet.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                    }\n                    try {\n                        if (preparedStatement != null) {\n                            preparedStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (connection != null) {\n                            connection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254514,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class uGpmUMc extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (false) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (true) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254515,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class bPhpwUn extends AbstractTestCase {\n\n    \n    private static final boolean PRIVATE_STATIC_FINAL_TRUE = true;\n\n    private static final boolean PRIVATE_STATIC_FINAL_FALSE = false;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FALSE) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254519,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class zQnlIRI extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_FALSE) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_TRUE) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254529,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class JNdqEhu extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticTrue) {\n            data = \"\";\n            \n            \n            {\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n                try {\n                    \n                    connection = IO.getDBConnection();\n                    \n                    preparedStatement = connection.prepareStatement(\"select name from users where id=0\");\n                    resultSet = preparedStatement.executeQuery();\n                    \n                    data = resultSet.getString(1);\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"FMVCxkV\", exceptSql);\n                } finally {\n                    \n                    try {\n                        if (resultSet != null) {\n                            resultSet.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                    }\n                    try {\n                        if (preparedStatement != null) {\n                            preparedStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (connection != null) {\n                            connection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254530,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class NQzqUlp extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (IO.staticReturnsFalse()) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrue()) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254533,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class qVbfbJT extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data = null;\n        switch(6) {\n            case 6:\n                data = \"\";\n                \n                \n                {\n                    Connection connection = null;\n                    PreparedStatement preparedStatement = null;\n                    ResultSet resultSet = null;\n                    try {\n                        \n                        connection = IO.getDBConnection();\n                        \n                        preparedStatement = connection.prepareStatement(\"select name from users where id=0\");\n                        resultSet = preparedStatement.executeQuery();\n                        \n                        data = resultSet.getString(1);\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"FMVCxkV\", exceptSql);\n                    } finally {\n                        \n                        try {\n                            if (resultSet != null) {\n                                resultSet.close();\n                            }\n                        } catch (SQLException exceptSql) {\n                            IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                        }\n                        try {\n                            if (preparedStatement != null) {\n                                preparedStatement.close();\n                            }\n                        } catch (SQLException exceptSql) {\n                            IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                        }\n                        try {\n                            if (connection != null) {\n                                connection.close();\n                            }\n                        } catch (SQLException exceptSql) {\n                            IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                data = null;\n                break;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254540,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class tGgFEll extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        while (true) {\n            data = \"\";\n            \n            \n            {\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n                try {\n                    \n                    connection = IO.getDBConnection();\n                    \n                    preparedStatement = connection.prepareStatement(\"select name from users where id=0\");\n                    resultSet = preparedStatement.executeQuery();\n                    \n                    data = resultSet.getString(1);\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"FMVCxkV\", exceptSql);\n                } finally {\n                    \n                    try {\n                        if (resultSet != null) {\n                            resultSet.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                    }\n                    try {\n                        if (preparedStatement != null) {\n                            preparedStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (connection != null) {\n                            connection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n            break;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254542,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class WRrvQGD extends AbstractTestCase {\n\n    \n    private boolean dWmGbZa = false;\n\n    \n    private boolean gmaYCRK = false;\n\n    private boolean mAvKbsp = false;\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        gmaYCRK = false;\n        data = MZKvgmW();\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    private String MZKvgmW() throws Throwable {\n        String data = null;\n        if (gmaYCRK) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        return data;\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        mAvKbsp = true;\n        data = ymJWUuP();\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    private String ymJWUuP() throws Throwable {\n        String data = null;\n        if (mAvKbsp) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        return data;\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254547,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class wnxTqgz extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String dataCopy;\n        {\n            String data;\n            \n            data = \"foo\";\n            dataCopy = data;\n        }\n        {\n            String data = dataCopy;\n            Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n            environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n            environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n            DirContext directoryContext = null;\n            try {\n                directoryContext = new InitialDirContext(environmentHashTable);\n                \n                String search = \"(cn=\" + data + \")\";\n                NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n                while (answer.hasMore()) {\n                    SearchResult searchResult = answer.next();\n                    Attributes attributes = searchResult.getAttributes();\n                    NamingEnumeration<?> allAttributes = attributes.getAll();\n                    while (allAttributes.hasMore()) {\n                        Attribute attribute = (Attribute) allAttributes.next();\n                        NamingEnumeration<?> allValues = attribute.getAll();\n                        while (allValues.hasMore()) {\n                            IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                        }\n                    }\n                }\n            } catch (NamingException exceptNaming) {\n                IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n            } finally {\n                if (directoryContext != null) {\n                    try {\n                        directoryContext.close();\n                    } catch (NamingException exceptNaming) {\n                        IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                    }\n                }\n            }\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254551,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class ieiceYw extends AbstractTestCase {\n\n    private String EuzMspW;\n\n    private String vZNWMPE;\n\n    private void RYNMBky() throws Throwable {\n        String data = EuzMspW;\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = IO.getDBConnection();\n                \n                preparedStatement = connection.prepareStatement(\"select name from users where id=0\");\n                resultSet = preparedStatement.executeQuery();\n                \n                data = resultSet.getString(1);\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"FMVCxkV\", exceptSql);\n            } finally {\n                \n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n        EuzMspW = data;\n        RYNMBky();\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254556,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class gGNEIpq extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = IO.getDBConnection();\n                \n                preparedStatement = connection.prepareStatement(\"select name from users where id=0\");\n                resultSet = preparedStatement.executeQuery();\n                \n                data = resultSet.getString(1);\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"FMVCxkV\", exceptSql);\n            } finally {\n                \n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n        (new MSyNKLR()).RYNMBky(data);\n    }\n}\n\npublic class MSyNKLR {\n\n    public void RYNMBky(String data) throws Throwable {\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254558,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.util.HashMap;\nimport javax.servlet.http.*;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.logging.Level;\n\npublic class ocQDqqz extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = IO.getDBConnection();\n                \n                preparedStatement = connection.prepareStatement(\"select name from users where id=0\");\n                resultSet = preparedStatement.executeQuery();\n                \n                data = resultSet.getString(1);\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"FMVCxkV\", exceptSql);\n            } finally {\n                \n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();\n        dataHashMap.put(0, data);\n        dataHashMap.put(1, data);\n        dataHashMap.put(2, data);\n        (new kVNdYnQ()).RYNMBky(dataHashMap);\n    }\n}\n\npublic class kVNdYnQ {\n\n    public void RYNMBky(HashMap<Integer, String> dataHashMap) throws Throwable {\n        String data = dataHashMap.get(2);\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254580,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class EXLIzXD extends AbstractTestCaseServlet {\n\n    \n    private static final int PRIVATE_STATIC_FINAL_FIVE = 5;\n\n    \n    private void nrUZtTn(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE != 5) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        nrUZtTn(request, response);\n        iEftrkw(request, response);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254595,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class nMCLeRq extends AbstractTestCaseServlet {\n\n    \n    private boolean privateReturnsTrue() {\n        return true;\n    }\n\n    private boolean privateReturnsFalse() {\n        return false;\n    }\n\n    \n    private void nrUZtTn(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        if (privateReturnsFalse()) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        if (privateReturnsTrue()) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        nrUZtTn(request, response);\n        iEftrkw(request, response);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254599,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class ZhHhYUD extends AbstractTestCaseServlet {\n\n    \n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_TRUE) {\n            data = \"\";\n            \n            \n            {\n                Cookie[] cookieSources = request.getCookies();\n                if (cookieSources != null) {\n                    \n                    data = cookieSources[0].getValue();\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254600,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class ZhHhYUD extends AbstractTestCaseServlet {\n\n    \n    private void nrUZtTn(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_FALSE) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_TRUE) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        nrUZtTn(request, response);\n        iEftrkw(request, response);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254601,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class vgznSmV extends AbstractTestCaseServlet {\n\n    \n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        if (IO.staticTrue) {\n            data = \"\";\n            \n            \n            {\n                Cookie[] cookieSources = request.getCookies();\n                if (cookieSources != null) {\n                    \n                    data = cookieSources[0].getValue();\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254602,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class vgznSmV extends AbstractTestCaseServlet {\n\n    \n    private void nrUZtTn(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        if (IO.staticFalse) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        if (IO.staticTrue) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        nrUZtTn(request, response);\n        iEftrkw(request, response);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254603,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class RfwGRYu extends AbstractTestCaseServlet {\n\n    \n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        if (IO.staticReturnsTrue()) {\n            data = \"\";\n            \n            \n            {\n                Cookie[] cookieSources = request.getCookies();\n                if (cookieSources != null) {\n                    \n                    data = cookieSources[0].getValue();\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254604,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class KtprTdS extends AbstractTestCaseServlet {\n\n    \n    private void nrUZtTn(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_FIVE != 5) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        nrUZtTn(request, response);\n        iEftrkw(request, response);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254609,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class bqSPbat extends AbstractTestCaseServlet {\n\n    \n    private boolean dWmGbZa = false;\n\n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        dWmGbZa = true;\n        data = LqPHiJL(request, response);\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    private String LqPHiJL(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        if (dWmGbZa) {\n            data = \"\";\n            \n            \n            {\n                Cookie[] cookieSources = request.getCookies();\n                if (cookieSources != null) {\n                    \n                    data = cookieSources[0].getValue();\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        return data;\n    }\n\n    \n    private boolean gmaYCRK = false;\n\n    private boolean mAvKbsp = false;\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254618,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class jztEteI extends AbstractTestCaseServlet {\n\n    public void JttWLtS(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        EXrOlJC(request, response);\n    }\n\n    \n    private void EXrOlJC(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String dataCopy;\n        {\n            String data;\n            \n            data = \"foo\";\n            dataCopy = data;\n        }\n        {\n            String data = dataCopy;\n            Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n            environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n            environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n            DirContext directoryContext = null;\n            try {\n                directoryContext = new InitialDirContext(environmentHashTable);\n                \n                String search = \"(cn=\" + data + \")\";\n                NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n                while (answer.hasMore()) {\n                    SearchResult searchResult = answer.next();\n                    Attributes attributes = searchResult.getAttributes();\n                    NamingEnumeration<?> allAttributes = attributes.getAll();\n                    while (allAttributes.hasMore()) {\n                        Attribute attribute = (Attribute) allAttributes.next();\n                        NamingEnumeration<?> allValues = attribute.getAll();\n                        while (allValues.hasMore()) {\n                            IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                        }\n                    }\n                }\n            } catch (NamingException exceptNaming) {\n                IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n            } finally {\n                if (directoryContext != null) {\n                    try {\n                        directoryContext.close();\n                    } catch (NamingException exceptNaming) {\n                        IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                    }\n                }\n            }\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254623,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class wGozdci extends AbstractTestCaseServlet {\n\n    private void RYNMBky(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Cookie[] cookieSources = request.getCookies();\n            if (cookieSources != null) {\n                \n                data = cookieSources[0].getValue();\n            }\n        }\n        RYNMBky(data, request, response);\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254624,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class srbiuml extends AbstractTestCaseServlet {\n\n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Cookie[] cookieSources = request.getCookies();\n            if (cookieSources != null) {\n                \n                data = cookieSources[0].getValue();\n            }\n        }\n        (new hCBeziD()).RYNMBky(data, request, response);\n    }\n}\n\npublic class hCBeziD {\n\n    public void RYNMBky(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        (new hxfPTCt()).RYNMBky(data, request, response);\n    }\n}\n\npublic class hxfPTCt {\n\n    public void RYNMBky(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254632,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class cwWVMLh extends AbstractTestCaseServlet {\n\n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Cookie[] cookieSources = request.getCookies();\n            if (cookieSources != null) {\n                \n                data = cookieSources[0].getValue();\n            }\n        }\n        (new LJykqLc()).RYNMBky(data, request, response);\n    }\n}\n\npublic class LmKsaDW {\n\n    public void RYNMBky(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        (new bESNvuq()).RYNMBky(data, request, response);\n    }\n}\n\npublic class LJykqLc {\n\n    public void RYNMBky(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        (new fRYLjJQ()).RYNMBky(data, request, response);\n    }\n}\n\npublic class bESNvuq {\n\n    public void RYNMBky(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n\npublic class fRYLjJQ {\n\n    public void RYNMBky(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        (new LmKsaDW()).RYNMBky(data, request, response);\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254636,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class veodQGN extends AbstractTestCaseServlet {\n\n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data = (new wXgKebW()).ImBBndW(request, response);\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n\npublic class wXgKebW {\n\n    public String ImBBndW(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Cookie[] cookieSources = request.getCookies();\n            if (cookieSources != null) {\n                \n                data = cookieSources[0].getValue();\n            }\n        }\n        return data;\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254638,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class gRFPFoI extends AbstractTestCaseServlet {\n\n    static class Container {\n\n        public String containerOne;\n    }\n\n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Cookie[] cookieSources = request.getCookies();\n            if (cookieSources != null) {\n                \n                data = cookieSources[0].getValue();\n            }\n        }\n        Container dataContainer = new Container();\n        dataContainer.containerOne = data;\n        (new kCvItjB()).RYNMBky(dataContainer, request, response);\n    }\n}\n\npublic class kCvItjB {\n\n    public void RYNMBky(gRFPFoI.Container dataContainer, HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data = dataContainer.containerOne;\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254642,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class mYmdIgm extends AbstractTestCaseServlet {\n\n    public static String data;\n\n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        data = \"\";\n        \n        \n        {\n            Cookie[] cookieSources = request.getCookies();\n            if (cookieSources != null) {\n                \n                data = cookieSources[0].getValue();\n            }\n        }\n        (new ZCkpKkw()).RYNMBky(request, response);\n    }\n}\n\npublic class ZCkpKkw {\n\n    public void RYNMBky(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data = mYmdIgm.data;\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254644,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.util.Vector;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class WEUTBWN extends AbstractTestCaseServlet {\n\n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Cookie[] cookieSources = request.getCookies();\n            if (cookieSources != null) {\n                \n                data = cookieSources[0].getValue();\n            }\n        }\n        Vector<String> dataVector = new Vector<String>(5);\n        dataVector.add(0, data);\n        dataVector.add(1, data);\n        dataVector.add(2, data);\n        (new TTCsvsv()).RYNMBky(dataVector, request, response);\n    }\n}\n\npublic class TTCsvsv {\n\n    public void RYNMBky(Vector<String> dataVector, HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data = dataVector.remove(2);\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254648,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.util.HashMap;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class HgaSOQk extends AbstractTestCaseServlet {\n\n    public void JttWLtS(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        EXrOlJC(request, response);\n    }\n\n    \n    private void EXrOlJC(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();\n        dataHashMap.put(0, data);\n        dataHashMap.put(1, data);\n        dataHashMap.put(2, data);\n        (new UKQgzVd()).fDqjRYE(dataHashMap, request, response);\n    }\n}\n\npublic class UKQgzVd {\n\n    \n    public void fDqjRYE(HashMap<Integer, String> dataHashMap, HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data = dataHashMap.get(2);\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254653,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class BWPJTXh extends AbstractTestCaseServlet {\n\n    \n    private static final boolean PRIVATE_STATIC_FINAL_TRUE = true;\n\n    private static final boolean PRIVATE_STATIC_FINAL_FALSE = false;\n\n    \n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            \n            data = request.getParameter(\"name\");\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254662,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class BRoaKVN extends AbstractTestCaseServlet {\n\n    \n    private boolean privateReturnsTrue() {\n        return true;\n    }\n\n    private boolean privateReturnsFalse() {\n        return false;\n    }\n\n    \n    private void nrUZtTn(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        if (privateReturnsFalse()) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        if (privateReturnsTrue()) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        nrUZtTn(request, response);\n        iEftrkw(request, response);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254671,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class fRBbIOx extends AbstractTestCaseServlet {\n\n    \n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        if (IO.staticTrue) {\n            \n            data = request.getParameter(\"name\");\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254674,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class vGTABXw extends AbstractTestCaseServlet {\n\n    \n    private void nrUZtTn(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        if (IO.staticReturnsFalse()) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        if (IO.staticReturnsTrue()) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        nrUZtTn(request, response);\n        iEftrkw(request, response);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254677,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class ioQlqNB extends AbstractTestCaseServlet {\n\n    \n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        if (IO.staticReturnsTrueOrFalse()) {\n            \n            data = request.getParameter(\"name\");\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254678,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class SOcWBXX extends AbstractTestCaseServlet {\n\n    \n    private void nrUZtTn(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_FIVE != 5) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        nrUZtTn(request, response);\n        iEftrkw(request, response);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254681,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class sDvNVew extends AbstractTestCaseServlet {\n\n    \n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        if (IO.staticFive == 5) {\n            \n            data = request.getParameter(\"name\");\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254682,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class QUSYdaZ extends AbstractTestCaseServlet {\n\n    \n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        \n        data = request.getParameter(\"name\");\n        for (int i = 0; i < 1; i++) {\n            Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n            environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n            environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n            DirContext directoryContext = null;\n            try {\n                directoryContext = new InitialDirContext(environmentHashTable);\n                \n                String search = \"(cn=\" + data + \")\";\n                NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n                while (answer.hasMore()) {\n                    SearchResult searchResult = answer.next();\n                    Attributes attributes = searchResult.getAttributes();\n                    NamingEnumeration<?> allAttributes = attributes.getAll();\n                    while (allAttributes.hasMore()) {\n                        Attribute attribute = (Attribute) allAttributes.next();\n                        NamingEnumeration<?> allValues = attribute.getAll();\n                        while (allValues.hasMore()) {\n                            IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                        }\n                    }\n                }\n            } catch (NamingException exceptNaming) {\n                IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n            } finally {\n                if (directoryContext != null) {\n                    try {\n                        directoryContext.close();\n                    } catch (NamingException exceptNaming) {\n                        IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                    }\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254688,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class TcveYcp extends AbstractTestCaseServlet {\n\n    \n    public static boolean qRMEpGJ = false;\n\n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        qRMEpGJ = true;\n        data = (new ICFUOXP()).ImBBndW(request, response);\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    public static boolean elORjvF = false;\n\n    public static boolean CvGpmkk = false;\n}\n\npublic class ICFUOXP {\n\n    public String ImBBndW(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        if (TcveYcp.qRMEpGJ) {\n            \n            data = request.getParameter(\"name\");\n        } else {\n            \n            data = null;\n        }\n        return data;\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254692,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class zIPNRjh extends AbstractTestCaseServlet {\n\n    \n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String dataCopy;\n        {\n            String data;\n            \n            data = request.getParameter(\"name\");\n            dataCopy = data;\n        }\n        {\n            String data = dataCopy;\n            Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n            environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n            environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n            DirContext directoryContext = null;\n            try {\n                directoryContext = new InitialDirContext(environmentHashTable);\n                \n                String search = \"(cn=\" + data + \")\";\n                NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n                while (answer.hasMore()) {\n                    SearchResult searchResult = answer.next();\n                    Attributes attributes = searchResult.getAttributes();\n                    NamingEnumeration<?> allAttributes = attributes.getAll();\n                    while (allAttributes.hasMore()) {\n                        Attribute attribute = (Attribute) allAttributes.next();\n                        NamingEnumeration<?> allValues = attribute.getAll();\n                        while (allValues.hasMore()) {\n                            IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                        }\n                    }\n                }\n            } catch (NamingException exceptNaming) {\n                IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n            } finally {\n                if (directoryContext != null) {\n                    try {\n                        directoryContext.close();\n                    } catch (NamingException exceptNaming) {\n                        IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                    }\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254694,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class zIPNRjh extends AbstractTestCaseServlet {\n\n    public void JttWLtS(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        EXrOlJC(request, response);\n    }\n\n    \n    private void EXrOlJC(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String dataCopy;\n        {\n            String data;\n            \n            data = \"foo\";\n            dataCopy = data;\n        }\n        {\n            String data = dataCopy;\n            Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n            environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n            environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n            DirContext directoryContext = null;\n            try {\n                directoryContext = new InitialDirContext(environmentHashTable);\n                \n                String search = \"(cn=\" + data + \")\";\n                NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n                while (answer.hasMore()) {\n                    SearchResult searchResult = answer.next();\n                    Attributes attributes = searchResult.getAttributes();\n                    NamingEnumeration<?> allAttributes = attributes.getAll();\n                    while (allAttributes.hasMore()) {\n                        Attribute attribute = (Attribute) allAttributes.next();\n                        NamingEnumeration<?> allValues = attribute.getAll();\n                        while (allValues.hasMore()) {\n                            IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                        }\n                    }\n                }\n            } catch (NamingException exceptNaming) {\n                IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n            } finally {\n                if (directoryContext != null) {\n                    try {\n                        directoryContext.close();\n                    } catch (NamingException exceptNaming) {\n                        IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                    }\n                }\n            }\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254695,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class YQahADc extends AbstractTestCaseServlet {\n\n    public static String data;\n\n    public void JttWLtS(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        EXrOlJC(request, response);\n    }\n\n    \n    private void EXrOlJC(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        \n        data = \"foo\";\n        (new HXQhjyd()).fDqjRYE(request, response);\n    }\n}\n\npublic class HXQhjyd {\n\n    \n    public void fDqjRYE(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data = YQahADc.data;\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254717,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.util.HashMap;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class GalofLN extends AbstractTestCaseServlet {\n\n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        \n        data = request.getParameter(\"name\");\n        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();\n        dataHashMap.put(0, data);\n        dataHashMap.put(1, data);\n        dataHashMap.put(2, data);\n        (new ucBROIA()).RYNMBky(dataHashMap, request, response);\n    }\n}\n\npublic class ucBROIA {\n\n    public void RYNMBky(HashMap<Integer, String> dataHashMap, HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data = dataHashMap.get(2);\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254724,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.util.HashMap;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class GalofLN extends AbstractTestCaseServlet {\n\n    public void JttWLtS(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        EXrOlJC(request, response);\n    }\n\n    \n    private void EXrOlJC(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();\n        dataHashMap.put(0, data);\n        dataHashMap.put(1, data);\n        dataHashMap.put(2, data);\n        (new ucBROIA()).fDqjRYE(dataHashMap, request, response);\n    }\n}\n\npublic class ucBROIA {\n\n    \n    public void fDqjRYE(HashMap<Integer, String> dataHashMap, HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data = dataHashMap.get(2);\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254725,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.StringTokenizer;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class ZuLqfBO extends AbstractTestCaseServlet {\n\n    \n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        if (true) {\n            data = \"\";\n            \n            \n            {\n                StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), \"&\");\n                while (tokenizer.hasMoreTokens()) {\n                    String token = tokenizer.nextToken();\n                    \n                    if (token.startsWith(\"id=\")) \n                    {\n                        data = token.substring(3);\n                        \n                        break;\n                        \n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254730,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.StringTokenizer;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class VrYRRmV extends AbstractTestCaseServlet {\n\n    \n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        if (5 == 5) {\n            data = \"\";\n            \n            \n            {\n                StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), \"&\");\n                while (tokenizer.hasMoreTokens()) {\n                    String token = tokenizer.nextToken();\n                    \n                    if (token.startsWith(\"id=\")) \n                    {\n                        data = token.substring(3);\n                        \n                        break;\n                        \n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254732,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.StringTokenizer;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class YNKTqOw extends AbstractTestCaseServlet {\n\n    \n    private static final int PRIVATE_STATIC_FINAL_FIVE = 5;\n\n    \n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            data = \"\";\n            \n            \n            {\n                StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), \"&\");\n                while (tokenizer.hasMoreTokens()) {\n                    String token = tokenizer.nextToken();\n                    \n                    if (token.startsWith(\"id=\")) \n                    {\n                        data = token.substring(3);\n                        \n                        break;\n                        \n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254738,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.StringTokenizer;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class dQhdARE extends AbstractTestCaseServlet {\n\n    \n    private void nrUZtTn(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_FALSE) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_TRUE) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        nrUZtTn(request, response);\n        iEftrkw(request, response);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254745,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.StringTokenizer;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class oqClBli extends AbstractTestCaseServlet {\n\n    \n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        if (IO.staticTrue) {\n            data = \"\";\n            \n            \n            {\n                StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), \"&\");\n                while (tokenizer.hasMoreTokens()) {\n                    String token = tokenizer.nextToken();\n                    \n                    if (token.startsWith(\"id=\")) \n                    {\n                        data = token.substring(3);\n                        \n                        break;\n                        \n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254746,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.StringTokenizer;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class nMCFNHI extends AbstractTestCaseServlet {\n\n    \n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        if (IO.staticReturnsTrue()) {\n            data = \"\";\n            \n            \n            {\n                StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), \"&\");\n                while (tokenizer.hasMoreTokens()) {\n                    String token = tokenizer.nextToken();\n                    \n                    if (token.startsWith(\"id=\")) \n                    {\n                        data = token.substring(3);\n                        \n                        break;\n                        \n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254748,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.StringTokenizer;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class EVUDHDa extends AbstractTestCaseServlet {\n\n    \n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        if (IO.staticReturnsTrueOrFalse()) {\n            data = \"\";\n            \n            \n            {\n                StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), \"&\");\n                while (tokenizer.hasMoreTokens()) {\n                    String token = tokenizer.nextToken();\n                    \n                    if (token.startsWith(\"id=\")) \n                    {\n                        data = token.substring(3);\n                        \n                        break;\n                        \n                    }\n                }\n            }\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254750,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.StringTokenizer;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class xCOkhJg extends AbstractTestCaseServlet {\n\n    \n    private void nrUZtTn(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data = null;\n        switch(5) {\n            case 6:\n                \n                data = null;\n                break;\n            default:\n                \n                data = \"foo\";\n                break;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data = null;\n        switch(6) {\n            case 6:\n                \n                data = \"foo\";\n                break;\n            default:\n                \n                data = null;\n                break;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        nrUZtTn(request, response);\n        iEftrkw(request, response);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254757,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.StringTokenizer;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class vbJYpbd extends AbstractTestCaseServlet {\n\n    \n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        while (true) {\n            data = \"\";\n            \n            \n            {\n                StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), \"&\");\n                while (tokenizer.hasMoreTokens()) {\n                    String token = tokenizer.nextToken();\n                    \n                    if (token.startsWith(\"id=\")) \n                    {\n                        data = token.substring(3);\n                        \n                        break;\n                        \n                    }\n                }\n            }\n            break;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254758,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.StringTokenizer;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class igCglog extends AbstractTestCaseServlet {\n\n    \n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String dataCopy;\n        {\n            String data;\n            data = \"\";\n            \n            \n            {\n                StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), \"&\");\n                while (tokenizer.hasMoreTokens()) {\n                    String token = tokenizer.nextToken();\n                    \n                    if (token.startsWith(\"id=\")) \n                    {\n                        data = token.substring(3);\n                        \n                        break;\n                        \n                    }\n                }\n            }\n            dataCopy = data;\n        }\n        {\n            String data = dataCopy;\n            Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n            environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n            environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n            DirContext directoryContext = null;\n            try {\n                directoryContext = new InitialDirContext(environmentHashTable);\n                \n                String search = \"(cn=\" + data + \")\";\n                NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n                while (answer.hasMore()) {\n                    SearchResult searchResult = answer.next();\n                    Attributes attributes = searchResult.getAttributes();\n                    NamingEnumeration<?> allAttributes = attributes.getAll();\n                    while (allAttributes.hasMore()) {\n                        Attribute attribute = (Attribute) allAttributes.next();\n                        NamingEnumeration<?> allValues = attribute.getAll();\n                        while (allValues.hasMore()) {\n                            IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                        }\n                    }\n                }\n            } catch (NamingException exceptNaming) {\n                IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n            } finally {\n                if (directoryContext != null) {\n                    try {\n                        directoryContext.close();\n                    } catch (NamingException exceptNaming) {\n                        IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                    }\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254766,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.StringTokenizer;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class hmKtSDP extends AbstractTestCaseServlet {\n\n    private String wHnwAlc(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        return data;\n    }\n\n    \n    private void EXrOlJC(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data = wHnwAlc(request, response);\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        EXrOlJC(request, response);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254771,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.StringTokenizer;\n\npublic class WeDRWOM extends AbstractTestCaseServlet {\n\n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), \"&\");\n            while (tokenizer.hasMoreTokens()) {\n                String token = tokenizer.nextToken();\n                \n                if (token.startsWith(\"id=\")) \n                {\n                    data = token.substring(3);\n                    \n                    break;\n                    \n                }\n            }\n        }\n        (new GidfZuR()).RYNMBky(data, request, response);\n    }\n}\n\npublic class SyKJTiP {\n\n    public void RYNMBky(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        (new TrsKEUo()).RYNMBky(data, request, response);\n    }\n}\n\npublic class GidfZuR {\n\n    public void RYNMBky(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        (new SyKJTiP()).RYNMBky(data, request, response);\n    }\n}\n\npublic class TrsKEUo {\n\n    public void RYNMBky(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254778,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class FNGSKER extends AbstractTestCaseServlet {\n\n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), \"&\");\n            while (tokenizer.hasMoreTokens()) {\n                String token = tokenizer.nextToken();\n                \n                if (token.startsWith(\"id=\")) \n                {\n                    data = token.substring(3);\n                    \n                    break;\n                    \n                }\n            }\n        }\n        (new VAikdRD()).RYNMBky(data, request, response);\n    }\n}\n\npublic class VAikdRD {\n\n    public void RYNMBky(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        (new cxLIGqZ()).RYNMBky(data, request, response);\n    }\n}\n\npublic class EIkFPOa {\n\n    public void RYNMBky(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        (new GymyOSq()).RYNMBky(data, request, response);\n    }\n}\n\npublic class cxLIGqZ {\n\n    public void RYNMBky(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        (new EIkFPOa()).RYNMBky(data, request, response);\n    }\n}\n\npublic class GymyOSq {\n\n    public void RYNMBky(String data, HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254780,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.StringTokenizer;\n\npublic class BLBgaMp extends AbstractTestCaseServlet {\n\n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), \"&\");\n            while (tokenizer.hasMoreTokens()) {\n                String token = tokenizer.nextToken();\n                \n                if (token.startsWith(\"id=\")) \n                {\n                    data = token.substring(3);\n                    \n                    break;\n                    \n                }\n            }\n        }\n        String[] dataArray = new String[5];\n        dataArray[2] = data;\n        (new UduelBy()).RYNMBky(dataArray, request, response);\n    }\n}\n\npublic class UduelBy {\n\n    public void RYNMBky(String[] dataArray, HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data = dataArray[2];\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254784,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.util.LinkedList;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class gTNyiyj extends AbstractTestCaseServlet {\n\n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), \"&\");\n            while (tokenizer.hasMoreTokens()) {\n                String token = tokenizer.nextToken();\n                \n                if (token.startsWith(\"id=\")) \n                {\n                    data = token.substring(3);\n                    \n                    break;\n                    \n                }\n            }\n        }\n        LinkedList<String> dataLinkedList = new LinkedList<String>();\n        dataLinkedList.add(0, data);\n        dataLinkedList.add(1, data);\n        dataLinkedList.add(2, data);\n        (new CcehPRl()).RYNMBky(dataLinkedList, request, response);\n    }\n}\n\npublic class CcehPRl {\n\n    public void RYNMBky(LinkedList<String> dataLinkedList, HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data = dataLinkedList.remove(2);\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254794,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.util.HashMap;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class QXSfOMN extends AbstractTestCaseServlet {\n\n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), \"&\");\n            while (tokenizer.hasMoreTokens()) {\n                String token = tokenizer.nextToken();\n                \n                if (token.startsWith(\"id=\")) \n                {\n                    data = token.substring(3);\n                    \n                    break;\n                    \n                }\n            }\n        }\n        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();\n        dataHashMap.put(0, data);\n        dataHashMap.put(1, data);\n        dataHashMap.put(2, data);\n        (new DnWbICh()).RYNMBky(dataHashMap, request, response);\n    }\n}\n\npublic class DnWbICh {\n\n    public void RYNMBky(HashMap<Integer, String> dataHashMap, HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data = dataHashMap.get(2);\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254796,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.ByteArrayInputStream;\nimport java.io.ObjectInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class OYcBxDN extends AbstractTestCaseServlet {\n\n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), \"&\");\n            while (tokenizer.hasMoreTokens()) {\n                String token = tokenizer.nextToken();\n                \n                if (token.startsWith(\"id=\")) \n                {\n                    data = token.substring(3);\n                    \n                    break;\n                    \n                }\n            }\n        }\n        \n        ByteArrayOutputStream streamByteArrayOutput = null;\n        ObjectOutput outputObject = null;\n        try {\n            streamByteArrayOutput = new ByteArrayOutputStream();\n            outputObject = new ObjectOutputStream(streamByteArrayOutput);\n            outputObject.writeObject(data);\n            byte[] dataSerialized = streamByteArrayOutput.toByteArray();\n            (new LXmTaAb()).RYNMBky(dataSerialized, request, response);\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"IQdccST\", exceptIO);\n        } finally {\n            \n            try {\n                if (outputObject != null) {\n                    outputObject.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"LgADWEx\", exceptIO);\n            }\n            try {\n                if (streamByteArrayOutput != null) {\n                    streamByteArrayOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"vFutZps\", exceptIO);\n            }\n        }\n    }\n}\n\npublic class LXmTaAb {\n\n    public void RYNMBky(byte[] dataSerialized, HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        \n        ByteArrayInputStream streamByteArrayInput = null;\n        ObjectInputStream streamObjectInput = null;\n        try {\n            streamByteArrayInput = new ByteArrayInputStream(dataSerialized);\n            streamObjectInput = new ObjectInputStream(streamByteArrayInput);\n            String data = (String) streamObjectInput.readObject();\n            Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n            environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n            environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n            DirContext directoryContext = null;\n            try {\n                directoryContext = new InitialDirContext(environmentHashTable);\n                \n                String search = \"(cn=\" + data + \")\";\n                NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n                while (answer.hasMore()) {\n                    SearchResult searchResult = answer.next();\n                    Attributes attributes = searchResult.getAttributes();\n                    NamingEnumeration<?> allAttributes = attributes.getAll();\n                    while (allAttributes.hasMore()) {\n                        Attribute attribute = (Attribute) allAttributes.next();\n                        NamingEnumeration<?> allValues = attribute.getAll();\n                        while (allValues.hasMore()) {\n                            IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                        }\n                    }\n                }\n            } catch (NamingException exceptNaming) {\n                IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n            } finally {\n                if (directoryContext != null) {\n                    try {\n                        directoryContext.close();\n                    } catch (NamingException exceptNaming) {\n                        IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                    }\n                }\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VcFIKxo\", exceptIO);\n        } catch (ClassNotFoundException exceptClassNotFound) {\n            IO.logger.log(Level.WARNING, \"XOCCPfT\", exceptClassNotFound);\n        } finally {\n            \n            try {\n                if (streamObjectInput != null) {\n                    streamObjectInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"kpDMUXH\", exceptIO);\n            }\n            try {\n                if (streamByteArrayInput != null) {\n                    streamByteArrayInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"oiWyzFb\", exceptIO);\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254798,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class AWhCElP extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            ServerSocket listener = null;\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            \n            try {\n                listener = new ServerSocket(39543);\n                socket = listener.accept();\n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n                try {\n                    if (listener != null) {\n                        listener.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                }\n            }\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254800,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class PtKXAVp extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (true) {\n            data = \"\";\n            \n            \n            {\n                ServerSocket listener = null;\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                \n                try {\n                    listener = new ServerSocket(39543);\n                    socket = listener.accept();\n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                    try {\n                        if (listener != null) {\n                            listener.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254802,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class MzdiiUx extends AbstractTestCase {\n\n    \n    private static final boolean PRIVATE_STATIC_FINAL_TRUE = true;\n\n    private static final boolean PRIVATE_STATIC_FINAL_FALSE = false;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FALSE) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254807,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class tHjMisP extends AbstractTestCase {\n\n    \n    private static final int PRIVATE_STATIC_FINAL_FIVE = 5;\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            data = \"\";\n            \n            \n            {\n                ServerSocket listener = null;\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                \n                try {\n                    listener = new ServerSocket(39543);\n                    socket = listener.accept();\n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                    try {\n                        if (listener != null) {\n                            listener.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254810,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class tsvXtmB extends AbstractTestCase {\n\n    \n    private int privateFive = 5;\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (privateFive == 5) {\n            data = \"\";\n            \n            \n            {\n                ServerSocket listener = null;\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                \n                try {\n                    listener = new ServerSocket(39543);\n                    socket = listener.accept();\n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                    try {\n                        if (listener != null) {\n                            listener.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254812,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class AfXtbGd extends AbstractTestCase {\n\n    \n    private boolean privateReturnsTrue() {\n        return true;\n    }\n\n    private boolean privateReturnsFalse() {\n        return false;\n    }\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (privateReturnsFalse()) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (privateReturnsTrue()) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254815,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class qJzMcwS extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_FALSE) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_TRUE) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254817,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class PuVVWem extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticTrue) {\n            data = \"\";\n            \n            \n            {\n                ServerSocket listener = null;\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                \n                try {\n                    listener = new ServerSocket(39543);\n                    socket = listener.accept();\n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                    try {\n                        if (listener != null) {\n                            listener.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254818,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class eUQauPp extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrue()) {\n            data = \"\";\n            \n            \n            {\n                ServerSocket listener = null;\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                \n                try {\n                    listener = new ServerSocket(39543);\n                    socket = listener.accept();\n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                    try {\n                        if (listener != null) {\n                            listener.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254820,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class RGNBoqt extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticFive == 5) {\n            data = \"\";\n            \n            \n            {\n                ServerSocket listener = null;\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                \n                try {\n                    listener = new ServerSocket(39543);\n                    socket = listener.accept();\n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                    try {\n                        if (listener != null) {\n                            listener.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254826,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class qbJucww extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data = null;\n        switch(6) {\n            case 6:\n                data = \"\";\n                \n                \n                {\n                    ServerSocket listener = null;\n                    Socket socket = null;\n                    BufferedReader readerBuffered = null;\n                    InputStreamReader readerInputStream = null;\n                    \n                    try {\n                        listener = new ServerSocket(39543);\n                        socket = listener.accept();\n                        \n                        readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                        readerBuffered = new BufferedReader(readerInputStream);\n                        \n                        data = readerBuffered.readLine();\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                    } finally {\n                        \n                        try {\n                            if (readerBuffered != null) {\n                                readerBuffered.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                        }\n                        try {\n                            if (readerInputStream != null) {\n                                readerInputStream.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                        }\n                        \n                        try {\n                            if (socket != null) {\n                                socket.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                        }\n                        try {\n                            if (listener != null) {\n                                listener.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                data = null;\n                break;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254828,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class OVfklmJ extends AbstractTestCase {\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        while (true) {\n            \n            data = \"foo\";\n            break;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254831,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\n\npublic class RcZsnwa extends AbstractTestCase {\n\n    \n    public static boolean qRMEpGJ = false;\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        qRMEpGJ = true;\n        data = (new UfROkUQ()).ImBBndW();\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    public static boolean elORjvF = false;\n\n    public static boolean CvGpmkk = false;\n}\n\npublic class UfROkUQ {\n\n    public String ImBBndW() throws Throwable {\n        String data;\n        if (RcZsnwa.qRMEpGJ) {\n            data = \"\";\n            \n            \n            {\n                ServerSocket listener = null;\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                \n                try {\n                    listener = new ServerSocket(39543);\n                    socket = listener.accept();\n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                    try {\n                        if (listener != null) {\n                            listener.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        return data;\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254836,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class PtBkEfi extends AbstractTestCase {\n\n    private void RYNMBky(String data) throws Throwable {\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            ServerSocket listener = null;\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            \n            try {\n                listener = new ServerSocket(39543);\n                socket = listener.accept();\n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n                try {\n                    if (listener != null) {\n                        listener.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                }\n            }\n        }\n        RYNMBky(data);\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254840,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class kalcnBa extends AbstractTestCase {\n\n    private String wHnwAlc() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        return data;\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data = wHnwAlc();\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254843,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class NCIYaks extends AbstractTestCase {\n\n    private String EuzMspW;\n\n    private String vZNWMPE;\n\n    private void RYNMBky() throws Throwable {\n        String data = EuzMspW;\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            ServerSocket listener = null;\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            \n            try {\n                listener = new ServerSocket(39543);\n                socket = listener.accept();\n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n                try {\n                    if (listener != null) {\n                        listener.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                }\n            }\n        }\n        EuzMspW = data;\n        RYNMBky();\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254844,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class pLSEDUY extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            ServerSocket listener = null;\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            \n            try {\n                listener = new ServerSocket(39543);\n                socket = listener.accept();\n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n                try {\n                    if (listener != null) {\n                        listener.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                }\n            }\n        }\n        (new wrZkZmH()).RYNMBky(data);\n    }\n}\n\npublic class wrZkZmH {\n\n    public void RYNMBky(String data) throws Throwable {\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254846,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class USpDUQy extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            ServerSocket listener = null;\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            \n            try {\n                listener = new ServerSocket(39543);\n                socket = listener.accept();\n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n                try {\n                    if (listener != null) {\n                        listener.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                }\n            }\n        }\n        (new ZWQzqpX()).RYNMBky(data);\n    }\n}\n\npublic class nnjsMyX {\n\n    public void RYNMBky(String data) throws Throwable {\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n\npublic class ZWQzqpX {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new nnjsMyX()).RYNMBky(data);\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254848,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class BKlizoH extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            ServerSocket listener = null;\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            \n            try {\n                listener = new ServerSocket(39543);\n                socket = listener.accept();\n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n                try {\n                    if (listener != null) {\n                        listener.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                }\n            }\n        }\n        (new sXXhmDi()).RYNMBky(data);\n    }\n}\n\npublic class REMaoCb {\n\n    public void RYNMBky(String data) throws Throwable {\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n\npublic class sXXhmDi {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new laHrNzh()).RYNMBky(data);\n    }\n}\n\npublic class laHrNzh {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new REMaoCb()).RYNMBky(data);\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254850,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\n\npublic class uKTyLRV extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data = (new krwnNap()).ImBBndW();\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n\npublic class krwnNap {\n\n    public String ImBBndW() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            ServerSocket listener = null;\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            \n            try {\n                listener = new ServerSocket(39543);\n                socket = listener.accept();\n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n                try {\n                    if (listener != null) {\n                        listener.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                }\n            }\n        }\n        return data;\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254854,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.util.LinkedList;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\n\npublic class riaOAEP extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            ServerSocket listener = null;\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            \n            try {\n                listener = new ServerSocket(39543);\n                socket = listener.accept();\n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n                try {\n                    if (listener != null) {\n                        listener.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                }\n            }\n        }\n        LinkedList<String> dataLinkedList = new LinkedList<String>();\n        dataLinkedList.add(0, data);\n        dataLinkedList.add(1, data);\n        dataLinkedList.add(2, data);\n        (new LNUJhCn()).RYNMBky(dataLinkedList);\n    }\n}\n\npublic class LNUJhCn {\n\n    public void RYNMBky(LinkedList<String> dataLinkedList) throws Throwable {\n        String data = dataLinkedList.remove(2);\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254866,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.ByteArrayInputStream;\nimport java.io.ObjectInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class QdoDCGQ extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            ServerSocket listener = null;\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            \n            try {\n                listener = new ServerSocket(39543);\n                socket = listener.accept();\n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n                try {\n                    if (listener != null) {\n                        listener.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                }\n            }\n        }\n        \n        ByteArrayOutputStream streamByteArrayOutput = null;\n        ObjectOutput outputObject = null;\n        try {\n            streamByteArrayOutput = new ByteArrayOutputStream();\n            outputObject = new ObjectOutputStream(streamByteArrayOutput);\n            outputObject.writeObject(data);\n            byte[] dataSerialized = streamByteArrayOutput.toByteArray();\n            (new NPQRSgJ()).RYNMBky(dataSerialized);\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"IQdccST\", exceptIO);\n        } finally {\n            \n            try {\n                if (outputObject != null) {\n                    outputObject.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"LgADWEx\", exceptIO);\n            }\n            try {\n                if (streamByteArrayOutput != null) {\n                    streamByteArrayOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"vFutZps\", exceptIO);\n            }\n        }\n    }\n}\n\npublic class NPQRSgJ {\n\n    public void RYNMBky(byte[] dataSerialized) throws Throwable {\n        \n        ByteArrayInputStream streamByteArrayInput = null;\n        ObjectInputStream streamObjectInput = null;\n        try {\n            streamByteArrayInput = new ByteArrayInputStream(dataSerialized);\n            streamObjectInput = new ObjectInputStream(streamByteArrayInput);\n            String data = (String) streamObjectInput.readObject();\n            Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n            environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n            environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n            DirContext directoryContext = null;\n            try {\n                directoryContext = new InitialDirContext(environmentHashTable);\n                \n                String search = \"(cn=\" + data + \")\";\n                NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n                while (answer.hasMore()) {\n                    SearchResult searchResult = answer.next();\n                    Attributes attributes = searchResult.getAttributes();\n                    NamingEnumeration<?> allAttributes = attributes.getAll();\n                    while (allAttributes.hasMore()) {\n                        Attribute attribute = (Attribute) allAttributes.next();\n                        NamingEnumeration<?> allValues = attribute.getAll();\n                        while (allValues.hasMore()) {\n                            IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                        }\n                    }\n                }\n            } catch (NamingException exceptNaming) {\n                IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n            } finally {\n                if (directoryContext != null) {\n                    try {\n                        directoryContext.close();\n                    } catch (NamingException exceptNaming) {\n                        IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                    }\n                }\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VcFIKxo\", exceptIO);\n        } catch (ClassNotFoundException exceptClassNotFound) {\n            IO.logger.log(Level.WARNING, \"XOCCPfT\", exceptClassNotFound);\n        } finally {\n            \n            try {\n                if (streamObjectInput != null) {\n                    streamObjectInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"kpDMUXH\", exceptIO);\n            }\n            try {\n                if (streamByteArrayInput != null) {\n                    streamByteArrayInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"oiWyzFb\", exceptIO);\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254870,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class LNwgYPd extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        (new UewKcay()).fDqjRYE(data);\n    }\n}\n\npublic class XTveYsY {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n\npublic class UewKcay {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        (new XTveYsY()).fDqjRYE(data);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254057,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class SUntWVd extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        String[] dataArray = new String[5];\n        dataArray[2] = data;\n        (new CdCngRZ()).fDqjRYE(dataArray);\n    }\n}\n\npublic class CdCngRZ {\n\n    \n    public void fDqjRYE(String[] dataArray) throws Throwable {\n        String data = dataArray[2];\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254065,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class yyGdhkr extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrue()) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254100,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class dJDrbQT extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (IO.staticFive != 5) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (IO.staticFive == 5) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254107,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class gHFXFml extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String dataCopy;\n        {\n            String data;\n            \n            data = \"foo\";\n            dataCopy = data;\n        }\n        {\n            String data = dataCopy;\n            Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n            environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n            environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n            DirContext directoryContext = null;\n            try {\n                directoryContext = new InitialDirContext(environmentHashTable);\n                \n                String search = \"(cn=\" + data + \")\";\n                NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n                while (answer.hasMore()) {\n                    SearchResult searchResult = answer.next();\n                    Attributes attributes = searchResult.getAttributes();\n                    NamingEnumeration<?> allAttributes = attributes.getAll();\n                    while (allAttributes.hasMore()) {\n                        Attribute attribute = (Attribute) allAttributes.next();\n                        NamingEnumeration<?> allValues = attribute.getAll();\n                        while (allValues.hasMore()) {\n                            IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                        }\n                    }\n                }\n            } catch (NamingException exceptNaming) {\n                IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n            } finally {\n                if (directoryContext != null) {\n                    try {\n                        directoryContext.close();\n                    } catch (NamingException exceptNaming) {\n                        IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                    }\n                }\n            }\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254119,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class sIVGXuG extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n\n    private void fDqjRYE(String data) throws Throwable {\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        fDqjRYE(data);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254121,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class CHsNHQz extends AbstractTestCase {\n\n    \n    private boolean privateReturnsTrue() {\n        return true;\n    }\n\n    private boolean privateReturnsFalse() {\n        return false;\n    }\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (privateReturnsFalse()) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (privateReturnsTrue()) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254167,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class WaUIWeR extends AbstractTestCase {\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        while (true) {\n            \n            data = \"foo\";\n            break;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254183,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class NuogoxL extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                data = properties.getProperty(\"data\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        for (int i = 0; i < 1; i++) {\n            Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n            environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n            environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n            DirContext directoryContext = null;\n            try {\n                directoryContext = new InitialDirContext(environmentHashTable);\n                \n                String search = \"(cn=\" + data + \")\";\n                NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n                while (answer.hasMore()) {\n                    SearchResult searchResult = answer.next();\n                    Attributes attributes = searchResult.getAttributes();\n                    NamingEnumeration<?> allAttributes = attributes.getAll();\n                    while (allAttributes.hasMore()) {\n                        Attribute attribute = (Attribute) allAttributes.next();\n                        NamingEnumeration<?> allValues = attribute.getAll();\n                        while (allValues.hasMore()) {\n                            IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                        }\n                    }\n                }\n            } catch (NamingException exceptNaming) {\n                IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n            } finally {\n                if (directoryContext != null) {\n                    try {\n                        directoryContext.close();\n                    } catch (NamingException exceptNaming) {\n                        IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                    }\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254184,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class Edsnpuc extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_FIVE != 5) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254249,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class AoFGmYU extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getProperty(\"user.home\");\n        String[] dataArray = new String[5];\n        dataArray[2] = data;\n        (new ffVcJVs()).RYNMBky(dataArray);\n    }\n}\n\npublic class ffVcJVs {\n\n    public void RYNMBky(String[] dataArray) throws Throwable {\n        String data = dataArray[2];\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254280,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class aLnUVio extends AbstractTestCase {\n\n    public static String data;\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        \n        data = \"foo\";\n        (new rqHDhkk()).fDqjRYE();\n    }\n}\n\npublic class rqHDhkk {\n\n    \n    public void fDqjRYE() throws Throwable {\n        String data = aLnUVio.data;\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254285,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class IZgwraC extends AbstractTestCase {\n\n    \n    private boolean privateTrue = true;\n\n    private boolean privateFalse = false;\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (privateTrue) {\n            data = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254304,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class ZoYDHOA extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            data = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254320,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class eOLiFGf extends AbstractTestCase {\n\n    \n    private static final int PRIVATE_STATIC_FINAL_FIVE = 5;\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            data = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254378,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class XIVhbmh extends AbstractTestCase {\n\n    private String EuzMspW;\n\n    private String vZNWMPE;\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n\n    private void fDqjRYE() throws Throwable {\n        String data = vZNWMPE;\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        vZNWMPE = data;\n        fDqjRYE();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254413,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class MsvehVd extends AbstractTestCase {\n\n    static class Container {\n\n        public String containerOne;\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        Container dataContainer = new Container();\n        dataContainer.containerOne = data;\n        (new HhIUlWZ()).fDqjRYE(dataContainer);\n    }\n}\n\npublic class HhIUlWZ {\n\n    \n    public void fDqjRYE(MsvehVd.Container dataContainer) throws Throwable {\n        String data = dataContainer.containerOne;\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254427,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class YUgkSpg extends AbstractTestCase {\n\n    \n    private boolean privateTrue = true;\n\n    private boolean privateFalse = false;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (privateFalse) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (privateTrue) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254449,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class CLSfked extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticFive == 5) {\n            data = \"\";\n            \n            {\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                \n                try {\n                    readerInputStream = new InputStreamReader(System.in, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n            \n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254466,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class vNgOXGg extends AbstractTestCase {\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        while (true) {\n            \n            data = \"foo\";\n            break;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254471,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class QgRHVEk extends AbstractTestCase {\n\n    \n    public static boolean qRMEpGJ = false;\n\n    \n    public static boolean elORjvF = false;\n\n    public static boolean CvGpmkk = false;\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        elORjvF = false;\n        data = (new OrytYZo()).TkRMSAh();\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        CvGpmkk = true;\n        data = (new OrytYZo()).szAnMjq();\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n\npublic class OrytYZo {\n\n    \n    public String TkRMSAh() throws Throwable {\n        String data;\n        if (QgRHVEk.elORjvF) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        return data;\n    }\n\n    \n    public String szAnMjq() throws Throwable {\n        String data;\n        if (QgRHVEk.CvGpmkk) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        return data;\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254477,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class WzUOOdk extends AbstractTestCase {\n\n    \n    private static final int PRIVATE_STATIC_FINAL_FIVE = 5;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE != 5) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254523,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class zIRgjDR extends AbstractTestCase {\n\n    \n    private int privateFive = 5;\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (privateFive == 5) {\n            data = \"\";\n            \n            \n            {\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n                try {\n                    \n                    connection = IO.getDBConnection();\n                    \n                    preparedStatement = connection.prepareStatement(\"select name from users where id=0\");\n                    resultSet = preparedStatement.executeQuery();\n                    \n                    data = resultSet.getString(1);\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"FMVCxkV\", exceptSql);\n                } finally {\n                    \n                    try {\n                        if (resultSet != null) {\n                            resultSet.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                    }\n                    try {\n                        if (preparedStatement != null) {\n                            preparedStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (connection != null) {\n                            connection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254524,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class YOqObno extends AbstractTestCase {\n\n    \n    public static boolean qRMEpGJ = false;\n\n    \n    public static boolean elORjvF = false;\n\n    public static boolean CvGpmkk = false;\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        elORjvF = false;\n        data = (new uDMLyku()).TkRMSAh();\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        CvGpmkk = true;\n        data = (new uDMLyku()).szAnMjq();\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n\npublic class uDMLyku {\n\n    \n    public String TkRMSAh() throws Throwable {\n        String data;\n        if (YOqObno.elORjvF) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        return data;\n    }\n\n    \n    public String szAnMjq() throws Throwable {\n        String data;\n        if (YOqObno.CvGpmkk) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        return data;\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254549,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class csuGDGU extends AbstractTestCaseServlet {\n\n    \n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Cookie[] cookieSources = request.getCookies();\n            if (cookieSources != null) {\n                \n                data = cookieSources[0].getValue();\n            }\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254584,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class SHraGlm extends AbstractTestCaseServlet {\n\n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Cookie[] cookieSources = request.getCookies();\n            if (cookieSources != null) {\n                \n                data = cookieSources[0].getValue();\n            }\n        }\n        String[] dataArray = new String[5];\n        dataArray[2] = data;\n        (new oTrJECN()).RYNMBky(dataArray, request, response);\n    }\n}\n\npublic class oTrJECN {\n\n    public void RYNMBky(String[] dataArray, HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data = dataArray[2];\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254640,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class YQahADc extends AbstractTestCaseServlet {\n\n    public static String data;\n\n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        \n        data = request.getParameter(\"name\");\n        (new HXQhjyd()).RYNMBky(request, response);\n    }\n}\n\npublic class HXQhjyd {\n\n    public void RYNMBky(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data = YQahADc.data;\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254716,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectOutput;\nimport java.io.ObjectOutputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.servlet.http.*;\n\npublic class DeTyAZg extends AbstractTestCaseServlet {\n\n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        \n        data = request.getParameter(\"name\");\n        \n        ByteArrayOutputStream streamByteArrayOutput = null;\n        ObjectOutput outputObject = null;\n        try {\n            streamByteArrayOutput = new ByteArrayOutputStream();\n            outputObject = new ObjectOutputStream(streamByteArrayOutput);\n            outputObject.writeObject(data);\n            byte[] dataSerialized = streamByteArrayOutput.toByteArray();\n            (new NyMYeem()).RYNMBky(dataSerialized, request, response);\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"IQdccST\", exceptIO);\n        } finally {\n            \n            try {\n                if (outputObject != null) {\n                    outputObject.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"LgADWEx\", exceptIO);\n            }\n            try {\n                if (streamByteArrayOutput != null) {\n                    streamByteArrayOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"vFutZps\", exceptIO);\n            }\n        }\n    }\n}\n\npublic class NyMYeem {\n\n    public void RYNMBky(byte[] dataSerialized, HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        \n        ByteArrayInputStream streamByteArrayInput = null;\n        ObjectInputStream streamObjectInput = null;\n        try {\n            streamByteArrayInput = new ByteArrayInputStream(dataSerialized);\n            streamObjectInput = new ObjectInputStream(streamByteArrayInput);\n            String data = (String) streamObjectInput.readObject();\n            Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n            environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n            environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n            DirContext directoryContext = null;\n            try {\n                directoryContext = new InitialDirContext(environmentHashTable);\n                \n                String search = \"(cn=\" + data + \")\";\n                NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n                while (answer.hasMore()) {\n                    SearchResult searchResult = answer.next();\n                    Attributes attributes = searchResult.getAttributes();\n                    NamingEnumeration<?> allAttributes = attributes.getAll();\n                    while (allAttributes.hasMore()) {\n                        Attribute attribute = (Attribute) allAttributes.next();\n                        NamingEnumeration<?> allValues = attribute.getAll();\n                        while (allValues.hasMore()) {\n                            IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                        }\n                    }\n                }\n            } catch (NamingException exceptNaming) {\n                IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n            } finally {\n                if (directoryContext != null) {\n                    try {\n                        directoryContext.close();\n                    } catch (NamingException exceptNaming) {\n                        IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                    }\n                }\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VcFIKxo\", exceptIO);\n        } catch (ClassNotFoundException exceptClassNotFound) {\n            IO.logger.log(Level.WARNING, \"XOCCPfT\", exceptClassNotFound);\n        } finally {\n            \n            try {\n                if (streamObjectInput != null) {\n                    streamObjectInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"kpDMUXH\", exceptIO);\n            }\n            try {\n                if (streamByteArrayInput != null) {\n                    streamByteArrayInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"oiWyzFb\", exceptIO);\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254726,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.StringTokenizer;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class PAUAbGa extends AbstractTestCaseServlet {\n\n    \n    private boolean privateReturnsTrue() {\n        return true;\n    }\n\n    private boolean privateReturnsFalse() {\n        return false;\n    }\n\n    \n    private void nrUZtTn(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        if (privateReturnsFalse()) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        if (privateReturnsTrue()) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        nrUZtTn(request, response);\n        iEftrkw(request, response);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254743,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.StringTokenizer;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class xCOkhJg extends AbstractTestCaseServlet {\n\n    \n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data = null;\n        switch(6) {\n            case 6:\n                data = \"\";\n                \n                \n                {\n                    StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), \"&\");\n                    while (tokenizer.hasMoreTokens()) {\n                        String token = tokenizer.nextToken();\n                        \n                        if (token.startsWith(\"id=\")) \n                        {\n                            data = token.substring(3);\n                            \n                            break;\n                            \n                        }\n                    }\n                }\n                break;\n            default:\n                \n                data = null;\n                break;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254756,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.StringTokenizer;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class azftmeb extends AbstractTestCaseServlet {\n\n    \n    private boolean dWmGbZa = false;\n\n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        dWmGbZa = true;\n        data = LqPHiJL(request, response);\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    private String LqPHiJL(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        if (dWmGbZa) {\n            data = \"\";\n            \n            \n            {\n                StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), \"&\");\n                while (tokenizer.hasMoreTokens()) {\n                    String token = tokenizer.nextToken();\n                    \n                    if (token.startsWith(\"id=\")) \n                    {\n                        data = token.substring(3);\n                        \n                        break;\n                        \n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        return data;\n    }\n\n    \n    private boolean gmaYCRK = false;\n\n    private boolean mAvKbsp = false;\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254762,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.StringTokenizer;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class ixefVmt extends AbstractTestCaseServlet {\n\n    private String EuzMspW;\n\n    private String vZNWMPE;\n\n    private void RYNMBky(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data = EuzMspW;\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            StringTokenizer tokenizer = new StringTokenizer(request.getQueryString(), \"&\");\n            while (tokenizer.hasMoreTokens()) {\n                String token = tokenizer.nextToken();\n                \n                if (token.startsWith(\"id=\")) \n                {\n                    data = token.substring(3);\n                    \n                    break;\n                    \n                }\n            }\n        }\n        EuzMspW = data;\n        RYNMBky(request, response);\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254772,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.util.LinkedList;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class gTNyiyj extends AbstractTestCaseServlet {\n\n    public void JttWLtS(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        EXrOlJC(request, response);\n    }\n\n    \n    private void EXrOlJC(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        LinkedList<String> dataLinkedList = new LinkedList<String>();\n        dataLinkedList.add(0, data);\n        dataLinkedList.add(1, data);\n        dataLinkedList.add(2, data);\n        (new CcehPRl()).fDqjRYE(dataLinkedList, request, response);\n    }\n}\n\npublic class CcehPRl {\n\n    \n    public void fDqjRYE(LinkedList<String> dataLinkedList, HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        String data = dataLinkedList.remove(2);\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254795,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.ServerSocket;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class kNEWtDQ extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            ServerSocket listener = null;\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            \n            try {\n                listener = new ServerSocket(39543);\n                socket = listener.accept();\n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n                try {\n                    if (listener != null) {\n                        listener.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"vHszELc\", exceptIO);\n                }\n            }\n        }\n        for (int i = 0; i < 1; i++) {\n            Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n            environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n            environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n            DirContext directoryContext = null;\n            try {\n                directoryContext = new InitialDirContext(environmentHashTable);\n                \n                String search = \"(cn=\" + data + \")\";\n                NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n                while (answer.hasMore()) {\n                    SearchResult searchResult = answer.next();\n                    Attributes attributes = searchResult.getAttributes();\n                    NamingEnumeration<?> allAttributes = attributes.getAll();\n                    while (allAttributes.hasMore()) {\n                        Attribute attribute = (Attribute) allAttributes.next();\n                        NamingEnumeration<?> allValues = attribute.getAll();\n                        while (allValues.hasMore()) {\n                            IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                        }\n                    }\n                }\n            } catch (NamingException exceptNaming) {\n                IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n            } finally {\n                if (directoryContext != null) {\n                    try {\n                        directoryContext.close();\n                    } catch (NamingException exceptNaming) {\n                        IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                    }\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254832,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class BKlizoH extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        (new sXXhmDi()).fDqjRYE(data);\n    }\n}\n\npublic class REMaoCb {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n\npublic class sXXhmDi {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        (new laHrNzh()).fDqjRYE(data);\n    }\n}\n\npublic class laHrNzh {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        (new REMaoCb()).fDqjRYE(data);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254851,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class HbHyTtF extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254009,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class MGthGdv extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (false) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (true) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254011,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class gbtRlYZ extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (5 != 5) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (5 == 5) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254013,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class MVZaquo extends AbstractTestCase {\n\n    \n    private boolean privateTrue = true;\n\n    private boolean privateFalse = false;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (privateFalse) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (privateTrue) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254017,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class WXyvJXC extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_FIVE != 5) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254033,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class atLdxkl extends AbstractTestCase {\n\n    \n    public static boolean qRMEpGJ = false;\n\n    \n    public static boolean elORjvF = false;\n\n    public static boolean CvGpmkk = false;\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        elORjvF = false;\n        data = (new GGIjrIF()).TkRMSAh();\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        CvGpmkk = true;\n        data = (new GGIjrIF()).szAnMjq();\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n\npublic class GGIjrIF {\n\n    \n    public String TkRMSAh() throws Throwable {\n        String data;\n        if (atLdxkl.elORjvF) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        return data;\n    }\n\n    \n    public String szAnMjq() throws Throwable {\n        String data;\n        if (atLdxkl.CvGpmkk) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        return data;\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254045,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class tGFZlrz extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        (new XALkYLz()).fDqjRYE(data);\n    }\n}\n\npublic class XALkYLz {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        (new EjUwBVD()).fDqjRYE(data);\n    }\n}\n\npublic class EjUwBVD {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        (new XDPWTZL()).fDqjRYE(data);\n    }\n}\n\npublic class pYLpdMh {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n\npublic class XDPWTZL {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        (new pYLpdMh()).fDqjRYE(data);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254061,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class AHgwIwL extends AbstractTestCase {\n\n    static class Container {\n\n        public String containerOne;\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        Container dataContainer = new Container();\n        dataContainer.containerOne = data;\n        (new fcjuTmE()).fDqjRYE(dataContainer);\n    }\n}\n\npublic class fcjuTmE {\n\n    \n    public void fDqjRYE(AHgwIwL.Container dataContainer) throws Throwable {\n        String data = dataContainer.containerOne;\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254067,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class gVaMXFL extends AbstractTestCase {\n\n    \n    private static final int PRIVATE_STATIC_FINAL_FIVE = 5;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE != 5) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254091,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class IoDioWd extends AbstractTestCase {\n\n    \n    private boolean privateReturnsTrue() {\n        return true;\n    }\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (privateReturnsTrue()) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254094,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class zyvJwOC extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data = null;\n        switch(6) {\n            case 6:\n                data = \"\";\n                \n                {\n                    File file = new File(\"C:\\\\data.txt\");\n                    FileInputStream streamFileInput = null;\n                    InputStreamReader readerInputStream = null;\n                    BufferedReader readerBuffered = null;\n                    try {\n                        \n                        streamFileInput = new FileInputStream(file);\n                        readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                        readerBuffered = new BufferedReader(readerInputStream);\n                        \n                        \n                        data = readerBuffered.readLine();\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                    } finally {\n                        \n                        try {\n                            if (readerBuffered != null) {\n                                readerBuffered.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                        }\n                        try {\n                            if (readerInputStream != null) {\n                                readerInputStream.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                        }\n                        try {\n                            if (streamFileInput != null) {\n                                streamFileInput.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                data = null;\n                break;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254108,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class NrInXcN extends AbstractTestCase {\n\n    \n    private boolean dWmGbZa = false;\n\n    \n    private boolean gmaYCRK = false;\n\n    private boolean mAvKbsp = false;\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        gmaYCRK = false;\n        data = MZKvgmW();\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    private String MZKvgmW() throws Throwable {\n        String data = null;\n        if (gmaYCRK) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        return data;\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        mAvKbsp = true;\n        data = ymJWUuP();\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    private String ymJWUuP() throws Throwable {\n        String data = null;\n        if (mAvKbsp) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        return data;\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254115,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class byHycBr extends AbstractTestCase {\n\n    private String wHnwAlc() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        return data;\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data = wHnwAlc();\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254123,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class SlAdlGR extends AbstractTestCase {\n\n    private String EuzMspW;\n\n    private String vZNWMPE;\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n\n    private void fDqjRYE() throws Throwable {\n        String data = vZNWMPE;\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        vZNWMPE = data;\n        fDqjRYE();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254125,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class GuwJVuX extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        (new YwMJIkv()).fDqjRYE(data);\n    }\n}\n\npublic class TCFhOjb {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n\npublic class LtgJWMc {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        (new TCFhOjb()).fDqjRYE(data);\n    }\n}\n\npublic class YwMJIkv {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        (new LtgJWMc()).fDqjRYE(data);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254131,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class oOkjJlR extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        (new Dtrkqyt()).fDqjRYE(data);\n    }\n}\n\npublic class PnwinXO {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n\npublic class Dtrkqyt {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        (new rvesIEM()).fDqjRYE(data);\n    }\n}\n\npublic class XeJLYLO {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        (new PnwinXO()).fDqjRYE(data);\n    }\n}\n\npublic class rvesIEM {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        (new XeJLYLO()).fDqjRYE(data);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254133,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectOutput;\nimport java.io.ObjectOutputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\n\npublic class IhfVkyR extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        \n        ByteArrayOutputStream streamByteArrayOutput = null;\n        ObjectOutput outputObject = null;\n        try {\n            streamByteArrayOutput = new ByteArrayOutputStream();\n            outputObject = new ObjectOutputStream(streamByteArrayOutput);\n            outputObject.writeObject(data);\n            byte[] dataSerialized = streamByteArrayOutput.toByteArray();\n            (new nyJfENN()).fDqjRYE(dataSerialized);\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"IQdccST\", exceptIO);\n        } finally {\n            \n            try {\n                if (outputObject != null) {\n                    outputObject.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"LgADWEx\", exceptIO);\n            }\n            try {\n                if (streamByteArrayOutput != null) {\n                    streamByteArrayOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"vFutZps\", exceptIO);\n            }\n        }\n    }\n}\n\npublic class nyJfENN {\n\n    \n    public void fDqjRYE(byte[] dataSerialized) throws Throwable {\n        \n        ByteArrayInputStream streamByteArrayInput = null;\n        ObjectInputStream streamObjectInput = null;\n        try {\n            streamByteArrayInput = new ByteArrayInputStream(dataSerialized);\n            streamObjectInput = new ObjectInputStream(streamByteArrayInput);\n            String data = (String) streamObjectInput.readObject();\n            Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n            environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n            environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n            DirContext directoryContext = null;\n            try {\n                directoryContext = new InitialDirContext(environmentHashTable);\n                \n                String search = \"(cn=\" + data + \")\";\n                NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n                while (answer.hasMore()) {\n                    SearchResult searchResult = answer.next();\n                    Attributes attributes = searchResult.getAttributes();\n                    NamingEnumeration<?> allAttributes = attributes.getAll();\n                    while (allAttributes.hasMore()) {\n                        Attribute attribute = (Attribute) allAttributes.next();\n                        NamingEnumeration<?> allValues = attribute.getAll();\n                        while (allValues.hasMore()) {\n                            IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                        }\n                    }\n                }\n            } catch (NamingException exceptNaming) {\n                IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n            } finally {\n                if (directoryContext != null) {\n                    try {\n                        directoryContext.close();\n                    } catch (NamingException exceptNaming) {\n                        IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                    }\n                }\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VcFIKxo\", exceptIO);\n        } catch (ClassNotFoundException exceptClassNotFound) {\n            IO.logger.log(Level.WARNING, \"XOCCPfT\", exceptClassNotFound);\n        } finally {\n            \n            try {\n                if (streamObjectInput != null) {\n                    streamObjectInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"kpDMUXH\", exceptIO);\n            }\n            try {\n                if (streamByteArrayInput != null) {\n                    streamByteArrayInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"oiWyzFb\", exceptIO);\n            }\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254151,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class KOhpvLT extends AbstractTestCase {\n\n    \n    private static final int PRIVATE_STATIC_FINAL_FIVE = 5;\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            data = \"\";\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    data = properties.getProperty(\"data\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254162,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class UeuaGBV extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_TRUE) {\n            data = \"\";\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    data = properties.getProperty(\"data\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254168,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class UeuaGBV extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_FALSE) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_TRUE) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254169,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class tIHfvKQ extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (IO.staticFalse) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (IO.staticTrue) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254171,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class LFsJBZz extends AbstractTestCase {\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrueOrFalse()) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254175,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class iTUBmzq extends AbstractTestCase {\n\n    private String EuzMspW;\n\n    private String vZNWMPE;\n\n    private void RYNMBky() throws Throwable {\n        String data = EuzMspW;\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                data = properties.getProperty(\"data\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        EuzMspW = data;\n        RYNMBky();\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254196,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class EPwKVrD extends AbstractTestCase {\n\n    static class Container {\n\n        public String containerOne;\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                data = properties.getProperty(\"data\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        Container dataContainer = new Container();\n        dataContainer.containerOne = data;\n        (new AlwVlRB()).RYNMBky(dataContainer);\n    }\n}\n\npublic class AlwVlRB {\n\n    public void RYNMBky(EPwKVrD.Container dataContainer) throws Throwable {\n        String data = dataContainer.containerOne;\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254210,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.util.LinkedList;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class mpsSAzx extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                data = properties.getProperty(\"data\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        LinkedList<String> dataLinkedList = new LinkedList<String>();\n        dataLinkedList.add(0, data);\n        dataLinkedList.add(1, data);\n        dataLinkedList.add(2, data);\n        (new IebqerL()).RYNMBky(dataLinkedList);\n    }\n}\n\npublic class IebqerL {\n\n    public void RYNMBky(LinkedList<String> dataLinkedList) throws Throwable {\n        String data = dataLinkedList.remove(2);\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254218,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.util.HashMap;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class gXjERTe extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                data = properties.getProperty(\"data\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();\n        dataHashMap.put(0, data);\n        dataHashMap.put(1, data);\n        dataHashMap.put(2, data);\n        (new NhRtPmx()).RYNMBky(dataHashMap);\n    }\n}\n\npublic class NhRtPmx {\n\n    public void RYNMBky(HashMap<Integer, String> dataHashMap) throws Throwable {\n        String data = dataHashMap.get(2);\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254220,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class dbZBxFt extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254225,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class SSdSfHn extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (5 == 5) {\n            \n            \n            data = System.getProperty(\"user.home\");\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254228,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class pxwvDJb extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticTrue) {\n            \n            \n            data = System.getProperty(\"user.home\");\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254242,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class jXUhFMD extends AbstractTestCase {\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        for (int i = 0; i < 1; i++) {\n            Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n            environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n            environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n            DirContext directoryContext = null;\n            try {\n                directoryContext = new InitialDirContext(environmentHashTable);\n                \n                String search = \"(cn=\" + data + \")\";\n                NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n                while (answer.hasMore()) {\n                    SearchResult searchResult = answer.next();\n                    Attributes attributes = searchResult.getAttributes();\n                    NamingEnumeration<?> allAttributes = attributes.getAll();\n                    while (allAttributes.hasMore()) {\n                        Attribute attribute = (Attribute) allAttributes.next();\n                        NamingEnumeration<?> allValues = attribute.getAll();\n                        while (allValues.hasMore()) {\n                            IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                        }\n                    }\n                }\n            } catch (NamingException exceptNaming) {\n                IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n            } finally {\n                if (directoryContext != null) {\n                    try {\n                        directoryContext.close();\n                    } catch (NamingException exceptNaming) {\n                        IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                    }\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254257,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class vZSISLX extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n\n    private void fDqjRYE(String data) throws Throwable {\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        fDqjRYE(data);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254265,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class MtHMurI extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getProperty(\"user.home\");\n        (new hVhmZHu()).RYNMBky(data);\n    }\n}\n\npublic class hVhmZHu {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new GWKvClc()).RYNMBky(data);\n    }\n}\n\npublic class RquTmfA {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new XchRAwu()).RYNMBky(data);\n    }\n}\n\npublic class XchRAwu {\n\n    public void RYNMBky(String data) throws Throwable {\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n\npublic class GWKvClc {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new RquTmfA()).RYNMBky(data);\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254276,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class MtHMurI extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        (new hVhmZHu()).fDqjRYE(data);\n    }\n}\n\npublic class hVhmZHu {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        (new GWKvClc()).fDqjRYE(data);\n    }\n}\n\npublic class RquTmfA {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        (new XchRAwu()).fDqjRYE(data);\n    }\n}\n\npublic class XchRAwu {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n\npublic class GWKvClc {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        (new RquTmfA()).fDqjRYE(data);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254277,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectOutput;\nimport java.io.ObjectOutputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.servlet.http.*;\n\npublic class NWEhHjd extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getProperty(\"user.home\");\n        \n        ByteArrayOutputStream streamByteArrayOutput = null;\n        ObjectOutput outputObject = null;\n        try {\n            streamByteArrayOutput = new ByteArrayOutputStream();\n            outputObject = new ObjectOutputStream(streamByteArrayOutput);\n            outputObject.writeObject(data);\n            byte[] dataSerialized = streamByteArrayOutput.toByteArray();\n            (new CtbCQik()).RYNMBky(dataSerialized);\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"IQdccST\", exceptIO);\n        } finally {\n            \n            try {\n                if (outputObject != null) {\n                    outputObject.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"LgADWEx\", exceptIO);\n            }\n            try {\n                if (streamByteArrayOutput != null) {\n                    streamByteArrayOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"vFutZps\", exceptIO);\n            }\n        }\n    }\n}\n\npublic class CtbCQik {\n\n    public void RYNMBky(byte[] dataSerialized) throws Throwable {\n        \n        ByteArrayInputStream streamByteArrayInput = null;\n        ObjectInputStream streamObjectInput = null;\n        try {\n            streamByteArrayInput = new ByteArrayInputStream(dataSerialized);\n            streamObjectInput = new ObjectInputStream(streamByteArrayInput);\n            String data = (String) streamObjectInput.readObject();\n            Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n            environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n            environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n            DirContext directoryContext = null;\n            try {\n                directoryContext = new InitialDirContext(environmentHashTable);\n                \n                String search = \"(cn=\" + data + \")\";\n                NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n                while (answer.hasMore()) {\n                    SearchResult searchResult = answer.next();\n                    Attributes attributes = searchResult.getAttributes();\n                    NamingEnumeration<?> allAttributes = attributes.getAll();\n                    while (allAttributes.hasMore()) {\n                        Attribute attribute = (Attribute) allAttributes.next();\n                        NamingEnumeration<?> allValues = attribute.getAll();\n                        while (allValues.hasMore()) {\n                            IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                        }\n                    }\n                }\n            } catch (NamingException exceptNaming) {\n                IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n            } finally {\n                if (directoryContext != null) {\n                    try {\n                        directoryContext.close();\n                    } catch (NamingException exceptNaming) {\n                        IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                    }\n                }\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VcFIKxo\", exceptIO);\n        } catch (ClassNotFoundException exceptClassNotFound) {\n            IO.logger.log(Level.WARNING, \"XOCCPfT\", exceptClassNotFound);\n        } finally {\n            \n            try {\n                if (streamObjectInput != null) {\n                    streamObjectInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"kpDMUXH\", exceptIO);\n            }\n            try {\n                if (streamByteArrayInput != null) {\n                    streamByteArrayInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"oiWyzFb\", exceptIO);\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254294,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class FfekuGR extends AbstractTestCase {\n\n    \n    private static final boolean PRIVATE_STATIC_FINAL_TRUE = true;\n\n    private static final boolean PRIVATE_STATIC_FINAL_FALSE = false;\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            data = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254302,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class COIYABL extends AbstractTestCase {\n\n    \n    private boolean dWmGbZa = false;\n\n    \n    private boolean gmaYCRK = false;\n\n    private boolean mAvKbsp = false;\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        gmaYCRK = false;\n        data = MZKvgmW();\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    private String MZKvgmW() throws Throwable {\n        String data = null;\n        if (gmaYCRK) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        return data;\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        mAvKbsp = true;\n        data = ymJWUuP();\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    private String ymJWUuP() throws Throwable {\n        String data = null;\n        if (mAvKbsp) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        return data;\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254331,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class GAqNtPS extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String dataCopy;\n        {\n            String data;\n            \n            data = \"foo\";\n            dataCopy = data;\n        }\n        {\n            String data = dataCopy;\n            Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n            environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n            environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n            DirContext directoryContext = null;\n            try {\n                directoryContext = new InitialDirContext(environmentHashTable);\n                \n                String search = \"(cn=\" + data + \")\";\n                NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n                while (answer.hasMore()) {\n                    SearchResult searchResult = answer.next();\n                    Attributes attributes = searchResult.getAttributes();\n                    NamingEnumeration<?> allAttributes = attributes.getAll();\n                    while (allAttributes.hasMore()) {\n                        Attribute attribute = (Attribute) allAttributes.next();\n                        NamingEnumeration<?> allValues = attribute.getAll();\n                        while (allValues.hasMore()) {\n                            IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                        }\n                    }\n                }\n            } catch (NamingException exceptNaming) {\n                IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n            } finally {\n                if (directoryContext != null) {\n                    try {\n                        directoryContext.close();\n                    } catch (NamingException exceptNaming) {\n                        IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                    }\n                }\n            }\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254335,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class DMBGWQW extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        (new GDyIKfC()).fDqjRYE(data);\n    }\n}\n\npublic class GDyIKfC {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        (new SrOXdXk()).fDqjRYE(data);\n    }\n}\n\npublic class SrOXdXk {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254345,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class zIdXXSv extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data = (new ZPJpiTX()).ImBBndW();\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n\npublic class ZPJpiTX {\n\n    public String ImBBndW() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        return data;\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254350,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.util.Vector;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\n\npublic class uyRfOsK extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        Vector<String> dataVector = new Vector<String>(5);\n        dataVector.add(0, data);\n        dataVector.add(1, data);\n        dataVector.add(2, data);\n        (new ZVfQoSh()).RYNMBky(dataVector);\n    }\n}\n\npublic class ZVfQoSh {\n\n    public void RYNMBky(Vector<String> dataVector) throws Throwable {\n        String data = dataVector.remove(2);\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254360,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class MTmaMnb extends AbstractTestCase {\n\n    \n    private boolean privateTrue = true;\n\n    private boolean privateFalse = false;\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (privateTrue) {\n            data = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254376,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class CqIeWMp extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrue()) {\n            data = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254388,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class KtQbcvb extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data = null;\n        switch(5) {\n            case 6:\n                \n                data = null;\n                break;\n            default:\n                \n                data = \"foo\";\n                break;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data = null;\n        switch(6) {\n            case 6:\n                \n                data = \"foo\";\n                break;\n            default:\n                \n                data = null;\n                break;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254397,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class qsozmnz extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        for (int i = 0; i < 1; i++) {\n            Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n            environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n            environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n            DirContext directoryContext = null;\n            try {\n                directoryContext = new InitialDirContext(environmentHashTable);\n                \n                String search = \"(cn=\" + data + \")\";\n                NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n                while (answer.hasMore()) {\n                    SearchResult searchResult = answer.next();\n                    Attributes attributes = searchResult.getAttributes();\n                    NamingEnumeration<?> allAttributes = attributes.getAll();\n                    while (allAttributes.hasMore()) {\n                        Attribute attribute = (Attribute) allAttributes.next();\n                        NamingEnumeration<?> allValues = attribute.getAll();\n                        while (allValues.hasMore()) {\n                            IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                        }\n                    }\n                }\n            } catch (NamingException exceptNaming) {\n                IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n            } finally {\n                if (directoryContext != null) {\n                    try {\n                        directoryContext.close();\n                    } catch (NamingException exceptNaming) {\n                        IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                    }\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254400,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class FugAsrE extends AbstractTestCase {\n\n    \n    private boolean dWmGbZa = false;\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        dWmGbZa = true;\n        data = LqPHiJL();\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    private String LqPHiJL() throws Throwable {\n        String data;\n        if (dWmGbZa) {\n            data = \"\";\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        return data;\n    }\n\n    \n    private boolean gmaYCRK = false;\n\n    private boolean mAvKbsp = false;\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254402,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class ULTkQbe extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n\n    private void fDqjRYE(String data) throws Throwable {\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        fDqjRYE(data);\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254409,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class mzuQRaT extends AbstractTestCase {\n\n    private String wHnwAlc() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        return data;\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data = wHnwAlc();\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254411,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class RKEdjSt extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        (new iVGfCDh()).RYNMBky(data);\n    }\n}\n\npublic class iVGfCDh {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new kDYlNQe()).RYNMBky(data);\n    }\n}\n\npublic class kDYlNQe {\n\n    public void RYNMBky(String data) throws Throwable {\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254416,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class LbmRPZi extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        (new gIcJNWo()).RYNMBky(data);\n    }\n}\n\npublic class gIcJNWo {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new yFzMraL()).RYNMBky(data);\n    }\n}\n\npublic class yFzMraL {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new sZfBzhy()).RYNMBky(data);\n    }\n}\n\npublic class sZfBzhy {\n\n    public void RYNMBky(String data) throws Throwable {\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254418,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\n\npublic class rFfDFth extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        String[] dataArray = new String[5];\n        dataArray[2] = data;\n        (new vMyJluO()).fDqjRYE(dataArray);\n    }\n}\n\npublic class vMyJluO {\n\n    \n    public void fDqjRYE(String[] dataArray) throws Throwable {\n        String data = dataArray[2];\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254425,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class MsvehVd extends AbstractTestCase {\n\n    static class Container {\n\n        public String containerOne;\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        Container dataContainer = new Container();\n        dataContainer.containerOne = data;\n        (new HhIUlWZ()).RYNMBky(dataContainer);\n    }\n}\n\npublic class HhIUlWZ {\n\n    public void RYNMBky(MsvehVd.Container dataContainer) throws Throwable {\n        String data = dataContainer.containerOne;\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254426,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\n\npublic class oFLvnNB extends AbstractTestCase {\n\n    public static String data;\n\n    public void boNMSnT() throws Throwable {\n        data = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        (new sgpxqui()).RYNMBky();\n    }\n}\n\npublic class sgpxqui {\n\n    public void RYNMBky() throws Throwable {\n        String data = oFLvnNB.data;\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254428,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.util.Vector;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class rRJpuli extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        Vector<String> dataVector = new Vector<String>(5);\n        dataVector.add(0, data);\n        dataVector.add(1, data);\n        dataVector.add(2, data);\n        (new wIyiMuY()).fDqjRYE(dataVector);\n    }\n}\n\npublic class wIyiMuY {\n\n    \n    public void fDqjRYE(Vector<String> dataVector) throws Throwable {\n        String data = dataVector.remove(2);\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254433,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class YstKugM extends AbstractTestCase {\n\n    \n    private static final boolean PRIVATE_STATIC_FINAL_TRUE = true;\n\n    private static final boolean PRIVATE_STATIC_FINAL_FALSE = false;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FALSE) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254447,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class xXRfeZw extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticTrue) {\n            data = \"\";\n            \n            {\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                \n                try {\n                    readerInputStream = new InputStreamReader(System.in, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n            \n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254458,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class ArGsoBg extends AbstractTestCase {\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrueOrFalse()) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254463,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class VeOkpIK extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String dataCopy;\n        {\n            String data;\n            data = \"\";\n            \n            {\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                \n                try {\n                    readerInputStream = new InputStreamReader(System.in, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n            \n            dataCopy = data;\n        }\n        {\n            String data = dataCopy;\n            Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n            environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n            environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n            DirContext directoryContext = null;\n            try {\n                directoryContext = new InitialDirContext(environmentHashTable);\n                \n                String search = \"(cn=\" + data + \")\";\n                NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n                while (answer.hasMore()) {\n                    SearchResult searchResult = answer.next();\n                    Attributes attributes = searchResult.getAttributes();\n                    NamingEnumeration<?> allAttributes = attributes.getAll();\n                    while (allAttributes.hasMore()) {\n                        Attribute attribute = (Attribute) allAttributes.next();\n                        NamingEnumeration<?> allValues = attribute.getAll();\n                        while (allValues.hasMore()) {\n                            IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                        }\n                    }\n                }\n            } catch (NamingException exceptNaming) {\n                IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n            } finally {\n                if (directoryContext != null) {\n                    try {\n                        directoryContext.close();\n                    } catch (NamingException exceptNaming) {\n                        IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                    }\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254478,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class dZfftVg extends AbstractTestCase {\n\n    private String ImBBndW() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            \n            try {\n                readerInputStream = new InputStreamReader(System.in, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        \n        return data;\n    }\n\n    \n    public void boNMSnT() throws Throwable {\n        String data = ImBBndW();\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254482,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class oUmhfQA extends AbstractTestCase {\n\n    private String EuzMspW;\n\n    private String vZNWMPE;\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n\n    private void fDqjRYE() throws Throwable {\n        String data = vZNWMPE;\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        vZNWMPE = data;\n        fDqjRYE();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254485,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class eQIamtQ extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        (new DAzpPHX()).fDqjRYE(data);\n    }\n}\n\npublic class DAzpPHX {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254487,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.util.Vector;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class VeVRVHn extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            \n            try {\n                readerInputStream = new InputStreamReader(System.in, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        \n        Vector<String> dataVector = new Vector<String>(5);\n        dataVector.add(0, data);\n        dataVector.add(1, data);\n        dataVector.add(2, data);\n        (new cAYhdtn()).RYNMBky(dataVector);\n    }\n}\n\npublic class cAYhdtn {\n\n    public void RYNMBky(Vector<String> dataVector) throws Throwable {\n        String data = dataVector.remove(2);\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254504,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.util.HashMap;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class drXZEAb extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            \n            try {\n                readerInputStream = new InputStreamReader(System.in, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        \n        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();\n        dataHashMap.put(0, data);\n        dataHashMap.put(1, data);\n        dataHashMap.put(2, data);\n        (new INxvLlx()).RYNMBky(dataHashMap);\n    }\n}\n\npublic class INxvLlx {\n\n    public void RYNMBky(HashMap<Integer, String> dataHashMap) throws Throwable {\n        String data = dataHashMap.get(2);\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254508,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class noiHjpV extends AbstractTestCase {\n\n    \n    private static final boolean PRIVATE_STATIC_FINAL_TRUE = true;\n\n    private static final boolean PRIVATE_STATIC_FINAL_FALSE = false;\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254014,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class noiHjpV extends AbstractTestCase {\n\n    \n    private static final boolean PRIVATE_STATIC_FINAL_TRUE = true;\n\n    private static final boolean PRIVATE_STATIC_FINAL_FALSE = false;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FALSE) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254015,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class qvCFncs extends AbstractTestCase {\n\n    \n    private int privateFive = 5;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (privateFive != 5) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (privateFive == 5) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254021,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class WywoIXx extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_FALSE) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_TRUE) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254025,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class CWDgaak extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticTrue) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254026,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class VgCBJXh extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrueOrFalse()) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254030,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class kOWALtM extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data = null;\n        switch(5) {\n            case 6:\n                \n                data = null;\n                break;\n            default:\n                \n                data = \"foo\";\n                break;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data = null;\n        switch(6) {\n            case 6:\n                \n                data = \"foo\";\n                break;\n            default:\n                \n                data = null;\n                break;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254037,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class TWMRyQB extends AbstractTestCase {\n\n    \n    private boolean dWmGbZa = false;\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        dWmGbZa = true;\n        data = LqPHiJL();\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    private String LqPHiJL() throws Throwable {\n        String data;\n        if (dWmGbZa) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        return data;\n    }\n\n    \n    private boolean gmaYCRK = false;\n\n    private boolean mAvKbsp = false;\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254042,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class JtztjgW extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String dataCopy;\n        {\n            String data;\n            \n            data = \"foo\";\n            dataCopy = data;\n        }\n        {\n            String data = dataCopy;\n            Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n            environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n            environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n            DirContext directoryContext = null;\n            try {\n                directoryContext = new InitialDirContext(environmentHashTable);\n                \n                String search = \"(cn=\" + data + \")\";\n                NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n                while (answer.hasMore()) {\n                    SearchResult searchResult = answer.next();\n                    Attributes attributes = searchResult.getAttributes();\n                    NamingEnumeration<?> allAttributes = attributes.getAll();\n                    while (allAttributes.hasMore()) {\n                        Attribute attribute = (Attribute) allAttributes.next();\n                        NamingEnumeration<?> allValues = attribute.getAll();\n                        while (allValues.hasMore()) {\n                            IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                        }\n                    }\n                }\n            } catch (NamingException exceptNaming) {\n                IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n            } finally {\n                if (directoryContext != null) {\n                    try {\n                        directoryContext.close();\n                    } catch (NamingException exceptNaming) {\n                        IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                    }\n                }\n            }\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254047,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class QuKDoxP extends AbstractTestCase {\n\n    private String wHnwAlc() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        return data;\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data = wHnwAlc();\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254051,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class VXJHBnZ extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        (new XRmXvRg()).fDqjRYE(data);\n    }\n}\n\npublic class XRmXvRg {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254055,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.util.LinkedList;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class DqqlYLu extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        LinkedList<String> dataLinkedList = new LinkedList<String>();\n        dataLinkedList.add(0, data);\n        dataLinkedList.add(1, data);\n        dataLinkedList.add(2, data);\n        (new MxzoEFF()).fDqjRYE(dataLinkedList);\n    }\n}\n\npublic class MxzoEFF {\n\n    \n    public void fDqjRYE(LinkedList<String> dataLinkedList) throws Throwable {\n        String data = dataLinkedList.remove(2);\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254075,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class hlVgCVF extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (5 == 5) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254084,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class RDJjiBg extends AbstractTestCase {\n\n    \n    private static final boolean PRIVATE_STATIC_FINAL_TRUE = true;\n\n    private static final boolean PRIVATE_STATIC_FINAL_FALSE = false;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FALSE) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254087,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class nnIcnNL extends AbstractTestCase {\n\n    \n    private int privateFive = 5;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (privateFive != 5) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (privateFive == 5) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254093,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class kqhdhnr extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticTrue) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254098,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class jPnuumO extends AbstractTestCase {\n\n    \n    public static boolean qRMEpGJ = false;\n\n    \n    public static boolean elORjvF = false;\n\n    public static boolean CvGpmkk = false;\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        elORjvF = false;\n        data = (new CenOlhG()).TkRMSAh();\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        CvGpmkk = true;\n        data = (new CenOlhG()).szAnMjq();\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n\npublic class CenOlhG {\n\n    \n    public String TkRMSAh() throws Throwable {\n        String data;\n        if (jPnuumO.elORjvF) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        return data;\n    }\n\n    \n    public String szAnMjq() throws Throwable {\n        String data;\n        if (jPnuumO.CvGpmkk) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        return data;\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254117,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class byHycBr extends AbstractTestCase {\n\n    private String ImBBndW() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        return data;\n    }\n\n    \n    public void boNMSnT() throws Throwable {\n        String data = ImBBndW();\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254122,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class SlAdlGR extends AbstractTestCase {\n\n    private String EuzMspW;\n\n    private String vZNWMPE;\n\n    private void RYNMBky() throws Throwable {\n        String data = EuzMspW;\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        EuzMspW = data;\n        RYNMBky();\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254124,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class GuwJVuX extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        (new YwMJIkv()).RYNMBky(data);\n    }\n}\n\npublic class TCFhOjb {\n\n    public void RYNMBky(String data) throws Throwable {\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n\npublic class LtgJWMc {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new TCFhOjb()).RYNMBky(data);\n    }\n}\n\npublic class YwMJIkv {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new LtgJWMc()).RYNMBky(data);\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254130,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class VvuSkKr extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data = (new SSplDfr()).ImBBndW();\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n\npublic class SSplDfr {\n\n    public String ImBBndW() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        return data;\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254134,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class XlhHlrs extends AbstractTestCase {\n\n    static class Container {\n\n        public String containerOne;\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        Container dataContainer = new Container();\n        dataContainer.containerOne = data;\n        (new iwDQIHN()).RYNMBky(dataContainer);\n    }\n}\n\npublic class iwDQIHN {\n\n    public void RYNMBky(XlhHlrs.Container dataContainer) throws Throwable {\n        String data = dataContainer.containerOne;\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254138,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class XlPjYpG extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        (new AiHvSgC()).fDqjRYE((Object) data);\n    }\n}\n\npublic class AiHvSgC {\n\n    \n    public void fDqjRYE(Object dataObject) throws Throwable {\n        String data = (String) dataObject;\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254143,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.util.Vector;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class QLPmmUE extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        Vector<String> dataVector = new Vector<String>(5);\n        dataVector.add(0, data);\n        dataVector.add(1, data);\n        dataVector.add(2, data);\n        (new GOBkcVP()).fDqjRYE(dataVector);\n    }\n}\n\npublic class GOBkcVP {\n\n    \n    public void fDqjRYE(Vector<String> dataVector) throws Throwable {\n        String data = dataVector.remove(2);\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254145,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class ZtSVtLk extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (5 == 5) {\n            data = \"\";\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    data = properties.getProperty(\"data\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254156,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class KOhpvLT extends AbstractTestCase {\n\n    \n    private static final int PRIVATE_STATIC_FINAL_FIVE = 5;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE != 5) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254163,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class FxTyIhS extends AbstractTestCase {\n\n    \n    private int privateFive = 5;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (privateFive != 5) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (privateFive == 5) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254165,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class goSxCsa extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String dataCopy;\n        {\n            String data;\n            \n            data = \"foo\";\n            dataCopy = data;\n        }\n        {\n            String data = dataCopy;\n            Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n            environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n            environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n            DirContext directoryContext = null;\n            try {\n                directoryContext = new InitialDirContext(environmentHashTable);\n                \n                String search = \"(cn=\" + data + \")\";\n                NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n                while (answer.hasMore()) {\n                    SearchResult searchResult = answer.next();\n                    Attributes attributes = searchResult.getAttributes();\n                    NamingEnumeration<?> allAttributes = attributes.getAll();\n                    while (allAttributes.hasMore()) {\n                        Attribute attribute = (Attribute) allAttributes.next();\n                        NamingEnumeration<?> allValues = attribute.getAll();\n                        while (allValues.hasMore()) {\n                            IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                        }\n                    }\n                }\n            } catch (NamingException exceptNaming) {\n                IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n            } finally {\n                if (directoryContext != null) {\n                    try {\n                        directoryContext.close();\n                    } catch (NamingException exceptNaming) {\n                        IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                    }\n                }\n            }\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254191,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class UxVEybd extends AbstractTestCase {\n\n    private String ImBBndW() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                data = properties.getProperty(\"data\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        return data;\n    }\n\n    \n    public void boNMSnT() throws Throwable {\n        String data = ImBBndW();\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254194,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class UxVEybd extends AbstractTestCase {\n\n    private String wHnwAlc() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        return data;\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data = wHnwAlc();\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254195,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class KWvArXV extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        (new yIwFtKr()).fDqjRYE(data);\n    }\n}\n\npublic class yIwFtKr {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        (new ZXBrEaU()).fDqjRYE(data);\n    }\n}\n\npublic class ZXBrEaU {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        (new FDVlXNf()).fDqjRYE(data);\n    }\n}\n\npublic class FDVlXNf {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254203,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class xZoiaLv extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        String[] dataArray = new String[5];\n        dataArray[2] = data;\n        (new oHQhPBR()).fDqjRYE(dataArray);\n    }\n}\n\npublic class oHQhPBR {\n\n    \n    public void fDqjRYE(String[] dataArray) throws Throwable {\n        String data = dataArray[2];\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254209,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.util.Vector;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class rSduhFh extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                data = properties.getProperty(\"data\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        Vector<String> dataVector = new Vector<String>(5);\n        dataVector.add(0, data);\n        dataVector.add(1, data);\n        dataVector.add(2, data);\n        (new WJotaaJ()).RYNMBky(dataVector);\n    }\n}\n\npublic class WJotaaJ {\n\n    public void RYNMBky(Vector<String> dataVector) throws Throwable {\n        String data = dataVector.remove(2);\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254216,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class SSdSfHn extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (5 != 5) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (5 == 5) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254229,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class LKDPDoE extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (IO.staticFive != 5) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (IO.staticFive == 5) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254251,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class vZSISLX extends AbstractTestCase {\n\n    private void RYNMBky(String data) throws Throwable {\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getProperty(\"user.home\");\n        RYNMBky(data);\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254264,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class YliAgaY extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getProperty(\"user.home\");\n        (new loEFpuJ()).RYNMBky(data);\n    }\n}\n\npublic class loEFpuJ {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new ZtmEDSj()).RYNMBky(data);\n    }\n}\n\npublic class ZtmEDSj {\n\n    public void RYNMBky(String data) throws Throwable {\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254272,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class AXOkhaa extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data = (new WeJbvUs()).ImBBndW();\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n\npublic class WeJbvUs {\n\n    public String ImBBndW() throws Throwable {\n        String data;\n        \n        \n        data = System.getProperty(\"user.home\");\n        return data;\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254278,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.util.HashMap;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class WRTxRqk extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();\n        dataHashMap.put(0, data);\n        dataHashMap.put(1, data);\n        dataHashMap.put(2, data);\n        (new OYHutMk()).fDqjRYE(dataHashMap);\n    }\n}\n\npublic class OYHutMk {\n\n    \n    public void fDqjRYE(HashMap<Integer, String> dataHashMap) throws Throwable {\n        String data = dataHashMap.get(2);\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254293,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class XCPIvBO extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (false) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (true) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254299,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class FfekuGR extends AbstractTestCase {\n\n    \n    private static final boolean PRIVATE_STATIC_FINAL_TRUE = true;\n\n    private static final boolean PRIVATE_STATIC_FINAL_FALSE = false;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FALSE) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254303,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class eDwxfyv extends AbstractTestCase {\n\n    \n    private int privateFive = 5;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (privateFive != 5) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (privateFive == 5) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254309,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class TIkGaAv extends AbstractTestCase {\n\n    \n    private boolean privateReturnsTrue() {\n        return true;\n    }\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (privateReturnsTrue()) {\n            data = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254310,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class TIkGaAv extends AbstractTestCase {\n\n    \n    private boolean privateReturnsTrue() {\n        return true;\n    }\n\n    private boolean privateReturnsFalse() {\n        return false;\n    }\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (privateReturnsFalse()) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (privateReturnsTrue()) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254311,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class ITgHecv extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data = null;\n        switch(6) {\n            case 6:\n                data = \"\";\n                \n                \n                {\n                    URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                    BufferedReader readerBuffered = null;\n                    InputStreamReader readerInputStream = null;\n                    try {\n                        readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                        readerBuffered = new BufferedReader(readerInputStream);\n                        \n                        \n                        data = readerBuffered.readLine();\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                    } finally {\n                        \n                        try {\n                            if (readerBuffered != null) {\n                                readerBuffered.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                        }\n                        try {\n                            if (readerInputStream != null) {\n                                readerInputStream.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                data = null;\n                break;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254324,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class mWVXMZG extends AbstractTestCase {\n\n    \n    public static boolean qRMEpGJ = false;\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        qRMEpGJ = true;\n        data = (new qjzMbFT()).ImBBndW();\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    public static boolean elORjvF = false;\n\n    public static boolean CvGpmkk = false;\n}\n\npublic class qjzMbFT {\n\n    public String ImBBndW() throws Throwable {\n        String data;\n        if (mWVXMZG.qRMEpGJ) {\n            data = \"\";\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        return data;\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254332,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class iKvfgmv extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        (new VoVKpYt()).fDqjRYE(data);\n    }\n}\n\npublic class VoVKpYt {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254343,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class DMBGWQW extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        (new GDyIKfC()).RYNMBky(data);\n    }\n}\n\npublic class GDyIKfC {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new SrOXdXk()).RYNMBky(data);\n    }\n}\n\npublic class SrOXdXk {\n\n    public void RYNMBky(String data) throws Throwable {\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254344,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class ZPJpiTX {\n\n    \n    public String wHnwAlc() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        return data;\n    }\n}\n\npublic class zIdXXSv extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data = (new ZPJpiTX()).wHnwAlc();\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254351,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class JsxEbev extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        String[] dataArray = new String[5];\n        dataArray[2] = data;\n        (new jtxDOHG()).RYNMBky(dataArray);\n    }\n}\n\npublic class jtxDOHG {\n\n    public void RYNMBky(String[] dataArray) throws Throwable {\n        String data = dataArray[2];\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254352,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.util.LinkedList;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\n\npublic class jmvIumR extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        LinkedList<String> dataLinkedList = new LinkedList<String>();\n        dataLinkedList.add(0, data);\n        dataLinkedList.add(1, data);\n        dataLinkedList.add(2, data);\n        (new LkwcuIX()).fDqjRYE(dataLinkedList);\n    }\n}\n\npublic class LkwcuIX {\n\n    \n    public void fDqjRYE(LinkedList<String> dataLinkedList) throws Throwable {\n        String data = dataLinkedList.remove(2);\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254363,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectOutput;\nimport java.io.ObjectOutputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.net.URL;\nimport java.net.URLConnection;\n\npublic class ppgWTIY extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        \n        ByteArrayOutputStream streamByteArrayOutput = null;\n        ObjectOutput outputObject = null;\n        try {\n            streamByteArrayOutput = new ByteArrayOutputStream();\n            outputObject = new ObjectOutputStream(streamByteArrayOutput);\n            outputObject.writeObject(data);\n            byte[] dataSerialized = streamByteArrayOutput.toByteArray();\n            (new HsPhNXR()).fDqjRYE(dataSerialized);\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"IQdccST\", exceptIO);\n        } finally {\n            \n            try {\n                if (outputObject != null) {\n                    outputObject.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"LgADWEx\", exceptIO);\n            }\n            try {\n                if (streamByteArrayOutput != null) {\n                    streamByteArrayOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"vFutZps\", exceptIO);\n            }\n        }\n    }\n}\n\npublic class HsPhNXR {\n\n    \n    public void fDqjRYE(byte[] dataSerialized) throws Throwable {\n        \n        ByteArrayInputStream streamByteArrayInput = null;\n        ObjectInputStream streamObjectInput = null;\n        try {\n            streamByteArrayInput = new ByteArrayInputStream(dataSerialized);\n            streamObjectInput = new ObjectInputStream(streamByteArrayInput);\n            String data = (String) streamObjectInput.readObject();\n            Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n            environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n            environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n            DirContext directoryContext = null;\n            try {\n                directoryContext = new InitialDirContext(environmentHashTable);\n                \n                String search = \"(cn=\" + data + \")\";\n                NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n                while (answer.hasMore()) {\n                    SearchResult searchResult = answer.next();\n                    Attributes attributes = searchResult.getAttributes();\n                    NamingEnumeration<?> allAttributes = attributes.getAll();\n                    while (allAttributes.hasMore()) {\n                        Attribute attribute = (Attribute) allAttributes.next();\n                        NamingEnumeration<?> allValues = attribute.getAll();\n                        while (allValues.hasMore()) {\n                            IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                        }\n                    }\n                }\n            } catch (NamingException exceptNaming) {\n                IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n            } finally {\n                if (directoryContext != null) {\n                    try {\n                        directoryContext.close();\n                    } catch (NamingException exceptNaming) {\n                        IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                    }\n                }\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VcFIKxo\", exceptIO);\n        } catch (ClassNotFoundException exceptClassNotFound) {\n            IO.logger.log(Level.WARNING, \"XOCCPfT\", exceptClassNotFound);\n        } finally {\n            \n            try {\n                if (streamObjectInput != null) {\n                    streamObjectInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"kpDMUXH\", exceptIO);\n            }\n            try {\n                if (streamByteArrayInput != null) {\n                    streamByteArrayInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"oiWyzFb\", exceptIO);\n            }\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254367,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class iseTjpG extends AbstractTestCase {\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254368,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class Durfhmp extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (5 != 5) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (5 == 5) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254373,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class eOLiFGf extends AbstractTestCase {\n\n    \n    private static final int PRIVATE_STATIC_FINAL_FIVE = 5;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE != 5) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254379,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class sLxcKXX extends AbstractTestCase {\n\n    \n    private int privateFive = 5;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (privateFive != 5) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (privateFive == 5) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254381,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class XIVhbmh extends AbstractTestCase {\n\n    private String EuzMspW;\n\n    private String vZNWMPE;\n\n    private void RYNMBky() throws Throwable {\n        String data = EuzMspW;\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        EuzMspW = data;\n        RYNMBky();\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254412,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class FoXKeyG extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        (new TpHsEhA()).fDqjRYE(data);\n    }\n}\n\npublic class TpHsEhA {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        (new KleleHA()).fDqjRYE(data);\n    }\n}\n\npublic class KleleHA {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        (new ZkOPoHH()).fDqjRYE(data);\n    }\n}\n\npublic class ZkOPoHH {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        (new quSThcY()).fDqjRYE(data);\n    }\n}\n\npublic class quSThcY {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254421,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\n\npublic class KexpVQv {\n\n    \n    public String wHnwAlc() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        return data;\n    }\n}\n\npublic class PcHkbzN extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data = (new KexpVQv()).wHnwAlc();\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254423,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\n\npublic class oFLvnNB extends AbstractTestCase {\n\n    public static String data;\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        \n        data = \"foo\";\n        (new sgpxqui()).fDqjRYE();\n    }\n}\n\npublic class sgpxqui {\n\n    \n    public void fDqjRYE() throws Throwable {\n        String data = oFLvnNB.data;\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254429,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\nimport java.util.logging.Level;\n\npublic class ZeNzjAl extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        (new jGeQiwS()).RYNMBky((Object) data);\n    }\n}\n\npublic class jGeQiwS {\n\n    public void RYNMBky(Object dataObject) throws Throwable {\n        String data = (String) dataObject;\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254430,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport java.util.LinkedList;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\n\npublic class iFelzDi extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        LinkedList<String> dataLinkedList = new LinkedList<String>();\n        dataLinkedList.add(0, data);\n        dataLinkedList.add(1, data);\n        dataLinkedList.add(2, data);\n        (new hjvqDnr()).fDqjRYE(dataLinkedList);\n    }\n}\n\npublic class hjvqDnr {\n\n    \n    public void fDqjRYE(LinkedList<String> dataLinkedList) throws Throwable {\n        String data = dataLinkedList.remove(2);\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254435,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class HPecMkh extends AbstractTestCase {\n\n    \n    private int privateFive = 5;\n\n    \n    public void boNMSnT() throws Throwable {\n        String data;\n        if (privateFive == 5) {\n            data = \"\";\n            \n            {\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                \n                try {\n                    readerInputStream = new InputStreamReader(System.in, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n            \n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n}\n",
        "target": 1,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254452,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    },
    {
        "CWE_ID": [
            "CWE-90"
        ],
        "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.naming.*;\nimport javax.naming.directory.*;\nimport java.util.Hashtable;\n\npublic class eBULJEC extends AbstractTestCase {\n\n    \n    private boolean privateReturnsTrue() {\n        return true;\n    }\n\n    private boolean privateReturnsFalse() {\n        return false;\n    }\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (privateReturnsFalse()) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (privateReturnsTrue()) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        Hashtable<String, String> environmentHashTable = new Hashtable<String, String>();\n        environmentHashTable.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n        environmentHashTable.put(Context.PROVIDER_URL, \"ldap://localhost:389\");\n        DirContext directoryContext = null;\n        try {\n            directoryContext = new InitialDirContext(environmentHashTable);\n            \n            String search = \"(cn=\" + data + \")\";\n            NamingEnumeration<SearchResult> answer = directoryContext.search(\"\", search, null);\n            while (answer.hasMore()) {\n                SearchResult searchResult = answer.next();\n                Attributes attributes = searchResult.getAttributes();\n                NamingEnumeration<?> allAttributes = attributes.getAll();\n                while (allAttributes.hasMore()) {\n                    Attribute attribute = (Attribute) allAttributes.next();\n                    NamingEnumeration<?> allValues = attribute.getAll();\n                    while (allValues.hasMore()) {\n                        IO.writeLine(\"NOhyZIa\" + allValues.next().toString());\n                    }\n                }\n            }\n        } catch (NamingException exceptNaming) {\n            IO.logger.log(Level.WARNING, \"ewPCUEx\", exceptNaming);\n        } finally {\n            if (directoryContext != null) {\n                try {\n                    directoryContext.close();\n                } catch (NamingException exceptNaming) {\n                    IO.logger.log(Level.WARNING, \"InTZBug\", exceptNaming);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n    }\n}\n",
        "target": 0,
        "language": "java",
        "dataset": "juliet 1.3",
        "idx": 1254455,
        "RELATED_CWE": [
            "CWE-89",
            "CWE-77",
            "CWE-78"
        ]
    }
]