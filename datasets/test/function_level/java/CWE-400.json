[
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class oPGJKvp extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getenv(\"ADD\");\n            if (\n            stringNumber != null) {\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        }\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234658,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class bXzSCQs extends AbstractTestCase {\n\n    \n    private static final boolean PRIVATE_STATIC_FINAL_TRUE = true;\n\n    private static final boolean PRIVATE_STATIC_FINAL_FALSE = false;\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getenv(\"ADD\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234664,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class bXzSCQs extends AbstractTestCase {\n\n    \n    private static final boolean PRIVATE_STATIC_FINAL_TRUE = true;\n\n    private static final boolean PRIVATE_STATIC_FINAL_FALSE = false;\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_FALSE) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getenv(\"ADD\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (PRIVATE_STATIC_FINAL_FALSE) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getenv(\"ADD\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234665,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class hsSlIei extends AbstractTestCase {\n\n    \n    private int privateFive = 5;\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (privateFive != 5) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (privateFive == 5) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (privateFive == 5) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (privateFive == 5) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (privateFive == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getenv(\"ADD\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateFive != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (privateFive == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getenv(\"ADD\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateFive == 5) {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234671,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class sZZbFHM extends AbstractTestCase {\n\n    \n    private boolean privateReturnsTrue() {\n        return true;\n    }\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (privateReturnsTrue()) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getenv(\"ADD\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateReturnsTrue()) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234672,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class SspioHB extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_FALSE) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_TRUE) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_TRUE) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getenv(\"ADD\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_FALSE) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_TRUE) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getenv(\"ADD\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234675,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class decUVTB extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (IO.staticTrue) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getenv(\"ADD\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticTrue) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234676,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class SvHYaZX extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        while (true) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getenv(\"ADD\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            }\n            break;\n        }\n        while (true) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n            break;\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234688,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class SvHYaZX extends AbstractTestCase {\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        while (true) {\n            \n            count = 2;\n            break;\n        }\n        while (true) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n            break;\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        while (true) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getenv(\"ADD\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            }\n            break;\n        }\n        while (true) {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n            break;\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234689,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class CJawxYN extends AbstractTestCase {\n\n    \n    private boolean dWmGbZa = false;\n\n    \n    private boolean aRnSMVj = false;\n\n    private boolean aOWZSGn = false;\n\n    private boolean DBbhdbc = false;\n\n    public void JttWLtS() throws Throwable {\n        uytpYbp();\n        OQsEKDS();\n        EXrOlJC();\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getenv(\"ADD\");\n            if (\n            stringNumber != null) {\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        }\n        aRnSMVj = false;\n        ZpnQtvQ(count);\n    }\n\n    private void ZpnQtvQ(int count) throws Throwable {\n        if (aRnSMVj) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getenv(\"ADD\");\n            if (\n            stringNumber != null) {\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        }\n        aOWZSGn = true;\n        VmywRrZ(count);\n    }\n\n    private void VmywRrZ(int count) throws Throwable {\n        if (aOWZSGn) {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        DBbhdbc = true;\n        fDqjRYE(count);\n    }\n\n    private void fDqjRYE(int count) throws Throwable {\n        if (DBbhdbc) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234693,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class VKAoxIW extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int countCopy;\n        {\n            int count;\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getenv(\"ADD\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            }\n            countCopy = count;\n        }\n        {\n            int count = countCopy;\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234696,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class hkwTzCF extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getenv(\"ADD\");\n            if (\n            stringNumber != null) {\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        }\n        (new qoVUQQQ()).RYNMBky(count);\n    }\n}\n\npublic class qoVUQQQ {\n\n    public void RYNMBky(int count) throws Throwable {\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234704,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class YsjGCsH {\n\n    \n    public int wHnwAlc() throws Throwable {\n        int count;\n        \n        count = 2;\n        return count;\n    }\n\n    \n    public int snawHrb() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getenv(\"ADD\");\n            if (\n            stringNumber != null) {\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        }\n        return count;\n    }\n}\n\npublic class MBTJnky extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count = (new YsjGCsH()).wHnwAlc();\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count = (new YsjGCsH()).snawHrb();\n        int i = 0;\n        \n        if (count > 0 && count <= 20) {\n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234713,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class SxEVHlY extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getenv(\"ADD\");\n            if (\n            stringNumber != null) {\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        }\n        int[] countArray = new int[5];\n        countArray[2] = count;\n        (new zeuWaCD()).RYNMBky(countArray);\n    }\n}\n\npublic class zeuWaCD {\n\n    public void RYNMBky(int[] countArray) throws Throwable {\n        int count = countArray[2];\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234714,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.Vector;\nimport javax.servlet.http.*;\n\npublic class PzLOfay extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getenv(\"ADD\");\n            if (\n            stringNumber != null) {\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        }\n        Vector<Integer> countVector = new Vector<Integer>(5);\n        countVector.add(0, count);\n        countVector.add(1, count);\n        countVector.add(2, count);\n        (new yQZpYtu()).RYNMBky(countVector);\n    }\n}\n\npublic class yQZpYtu {\n\n    public void RYNMBky(Vector<Integer> countVector) throws Throwable {\n        int count = countVector.remove(2);\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234722,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.HashMap;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class WUjllKe extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getenv(\"ADD\");\n            if (\n            stringNumber != null) {\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        }\n        HashMap<Integer, Integer> countHashMap = new HashMap<Integer, Integer>();\n        countHashMap.put(0, count);\n        countHashMap.put(1, count);\n        countHashMap.put(2, count);\n        (new fzopDdK()).RYNMBky(countHashMap);\n    }\n}\n\npublic class fzopDdK {\n\n    public void RYNMBky(HashMap<Integer, Integer> countHashMap) throws Throwable {\n        int count = countHashMap.get(2);\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234726,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\npublic class BquTFmQ extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (true) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getenv(\"ADD\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (true) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234732,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\npublic class gjqtYwE extends AbstractTestCase {\n\n    \n    private boolean privateTrue = true;\n\n    private boolean privateFalse = false;\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (privateFalse) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (privateTrue) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (privateTrue) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (privateTrue) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (privateTrue) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getenv(\"ADD\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateFalse) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (privateTrue) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getenv(\"ADD\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateTrue) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234739,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\npublic class DlgGKqS extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_TRUE) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getenv(\"ADD\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234746,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\npublic class tRqTMeL extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (IO.staticFalse) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (IO.staticTrue) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (IO.staticTrue) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticTrue) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (IO.staticTrue) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getenv(\"ADD\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticFalse) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (IO.staticTrue) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getenv(\"ADD\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticTrue) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234749,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\npublic class rxZniCz extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_FIVE != 5) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getenv(\"ADD\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_FIVE != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getenv(\"ADD\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234755,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\npublic class aauwtLe extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (IO.staticFive != 5) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (IO.staticFive == 5) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (IO.staticFive == 5) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticFive == 5) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (IO.staticFive == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getenv(\"ADD\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticFive != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (IO.staticFive == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getenv(\"ADD\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticFive == 5) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234757,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class PraeHVX extends AbstractTestCase {\n\n    \n    public static boolean qRMEpGJ = false;\n\n    public void boNMSnT() throws Throwable {\n        int count = 0;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getenv(\"ADD\");\n            if (\n            stringNumber != null) {\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        }\n        qRMEpGJ = true;\n        (new hnNNArb()).RYNMBky(count);\n    }\n\n    \n    public static boolean ydhDOMq = false;\n\n    public static boolean HHhrjCy = false;\n\n    public static boolean Pywwbtz = false;\n}\n\npublic class hnNNArb {\n\n    public void RYNMBky(int count) throws Throwable {\n        if (PraeHVX.qRMEpGJ) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        } else {\n            \n            count = 0;\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234766,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\npublic class ovzJjvx extends AbstractTestCase {\n\n    private void RYNMBky(int count) throws Throwable {\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getenv(\"ADD\");\n            if (\n            stringNumber != null) {\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        }\n        RYNMBky(count);\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234770,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class GUwFNge extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getenv(\"ADD\");\n            if (\n            stringNumber != null) {\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        }\n        (new ceCimNw()).RYNMBky(count);\n    }\n}\n\npublic class ceCimNw {\n\n    public void RYNMBky(int count) throws Throwable {\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234776,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class xgyHsph extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count = (new OCmsSGd()).ImBBndW();\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n}\n\npublic class OCmsSGd {\n\n    public int ImBBndW() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getenv(\"ADD\");\n            if (\n            stringNumber != null) {\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        }\n        return count;\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234784,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class OCmsSGd {\n\n    \n    public int wHnwAlc() throws Throwable {\n        int count;\n        \n        count = 2;\n        return count;\n    }\n\n    \n    public int snawHrb() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getenv(\"ADD\");\n            if (\n            stringNumber != null) {\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        }\n        return count;\n    }\n}\n\npublic class xgyHsph extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count = (new OCmsSGd()).wHnwAlc();\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count = (new OCmsSGd()).snawHrb();\n        \n        if (count > 0 && count <= 20) {\n            File file = new File(\"iPuNjQO\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234785,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.Vector;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class Cmivufy extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getenv(\"ADD\");\n            if (\n            stringNumber != null) {\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        }\n        Vector<Integer> countVector = new Vector<Integer>(5);\n        countVector.add(0, count);\n        countVector.add(1, count);\n        countVector.add(2, count);\n        (new RQaoxOg()).RYNMBky(countVector);\n    }\n}\n\npublic class RQaoxOg {\n\n    public void RYNMBky(Vector<Integer> countVector) throws Throwable {\n        int count = countVector.remove(2);\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234794,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.HashMap;\nimport javax.servlet.http.*;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class mtfHlHX extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getenv(\"ADD\");\n            if (\n            stringNumber != null) {\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        }\n        HashMap<Integer, Integer> countHashMap = new HashMap<Integer, Integer>();\n        countHashMap.put(0, count);\n        countHashMap.put(1, count);\n        countHashMap.put(2, count);\n        (new PKYMnzS()).RYNMBky(countHashMap);\n    }\n}\n\npublic class PKYMnzS {\n\n    public void RYNMBky(HashMap<Integer, Integer> countHashMap) throws Throwable {\n        int count = countHashMap.get(2);\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234798,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class dQsdYfm extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234802,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class oHtgXxJ extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (false) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (true) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (true) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (true) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (true) {\n            count = Integer.MIN_VALUE;\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (false) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (true) {\n            count = Integer.MIN_VALUE;\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (true) {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234805,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class wNxrylg extends AbstractTestCase {\n\n    \n    private static final boolean PRIVATE_STATIC_FINAL_TRUE = true;\n\n    private static final boolean PRIVATE_STATIC_FINAL_FALSE = false;\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            count = Integer.MIN_VALUE;\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234808,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class LRkQgTR extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_TRUE) {\n            count = Integer.MIN_VALUE;\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234818,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class lEqPsQy extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_FIVE != 5) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            count = Integer.MIN_VALUE;\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_FIVE != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            count = Integer.MIN_VALUE;\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234827,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class mnGvXOl extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        switch(6) {\n            case 6:\n                count = Integer.MIN_VALUE;\n                \n                {\n                    File file = new File(\"C:\\\\data.txt\");\n                    FileInputStream streamFileInput = null;\n                    InputStreamReader readerInputStream = null;\n                    BufferedReader readerBuffered = null;\n                    try {\n                        \n                        streamFileInput = new FileInputStream(file);\n                        readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                        readerBuffered = new BufferedReader(readerInputStream);\n                        \n                        \n                        String stringNumber = readerBuffered.readLine();\n                        if (stringNumber != null) \n                        {\n                            try {\n                                count = Integer.parseInt(stringNumber.trim());\n                            } catch (NumberFormatException exceptNumberFormat) {\n                                IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                            }\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                    } finally {\n                        \n                        try {\n                            if (readerBuffered != null) {\n                                readerBuffered.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                        }\n                        try {\n                            if (readerInputStream != null) {\n                                readerInputStream.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                        }\n                        try {\n                            if (streamFileInput != null) {\n                                streamFileInput.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                count = 0;\n                break;\n        }\n        switch(7) {\n            case 7:\n                int i = 0;\n                \n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234830,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class mnGvXOl extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        switch(5) {\n            case 6:\n                \n                count = 0;\n                break;\n            default:\n                \n                count = 2;\n                break;\n        }\n        switch(7) {\n            case 7:\n                int i = 0;\n                \n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        switch(6) {\n            case 6:\n                \n                count = 2;\n                break;\n            default:\n                \n                count = 0;\n                break;\n        }\n        switch(7) {\n            case 7:\n                int i = 0;\n                \n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        switch(6) {\n            case 6:\n                count = Integer.MIN_VALUE;\n                \n                {\n                    File file = new File(\"C:\\\\data.txt\");\n                    FileInputStream streamFileInput = null;\n                    InputStreamReader readerInputStream = null;\n                    BufferedReader readerBuffered = null;\n                    try {\n                        \n                        streamFileInput = new FileInputStream(file);\n                        readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                        readerBuffered = new BufferedReader(readerInputStream);\n                        \n                        \n                        String stringNumber = readerBuffered.readLine();\n                        if (stringNumber != null) \n                        {\n                            try {\n                                count = Integer.parseInt(stringNumber.trim());\n                            } catch (NumberFormatException exceptNumberFormat) {\n                                IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                            }\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                    } finally {\n                        \n                        try {\n                            if (readerBuffered != null) {\n                                readerBuffered.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                        }\n                        try {\n                            if (readerInputStream != null) {\n                                readerInputStream.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                        }\n                        try {\n                            if (streamFileInput != null) {\n                                streamFileInput.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                count = 0;\n                break;\n        }\n        switch(8) {\n            case 7:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n            default:\n                int i = 0;\n                \n                if (count > 0 && count <= 20) {\n                    for (i = 0; i < count; i++) {\n                        IO.writeLine(\"CZGMbWo\");\n                    }\n                }\n                break;\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        switch(6) {\n            case 6:\n                count = Integer.MIN_VALUE;\n                \n                {\n                    File file = new File(\"C:\\\\data.txt\");\n                    FileInputStream streamFileInput = null;\n                    InputStreamReader readerInputStream = null;\n                    BufferedReader readerBuffered = null;\n                    try {\n                        \n                        streamFileInput = new FileInputStream(file);\n                        readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                        readerBuffered = new BufferedReader(readerInputStream);\n                        \n                        \n                        String stringNumber = readerBuffered.readLine();\n                        if (stringNumber != null) \n                        {\n                            try {\n                                count = Integer.parseInt(stringNumber.trim());\n                            } catch (NumberFormatException exceptNumberFormat) {\n                                IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                            }\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                    } finally {\n                        \n                        try {\n                            if (readerBuffered != null) {\n                                readerBuffered.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                        }\n                        try {\n                            if (readerInputStream != null) {\n                                readerInputStream.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                        }\n                        try {\n                            if (streamFileInput != null) {\n                                streamFileInput.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                count = 0;\n                break;\n        }\n        switch(7) {\n            case 7:\n                int i = 0;\n                \n                if (count > 0 && count <= 20) {\n                    for (i = 0; i < count; i++) {\n                        IO.writeLine(\"CZGMbWo\");\n                    }\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234831,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class robTIom extends AbstractTestCase {\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        while (true) {\n            \n            count = 2;\n            break;\n        }\n        while (true) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n            break;\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        while (true) {\n            count = Integer.MIN_VALUE;\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n            break;\n        }\n        while (true) {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n            break;\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234833,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class yQBGshe extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int countCopy;\n        {\n            int count;\n            count = Integer.MIN_VALUE;\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n            countCopy = count;\n        }\n        {\n            int count = countCopy;\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234840,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class ZoBWLeD extends AbstractTestCase {\n\n    private void RYNMBky(int count) throws Throwable {\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        RYNMBky(count);\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234842,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class oHybIAX extends AbstractTestCase {\n\n    \n    private int wHnwAlc() throws Throwable {\n        int count;\n        \n        count = 2;\n        return count;\n    }\n\n    private void EXrOlJC() throws Throwable {\n        int count = wHnwAlc();\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n\n    \n    private int snawHrb() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        return count;\n    }\n\n    private void NDSwpcn() throws Throwable {\n        int count = snawHrb();\n        int i = 0;\n        \n        if (count > 0 && count <= 20) {\n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234845,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class rOrhNJx extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        (new WQpvIDC()).RYNMBky(count);\n    }\n}\n\npublic class lllVdxT {\n\n    public void RYNMBky(int count) throws Throwable {\n        (new UZYjqAT()).RYNMBky(count);\n    }\n}\n\npublic class WQpvIDC {\n\n    public void RYNMBky(int count) throws Throwable {\n        (new lllVdxT()).RYNMBky(count);\n    }\n}\n\npublic class UZYjqAT {\n\n    public void RYNMBky(int count) throws Throwable {\n        (new EidzcQC()).RYNMBky(count);\n    }\n}\n\npublic class EidzcQC {\n\n    public void RYNMBky(int count) throws Throwable {\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234854,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class XtlrLaj extends AbstractTestCase {\n\n    public static int count;\n\n    public void boNMSnT() throws Throwable {\n        count = Integer.MIN_VALUE;\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        (new jMFPHBF()).RYNMBky();\n    }\n}\n\npublic class jMFPHBF {\n\n    public void RYNMBky() throws Throwable {\n        int count = XtlrLaj.count;\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234862,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.Vector;\nimport javax.servlet.http.*;\n\npublic class Dastcsz extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        Vector<Integer> countVector = new Vector<Integer>(5);\n        countVector.add(0, count);\n        countVector.add(1, count);\n        countVector.add(2, count);\n        (new qIFCroI()).RYNMBky(countVector);\n    }\n}\n\npublic class qIFCroI {\n\n    public void RYNMBky(Vector<Integer> countVector) throws Throwable {\n        int count = countVector.remove(2);\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234866,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.HashMap;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class hBRCqKH {\n\n    \n    public void fDqjRYE(HashMap<Integer, Integer> countHashMap) throws Throwable {\n        int count = countHashMap.get(2);\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n\n    \n    public void KgJSeXB(HashMap<Integer, Integer> countHashMap) throws Throwable {\n        int count = countHashMap.get(2);\n        int i = 0;\n        \n        if (count > 0 && count <= 20) {\n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n\npublic class TQoyNyG extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        HashMap<Integer, Integer> countHashMap = new HashMap<Integer, Integer>();\n        countHashMap.put(0, count);\n        countHashMap.put(1, count);\n        countHashMap.put(2, count);\n        (new hBRCqKH()).fDqjRYE(countHashMap);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        HashMap<Integer, Integer> countHashMap = new HashMap<Integer, Integer>();\n        countHashMap.put(0, count);\n        countHashMap.put(1, count);\n        countHashMap.put(2, count);\n        (new hBRCqKH()).KgJSeXB(countHashMap);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234871,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.io.ByteArrayInputStream;\nimport java.io.ObjectInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.servlet.http.*;\n\npublic class bQDRQVC extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        \n        ByteArrayOutputStream streamByteArrayOutput = null;\n        ObjectOutput outputObject = null;\n        try {\n            streamByteArrayOutput = new ByteArrayOutputStream();\n            outputObject = new ObjectOutputStream(streamByteArrayOutput);\n            outputObject.writeObject(count);\n            byte[] countSerialized = streamByteArrayOutput.toByteArray();\n            (new MTBwQnh()).RYNMBky(countSerialized);\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"IQdccST\", exceptIO);\n        } finally {\n            \n            try {\n                if (outputObject != null) {\n                    outputObject.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"LgADWEx\", exceptIO);\n            }\n            try {\n                if (streamByteArrayOutput != null) {\n                    streamByteArrayOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"vFutZps\", exceptIO);\n            }\n        }\n    }\n}\n\npublic class MTBwQnh {\n\n    public void RYNMBky(byte[] countSerialized) throws Throwable {\n        \n        ByteArrayInputStream streamByteArrayInput = null;\n        ObjectInputStream streamObjectInput = null;\n        try {\n            streamByteArrayInput = new ByteArrayInputStream(countSerialized);\n            streamObjectInput = new ObjectInputStream(streamByteArrayInput);\n            int count = (Integer) streamObjectInput.readObject();\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VcFIKxo\", exceptIO);\n        } catch (ClassNotFoundException exceptClassNotFound) {\n            IO.logger.log(Level.WARNING, \"XOCCPfT\", exceptClassNotFound);\n        } finally {\n            \n            try {\n                if (streamObjectInput != null) {\n                    streamObjectInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"kpDMUXH\", exceptIO);\n            }\n            try {\n                if (streamByteArrayInput != null) {\n                    streamByteArrayInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"oiWyzFb\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234872,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class qDSNijo extends AbstractTestCase {\n\n    \n    private static final boolean PRIVATE_STATIC_FINAL_TRUE = true;\n\n    private static final boolean PRIVATE_STATIC_FINAL_FALSE = false;\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_FALSE) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            count = Integer.MIN_VALUE;\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (PRIVATE_STATIC_FINAL_FALSE) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            count = Integer.MIN_VALUE;\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234881,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class rlxIYeZ extends AbstractTestCase {\n\n    \n    private boolean privateTrue = true;\n\n    private boolean privateFalse = false;\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (privateTrue) {\n            count = Integer.MIN_VALUE;\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateTrue) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234882,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class EDVpJTu extends AbstractTestCase {\n\n    \n    private static final int PRIVATE_STATIC_FINAL_FIVE = 5;\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            count = Integer.MIN_VALUE;\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234884,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class TFZCYOg extends AbstractTestCase {\n\n    \n    private int privateFive = 5;\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (privateFive != 5) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (privateFive == 5) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (privateFive == 5) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (privateFive == 5) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (privateFive == 5) {\n            count = Integer.MIN_VALUE;\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateFive != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (privateFive == 5) {\n            count = Integer.MIN_VALUE;\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateFive == 5) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234887,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class Dsetwrl extends AbstractTestCase {\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        if (IO.staticReturnsTrueOrFalse()) {\n            \n            count = 2;\n        } else {\n            \n            count = 2;\n        }\n        if (IO.staticReturnsTrueOrFalse()) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        } else {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        if (IO.staticReturnsTrueOrFalse()) {\n            count = Integer.MIN_VALUE;\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            count = Integer.MIN_VALUE;\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        }\n        if (IO.staticReturnsTrueOrFalse()) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        } else {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234897,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class IzivbGW extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_FIVE != 5) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            count = Integer.MIN_VALUE;\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_FIVE != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            count = Integer.MIN_VALUE;\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234899,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class GorfBuN extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (IO.staticFive == 5) {\n            count = Integer.MIN_VALUE;\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticFive == 5) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234900,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class GorfBuN extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (IO.staticFive != 5) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (IO.staticFive == 5) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (IO.staticFive == 5) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticFive == 5) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (IO.staticFive == 5) {\n            count = Integer.MIN_VALUE;\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticFive != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (IO.staticFive == 5) {\n            count = Integer.MIN_VALUE;\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticFive == 5) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234901,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class LfZuQij extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        switch(6) {\n            case 6:\n                count = Integer.MIN_VALUE;\n                \n                {\n                    File file = new File(\"C:\\\\data.txt\");\n                    FileInputStream streamFileInput = null;\n                    InputStreamReader readerInputStream = null;\n                    BufferedReader readerBuffered = null;\n                    try {\n                        \n                        streamFileInput = new FileInputStream(file);\n                        readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                        readerBuffered = new BufferedReader(readerInputStream);\n                        \n                        \n                        String stringNumber = readerBuffered.readLine();\n                        if (stringNumber != null) \n                        {\n                            try {\n                                count = Integer.parseInt(stringNumber.trim());\n                            } catch (NumberFormatException exceptNumberFormat) {\n                                IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                            }\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                    } finally {\n                        \n                        try {\n                            if (readerBuffered != null) {\n                                readerBuffered.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                        }\n                        try {\n                            if (readerInputStream != null) {\n                                readerInputStream.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                        }\n                        try {\n                            if (streamFileInput != null) {\n                                streamFileInput.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                count = 0;\n                break;\n        }\n        switch(7) {\n            case 7:\n                File file = new File(\"UIqDuhP\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                \n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234902,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class djJnLGa extends AbstractTestCase {\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        while (true) {\n            \n            count = 2;\n            break;\n        }\n        while (true) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n            break;\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        while (true) {\n            count = Integer.MIN_VALUE;\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n            break;\n        }\n        while (true) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n            break;\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234905,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class kbGBgOX extends AbstractTestCase {\n\n    \n    private boolean dWmGbZa = false;\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        dWmGbZa = true;\n        RYNMBky(count);\n    }\n\n    private void RYNMBky(int count) throws Throwable {\n        if (dWmGbZa) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private boolean aRnSMVj = false;\n\n    private boolean aOWZSGn = false;\n\n    private boolean DBbhdbc = false;\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234908,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class YhKQsfV extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int countCopy;\n        {\n            int count;\n            count = Integer.MIN_VALUE;\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n            countCopy = count;\n        }\n        {\n            int count = countCopy;\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234912,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class wuPLIJa extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        (new mQXnBEy()).RYNMBky(count);\n    }\n}\n\npublic class EgNuyHX {\n\n    public void RYNMBky(int count) throws Throwable {\n        (new SGHqkEj()).RYNMBky(count);\n    }\n}\n\npublic class mQXnBEy {\n\n    public void RYNMBky(int count) throws Throwable {\n        (new EgNuyHX()).RYNMBky(count);\n    }\n}\n\npublic class NXiQLWO {\n\n    public void RYNMBky(int count) throws Throwable {\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n}\n\npublic class SGHqkEj {\n\n    public void RYNMBky(int count) throws Throwable {\n        (new NXiQLWO()).RYNMBky(count);\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234926,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class YkExfEb extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        int[] countArray = new int[5];\n        countArray[2] = count;\n        (new WqxZatw()).RYNMBky(countArray);\n    }\n}\n\npublic class WqxZatw {\n\n    public void RYNMBky(int[] countArray) throws Throwable {\n        int count = countArray[2];\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234930,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class NfaMiUy extends AbstractTestCase {\n\n    static class Container {\n\n        public int containerOne;\n    }\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        Container countContainer = new Container();\n        countContainer.containerOne = count;\n        (new SUtFtay()).RYNMBky(countContainer);\n    }\n}\n\npublic class SUtFtay {\n\n    public void RYNMBky(NfaMiUy.Container countContainer) throws Throwable {\n        int count = countContainer.containerOne;\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234932,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class pJMiexX extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        (new iZXfOcX()).RYNMBky((Object) count);\n    }\n}\n\npublic class iZXfOcX {\n\n    public void RYNMBky(Object countObject) throws Throwable {\n        int count = (Integer) countObject;\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234936,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class Ynoijin extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                String stringNumber = properties.getProperty(\"data\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        int i = 0;\n        \n        if (count > 0 && count <= 20) {\n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234947,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class VcFkqmi extends AbstractTestCase {\n\n    \n    private boolean privateTrue = true;\n\n    private boolean privateFalse = false;\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (privateTrue) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    String stringNumber = properties.getProperty(\"data\");\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateTrue) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234954,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class VcFkqmi extends AbstractTestCase {\n\n    \n    private boolean privateTrue = true;\n\n    private boolean privateFalse = false;\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (privateFalse) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (privateTrue) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (privateTrue) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (privateTrue) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (privateTrue) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    String stringNumber = properties.getProperty(\"data\");\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateFalse) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (privateTrue) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    String stringNumber = properties.getProperty(\"data\");\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateTrue) {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234955,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class lSAtOtE extends AbstractTestCase {\n\n    \n    private static final int PRIVATE_STATIC_FINAL_FIVE = 5;\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    String stringNumber = properties.getProperty(\"data\");\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234956,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class VdBFRFG extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_TRUE) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    String stringNumber = properties.getProperty(\"data\");\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234962,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class VdBFRFG extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_FALSE) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_TRUE) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_TRUE) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    String stringNumber = properties.getProperty(\"data\");\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_FALSE) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_TRUE) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    String stringNumber = properties.getProperty(\"data\");\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234963,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class NygTrau extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (IO.staticReturnsFalse()) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (IO.staticReturnsTrue()) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (IO.staticReturnsTrue()) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticReturnsTrue()) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (IO.staticReturnsTrue()) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    String stringNumber = properties.getProperty(\"data\");\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticReturnsFalse()) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (IO.staticReturnsTrue()) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    String stringNumber = properties.getProperty(\"data\");\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticReturnsTrue()) {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234967,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class HzUFSMz extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (IO.staticReturnsTrueOrFalse()) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    String stringNumber = properties.getProperty(\"data\");\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 2;\n        }\n        if (IO.staticReturnsTrueOrFalse()) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        } else {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234968,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class YzkeOPl extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        switch(5) {\n            case 6:\n                \n                count = 0;\n                break;\n            default:\n                \n                count = 2;\n                break;\n        }\n        switch(7) {\n            case 7:\n                int i = 0;\n                \n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        switch(6) {\n            case 6:\n                \n                count = 2;\n                break;\n            default:\n                \n                count = 0;\n                break;\n        }\n        switch(7) {\n            case 7:\n                int i = 0;\n                \n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        switch(6) {\n            case 6:\n                count = Integer.MIN_VALUE;\n                \n                \n                {\n                    Properties properties = new Properties();\n                    FileInputStream streamFileInput = null;\n                    try {\n                        streamFileInput = new FileInputStream(\"../common/config.properties\");\n                        properties.load(streamFileInput);\n                        \n                        String stringNumber = properties.getProperty(\"data\");\n                        if (\n                        stringNumber != null) {\n                            try {\n                                count = Integer.parseInt(stringNumber.trim());\n                            } catch (NumberFormatException exceptNumberFormat) {\n                                IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                            }\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                    } finally {\n                        \n                        try {\n                            if (streamFileInput != null) {\n                                streamFileInput.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                count = 0;\n                break;\n        }\n        switch(8) {\n            case 7:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n            default:\n                int i = 0;\n                \n                if (count > 0 && count <= 20) {\n                    for (i = 0; i < count; i++) {\n                        IO.writeLine(\"CZGMbWo\");\n                    }\n                }\n                break;\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        switch(6) {\n            case 6:\n                count = Integer.MIN_VALUE;\n                \n                \n                {\n                    Properties properties = new Properties();\n                    FileInputStream streamFileInput = null;\n                    try {\n                        streamFileInput = new FileInputStream(\"../common/config.properties\");\n                        properties.load(streamFileInput);\n                        \n                        String stringNumber = properties.getProperty(\"data\");\n                        if (\n                        stringNumber != null) {\n                            try {\n                                count = Integer.parseInt(stringNumber.trim());\n                            } catch (NumberFormatException exceptNumberFormat) {\n                                IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                            }\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                    } finally {\n                        \n                        try {\n                            if (streamFileInput != null) {\n                                streamFileInput.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                count = 0;\n                break;\n        }\n        switch(7) {\n            case 7:\n                int i = 0;\n                \n                if (count > 0 && count <= 20) {\n                    for (i = 0; i < count; i++) {\n                        IO.writeLine(\"CZGMbWo\");\n                    }\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234975,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class tmVPYAM extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    private void fDqjRYE(int count) throws Throwable {\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        fDqjRYE(count);\n    }\n\n    private void KgJSeXB(int count) throws Throwable {\n        int i = 0;\n        \n        if (count > 0 && count <= 20) {\n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                String stringNumber = properties.getProperty(\"data\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        KgJSeXB(count);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234987,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class TcgDYby extends AbstractTestCase {\n\n    \n    private int wHnwAlc() throws Throwable {\n        int count;\n        \n        count = 2;\n        return count;\n    }\n\n    private void EXrOlJC() throws Throwable {\n        int count = wHnwAlc();\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n\n    \n    private int snawHrb() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                String stringNumber = properties.getProperty(\"data\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        return count;\n    }\n\n    private void NDSwpcn() throws Throwable {\n        int count = snawHrb();\n        int i = 0;\n        \n        if (count > 0 && count <= 20) {\n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234989,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class fqxplZU extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                String stringNumber = properties.getProperty(\"data\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        (new UPDpdsY()).RYNMBky(count);\n    }\n}\n\npublic class DLTBHiS {\n\n    public void RYNMBky(int count) throws Throwable {\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n}\n\npublic class UPDpdsY {\n\n    public void RYNMBky(int count) throws Throwable {\n        (new DLTBHiS()).RYNMBky(count);\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234994,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class DLTBHiS {\n\n    \n    public void fDqjRYE(int count) throws Throwable {\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n\n    \n    public void KgJSeXB(int count) throws Throwable {\n        int i = 0;\n        \n        if (count > 0 && count <= 20) {\n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n\npublic class UPDpdsY {\n\n    \n    public void fDqjRYE(int count) throws Throwable {\n        (new DLTBHiS()).fDqjRYE(count);\n    }\n\n    \n    public void KgJSeXB(int count) throws Throwable {\n        (new DLTBHiS()).KgJSeXB(count);\n    }\n}\n\npublic class fqxplZU extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        (new UPDpdsY()).fDqjRYE(count);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                String stringNumber = properties.getProperty(\"data\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        (new UPDpdsY()).KgJSeXB(count);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234995,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class mKMOWDG extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count = (new yAzxXTf()).ImBBndW();\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n}\n\npublic class yAzxXTf {\n\n    public int ImBBndW() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                String stringNumber = properties.getProperty(\"data\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        return count;\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235000,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class MeqqoVQ {\n\n    \n    public void fDqjRYE() throws Throwable {\n        int count = JugSAVM.count;\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n\n    \n    public void KgJSeXB() throws Throwable {\n        int count = JugSAVM.count;\n        int i = 0;\n        \n        if (count > 0 && count <= 20) {\n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n\npublic class JugSAVM extends AbstractTestCase {\n\n    public static int count;\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        \n        count = 2;\n        (new MeqqoVQ()).fDqjRYE();\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                String stringNumber = properties.getProperty(\"data\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        (new MeqqoVQ()).KgJSeXB();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235007,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class mJhEHRg extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (false) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (true) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (true) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (true) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (true) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    String stringNumber = properties.getProperty(\"data\");\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (false) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (true) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    String stringNumber = properties.getProperty(\"data\");\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (true) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235021,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class MWXcyNU extends AbstractTestCase {\n\n    \n    private boolean privateTrue = true;\n\n    private boolean privateFalse = false;\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (privateTrue) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    String stringNumber = properties.getProperty(\"data\");\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateTrue) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235026,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class GywNKqt extends AbstractTestCase {\n\n    \n    private int privateFive = 5;\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (privateFive == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    String stringNumber = properties.getProperty(\"data\");\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateFive == 5) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235030,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class GywNKqt extends AbstractTestCase {\n\n    \n    private int privateFive = 5;\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (privateFive != 5) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (privateFive == 5) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (privateFive == 5) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (privateFive == 5) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (privateFive == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    String stringNumber = properties.getProperty(\"data\");\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateFive != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (privateFive == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    String stringNumber = properties.getProperty(\"data\");\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateFive == 5) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235031,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class YjtVlhU extends AbstractTestCase {\n\n    \n    private boolean privateReturnsTrue() {\n        return true;\n    }\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (privateReturnsTrue()) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    String stringNumber = properties.getProperty(\"data\");\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateReturnsTrue()) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235032,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class YjtVlhU extends AbstractTestCase {\n\n    \n    private boolean privateReturnsTrue() {\n        return true;\n    }\n\n    private boolean privateReturnsFalse() {\n        return false;\n    }\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (privateReturnsFalse()) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (privateReturnsTrue()) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (privateReturnsTrue()) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (privateReturnsTrue()) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (privateReturnsTrue()) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    String stringNumber = properties.getProperty(\"data\");\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateReturnsFalse()) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (privateReturnsTrue()) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    String stringNumber = properties.getProperty(\"data\");\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateReturnsTrue()) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235033,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class zliPmsN extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_TRUE) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    String stringNumber = properties.getProperty(\"data\");\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235034,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class XBRsRGt extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (IO.staticFalse) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (IO.staticTrue) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (IO.staticTrue) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticTrue) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (IO.staticTrue) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    String stringNumber = properties.getProperty(\"data\");\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticFalse) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (IO.staticTrue) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    String stringNumber = properties.getProperty(\"data\");\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticTrue) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235037,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class kbZqYIN extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (IO.staticReturnsTrue()) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    String stringNumber = properties.getProperty(\"data\");\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticReturnsTrue()) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235038,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class kbZqYIN extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (IO.staticReturnsFalse()) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (IO.staticReturnsTrue()) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (IO.staticReturnsTrue()) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticReturnsTrue()) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (IO.staticReturnsTrue()) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    String stringNumber = properties.getProperty(\"data\");\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticReturnsFalse()) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (IO.staticReturnsTrue()) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    String stringNumber = properties.getProperty(\"data\");\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticReturnsTrue()) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235039,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class gydzziE extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    String stringNumber = properties.getProperty(\"data\");\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235042,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class DWWRyhZ extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        \n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                String stringNumber = properties.getProperty(\"data\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        for (int j = 0; j < 1; j++) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235050,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class dDPVFMZ extends AbstractTestCase {\n\n    \n    private boolean dWmGbZa = false;\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                String stringNumber = properties.getProperty(\"data\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        dWmGbZa = true;\n        RYNMBky(count);\n    }\n\n    private void RYNMBky(int count) throws Throwable {\n        if (dWmGbZa) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private boolean aRnSMVj = false;\n\n    private boolean aOWZSGn = false;\n\n    private boolean DBbhdbc = false;\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235052,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class dDPVFMZ extends AbstractTestCase {\n\n    \n    private boolean dWmGbZa = false;\n\n    \n    private boolean aRnSMVj = false;\n\n    private boolean aOWZSGn = false;\n\n    private boolean DBbhdbc = false;\n\n    public void JttWLtS() throws Throwable {\n        uytpYbp();\n        OQsEKDS();\n        EXrOlJC();\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                String stringNumber = properties.getProperty(\"data\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        aRnSMVj = false;\n        ZpnQtvQ(count);\n    }\n\n    private void ZpnQtvQ(int count) throws Throwable {\n        if (aRnSMVj) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                String stringNumber = properties.getProperty(\"data\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        aOWZSGn = true;\n        VmywRrZ(count);\n    }\n\n    private void VmywRrZ(int count) throws Throwable {\n        if (aOWZSGn) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        DBbhdbc = true;\n        fDqjRYE(count);\n    }\n\n    private void fDqjRYE(int count) throws Throwable {\n        if (DBbhdbc) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235053,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class KHSsuGS extends AbstractTestCase {\n\n    \n    private int wHnwAlc() throws Throwable {\n        int count;\n        \n        count = 2;\n        return count;\n    }\n\n    private void EXrOlJC() throws Throwable {\n        int count = wHnwAlc();\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n\n    \n    private int snawHrb() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                String stringNumber = properties.getProperty(\"data\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        return count;\n    }\n\n    private void NDSwpcn() throws Throwable {\n        int count = snawHrb();\n        \n        if (count > 0 && count <= 20) {\n            File file = new File(\"iPuNjQO\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235061,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class CSpTapY extends AbstractTestCase {\n\n    private int jfXyhIP;\n\n    private int buDVqtm;\n\n    private int QsuyNlG;\n\n    private void RYNMBky() throws Throwable {\n        int count = jfXyhIP;\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                String stringNumber = properties.getProperty(\"data\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        jfXyhIP = count;\n        RYNMBky();\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235062,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class enWguOJ extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                String stringNumber = properties.getProperty(\"data\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        int[] countArray = new int[5];\n        countArray[2] = count;\n        (new FcmvwyP()).RYNMBky(countArray);\n    }\n}\n\npublic class FcmvwyP {\n\n    public void RYNMBky(int[] countArray) throws Throwable {\n        int count = countArray[2];\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235074,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.LinkedList;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class sMcsloT extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                String stringNumber = properties.getProperty(\"data\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        LinkedList<Integer> countLinkedList = new LinkedList<Integer>();\n        countLinkedList.add(0, count);\n        countLinkedList.add(1, count);\n        countLinkedList.add(2, count);\n        (new QwGAYcM()).RYNMBky(countLinkedList);\n    }\n}\n\npublic class QwGAYcM {\n\n    public void RYNMBky(LinkedList<Integer> countLinkedList) throws Throwable {\n        int count = countLinkedList.remove(2);\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235084,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.HashMap;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class tehfUmE extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                String stringNumber = properties.getProperty(\"data\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        HashMap<Integer, Integer> countHashMap = new HashMap<Integer, Integer>();\n        countHashMap.put(0, count);\n        countHashMap.put(1, count);\n        countHashMap.put(2, count);\n        (new bzPUNIk()).RYNMBky(countHashMap);\n    }\n}\n\npublic class bzPUNIk {\n\n    public void RYNMBky(HashMap<Integer, Integer> countHashMap) throws Throwable {\n        int count = countHashMap.get(2);\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235086,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class cDDGhoZ extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (5 == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getProperty(\"user.home\");\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (5 == 5) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235094,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class cDDGhoZ extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (5 != 5) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (5 == 5) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (5 == 5) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (5 == 5) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (5 == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getProperty(\"user.home\");\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (5 != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (5 == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getProperty(\"user.home\");\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (5 == 5) {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235095,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class pwZakbg extends AbstractTestCase {\n\n    \n    private static final int PRIVATE_STATIC_FINAL_FIVE = 5;\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_FIVE != 5) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getProperty(\"user.home\");\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getProperty(\"user.home\");\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235101,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class ecEwmJp extends AbstractTestCase {\n\n    \n    private int privateFive = 5;\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (privateFive != 5) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (privateFive == 5) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (privateFive == 5) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (privateFive == 5) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (privateFive == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getProperty(\"user.home\");\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateFive != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (privateFive == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getProperty(\"user.home\");\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateFive == 5) {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235103,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class hdDjtGp extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (IO.staticReturnsTrue()) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getProperty(\"user.home\");\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticReturnsTrue()) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235110,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class RXSGCEI extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (IO.staticReturnsTrueOrFalse()) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getProperty(\"user.home\");\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        } else {\n            \n            count = 2;\n        }\n        if (IO.staticReturnsTrueOrFalse()) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        } else {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235112,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class pCWREXi extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        while (true) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getProperty(\"user.home\");\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n            break;\n        }\n        while (true) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n            break;\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235120,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class IKiOPcZ extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        \n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getProperty(\"user.home\");\n            try {\n                count = Integer.parseInt(stringNumber.trim());\n            } catch (NumberFormatException exceptNumberFormat) {\n                IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n            }\n        }\n        for (int j = 0; j < 1; j++) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235122,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class pcNxmVa extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int countCopy;\n        {\n            int count;\n            \n            count = 2;\n            countCopy = count;\n        }\n        {\n            int count = countCopy;\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int countCopy;\n        {\n            int count;\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getProperty(\"user.home\");\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n            countCopy = count;\n        }\n        {\n            int count = countCopy;\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235129,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class lIZTmYR extends AbstractTestCase {\n\n    private int jfXyhIP;\n\n    private int buDVqtm;\n\n    private int QsuyNlG;\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    private void fDqjRYE() throws Throwable {\n        int count = buDVqtm;\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        buDVqtm = count;\n        fDqjRYE();\n    }\n\n    private void KgJSeXB() throws Throwable {\n        int count = QsuyNlG;\n        int i = 0;\n        \n        if (count > 0 && count <= 20) {\n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getProperty(\"user.home\");\n            try {\n                count = Integer.parseInt(stringNumber.trim());\n            } catch (NumberFormatException exceptNumberFormat) {\n                IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n            }\n        }\n        QsuyNlG = count;\n        KgJSeXB();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235135,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class QOamuuC extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getProperty(\"user.home\");\n            try {\n                count = Integer.parseInt(stringNumber.trim());\n            } catch (NumberFormatException exceptNumberFormat) {\n                IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n            }\n        }\n        (new fbMDNUW()).RYNMBky(count);\n    }\n}\n\npublic class fbMDNUW {\n\n    public void RYNMBky(int count) throws Throwable {\n        (new maaxZtv()).RYNMBky(count);\n    }\n}\n\npublic class dsmhIQb {\n\n    public void RYNMBky(int count) throws Throwable {\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n}\n\npublic class maaxZtv {\n\n    public void RYNMBky(int count) throws Throwable {\n        (new dsmhIQb()).RYNMBky(count);\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235140,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class jNmymxm extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count = (new lXEFUai()).ImBBndW();\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n}\n\npublic class lXEFUai {\n\n    public int ImBBndW() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getProperty(\"user.home\");\n            try {\n                count = Integer.parseInt(stringNumber.trim());\n            } catch (NumberFormatException exceptNumberFormat) {\n                IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n            }\n        }\n        return count;\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235144,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.io.ByteArrayInputStream;\nimport java.io.ObjectInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.servlet.http.*;\n\npublic class HxZLwjs extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getProperty(\"user.home\");\n            try {\n                count = Integer.parseInt(stringNumber.trim());\n            } catch (NumberFormatException exceptNumberFormat) {\n                IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n            }\n        }\n        \n        ByteArrayOutputStream streamByteArrayOutput = null;\n        ObjectOutput outputObject = null;\n        try {\n            streamByteArrayOutput = new ByteArrayOutputStream();\n            outputObject = new ObjectOutputStream(streamByteArrayOutput);\n            outputObject.writeObject(count);\n            byte[] countSerialized = streamByteArrayOutput.toByteArray();\n            (new TRRhVTh()).RYNMBky(countSerialized);\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"IQdccST\", exceptIO);\n        } finally {\n            \n            try {\n                if (outputObject != null) {\n                    outputObject.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"LgADWEx\", exceptIO);\n            }\n            try {\n                if (streamByteArrayOutput != null) {\n                    streamByteArrayOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"vFutZps\", exceptIO);\n            }\n        }\n    }\n}\n\npublic class TRRhVTh {\n\n    public void RYNMBky(byte[] countSerialized) throws Throwable {\n        \n        ByteArrayInputStream streamByteArrayInput = null;\n        ObjectInputStream streamObjectInput = null;\n        try {\n            streamByteArrayInput = new ByteArrayInputStream(countSerialized);\n            streamObjectInput = new ObjectInputStream(streamByteArrayInput);\n            int count = (Integer) streamObjectInput.readObject();\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VcFIKxo\", exceptIO);\n        } catch (ClassNotFoundException exceptClassNotFound) {\n            IO.logger.log(Level.WARNING, \"XOCCPfT\", exceptClassNotFound);\n        } finally {\n            \n            try {\n                if (streamObjectInput != null) {\n                    streamObjectInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"kpDMUXH\", exceptIO);\n            }\n            try {\n                if (streamByteArrayInput != null) {\n                    streamByteArrayInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"oiWyzFb\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235160,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\npublic class zgmbJas extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getProperty(\"user.home\");\n            try {\n                count = Integer.parseInt(stringNumber.trim());\n            } catch (NumberFormatException exceptNumberFormat) {\n                IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n            }\n        }\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235162,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\npublic class zgmbJas extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getProperty(\"user.home\");\n            try {\n                count = Integer.parseInt(stringNumber.trim());\n            } catch (NumberFormatException exceptNumberFormat) {\n                IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n            }\n        }\n        \n        if (count > 0 && count <= 20) {\n            File file = new File(\"iPuNjQO\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235163,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\npublic class gQoXdeg extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (false) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (true) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (true) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (true) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (true) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getProperty(\"user.home\");\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (false) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (true) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getProperty(\"user.home\");\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (true) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235165,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\npublic class UwDUNor extends AbstractTestCase {\n\n    \n    private static final boolean PRIVATE_STATIC_FINAL_TRUE = true;\n\n    private static final boolean PRIVATE_STATIC_FINAL_FALSE = false;\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_FALSE) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getProperty(\"user.home\");\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (PRIVATE_STATIC_FINAL_FALSE) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getProperty(\"user.home\");\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235169,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\npublic class PFMvkmk extends AbstractTestCase {\n\n    \n    private int privateFive = 5;\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (privateFive != 5) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (privateFive == 5) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (privateFive == 5) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (privateFive == 5) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (privateFive == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getProperty(\"user.home\");\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateFive != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (privateFive == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getProperty(\"user.home\");\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateFive == 5) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235175,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\npublic class UxYmEZs extends AbstractTestCase {\n\n    \n    private boolean privateReturnsTrue() {\n        return true;\n    }\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (privateReturnsTrue()) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getProperty(\"user.home\");\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateReturnsTrue()) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235176,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\npublic class DzhFWTa extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_TRUE) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getProperty(\"user.home\");\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235178,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\npublic class DzhFWTa extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_FALSE) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_TRUE) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_TRUE) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getProperty(\"user.home\");\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_FALSE) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_TRUE) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getProperty(\"user.home\");\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235179,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\npublic class LuQqZOl extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (IO.staticTrue) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getProperty(\"user.home\");\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticTrue) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235180,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\npublic class djrCZUc extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (IO.staticReturnsFalse()) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (IO.staticReturnsTrue()) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (IO.staticReturnsTrue()) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticReturnsTrue()) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (IO.staticReturnsTrue()) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getProperty(\"user.home\");\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticReturnsFalse()) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (IO.staticReturnsTrue()) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getProperty(\"user.home\");\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticReturnsTrue()) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235183,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\npublic class mVddroi extends AbstractTestCase {\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        if (IO.staticReturnsTrueOrFalse()) {\n            \n            count = 2;\n        } else {\n            \n            count = 2;\n        }\n        if (IO.staticReturnsTrueOrFalse()) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        } else {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        if (IO.staticReturnsTrueOrFalse()) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getProperty(\"user.home\");\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        } else {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getProperty(\"user.home\");\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        }\n        if (IO.staticReturnsTrueOrFalse()) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        } else {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235185,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\npublic class MiKCsih extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        switch(6) {\n            case 6:\n                count = Integer.MIN_VALUE;\n                \n                \n                \n                {\n                    String stringNumber = System.getProperty(\"user.home\");\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n                break;\n            default:\n                \n                count = 0;\n                break;\n        }\n        switch(7) {\n            case 7:\n                File file = new File(\"UIqDuhP\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                \n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235190,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\npublic class MiKCsih extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        switch(5) {\n            case 6:\n                \n                count = 0;\n                break;\n            default:\n                \n                count = 2;\n                break;\n        }\n        switch(7) {\n            case 7:\n                File file = new File(\"UIqDuhP\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                \n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        switch(6) {\n            case 6:\n                \n                count = 2;\n                break;\n            default:\n                \n                count = 0;\n                break;\n        }\n        switch(7) {\n            case 7:\n                File file = new File(\"UIqDuhP\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                \n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        switch(6) {\n            case 6:\n                count = Integer.MIN_VALUE;\n                \n                \n                \n                {\n                    String stringNumber = System.getProperty(\"user.home\");\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n                break;\n            default:\n                \n                count = 0;\n                break;\n        }\n        switch(8) {\n            case 7:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n            default:\n                \n                if (count > 0 && count <= 20) {\n                    File file = new File(\"iPuNjQO\");\n                    FileOutputStream streamFileOutput = new FileOutputStream(file);\n                    OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                    BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                    int i;\n                    for (i = 0; i < count; i++) {\n                        try {\n                            writerBuffered.write(\"CZGMbWo\");\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                        }\n                    }\n                    \n                    try {\n                        if (writerBuffered != null) {\n                            writerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                    }\n                    try {\n                        if (writerOutputStream != null) {\n                            writerOutputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                    }\n                    try {\n                        if (streamFileOutput != null) {\n                            streamFileOutput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                    }\n                }\n                break;\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        switch(6) {\n            case 6:\n                count = Integer.MIN_VALUE;\n                \n                \n                \n                {\n                    String stringNumber = System.getProperty(\"user.home\");\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n                break;\n            default:\n                \n                count = 0;\n                break;\n        }\n        switch(7) {\n            case 7:\n                \n                if (count > 0 && count <= 20) {\n                    File file = new File(\"iPuNjQO\");\n                    FileOutputStream streamFileOutput = new FileOutputStream(file);\n                    OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                    BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                    int i;\n                    for (i = 0; i < count; i++) {\n                        try {\n                            writerBuffered.write(\"CZGMbWo\");\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                        }\n                    }\n                    \n                    try {\n                        if (writerBuffered != null) {\n                            writerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                    }\n                    try {\n                        if (writerOutputStream != null) {\n                            writerOutputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                    }\n                    try {\n                        if (streamFileOutput != null) {\n                            streamFileOutput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                    }\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235191,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\npublic class ydOvXRL extends AbstractTestCase {\n\n    \n    private boolean dWmGbZa = false;\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getProperty(\"user.home\");\n            try {\n                count = Integer.parseInt(stringNumber.trim());\n            } catch (NumberFormatException exceptNumberFormat) {\n                IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n            }\n        }\n        dWmGbZa = true;\n        RYNMBky(count);\n    }\n\n    private void RYNMBky(int count) throws Throwable {\n        if (dWmGbZa) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private boolean aRnSMVj = false;\n\n    private boolean aOWZSGn = false;\n\n    private boolean DBbhdbc = false;\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235196,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\npublic class sgzmFMy extends AbstractTestCase {\n\n    private int ImBBndW() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getProperty(\"user.home\");\n            try {\n                count = Integer.parseInt(stringNumber.trim());\n            } catch (NumberFormatException exceptNumberFormat) {\n                IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n            }\n        }\n        return count;\n    }\n\n    public void boNMSnT() throws Throwable {\n        int count = ImBBndW();\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235204,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class pbWXXfj extends AbstractTestCase {\n\n    public static int count;\n\n    public void boNMSnT() throws Throwable {\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getProperty(\"user.home\");\n            try {\n                count = Integer.parseInt(stringNumber.trim());\n            } catch (NumberFormatException exceptNumberFormat) {\n                IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n            }\n        }\n        (new HfXVncc()).RYNMBky();\n    }\n}\n\npublic class HfXVncc {\n\n    public void RYNMBky() throws Throwable {\n        int count = pbWXXfj.count;\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235222,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class eboUDnl extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getProperty(\"user.home\");\n            try {\n                count = Integer.parseInt(stringNumber.trim());\n            } catch (NumberFormatException exceptNumberFormat) {\n                IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n            }\n        }\n        (new rgXSuXs()).RYNMBky((Object) count);\n    }\n}\n\npublic class rgXSuXs {\n\n    public void RYNMBky(Object countObject) throws Throwable {\n        int count = (Integer) countObject;\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235224,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.LinkedList;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class qMlsKrW extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getProperty(\"user.home\");\n            try {\n                count = Integer.parseInt(stringNumber.trim());\n            } catch (NumberFormatException exceptNumberFormat) {\n                IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n            }\n        }\n        LinkedList<Integer> countLinkedList = new LinkedList<Integer>();\n        countLinkedList.add(0, count);\n        countLinkedList.add(1, count);\n        countLinkedList.add(2, count);\n        (new NeaQdoo()).RYNMBky(countLinkedList);\n    }\n}\n\npublic class NeaQdoo {\n\n    public void RYNMBky(LinkedList<Integer> countLinkedList) throws Throwable {\n        int count = countLinkedList.remove(2);\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235228,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.FileOutputStream;\nimport java.io.InputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class RYHaAou extends AbstractTestCaseServlet {\n\n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        \n        if (request.getContentType() == null || !request.getContentType().contains(\"multipart/form-data\")) {\n            return;\n        }\n        FileOutputStream streamFileOutput = null;\n        InputStream streamInput = null;\n        try {\n            streamFileOutput = new FileOutputStream(\"EcNpnbG\");\n            streamInput = request.getInputStream();\n            for (; ; ) {\n                byte[] inputBytes = new byte[1024];\n                int bytesRead = streamInput.read(inputBytes);\n                \n                if (bytesRead == -1) {\n                    break;\n                }\n                streamFileOutput.write(inputBytes);\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"nzyUHlm\", exceptIO);\n        } finally {\n            try {\n                if (streamInput != null) {\n                    streamInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lEWMuXl\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n        response.getWriter().write(\"YFaRmpT\");\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235234,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.FileOutputStream;\nimport java.io.InputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class izjYgnM extends AbstractTestCaseServlet {\n\n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        if (5 == 5) {\n            \n            if (request.getContentType() == null || !request.getContentType().contains(\"multipart/form-data\")) {\n                return;\n            }\n            FileOutputStream streamFileOutput = null;\n            InputStream streamInput = null;\n            try {\n                streamFileOutput = new FileOutputStream(\"EcNpnbG\");\n                streamInput = request.getInputStream();\n                for (; ; ) {\n                    byte[] inputBytes = new byte[1024];\n                    int bytesRead = streamInput.read(inputBytes);\n                    \n                    if (bytesRead == -1) {\n                        break;\n                    }\n                    streamFileOutput.write(inputBytes);\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"nzyUHlm\", exceptIO);\n            } finally {\n                try {\n                    if (streamInput != null) {\n                        streamInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lEWMuXl\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n            response.getWriter().write(\"YFaRmpT\");\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235238,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.FileOutputStream;\nimport java.io.InputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class izjYgnM extends AbstractTestCaseServlet {\n\n    \n    private void sEXYVUh(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        if (5 != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (request.getContentType() == null || !request.getContentType().contains(\"multipart/form-data\")) {\n                return;\n            }\n            FileOutputStream streamFileOutput = null;\n            InputStream streamInput = null;\n            try {\n                streamFileOutput = new FileOutputStream(\"vjdOwju\");\n                streamInput = request.getInputStream();\n                \n                final int MAXSIZE = 10485760;\n                int bytesReadCount = 0;\n                for (; ; ) {\n                    \n                    if (bytesReadCount >= MAXSIZE) {\n                        response.getWriter().write(\"yoUhOtk\");\n                        break;\n                    }\n                    byte[] inputBytes = new byte[1024];\n                    int bytesRead = streamInput.read(inputBytes);\n                    if (bytesRead == -1) {\n                        break;\n                    }\n                    bytesReadCount += bytesRead;\n                    streamFileOutput.write(inputBytes);\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"nzyUHlm\", exceptIO);\n            } finally {\n                try {\n                    if (streamInput != null) {\n                        streamInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lEWMuXl\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n            response.getWriter().write(\"YFaRmpT\");\n        }\n    }\n\n    \n    private void kYrcdjt(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        if (5 == 5) {\n            if (request.getContentType() == null || !request.getContentType().contains(\"multipart/form-data\")) {\n                return;\n            }\n            FileOutputStream streamFileOutput = null;\n            InputStream streamInput = null;\n            try {\n                streamFileOutput = new FileOutputStream(\"vjdOwju\");\n                streamInput = request.getInputStream();\n                \n                final int MAXSIZE = 10485760;\n                int bytesReadCount = 0;\n                for (; ; ) {\n                    \n                    if (bytesReadCount >= MAXSIZE) {\n                        response.getWriter().write(\"yoUhOtk\");\n                        break;\n                    }\n                    byte[] inputBytes = new byte[1024];\n                    int bytesRead = streamInput.read(inputBytes);\n                    if (bytesRead == -1) {\n                        break;\n                    }\n                    bytesReadCount += bytesRead;\n                    streamFileOutput.write(inputBytes);\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"nzyUHlm\", exceptIO);\n            } finally {\n                try {\n                    if (streamInput != null) {\n                        streamInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lEWMuXl\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n            response.getWriter().write(\"YFaRmpT\");\n        }\n    }\n\n    public void JttWLtS(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        sEXYVUh(request, response);\n        kYrcdjt(request, response);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235239,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.FileOutputStream;\nimport java.io.InputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class IbmEbLZ extends AbstractTestCaseServlet {\n\n    \n    private boolean privateTrue = true;\n\n    private boolean privateFalse = false;\n\n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        if (privateTrue) {\n            \n            if (request.getContentType() == null || !request.getContentType().contains(\"multipart/form-data\")) {\n                return;\n            }\n            FileOutputStream streamFileOutput = null;\n            InputStream streamInput = null;\n            try {\n                streamFileOutput = new FileOutputStream(\"EcNpnbG\");\n                streamInput = request.getInputStream();\n                for (; ; ) {\n                    byte[] inputBytes = new byte[1024];\n                    int bytesRead = streamInput.read(inputBytes);\n                    \n                    if (bytesRead == -1) {\n                        break;\n                    }\n                    streamFileOutput.write(inputBytes);\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"nzyUHlm\", exceptIO);\n            } finally {\n                try {\n                    if (streamInput != null) {\n                        streamInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lEWMuXl\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n            response.getWriter().write(\"YFaRmpT\");\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235242,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.FileOutputStream;\nimport java.io.InputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class mEKJBjq extends AbstractTestCaseServlet {\n\n    \n    private static final int PRIVATE_STATIC_FINAL_FIVE = 5;\n\n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            \n            if (request.getContentType() == null || !request.getContentType().contains(\"multipart/form-data\")) {\n                return;\n            }\n            FileOutputStream streamFileOutput = null;\n            InputStream streamInput = null;\n            try {\n                streamFileOutput = new FileOutputStream(\"EcNpnbG\");\n                streamInput = request.getInputStream();\n                for (; ; ) {\n                    byte[] inputBytes = new byte[1024];\n                    int bytesRead = streamInput.read(inputBytes);\n                    \n                    if (bytesRead == -1) {\n                        break;\n                    }\n                    streamFileOutput.write(inputBytes);\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"nzyUHlm\", exceptIO);\n            } finally {\n                try {\n                    if (streamInput != null) {\n                        streamInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lEWMuXl\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n            response.getWriter().write(\"YFaRmpT\");\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235244,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.FileOutputStream;\nimport java.io.InputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class SFBNjse extends AbstractTestCaseServlet {\n\n    \n    private int privateFive = 5;\n\n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        if (privateFive == 5) {\n            \n            if (request.getContentType() == null || !request.getContentType().contains(\"multipart/form-data\")) {\n                return;\n            }\n            FileOutputStream streamFileOutput = null;\n            InputStream streamInput = null;\n            try {\n                streamFileOutput = new FileOutputStream(\"EcNpnbG\");\n                streamInput = request.getInputStream();\n                for (; ; ) {\n                    byte[] inputBytes = new byte[1024];\n                    int bytesRead = streamInput.read(inputBytes);\n                    \n                    if (bytesRead == -1) {\n                        break;\n                    }\n                    streamFileOutput.write(inputBytes);\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"nzyUHlm\", exceptIO);\n            } finally {\n                try {\n                    if (streamInput != null) {\n                        streamInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lEWMuXl\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n            response.getWriter().write(\"YFaRmpT\");\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235246,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.FileOutputStream;\nimport java.io.InputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class SFBNjse extends AbstractTestCaseServlet {\n\n    \n    private int privateFive = 5;\n\n    \n    private void sEXYVUh(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        if (privateFive != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (request.getContentType() == null || !request.getContentType().contains(\"multipart/form-data\")) {\n                return;\n            }\n            FileOutputStream streamFileOutput = null;\n            InputStream streamInput = null;\n            try {\n                streamFileOutput = new FileOutputStream(\"vjdOwju\");\n                streamInput = request.getInputStream();\n                \n                final int MAXSIZE = 10485760;\n                int bytesReadCount = 0;\n                for (; ; ) {\n                    \n                    if (bytesReadCount >= MAXSIZE) {\n                        response.getWriter().write(\"yoUhOtk\");\n                        break;\n                    }\n                    byte[] inputBytes = new byte[1024];\n                    int bytesRead = streamInput.read(inputBytes);\n                    if (bytesRead == -1) {\n                        break;\n                    }\n                    bytesReadCount += bytesRead;\n                    streamFileOutput.write(inputBytes);\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"nzyUHlm\", exceptIO);\n            } finally {\n                try {\n                    if (streamInput != null) {\n                        streamInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lEWMuXl\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n            response.getWriter().write(\"YFaRmpT\");\n        }\n    }\n\n    \n    private void kYrcdjt(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        if (privateFive == 5) {\n            if (request.getContentType() == null || !request.getContentType().contains(\"multipart/form-data\")) {\n                return;\n            }\n            FileOutputStream streamFileOutput = null;\n            InputStream streamInput = null;\n            try {\n                streamFileOutput = new FileOutputStream(\"vjdOwju\");\n                streamInput = request.getInputStream();\n                \n                final int MAXSIZE = 10485760;\n                int bytesReadCount = 0;\n                for (; ; ) {\n                    \n                    if (bytesReadCount >= MAXSIZE) {\n                        response.getWriter().write(\"yoUhOtk\");\n                        break;\n                    }\n                    byte[] inputBytes = new byte[1024];\n                    int bytesRead = streamInput.read(inputBytes);\n                    if (bytesRead == -1) {\n                        break;\n                    }\n                    bytesReadCount += bytesRead;\n                    streamFileOutput.write(inputBytes);\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"nzyUHlm\", exceptIO);\n            } finally {\n                try {\n                    if (streamInput != null) {\n                        streamInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lEWMuXl\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n            response.getWriter().write(\"YFaRmpT\");\n        }\n    }\n\n    public void JttWLtS(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        sEXYVUh(request, response);\n        kYrcdjt(request, response);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235247,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.FileOutputStream;\nimport java.io.InputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class srDCSwT extends AbstractTestCaseServlet {\n\n    \n    private boolean privateReturnsTrue() {\n        return true;\n    }\n\n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        if (privateReturnsTrue()) {\n            \n            if (request.getContentType() == null || !request.getContentType().contains(\"multipart/form-data\")) {\n                return;\n            }\n            FileOutputStream streamFileOutput = null;\n            InputStream streamInput = null;\n            try {\n                streamFileOutput = new FileOutputStream(\"EcNpnbG\");\n                streamInput = request.getInputStream();\n                for (; ; ) {\n                    byte[] inputBytes = new byte[1024];\n                    int bytesRead = streamInput.read(inputBytes);\n                    \n                    if (bytesRead == -1) {\n                        break;\n                    }\n                    streamFileOutput.write(inputBytes);\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"nzyUHlm\", exceptIO);\n            } finally {\n                try {\n                    if (streamInput != null) {\n                        streamInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lEWMuXl\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n            response.getWriter().write(\"YFaRmpT\");\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235248,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.FileOutputStream;\nimport java.io.InputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class CroGMaj extends AbstractTestCaseServlet {\n\n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        if (IO.STATIC_FINAL_TRUE) {\n            \n            if (request.getContentType() == null || !request.getContentType().contains(\"multipart/form-data\")) {\n                return;\n            }\n            FileOutputStream streamFileOutput = null;\n            InputStream streamInput = null;\n            try {\n                streamFileOutput = new FileOutputStream(\"EcNpnbG\");\n                streamInput = request.getInputStream();\n                for (; ; ) {\n                    byte[] inputBytes = new byte[1024];\n                    int bytesRead = streamInput.read(inputBytes);\n                    \n                    if (bytesRead == -1) {\n                        break;\n                    }\n                    streamFileOutput.write(inputBytes);\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"nzyUHlm\", exceptIO);\n            } finally {\n                try {\n                    if (streamInput != null) {\n                        streamInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lEWMuXl\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n            response.getWriter().write(\"YFaRmpT\");\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235250,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.FileOutputStream;\nimport java.io.InputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class qiYbDOv extends AbstractTestCaseServlet {\n\n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        if (IO.staticFive == 5) {\n            \n            if (request.getContentType() == null || !request.getContentType().contains(\"multipart/form-data\")) {\n                return;\n            }\n            FileOutputStream streamFileOutput = null;\n            InputStream streamInput = null;\n            try {\n                streamFileOutput = new FileOutputStream(\"EcNpnbG\");\n                streamInput = request.getInputStream();\n                for (; ; ) {\n                    byte[] inputBytes = new byte[1024];\n                    int bytesRead = streamInput.read(inputBytes);\n                    \n                    if (bytesRead == -1) {\n                        break;\n                    }\n                    streamFileOutput.write(inputBytes);\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"nzyUHlm\", exceptIO);\n            } finally {\n                try {\n                    if (streamInput != null) {\n                        streamInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lEWMuXl\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n            response.getWriter().write(\"YFaRmpT\");\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235260,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.FileOutputStream;\nimport java.io.InputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class aImVtyJ extends AbstractTestCaseServlet {\n\n    \n    private void sEXYVUh(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        switch(8) {\n            case 7:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n            default:\n                if (request.getContentType() == null || !request.getContentType().contains(\"multipart/form-data\")) {\n                    return;\n                }\n                FileOutputStream streamFileOutput = null;\n                InputStream streamInput = null;\n                try {\n                    streamFileOutput = new FileOutputStream(\"vjdOwju\");\n                    streamInput = request.getInputStream();\n                    \n                    final int MAXSIZE = 10485760;\n                    int bytesReadCount = 0;\n                    for (; ; ) {\n                        \n                        if (bytesReadCount >= MAXSIZE) {\n                            response.getWriter().write(\"yoUhOtk\");\n                            break;\n                        }\n                        byte[] inputBytes = new byte[1024];\n                        int bytesRead = streamInput.read(inputBytes);\n                        if (bytesRead == -1) {\n                            break;\n                        }\n                        bytesReadCount += bytesRead;\n                        streamFileOutput.write(inputBytes);\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"nzyUHlm\", exceptIO);\n                } finally {\n                    try {\n                        if (streamInput != null) {\n                            streamInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"lEWMuXl\", exceptIO);\n                    }\n                    try {\n                        if (streamFileOutput != null) {\n                            streamFileOutput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                    }\n                }\n                response.getWriter().write(\"YFaRmpT\");\n                break;\n        }\n    }\n\n    \n    private void kYrcdjt(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        switch(7) {\n            case 7:\n                if (request.getContentType() == null || !request.getContentType().contains(\"multipart/form-data\")) {\n                    return;\n                }\n                FileOutputStream streamFileOutput = null;\n                InputStream streamInput = null;\n                try {\n                    streamFileOutput = new FileOutputStream(\"vjdOwju\");\n                    streamInput = request.getInputStream();\n                    \n                    final int MAXSIZE = 10485760;\n                    int bytesReadCount = 0;\n                    for (; ; ) {\n                        \n                        if (bytesReadCount >= MAXSIZE) {\n                            response.getWriter().write(\"yoUhOtk\");\n                            break;\n                        }\n                        byte[] inputBytes = new byte[1024];\n                        int bytesRead = streamInput.read(inputBytes);\n                        if (bytesRead == -1) {\n                            break;\n                        }\n                        bytesReadCount += bytesRead;\n                        streamFileOutput.write(inputBytes);\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"nzyUHlm\", exceptIO);\n                } finally {\n                    try {\n                        if (streamInput != null) {\n                            streamInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"lEWMuXl\", exceptIO);\n                    }\n                    try {\n                        if (streamFileOutput != null) {\n                            streamFileOutput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                    }\n                }\n                response.getWriter().write(\"YFaRmpT\");\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n\n    public void JttWLtS(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        sEXYVUh(request, response);\n        kYrcdjt(request, response);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235263,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.FileOutputStream;\nimport java.io.InputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class XbDAGJi extends AbstractTestCaseServlet {\n\n    \n    private void sEXYVUh(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        while (true) {\n            if (request.getContentType() == null || !request.getContentType().contains(\"multipart/form-data\")) {\n                return;\n            }\n            FileOutputStream streamFileOutput = null;\n            InputStream streamInput = null;\n            try {\n                streamFileOutput = new FileOutputStream(\"vjdOwju\");\n                streamInput = request.getInputStream();\n                \n                final int MAXSIZE = 10485760;\n                int bytesReadCount = 0;\n                for (; ; ) {\n                    \n                    if (bytesReadCount >= MAXSIZE) {\n                        response.getWriter().write(\"yoUhOtk\");\n                        break;\n                    }\n                    byte[] inputBytes = new byte[1024];\n                    int bytesRead = streamInput.read(inputBytes);\n                    if (bytesRead == -1) {\n                        break;\n                    }\n                    bytesReadCount += bytesRead;\n                    streamFileOutput.write(inputBytes);\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"nzyUHlm\", exceptIO);\n            } finally {\n                try {\n                    if (streamInput != null) {\n                        streamInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lEWMuXl\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n            response.getWriter().write(\"YFaRmpT\");\n            break;\n        }\n    }\n\n    public void JttWLtS(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        sEXYVUh(request, response);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235265,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\n\npublic class fpbwJhl extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        int i = 0;\n        \n        if (count > 0 && count <= 20) {\n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235269,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\n\npublic class togaYan extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (5 == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (5 == 5) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235272,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\n\npublic class BfgzzFe extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (IO.staticFive == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticFive == 5) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235294,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\n\npublic class suTWYkp {\n\n    \n    public void ZpnQtvQ(int count) throws Throwable {\n        if (MAuZVsA.ydhDOMq) {\n            \n            count = 0;\n        } else {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    \n    public void VmywRrZ(int count) throws Throwable {\n        if (MAuZVsA.HHhrjCy) {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n    }\n\n    \n    public void fDqjRYE(int count) throws Throwable {\n        if (MAuZVsA.Pywwbtz) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        } else {\n            \n            count = 0;\n        }\n    }\n}\n\npublic class MAuZVsA extends AbstractTestCase {\n\n    \n    public static boolean qRMEpGJ = false;\n\n    \n    public static boolean ydhDOMq = false;\n\n    public static boolean HHhrjCy = false;\n\n    public static boolean Pywwbtz = false;\n\n    public void JttWLtS() throws Throwable {\n        uytpYbp();\n        OQsEKDS();\n        EXrOlJC();\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count = 0;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        ydhDOMq = false;\n        (new suTWYkp()).ZpnQtvQ(count);\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count = 0;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        HHhrjCy = true;\n        (new suTWYkp()).VmywRrZ(count);\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count = 0;\n        \n        count = 2;\n        Pywwbtz = true;\n        (new suTWYkp()).fDqjRYE(count);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235305,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\n\npublic class UoXZbCt extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int countCopy;\n        {\n            int count;\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n            countCopy = count;\n        }\n        {\n            int count = countCopy;\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235306,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\n\npublic class NFIphef extends AbstractTestCase {\n\n    \n    private int wHnwAlc() throws Throwable {\n        int count;\n        \n        count = 2;\n        return count;\n    }\n\n    private void EXrOlJC() throws Throwable {\n        int count = wHnwAlc();\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n\n    \n    private int snawHrb() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        return count;\n    }\n\n    private void NDSwpcn() throws Throwable {\n        int count = snawHrb();\n        int i = 0;\n        \n        if (count > 0 && count <= 20) {\n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235311,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class xMclacO {\n\n    \n    public void fDqjRYE(int[] countArray) throws Throwable {\n        int count = countArray[2];\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n\n    \n    public void KgJSeXB(int[] countArray) throws Throwable {\n        int count = countArray[2];\n        int i = 0;\n        \n        if (count > 0 && count <= 20) {\n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n\npublic class SsGGuZZ extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        int[] countArray = new int[5];\n        countArray[2] = count;\n        (new xMclacO()).fDqjRYE(countArray);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        int[] countArray = new int[5];\n        countArray[2] = count;\n        (new xMclacO()).KgJSeXB(countArray);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235325,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class ZuLqjsT extends AbstractTestCase {\n\n    static class Container {\n\n        public int containerOne;\n    }\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        Container countContainer = new Container();\n        countContainer.containerOne = count;\n        (new CNMplqo()).RYNMBky(countContainer);\n    }\n}\n\npublic class CNMplqo {\n\n    public void RYNMBky(ZuLqjsT.Container countContainer) throws Throwable {\n        int count = countContainer.containerOne;\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235326,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\n\npublic class kBQiXPa extends AbstractTestCase {\n\n    public static int count;\n\n    public void boNMSnT() throws Throwable {\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        (new eLYNvAl()).RYNMBky();\n    }\n}\n\npublic class eLYNvAl {\n\n    public void RYNMBky() throws Throwable {\n        int count = kBQiXPa.count;\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235328,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.LinkedList;\nimport javax.servlet.http.*;\n\npublic class FJyqSwf {\n\n    \n    public void fDqjRYE(LinkedList<Integer> countLinkedList) throws Throwable {\n        int count = countLinkedList.remove(2);\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n\n    \n    public void KgJSeXB(LinkedList<Integer> countLinkedList) throws Throwable {\n        int count = countLinkedList.remove(2);\n        int i = 0;\n        \n        if (count > 0 && count <= 20) {\n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n\npublic class ZvNwYrp extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        LinkedList<Integer> countLinkedList = new LinkedList<Integer>();\n        countLinkedList.add(0, count);\n        countLinkedList.add(1, count);\n        countLinkedList.add(2, count);\n        (new FJyqSwf()).fDqjRYE(countLinkedList);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        LinkedList<Integer> countLinkedList = new LinkedList<Integer>();\n        countLinkedList.add(0, count);\n        countLinkedList.add(1, count);\n        countLinkedList.add(2, count);\n        (new FJyqSwf()).KgJSeXB(countLinkedList);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235335,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.io.ByteArrayInputStream;\nimport java.io.ObjectInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.servlet.http.*;\n\npublic class KJPbUQQ extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        \n        ByteArrayOutputStream streamByteArrayOutput = null;\n        ObjectOutput outputObject = null;\n        try {\n            streamByteArrayOutput = new ByteArrayOutputStream();\n            outputObject = new ObjectOutputStream(streamByteArrayOutput);\n            outputObject.writeObject(count);\n            byte[] countSerialized = streamByteArrayOutput.toByteArray();\n            (new BNyqkAe()).RYNMBky(countSerialized);\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"IQdccST\", exceptIO);\n        } finally {\n            \n            try {\n                if (outputObject != null) {\n                    outputObject.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"LgADWEx\", exceptIO);\n            }\n            try {\n                if (streamByteArrayOutput != null) {\n                    streamByteArrayOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"vFutZps\", exceptIO);\n            }\n        }\n    }\n}\n\npublic class BNyqkAe {\n\n    public void RYNMBky(byte[] countSerialized) throws Throwable {\n        \n        ByteArrayInputStream streamByteArrayInput = null;\n        ObjectInputStream streamObjectInput = null;\n        try {\n            streamByteArrayInput = new ByteArrayInputStream(countSerialized);\n            streamObjectInput = new ObjectInputStream(streamByteArrayInput);\n            int count = (Integer) streamObjectInput.readObject();\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VcFIKxo\", exceptIO);\n        } catch (ClassNotFoundException exceptClassNotFound) {\n            IO.logger.log(Level.WARNING, \"XOCCPfT\", exceptClassNotFound);\n        } finally {\n            \n            try {\n                if (streamObjectInput != null) {\n                    streamObjectInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"kpDMUXH\", exceptIO);\n            }\n            try {\n                if (streamByteArrayInput != null) {\n                    streamByteArrayInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"oiWyzFb\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235338,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class XxGxVeh extends AbstractTestCase {\n\n    \n    private boolean privateTrue = true;\n\n    private boolean privateFalse = false;\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (privateFalse) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (privateTrue) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (privateTrue) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (privateTrue) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (privateTrue) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateFalse) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (privateTrue) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateTrue) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235349,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class rnMjdbg extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (IO.staticTrue) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticTrue) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235358,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class fXTKNRN extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (IO.staticReturnsTrue()) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticReturnsTrue()) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235360,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class FNlbuJB extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235364,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class FNlbuJB extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_FIVE != 5) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_FIVE != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235365,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class VSiOIaO extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        while (true) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n            break;\n        }\n        while (true) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n            break;\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235370,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class VSiOIaO extends AbstractTestCase {\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        while (true) {\n            \n            count = 2;\n            break;\n        }\n        while (true) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n            break;\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        while (true) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n            break;\n        }\n        while (true) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n            break;\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235371,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class amAZaiD extends AbstractTestCase {\n\n    \n    private boolean dWmGbZa = false;\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        dWmGbZa = true;\n        RYNMBky(count);\n    }\n\n    private void RYNMBky(int count) throws Throwable {\n        if (dWmGbZa) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private boolean aRnSMVj = false;\n\n    private boolean aOWZSGn = false;\n\n    private boolean DBbhdbc = false;\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235374,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\n\npublic class HVXtRfx extends AbstractTestCase {\n\n    \n    public static boolean qRMEpGJ = false;\n\n    public void boNMSnT() throws Throwable {\n        int count = 0;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        qRMEpGJ = true;\n        (new YhrGlJV()).RYNMBky(count);\n    }\n\n    \n    public static boolean ydhDOMq = false;\n\n    public static boolean HHhrjCy = false;\n\n    public static boolean Pywwbtz = false;\n}\n\npublic class YhrGlJV {\n\n    public void RYNMBky(int count) throws Throwable {\n        if (HVXtRfx.qRMEpGJ) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        } else {\n            \n            count = 0;\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235376,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class ZqwvMjF extends AbstractTestCase {\n\n    private void RYNMBky(int count) throws Throwable {\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        RYNMBky(count);\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235380,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\n\npublic class krVeFsA extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        (new QIjzacY()).RYNMBky(count);\n    }\n}\n\npublic class bsuSPJa {\n\n    public void RYNMBky(int count) throws Throwable {\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n}\n\npublic class QIjzacY {\n\n    public void RYNMBky(int count) throws Throwable {\n        (new bsuSPJa()).RYNMBky(count);\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235388,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\n\npublic class wiUyUEj extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        (new wFVujhn()).RYNMBky((Object) count);\n    }\n}\n\npublic class wFVujhn {\n\n    public void RYNMBky(Object countObject) throws Throwable {\n        int count = (Integer) countObject;\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235402,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.LinkedList;\nimport javax.servlet.http.*;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class EUnolEY extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        LinkedList<Integer> countLinkedList = new LinkedList<Integer>();\n        countLinkedList.add(0, count);\n        countLinkedList.add(1, count);\n        countLinkedList.add(2, count);\n        (new kofpSHa()).RYNMBky(countLinkedList);\n    }\n}\n\npublic class kofpSHa {\n\n    public void RYNMBky(LinkedList<Integer> countLinkedList) throws Throwable {\n        int count = countLinkedList.remove(2);\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235406,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.io.ByteArrayInputStream;\nimport java.io.ObjectInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.servlet.http.*;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class rEHtGWo extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        \n        ByteArrayOutputStream streamByteArrayOutput = null;\n        ObjectOutput outputObject = null;\n        try {\n            streamByteArrayOutput = new ByteArrayOutputStream();\n            outputObject = new ObjectOutputStream(streamByteArrayOutput);\n            outputObject.writeObject(count);\n            byte[] countSerialized = streamByteArrayOutput.toByteArray();\n            (new AqKWYLV()).RYNMBky(countSerialized);\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"IQdccST\", exceptIO);\n        } finally {\n            \n            try {\n                if (outputObject != null) {\n                    outputObject.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"LgADWEx\", exceptIO);\n            }\n            try {\n                if (streamByteArrayOutput != null) {\n                    streamByteArrayOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"vFutZps\", exceptIO);\n            }\n        }\n    }\n}\n\npublic class AqKWYLV {\n\n    public void RYNMBky(byte[] countSerialized) throws Throwable {\n        \n        ByteArrayInputStream streamByteArrayInput = null;\n        ObjectInputStream streamObjectInput = null;\n        try {\n            streamByteArrayInput = new ByteArrayInputStream(countSerialized);\n            streamObjectInput = new ObjectInputStream(streamByteArrayInput);\n            int count = (Integer) streamObjectInput.readObject();\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VcFIKxo\", exceptIO);\n        } catch (ClassNotFoundException exceptClassNotFound) {\n            IO.logger.log(Level.WARNING, \"XOCCPfT\", exceptClassNotFound);\n        } finally {\n            \n            try {\n                if (streamObjectInput != null) {\n                    streamObjectInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"kpDMUXH\", exceptIO);\n            }\n            try {\n                if (streamByteArrayInput != null) {\n                    streamByteArrayInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"oiWyzFb\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235410,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\n\npublic class vqziJSq extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (true) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (true) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235414,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\n\npublic class SnuHNTz extends AbstractTestCase {\n\n    \n    private static final boolean PRIVATE_STATIC_FINAL_TRUE = true;\n\n    private static final boolean PRIVATE_STATIC_FINAL_FALSE = false;\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235418,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class oPGJKvp extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getenv(\"ADD\");\n            if (\n            stringNumber != null) {\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        }\n        int i = 0;\n        \n        if (count > 0 && count <= 20) {\n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234659,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class AcVEgSg extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        switch(5) {\n            case 6:\n                \n                count = 0;\n                break;\n            default:\n                \n                count = 2;\n                break;\n        }\n        switch(7) {\n            case 7:\n                int i = 0;\n                \n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        switch(6) {\n            case 6:\n                \n                count = 2;\n                break;\n            default:\n                \n                count = 0;\n                break;\n        }\n        switch(7) {\n            case 7:\n                int i = 0;\n                \n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        switch(6) {\n            case 6:\n                count = Integer.MIN_VALUE;\n                \n                \n                \n                {\n                    String stringNumber = System.getenv(\"ADD\");\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                count = 0;\n                break;\n        }\n        switch(8) {\n            case 7:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n            default:\n                int i = 0;\n                \n                if (count > 0 && count <= 20) {\n                    for (i = 0; i < count; i++) {\n                        IO.writeLine(\"CZGMbWo\");\n                    }\n                }\n                break;\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        switch(6) {\n            case 6:\n                count = Integer.MIN_VALUE;\n                \n                \n                \n                {\n                    String stringNumber = System.getenv(\"ADD\");\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                count = 0;\n                break;\n        }\n        switch(7) {\n            case 7:\n                int i = 0;\n                \n                if (count > 0 && count <= 20) {\n                    for (i = 0; i < count; i++) {\n                        IO.writeLine(\"CZGMbWo\");\n                    }\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234687,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class CJawxYN extends AbstractTestCase {\n\n    \n    private boolean dWmGbZa = false;\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getenv(\"ADD\");\n            if (\n            stringNumber != null) {\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        }\n        dWmGbZa = true;\n        RYNMBky(count);\n    }\n\n    private void RYNMBky(int count) throws Throwable {\n        if (dWmGbZa) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private boolean aRnSMVj = false;\n\n    private boolean aOWZSGn = false;\n\n    private boolean DBbhdbc = false;\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234692,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.LinkedList;\nimport javax.servlet.http.*;\n\npublic class OEKXddt extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getenv(\"ADD\");\n            if (\n            stringNumber != null) {\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        }\n        LinkedList<Integer> countLinkedList = new LinkedList<Integer>();\n        countLinkedList.add(0, count);\n        countLinkedList.add(1, count);\n        countLinkedList.add(2, count);\n        (new oPXIJjn()).RYNMBky(countLinkedList);\n    }\n}\n\npublic class oPXIJjn {\n\n    public void RYNMBky(LinkedList<Integer> countLinkedList) throws Throwable {\n        int count = countLinkedList.remove(2);\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234724,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class jEqHQoI extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getenv(\"ADD\");\n            if (\n            stringNumber != null) {\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        }\n        (new QhAhqMg()).RYNMBky((Object) count);\n    }\n}\n\npublic class QhAhqMg {\n\n    public void RYNMBky(Object countObject) throws Throwable {\n        int count = (Integer) countObject;\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234792,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class grNLeZt extends AbstractTestCase {\n\n    static class Container {\n\n        public int containerOne;\n    }\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        Container countContainer = new Container();\n        countContainer.containerOne = count;\n        (new ecXgamn()).RYNMBky(countContainer);\n    }\n}\n\npublic class ecXgamn {\n\n    public void RYNMBky(grNLeZt.Container countContainer) throws Throwable {\n        int count = countContainer.containerOne;\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234860,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class ecXgamn {\n\n    \n    public void fDqjRYE(grNLeZt.Container countContainer) throws Throwable {\n        int count = countContainer.containerOne;\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n\n    \n    public void KgJSeXB(grNLeZt.Container countContainer) throws Throwable {\n        int count = countContainer.containerOne;\n        int i = 0;\n        \n        if (count > 0 && count <= 20) {\n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n\npublic class grNLeZt extends AbstractTestCase {\n\n    static class Container {\n\n        public int containerOne;\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        Container countContainer = new Container();\n        countContainer.containerOne = count;\n        (new ecXgamn()).fDqjRYE(countContainer);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        Container countContainer = new Container();\n        countContainer.containerOne = count;\n        (new ecXgamn()).KgJSeXB(countContainer);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234861,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class IAQGlsV {\n\n    \n    public void ZpnQtvQ(int count) throws Throwable {\n        if (yhFvWDP.ydhDOMq) {\n            \n            count = 0;\n        } else {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    public void VmywRrZ(int count) throws Throwable {\n        if (yhFvWDP.HHhrjCy) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n    }\n\n    \n    public void fDqjRYE(int count) throws Throwable {\n        if (yhFvWDP.Pywwbtz) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        } else {\n            \n            count = 0;\n        }\n    }\n}\n\npublic class yhFvWDP extends AbstractTestCase {\n\n    \n    public static boolean qRMEpGJ = false;\n\n    \n    public static boolean ydhDOMq = false;\n\n    public static boolean HHhrjCy = false;\n\n    public static boolean Pywwbtz = false;\n\n    public void JttWLtS() throws Throwable {\n        uytpYbp();\n        OQsEKDS();\n        EXrOlJC();\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count = 0;\n        count = Integer.MIN_VALUE;\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        ydhDOMq = false;\n        (new IAQGlsV()).ZpnQtvQ(count);\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count = 0;\n        count = Integer.MIN_VALUE;\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        HHhrjCy = true;\n        (new IAQGlsV()).VmywRrZ(count);\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count = 0;\n        \n        count = 2;\n        Pywwbtz = true;\n        (new IAQGlsV()).fDqjRYE(count);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234911,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class TYENxFW {\n\n    \n    public void fDqjRYE(int count) throws Throwable {\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n\n    \n    public void KgJSeXB(int count) throws Throwable {\n        \n        if (count > 0 && count <= 20) {\n            File file = new File(\"iPuNjQO\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n\npublic class TUrZKxQ extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        (new TYENxFW()).fDqjRYE(count);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        (new TYENxFW()).KgJSeXB(count);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234921,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.HashMap;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class LvZeASv {\n\n    \n    public void fDqjRYE(HashMap<Integer, Integer> countHashMap) throws Throwable {\n        int count = countHashMap.get(2);\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n\n    \n    public void KgJSeXB(HashMap<Integer, Integer> countHashMap) throws Throwable {\n        int count = countHashMap.get(2);\n        \n        if (count > 0 && count <= 20) {\n            File file = new File(\"iPuNjQO\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n\npublic class rRWwNVM extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        HashMap<Integer, Integer> countHashMap = new HashMap<Integer, Integer>();\n        countHashMap.put(0, count);\n        countHashMap.put(1, count);\n        countHashMap.put(2, count);\n        (new LvZeASv()).fDqjRYE(countHashMap);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        HashMap<Integer, Integer> countHashMap = new HashMap<Integer, Integer>();\n        countHashMap.put(0, count);\n        countHashMap.put(1, count);\n        countHashMap.put(2, count);\n        (new LvZeASv()).KgJSeXB(countHashMap);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234943,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class VUJmusH extends AbstractTestCase {\n\n    \n    private static final boolean PRIVATE_STATIC_FINAL_TRUE = true;\n\n    private static final boolean PRIVATE_STATIC_FINAL_FALSE = false;\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    String stringNumber = properties.getProperty(\"data\");\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234952,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class hMgYKEi extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (IO.staticFive == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    String stringNumber = properties.getProperty(\"data\");\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticFive == 5) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234972,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class ZWwbzqK {\n\n    \n    public void fDqjRYE(int count) throws Throwable {\n        (new OZcjDKF()).fDqjRYE(count);\n    }\n\n    \n    public void KgJSeXB(int count) throws Throwable {\n        (new OZcjDKF()).KgJSeXB(count);\n    }\n}\n\npublic class OZcjDKF {\n\n    \n    public void fDqjRYE(int count) throws Throwable {\n        (new JLbCHJb()).fDqjRYE(count);\n    }\n\n    \n    public void KgJSeXB(int count) throws Throwable {\n        (new JLbCHJb()).KgJSeXB(count);\n    }\n}\n\npublic class JLbCHJb {\n\n    \n    public void fDqjRYE(int count) throws Throwable {\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n\n    \n    public void KgJSeXB(int count) throws Throwable {\n        int i = 0;\n        \n        if (count > 0 && count <= 20) {\n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n\npublic class pMdzTDA extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        (new ZWwbzqK()).fDqjRYE(count);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                String stringNumber = properties.getProperty(\"data\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        (new ZWwbzqK()).KgJSeXB(count);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234997,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.LinkedList;\nimport javax.servlet.http.*;\n\npublic class UVtgyST extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                String stringNumber = properties.getProperty(\"data\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        LinkedList<Integer> countLinkedList = new LinkedList<Integer>();\n        countLinkedList.add(0, count);\n        countLinkedList.add(1, count);\n        countLinkedList.add(2, count);\n        (new FBwlBkT()).RYNMBky(countLinkedList);\n    }\n}\n\npublic class FBwlBkT {\n\n    public void RYNMBky(LinkedList<Integer> countLinkedList) throws Throwable {\n        int count = countLinkedList.remove(2);\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235012,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class vHStXRf extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                String stringNumber = properties.getProperty(\"data\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        \n        if (count > 0 && count <= 20) {\n            File file = new File(\"iPuNjQO\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235019,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class SrevQrV extends AbstractTestCase {\n\n    \n    private static final int PRIVATE_STATIC_FINAL_FIVE = 5;\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_FIVE != 5) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    String stringNumber = properties.getProperty(\"data\");\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    String stringNumber = properties.getProperty(\"data\");\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235029,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class EYHBxPt extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_FALSE) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_TRUE) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_TRUE) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getProperty(\"user.home\");\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_FALSE) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_TRUE) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getProperty(\"user.home\");\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235107,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.Vector;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class LVgNNiC {\n\n    \n    public void fDqjRYE(Vector<Integer> countVector) throws Throwable {\n        int count = countVector.remove(2);\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n\n    \n    public void KgJSeXB(Vector<Integer> countVector) throws Throwable {\n        int count = countVector.remove(2);\n        int i = 0;\n        \n        if (count > 0 && count <= 20) {\n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n\npublic class aeIkjjT extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        Vector<Integer> countVector = new Vector<Integer>(5);\n        countVector.add(0, count);\n        countVector.add(1, count);\n        countVector.add(2, count);\n        (new LVgNNiC()).fDqjRYE(countVector);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getProperty(\"user.home\");\n            try {\n                count = Integer.parseInt(stringNumber.trim());\n            } catch (NumberFormatException exceptNumberFormat) {\n                IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n            }\n        }\n        Vector<Integer> countVector = new Vector<Integer>(5);\n        countVector.add(0, count);\n        countVector.add(1, count);\n        countVector.add(2, count);\n        (new LVgNNiC()).KgJSeXB(countVector);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235155,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.LinkedList;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class WAOvZpB extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getProperty(\"user.home\");\n            try {\n                count = Integer.parseInt(stringNumber.trim());\n            } catch (NumberFormatException exceptNumberFormat) {\n                IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n            }\n        }\n        LinkedList<Integer> countLinkedList = new LinkedList<Integer>();\n        countLinkedList.add(0, count);\n        countLinkedList.add(1, count);\n        countLinkedList.add(2, count);\n        (new OiKDoTa()).RYNMBky(countLinkedList);\n    }\n}\n\npublic class OiKDoTa {\n\n    public void RYNMBky(LinkedList<Integer> countLinkedList) throws Throwable {\n        int count = countLinkedList.remove(2);\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235156,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\n\npublic class EeoLZGv extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        switch(6) {\n            case 6:\n                count = Integer.MIN_VALUE;\n                \n                \n                {\n                    URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                    BufferedReader readerBuffered = null;\n                    InputStreamReader readerInputStream = null;\n                    try {\n                        readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                        readerBuffered = new BufferedReader(readerInputStream);\n                        \n                        \n                        String stringNumber = readerBuffered.readLine();\n                        if (\n                        stringNumber != null) {\n                            try {\n                                count = Integer.parseInt(stringNumber.trim());\n                            } catch (NumberFormatException exceptNumberFormat) {\n                                IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                            }\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                    } finally {\n                        \n                        try {\n                            if (readerBuffered != null) {\n                                readerBuffered.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                        }\n                        try {\n                            if (readerInputStream != null) {\n                                readerInputStream.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                count = 0;\n                break;\n        }\n        switch(7) {\n            case 7:\n                int i = 0;\n                \n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235296,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\n\npublic class ydlyCIK extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        (new pEBmdfU()).RYNMBky(count);\n    }\n}\n\npublic class pEBmdfU {\n\n    public void RYNMBky(int count) throws Throwable {\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235386,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.io.ByteArrayInputStream;\nimport java.io.ObjectInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.servlet.http.*;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class AqKWYLV {\n\n    \n    public void fDqjRYE(byte[] countSerialized) throws Throwable {\n        \n        ByteArrayInputStream streamByteArrayInput = null;\n        ObjectInputStream streamObjectInput = null;\n        try {\n            streamByteArrayInput = new ByteArrayInputStream(countSerialized);\n            streamObjectInput = new ObjectInputStream(streamByteArrayInput);\n            int count = (Integer) streamObjectInput.readObject();\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VcFIKxo\", exceptIO);\n        } catch (ClassNotFoundException exceptClassNotFound) {\n            IO.logger.log(Level.WARNING, \"XOCCPfT\", exceptClassNotFound);\n        } finally {\n            \n            try {\n                if (streamObjectInput != null) {\n                    streamObjectInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"kpDMUXH\", exceptIO);\n            }\n            try {\n                if (streamByteArrayInput != null) {\n                    streamByteArrayInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"oiWyzFb\", exceptIO);\n            }\n        }\n    }\n\n    \n    public void KgJSeXB(byte[] countSerialized) throws Throwable {\n        \n        ByteArrayInputStream streamByteArrayInput = null;\n        ObjectInputStream streamObjectInput = null;\n        try {\n            streamByteArrayInput = new ByteArrayInputStream(countSerialized);\n            streamObjectInput = new ObjectInputStream(streamByteArrayInput);\n            int count = (Integer) streamObjectInput.readObject();\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VcFIKxo\", exceptIO);\n        } catch (ClassNotFoundException exceptClassNotFound) {\n            IO.logger.log(Level.WARNING, \"XOCCPfT\", exceptClassNotFound);\n        } finally {\n            \n            try {\n                if (streamObjectInput != null) {\n                    streamObjectInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"kpDMUXH\", exceptIO);\n            }\n            try {\n                if (streamByteArrayInput != null) {\n                    streamByteArrayInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"oiWyzFb\", exceptIO);\n            }\n        }\n    }\n}\n\npublic class rEHtGWo extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        \n        ByteArrayOutputStream streamByteArrayOutput = null;\n        ObjectOutput outputObject = null;\n        try {\n            streamByteArrayOutput = new ByteArrayOutputStream();\n            outputObject = new ObjectOutputStream(streamByteArrayOutput);\n            outputObject.writeObject(count);\n            byte[] countSerialized = streamByteArrayOutput.toByteArray();\n            (new AqKWYLV()).fDqjRYE(countSerialized);\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"IQdccST\", exceptIO);\n        } finally {\n            \n            try {\n                if (outputObject != null) {\n                    outputObject.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"LgADWEx\", exceptIO);\n            }\n            try {\n                if (streamByteArrayOutput != null) {\n                    streamByteArrayOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"vFutZps\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        \n        ByteArrayOutputStream streamByteArrayOutput = null;\n        ObjectOutput outputObject = null;\n        try {\n            streamByteArrayOutput = new ByteArrayOutputStream();\n            outputObject = new ObjectOutputStream(streamByteArrayOutput);\n            outputObject.writeObject(count);\n            byte[] countSerialized = streamByteArrayOutput.toByteArray();\n            (new AqKWYLV()).KgJSeXB(countSerialized);\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"IQdccST\", exceptIO);\n        } finally {\n            \n            try {\n                if (outputObject != null) {\n                    outputObject.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"LgADWEx\", exceptIO);\n            }\n            try {\n                if (streamByteArrayOutput != null) {\n                    streamByteArrayOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"vFutZps\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235411,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\n\npublic class bEcwwpT extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                String stringNumber = readerBuffered.readLine();\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235412,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\n\npublic class UXDTkxa extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235436,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\n\npublic class UXDTkxa extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_FIVE != 5) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_FIVE != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235437,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\n\npublic class UcXVjSl extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                String stringNumber = readerBuffered.readLine();\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        (new KYLnaRS()).RYNMBky(count);\n    }\n}\n\npublic class KYLnaRS {\n\n    public void RYNMBky(int count) throws Throwable {\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235458,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\n\npublic class tisMrSe {\n\n    \n    public void fDqjRYE(int count) throws Throwable {\n        (new CDmdWTY()).fDqjRYE(count);\n    }\n\n    \n    public void KgJSeXB(int count) throws Throwable {\n        (new CDmdWTY()).KgJSeXB(count);\n    }\n}\n\npublic class UxLjjCE {\n\n    \n    public void fDqjRYE(int count) throws Throwable {\n        (new tisMrSe()).fDqjRYE(count);\n    }\n\n    \n    public void KgJSeXB(int count) throws Throwable {\n        (new tisMrSe()).KgJSeXB(count);\n    }\n}\n\npublic class CDmdWTY {\n\n    \n    public void fDqjRYE(int count) throws Throwable {\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n\n    \n    public void KgJSeXB(int count) throws Throwable {\n        int i = 0;\n        \n        if (count > 0 && count <= 20) {\n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n\npublic class ySdIqds extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        (new UxLjjCE()).fDqjRYE(count);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                String stringNumber = readerBuffered.readLine();\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        (new UxLjjCE()).KgJSeXB(count);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235463,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\n\npublic class NKFvhXX extends AbstractTestCase {\n\n    static class Container {\n\n        public int containerOne;\n    }\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                String stringNumber = readerBuffered.readLine();\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        Container countContainer = new Container();\n        countContainer.containerOne = count;\n        (new yPaEfBr()).RYNMBky(countContainer);\n    }\n}\n\npublic class yPaEfBr {\n\n    public void RYNMBky(NKFvhXX.Container countContainer) throws Throwable {\n        int count = countContainer.containerOne;\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235470,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class HQVIriH extends AbstractTestCase {\n\n    \n    private boolean privateTrue = true;\n\n    private boolean privateFalse = false;\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (privateTrue) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateTrue) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235492,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class DlmLJAr extends AbstractTestCase {\n\n    \n    private static final int PRIVATE_STATIC_FINAL_FIVE = 5;\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_FIVE != 5) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235495,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class BPTfSPZ extends AbstractTestCase {\n\n    \n    private int privateFive = 5;\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (privateFive == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateFive == 5) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235496,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class ADlbWHD extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235508,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class rcJRMQq extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (IO.staticFive == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticFive == 5) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235510,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\n\npublic class XjOtntM extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                String stringNumber = readerBuffered.readLine();\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        (new VkLzRcP()).RYNMBky(count);\n    }\n}\n\npublic class VkLzRcP {\n\n    public void RYNMBky(int count) throws Throwable {\n        (new XrbpOJT()).RYNMBky(count);\n    }\n}\n\npublic class BlwnbUC {\n\n    public void RYNMBky(int count) throws Throwable {\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n}\n\npublic class XrbpOJT {\n\n    public void RYNMBky(int count) throws Throwable {\n        (new CyagomT()).RYNMBky(count);\n    }\n}\n\npublic class CyagomT {\n\n    public void RYNMBky(int count) throws Throwable {\n        (new BlwnbUC()).RYNMBky(count);\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235536,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class eAAHOmG extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                String stringNumber = readerBuffered.readLine();\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        int[] countArray = new int[5];\n        countArray[2] = count;\n        (new ynwwhcF()).RYNMBky(countArray);\n    }\n}\n\npublic class ynwwhcF {\n\n    public void RYNMBky(int[] countArray) throws Throwable {\n        int count = countArray[2];\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235540,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class xKUOivP extends AbstractTestCase {\n\n    \n    private static final boolean PRIVATE_STATIC_FINAL_TRUE = true;\n\n    private static final boolean PRIVATE_STATIC_FINAL_FALSE = false;\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_FALSE) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            count = Integer.MIN_VALUE;\n            \n            {\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                \n                try {\n                    readerInputStream = new InputStreamReader(System.in, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n            \n        } else {\n            \n            count = 0;\n        }\n        if (PRIVATE_STATIC_FINAL_FALSE) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            count = Integer.MIN_VALUE;\n            \n            {\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                \n                try {\n                    readerInputStream = new InputStreamReader(System.in, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n            \n        } else {\n            \n            count = 0;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235563,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class ZPQBGYi extends AbstractTestCase {\n\n    \n    private boolean privateReturnsTrue() {\n        return true;\n    }\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (privateReturnsTrue()) {\n            count = Integer.MIN_VALUE;\n            \n            {\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                \n                try {\n                    readerInputStream = new InputStreamReader(System.in, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n            \n        } else {\n            \n            count = 0;\n        }\n        if (privateReturnsTrue()) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235570,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class cwbMuhf extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (IO.staticFalse) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (IO.staticTrue) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (IO.staticTrue) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticTrue) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (IO.staticTrue) {\n            count = Integer.MIN_VALUE;\n            \n            {\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                \n                try {\n                    readerInputStream = new InputStreamReader(System.in, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n            \n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticFalse) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (IO.staticTrue) {\n            count = Integer.MIN_VALUE;\n            \n            {\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                \n                try {\n                    readerInputStream = new InputStreamReader(System.in, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n            \n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticTrue) {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235575,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class SLRCjBb extends AbstractTestCase {\n\n    \n    private boolean dWmGbZa = false;\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        {\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            \n            try {\n                readerInputStream = new InputStreamReader(System.in, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                String stringNumber = readerBuffered.readLine();\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        \n        dWmGbZa = true;\n        RYNMBky(count);\n    }\n\n    private void RYNMBky(int count) throws Throwable {\n        if (dWmGbZa) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private boolean aRnSMVj = false;\n\n    private boolean aOWZSGn = false;\n\n    private boolean DBbhdbc = false;\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235590,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class spIQuwk extends AbstractTestCase {\n\n    \n    public static boolean qRMEpGJ = false;\n\n    public void boNMSnT() throws Throwable {\n        int count = 0;\n        count = Integer.MIN_VALUE;\n        \n        {\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            \n            try {\n                readerInputStream = new InputStreamReader(System.in, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                String stringNumber = readerBuffered.readLine();\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        \n        qRMEpGJ = true;\n        (new vurXrKo()).RYNMBky(count);\n    }\n\n    \n    public static boolean ydhDOMq = false;\n\n    public static boolean HHhrjCy = false;\n\n    public static boolean Pywwbtz = false;\n}\n\npublic class vurXrKo {\n\n    public void RYNMBky(int count) throws Throwable {\n        if (spIQuwk.qRMEpGJ) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        } else {\n            \n            count = 0;\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235592,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.LinkedList;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class RhGbzTt {\n\n    \n    public void fDqjRYE(LinkedList<Integer> countLinkedList) throws Throwable {\n        int count = countLinkedList.remove(2);\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n\n    \n    public void KgJSeXB(LinkedList<Integer> countLinkedList) throws Throwable {\n        int count = countLinkedList.remove(2);\n        int i = 0;\n        \n        if (count > 0 && count <= 20) {\n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n\npublic class RvYpYtp extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        LinkedList<Integer> countLinkedList = new LinkedList<Integer>();\n        countLinkedList.add(0, count);\n        countLinkedList.add(1, count);\n        countLinkedList.add(2, count);\n        (new RhGbzTt()).fDqjRYE(countLinkedList);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        {\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            \n            try {\n                readerInputStream = new InputStreamReader(System.in, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                String stringNumber = readerBuffered.readLine();\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        \n        LinkedList<Integer> countLinkedList = new LinkedList<Integer>();\n        countLinkedList.add(0, count);\n        countLinkedList.add(1, count);\n        countLinkedList.add(2, count);\n        (new RhGbzTt()).KgJSeXB(countLinkedList);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235623,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class CXPxpCl extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_FIVE != 5) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            count = Integer.MIN_VALUE;\n            \n            {\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                \n                try {\n                    readerInputStream = new InputStreamReader(System.in, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n            \n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_FIVE != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            count = Integer.MIN_VALUE;\n            \n            {\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                \n                try {\n                    readerInputStream = new InputStreamReader(System.in, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n            \n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235653,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class bcTPNIX extends AbstractTestCase {\n\n    private int jfXyhIP;\n\n    private int buDVqtm;\n\n    private int QsuyNlG;\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    private void fDqjRYE() throws Throwable {\n        int count = buDVqtm;\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        buDVqtm = count;\n        fDqjRYE();\n    }\n\n    private void KgJSeXB() throws Throwable {\n        int count = QsuyNlG;\n        \n        if (count > 0 && count <= 20) {\n            File file = new File(\"iPuNjQO\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        {\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            \n            try {\n                readerInputStream = new InputStreamReader(System.in, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                String stringNumber = readerBuffered.readLine();\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        \n        QsuyNlG = count;\n        KgJSeXB();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235673,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class AfypPyP {\n\n    \n    public void fDqjRYE() throws Throwable {\n        int count = aRqoKVm.count;\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n\n    \n    public void KgJSeXB() throws Throwable {\n        int count = aRqoKVm.count;\n        \n        if (count > 0 && count <= 20) {\n            File file = new File(\"iPuNjQO\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n\npublic class aRqoKVm extends AbstractTestCase {\n\n    public static int count;\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        \n        count = 2;\n        (new AfypPyP()).fDqjRYE();\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        count = Integer.MIN_VALUE;\n        \n        {\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            \n            try {\n                readerInputStream = new InputStreamReader(System.in, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                String stringNumber = readerBuffered.readLine();\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        \n        (new AfypPyP()).KgJSeXB();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235689,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.logging.Level;\n\npublic class cVCVkCE extends AbstractTestCase {\n\n    \n    private boolean privateTrue = true;\n\n    private boolean privateFalse = false;\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (privateFalse) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (privateTrue) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (privateTrue) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (privateTrue) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (privateTrue) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n                try {\n                    \n                    connection = IO.getDBConnection();\n                    \n                    preparedStatement = connection.prepareStatement(\"select name from users where id=0\");\n                    resultSet = preparedStatement.executeQuery();\n                    \n                    String stringNumber = resultSet.getString(1);\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"FMVCxkV\", exceptSql);\n                } finally {\n                    \n                    try {\n                        if (resultSet != null) {\n                            resultSet.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                    }\n                    try {\n                        if (preparedStatement != null) {\n                            preparedStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (connection != null) {\n                            connection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateFalse) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (privateTrue) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n                try {\n                    \n                    connection = IO.getDBConnection();\n                    \n                    preparedStatement = connection.prepareStatement(\"select name from users where id=0\");\n                    resultSet = preparedStatement.executeQuery();\n                    \n                    String stringNumber = resultSet.getString(1);\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"FMVCxkV\", exceptSql);\n                } finally {\n                    \n                    try {\n                        if (resultSet != null) {\n                            resultSet.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                    }\n                    try {\n                        if (preparedStatement != null) {\n                            preparedStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (connection != null) {\n                            connection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateTrue) {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235709,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.logging.Level;\n\npublic class MGFHTGg extends AbstractTestCase {\n\n    \n    private boolean privateReturnsTrue() {\n        return true;\n    }\n\n    private boolean privateReturnsFalse() {\n        return false;\n    }\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (privateReturnsFalse()) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (privateReturnsTrue()) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (privateReturnsTrue()) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (privateReturnsTrue()) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (privateReturnsTrue()) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n                try {\n                    \n                    connection = IO.getDBConnection();\n                    \n                    preparedStatement = connection.prepareStatement(\"select name from users where id=0\");\n                    resultSet = preparedStatement.executeQuery();\n                    \n                    String stringNumber = resultSet.getString(1);\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"FMVCxkV\", exceptSql);\n                } finally {\n                    \n                    try {\n                        if (resultSet != null) {\n                            resultSet.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                    }\n                    try {\n                        if (preparedStatement != null) {\n                            preparedStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (connection != null) {\n                            connection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateReturnsFalse()) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (privateReturnsTrue()) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n                try {\n                    \n                    connection = IO.getDBConnection();\n                    \n                    preparedStatement = connection.prepareStatement(\"select name from users where id=0\");\n                    resultSet = preparedStatement.executeQuery();\n                    \n                    String stringNumber = resultSet.getString(1);\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"FMVCxkV\", exceptSql);\n                } finally {\n                    \n                    try {\n                        if (resultSet != null) {\n                            resultSet.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                    }\n                    try {\n                        if (preparedStatement != null) {\n                            preparedStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (connection != null) {\n                            connection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateReturnsTrue()) {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235715,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class aenVsms {\n\n    \n    public void ZpnQtvQ(int count) throws Throwable {\n        if (AUHptxe.ydhDOMq) {\n            \n            count = 0;\n        } else {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    \n    public void VmywRrZ(int count) throws Throwable {\n        if (AUHptxe.HHhrjCy) {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n    }\n\n    \n    public void fDqjRYE(int count) throws Throwable {\n        if (AUHptxe.Pywwbtz) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        } else {\n            \n            count = 0;\n        }\n    }\n}\n\npublic class AUHptxe extends AbstractTestCase {\n\n    \n    public static boolean qRMEpGJ = false;\n\n    \n    public static boolean ydhDOMq = false;\n\n    public static boolean HHhrjCy = false;\n\n    public static boolean Pywwbtz = false;\n\n    public void JttWLtS() throws Throwable {\n        uytpYbp();\n        OQsEKDS();\n        EXrOlJC();\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count = 0;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = IO.getDBConnection();\n                \n                preparedStatement = connection.prepareStatement(\"select name from users where id=0\");\n                resultSet = preparedStatement.executeQuery();\n                \n                String stringNumber = resultSet.getString(1);\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"FMVCxkV\", exceptSql);\n            } finally {\n                \n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n        ydhDOMq = false;\n        (new aenVsms()).ZpnQtvQ(count);\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count = 0;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = IO.getDBConnection();\n                \n                preparedStatement = connection.prepareStatement(\"select name from users where id=0\");\n                resultSet = preparedStatement.executeQuery();\n                \n                String stringNumber = resultSet.getString(1);\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"FMVCxkV\", exceptSql);\n            } finally {\n                \n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n        HHhrjCy = true;\n        (new aenVsms()).VmywRrZ(count);\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count = 0;\n        \n        count = 2;\n        Pywwbtz = true;\n        (new aenVsms()).fDqjRYE(count);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235737,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\npublic class RSZBmJl extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (true) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n                try {\n                    \n                    connection = IO.getDBConnection();\n                    \n                    preparedStatement = connection.prepareStatement(\"select name from users where id=0\");\n                    resultSet = preparedStatement.executeQuery();\n                    \n                    String stringNumber = resultSet.getString(1);\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"FMVCxkV\", exceptSql);\n                } finally {\n                    \n                    try {\n                        if (resultSet != null) {\n                            resultSet.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                    }\n                    try {\n                        if (preparedStatement != null) {\n                            preparedStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (connection != null) {\n                            connection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (true) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235774,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\npublic class DEkXqPy extends AbstractTestCase {\n\n    \n    private boolean privateReturnsTrue() {\n        return true;\n    }\n\n    private boolean privateReturnsFalse() {\n        return false;\n    }\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (privateReturnsFalse()) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (privateReturnsTrue()) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (privateReturnsTrue()) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (privateReturnsTrue()) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (privateReturnsTrue()) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n                try {\n                    \n                    connection = IO.getDBConnection();\n                    \n                    preparedStatement = connection.prepareStatement(\"select name from users where id=0\");\n                    resultSet = preparedStatement.executeQuery();\n                    \n                    String stringNumber = resultSet.getString(1);\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"FMVCxkV\", exceptSql);\n                } finally {\n                    \n                    try {\n                        if (resultSet != null) {\n                            resultSet.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                    }\n                    try {\n                        if (preparedStatement != null) {\n                            preparedStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (connection != null) {\n                            connection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateReturnsFalse()) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (privateReturnsTrue()) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n                try {\n                    \n                    connection = IO.getDBConnection();\n                    \n                    preparedStatement = connection.prepareStatement(\"select name from users where id=0\");\n                    resultSet = preparedStatement.executeQuery();\n                    \n                    String stringNumber = resultSet.getString(1);\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"FMVCxkV\", exceptSql);\n                } finally {\n                    \n                    try {\n                        if (resultSet != null) {\n                            resultSet.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                    }\n                    try {\n                        if (preparedStatement != null) {\n                            preparedStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (connection != null) {\n                            connection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateReturnsTrue()) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235787,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\npublic class wnJTIPM extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_FALSE) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_TRUE) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_TRUE) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n                try {\n                    \n                    connection = IO.getDBConnection();\n                    \n                    preparedStatement = connection.prepareStatement(\"select name from users where id=0\");\n                    resultSet = preparedStatement.executeQuery();\n                    \n                    String stringNumber = resultSet.getString(1);\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"FMVCxkV\", exceptSql);\n                } finally {\n                    \n                    try {\n                        if (resultSet != null) {\n                            resultSet.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                    }\n                    try {\n                        if (preparedStatement != null) {\n                            preparedStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (connection != null) {\n                            connection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_FALSE) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_TRUE) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n                try {\n                    \n                    connection = IO.getDBConnection();\n                    \n                    preparedStatement = connection.prepareStatement(\"select name from users where id=0\");\n                    resultSet = preparedStatement.executeQuery();\n                    \n                    String stringNumber = resultSet.getString(1);\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"FMVCxkV\", exceptSql);\n                } finally {\n                    \n                    try {\n                        if (resultSet != null) {\n                            resultSet.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                    }\n                    try {\n                        if (preparedStatement != null) {\n                            preparedStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (connection != null) {\n                            connection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235789,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\npublic class syeJIhG extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n                try {\n                    \n                    connection = IO.getDBConnection();\n                    \n                    preparedStatement = connection.prepareStatement(\"select name from users where id=0\");\n                    resultSet = preparedStatement.executeQuery();\n                    \n                    String stringNumber = resultSet.getString(1);\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"FMVCxkV\", exceptSql);\n                } finally {\n                    \n                    try {\n                        if (resultSet != null) {\n                            resultSet.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                    }\n                    try {\n                        if (preparedStatement != null) {\n                            preparedStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (connection != null) {\n                            connection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235796,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\npublic class bviFrKx extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (IO.staticFive != 5) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (IO.staticFive == 5) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (IO.staticFive == 5) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticFive == 5) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (IO.staticFive == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n                try {\n                    \n                    connection = IO.getDBConnection();\n                    \n                    preparedStatement = connection.prepareStatement(\"select name from users where id=0\");\n                    resultSet = preparedStatement.executeQuery();\n                    \n                    String stringNumber = resultSet.getString(1);\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"FMVCxkV\", exceptSql);\n                } finally {\n                    \n                    try {\n                        if (resultSet != null) {\n                            resultSet.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                    }\n                    try {\n                        if (preparedStatement != null) {\n                            preparedStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (connection != null) {\n                            connection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticFive != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (IO.staticFive == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Connection connection = null;\n                PreparedStatement preparedStatement = null;\n                ResultSet resultSet = null;\n                try {\n                    \n                    connection = IO.getDBConnection();\n                    \n                    preparedStatement = connection.prepareStatement(\"select name from users where id=0\");\n                    resultSet = preparedStatement.executeQuery();\n                    \n                    String stringNumber = resultSet.getString(1);\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"FMVCxkV\", exceptSql);\n                } finally {\n                    \n                    try {\n                        if (resultSet != null) {\n                            resultSet.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                    }\n                    try {\n                        if (preparedStatement != null) {\n                            preparedStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (connection != null) {\n                            connection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticFive == 5) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235799,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class WjNBBYY extends AbstractTestCase {\n\n    static class Container {\n\n        public int containerOne;\n    }\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = IO.getDBConnection();\n                \n                preparedStatement = connection.prepareStatement(\"select name from users where id=0\");\n                resultSet = preparedStatement.executeQuery();\n                \n                String stringNumber = resultSet.getString(1);\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"FMVCxkV\", exceptSql);\n            } finally {\n                \n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n        Container countContainer = new Container();\n        countContainer.containerOne = count;\n        (new OeNmpSm()).RYNMBky(countContainer);\n    }\n}\n\npublic class OeNmpSm {\n\n    public void RYNMBky(WjNBBYY.Container countContainer) throws Throwable {\n        int count = countContainer.containerOne;\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235830,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.Vector;\nimport javax.servlet.http.*;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class qBzEdPA extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Connection connection = null;\n            PreparedStatement preparedStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                connection = IO.getDBConnection();\n                \n                preparedStatement = connection.prepareStatement(\"select name from users where id=0\");\n                resultSet = preparedStatement.executeQuery();\n                \n                String stringNumber = resultSet.getString(1);\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"FMVCxkV\", exceptSql);\n            } finally {\n                \n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (preparedStatement != null) {\n                        preparedStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (connection != null) {\n                        connection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n        Vector<Integer> countVector = new Vector<Integer>(5);\n        countVector.add(0, count);\n        countVector.add(1, count);\n        countVector.add(2, count);\n        (new McXVxSa()).RYNMBky(countVector);\n    }\n}\n\npublic class McXVxSa {\n\n    public void RYNMBky(Vector<Integer> countVector) throws Throwable {\n        int count = countVector.remove(2);\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235836,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class kOrIYaW extends AbstractTestCaseServlet {\n\n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        int count;\n        if (true) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Cookie[] cookieSources = request.getCookies();\n                if (cookieSources != null) {\n                    \n                    String stringNumber = cookieSources[0].getValue();\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"lFJIrJL\", exceptNumberFormat);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (true) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235846,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class XJHahWZ extends AbstractTestCaseServlet {\n\n    \n    private static final boolean PRIVATE_STATIC_FINAL_TRUE = true;\n\n    private static final boolean PRIVATE_STATIC_FINAL_FALSE = false;\n\n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Cookie[] cookieSources = request.getCookies();\n                if (cookieSources != null) {\n                    \n                    String stringNumber = cookieSources[0].getValue();\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"lFJIrJL\", exceptNumberFormat);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235850,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class hBJnwQz extends AbstractTestCaseServlet {\n\n    \n    private void EXrOlJC(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        int count;\n        \n        count = 2;\n        for (int j = 0; j < 1; j++) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void NDSwpcn(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Cookie[] cookieSources = request.getCookies();\n            if (cookieSources != null) {\n                \n                String stringNumber = cookieSources[0].getValue();\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"lFJIrJL\", exceptNumberFormat);\n                }\n            }\n        }\n        for (int k = 0; k < 1; k++) {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    public void JttWLtS(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        EXrOlJC(request, response);\n        NDSwpcn(request, response);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235877,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class JcnPyDj extends AbstractTestCaseServlet {\n\n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        int countCopy;\n        {\n            int count;\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Cookie[] cookieSources = request.getCookies();\n                if (cookieSources != null) {\n                    \n                    String stringNumber = cookieSources[0].getValue();\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"lFJIrJL\", exceptNumberFormat);\n                    }\n                }\n            }\n            countCopy = count;\n        }\n        {\n            int count = countCopy;\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235882,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class BWMzZjG extends AbstractTestCaseServlet {\n\n    public void JttWLtS(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        EXrOlJC(request, response);\n        NDSwpcn(request, response);\n    }\n\n    private void fDqjRYE(int count, HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n\n    \n    private void EXrOlJC(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        int count;\n        \n        count = 2;\n        fDqjRYE(count, request, response);\n    }\n\n    private void KgJSeXB(int count, HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        int i = 0;\n        \n        if (count > 0 && count <= 20) {\n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void NDSwpcn(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Cookie[] cookieSources = request.getCookies();\n            if (cookieSources != null) {\n                \n                String stringNumber = cookieSources[0].getValue();\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"lFJIrJL\", exceptNumberFormat);\n                }\n            }\n        }\n        KgJSeXB(count, request, response);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235885,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class lsLkkyx extends AbstractTestCaseServlet {\n\n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Cookie[] cookieSources = request.getCookies();\n            if (cookieSources != null) {\n                \n                String stringNumber = cookieSources[0].getValue();\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"lFJIrJL\", exceptNumberFormat);\n                }\n            }\n        }\n        (new nXzOWQn()).RYNMBky(count, request, response);\n    }\n}\n\npublic class iOqOurJ {\n\n    public void RYNMBky(int count, HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        (new rLsDxKC()).RYNMBky(count, request, response);\n    }\n}\n\npublic class PeJdxnC {\n\n    public void RYNMBky(int count, HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n}\n\npublic class rLsDxKC {\n\n    public void RYNMBky(int count, HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        (new PeJdxnC()).RYNMBky(count, request, response);\n    }\n}\n\npublic class nXzOWQn {\n\n    public void RYNMBky(int count, HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        (new iOqOurJ()).RYNMBky(count, request, response);\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235896,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class zNACEza extends AbstractTestCaseServlet {\n\n    static class Container {\n\n        public int containerOne;\n    }\n\n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Cookie[] cookieSources = request.getCookies();\n            if (cookieSources != null) {\n                \n                String stringNumber = cookieSources[0].getValue();\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"lFJIrJL\", exceptNumberFormat);\n                }\n            }\n        }\n        Container countContainer = new Container();\n        countContainer.containerOne = count;\n        (new ISTOmhR()).RYNMBky(countContainer, request, response);\n    }\n}\n\npublic class ISTOmhR {\n\n    public void RYNMBky(zNACEza.Container countContainer, HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        int count = countContainer.containerOne;\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235902,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.LinkedList;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class FZWIbWD extends AbstractTestCaseServlet {\n\n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Cookie[] cookieSources = request.getCookies();\n            if (cookieSources != null) {\n                \n                String stringNumber = cookieSources[0].getValue();\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"lFJIrJL\", exceptNumberFormat);\n                }\n            }\n        }\n        LinkedList<Integer> countLinkedList = new LinkedList<Integer>();\n        countLinkedList.add(0, count);\n        countLinkedList.add(1, count);\n        countLinkedList.add(2, count);\n        (new jEBJsWq()).RYNMBky(countLinkedList, request, response);\n    }\n}\n\npublic class jEBJsWq {\n\n    public void RYNMBky(LinkedList<Integer> countLinkedList, HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        int count = countLinkedList.remove(2);\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235910,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.io.ByteArrayInputStream;\nimport java.io.ObjectInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.servlet.http.*;\n\npublic class iXFBRpI {\n\n    \n    public void fDqjRYE(byte[] countSerialized, HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        \n        ByteArrayInputStream streamByteArrayInput = null;\n        ObjectInputStream streamObjectInput = null;\n        try {\n            streamByteArrayInput = new ByteArrayInputStream(countSerialized);\n            streamObjectInput = new ObjectInputStream(streamByteArrayInput);\n            int count = (Integer) streamObjectInput.readObject();\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VcFIKxo\", exceptIO);\n        } catch (ClassNotFoundException exceptClassNotFound) {\n            IO.logger.log(Level.WARNING, \"XOCCPfT\", exceptClassNotFound);\n        } finally {\n            \n            try {\n                if (streamObjectInput != null) {\n                    streamObjectInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"kpDMUXH\", exceptIO);\n            }\n            try {\n                if (streamByteArrayInput != null) {\n                    streamByteArrayInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"oiWyzFb\", exceptIO);\n            }\n        }\n    }\n\n    \n    public void KgJSeXB(byte[] countSerialized, HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        \n        ByteArrayInputStream streamByteArrayInput = null;\n        ObjectInputStream streamObjectInput = null;\n        try {\n            streamByteArrayInput = new ByteArrayInputStream(countSerialized);\n            streamObjectInput = new ObjectInputStream(streamByteArrayInput);\n            int count = (Integer) streamObjectInput.readObject();\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VcFIKxo\", exceptIO);\n        } catch (ClassNotFoundException exceptClassNotFound) {\n            IO.logger.log(Level.WARNING, \"XOCCPfT\", exceptClassNotFound);\n        } finally {\n            \n            try {\n                if (streamObjectInput != null) {\n                    streamObjectInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"kpDMUXH\", exceptIO);\n            }\n            try {\n                if (streamByteArrayInput != null) {\n                    streamByteArrayInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"oiWyzFb\", exceptIO);\n            }\n        }\n    }\n}\n\npublic class fBpHiVJ extends AbstractTestCaseServlet {\n\n    public void JttWLtS(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        EXrOlJC(request, response);\n        NDSwpcn(request, response);\n    }\n\n    \n    private void EXrOlJC(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        int count;\n        \n        count = 2;\n        \n        ByteArrayOutputStream streamByteArrayOutput = null;\n        ObjectOutput outputObject = null;\n        try {\n            streamByteArrayOutput = new ByteArrayOutputStream();\n            outputObject = new ObjectOutputStream(streamByteArrayOutput);\n            outputObject.writeObject(count);\n            byte[] countSerialized = streamByteArrayOutput.toByteArray();\n            (new iXFBRpI()).fDqjRYE(countSerialized, request, response);\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"IQdccST\", exceptIO);\n        } finally {\n            \n            try {\n                if (outputObject != null) {\n                    outputObject.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"LgADWEx\", exceptIO);\n            }\n            try {\n                if (streamByteArrayOutput != null) {\n                    streamByteArrayOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"vFutZps\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void NDSwpcn(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Cookie[] cookieSources = request.getCookies();\n            if (cookieSources != null) {\n                \n                String stringNumber = cookieSources[0].getValue();\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"lFJIrJL\", exceptNumberFormat);\n                }\n            }\n        }\n        \n        ByteArrayOutputStream streamByteArrayOutput = null;\n        ObjectOutput outputObject = null;\n        try {\n            streamByteArrayOutput = new ByteArrayOutputStream();\n            outputObject = new ObjectOutputStream(streamByteArrayOutput);\n            outputObject.writeObject(count);\n            byte[] countSerialized = streamByteArrayOutput.toByteArray();\n            (new iXFBRpI()).KgJSeXB(countSerialized, request, response);\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"IQdccST\", exceptIO);\n        } finally {\n            \n            try {\n                if (outputObject != null) {\n                    outputObject.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"LgADWEx\", exceptIO);\n            }\n            try {\n                if (streamByteArrayOutput != null) {\n                    streamByteArrayOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"vFutZps\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235915,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\npublic class HdUjxyl extends AbstractTestCaseServlet {\n\n    \n    private static final int PRIVATE_STATIC_FINAL_FIVE = 5;\n\n    \n    private void nrUZtTn(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_FIVE != 5) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void iEftrkw(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void uytpYbp(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Cookie[] cookieSources = request.getCookies();\n                if (cookieSources != null) {\n                    \n                    String stringNumber = cookieSources[0].getValue();\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"lFJIrJL\", exceptNumberFormat);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Cookie[] cookieSources = request.getCookies();\n                if (cookieSources != null) {\n                    \n                    String stringNumber = cookieSources[0].getValue();\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"lFJIrJL\", exceptNumberFormat);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        nrUZtTn(request, response);\n        iEftrkw(request, response);\n        uytpYbp(request, response);\n        OQsEKDS(request, response);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235927,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class dDheFPI {\n\n    \n    public void ZpnQtvQ(int count, HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        if (eBzCAbw.ydhDOMq) {\n            \n            count = 0;\n        } else {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    public void VmywRrZ(int count, HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        if (eBzCAbw.HHhrjCy) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n    }\n\n    \n    public void fDqjRYE(int count, HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        if (eBzCAbw.Pywwbtz) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        } else {\n            \n            count = 0;\n        }\n    }\n}\n\npublic class eBzCAbw extends AbstractTestCaseServlet {\n\n    \n    public static boolean qRMEpGJ = false;\n\n    \n    public static boolean ydhDOMq = false;\n\n    public static boolean HHhrjCy = false;\n\n    public static boolean Pywwbtz = false;\n\n    public void JttWLtS(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        uytpYbp(request, response);\n        OQsEKDS(request, response);\n        EXrOlJC(request, response);\n    }\n\n    \n    private void uytpYbp(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        int count = 0;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Cookie[] cookieSources = request.getCookies();\n            if (cookieSources != null) {\n                \n                String stringNumber = cookieSources[0].getValue();\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"lFJIrJL\", exceptNumberFormat);\n                }\n            }\n        }\n        ydhDOMq = false;\n        (new dDheFPI()).ZpnQtvQ(count, request, response);\n    }\n\n    \n    private void OQsEKDS(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        int count = 0;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Cookie[] cookieSources = request.getCookies();\n            if (cookieSources != null) {\n                \n                String stringNumber = cookieSources[0].getValue();\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"lFJIrJL\", exceptNumberFormat);\n                }\n            }\n        }\n        HHhrjCy = true;\n        (new dDheFPI()).VmywRrZ(count, request, response);\n    }\n\n    \n    private void EXrOlJC(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        int count = 0;\n        \n        count = 2;\n        Pywwbtz = true;\n        (new dDheFPI()).fDqjRYE(count, request, response);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235953,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class mqfDEfa extends AbstractTestCase {\n\n    \n    private boolean privateTrue = true;\n\n    private boolean privateFalse = false;\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (privateFalse) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (privateTrue) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (privateTrue) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (privateTrue) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (privateTrue) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getenv(\"ADD\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateFalse) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (privateTrue) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getenv(\"ADD\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateTrue) {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234667,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class SspioHB extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_TRUE) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getenv(\"ADD\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234674,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class TxcXDoB extends AbstractTestCase {\n\n    \n    public static boolean qRMEpGJ = false;\n\n    public void boNMSnT() throws Throwable {\n        int count = 0;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getenv(\"ADD\");\n            if (\n            stringNumber != null) {\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        }\n        qRMEpGJ = true;\n        (new CpCfxEN()).RYNMBky(count);\n    }\n\n    \n    public static boolean ydhDOMq = false;\n\n    public static boolean HHhrjCy = false;\n\n    public static boolean Pywwbtz = false;\n}\n\npublic class CpCfxEN {\n\n    public void RYNMBky(int count) throws Throwable {\n        if (TxcXDoB.qRMEpGJ) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        } else {\n            \n            count = 0;\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234694,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.Vector;\nimport javax.servlet.http.*;\n\npublic class yQZpYtu {\n\n    \n    public void fDqjRYE(Vector<Integer> countVector) throws Throwable {\n        int count = countVector.remove(2);\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n\n    \n    public void KgJSeXB(Vector<Integer> countVector) throws Throwable {\n        int count = countVector.remove(2);\n        int i = 0;\n        \n        if (count > 0 && count <= 20) {\n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n\npublic class PzLOfay extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        Vector<Integer> countVector = new Vector<Integer>(5);\n        countVector.add(0, count);\n        countVector.add(1, count);\n        countVector.add(2, count);\n        (new yQZpYtu()).fDqjRYE(countVector);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getenv(\"ADD\");\n            if (\n            stringNumber != null) {\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        }\n        Vector<Integer> countVector = new Vector<Integer>(5);\n        countVector.add(0, count);\n        countVector.add(1, count);\n        countVector.add(2, count);\n        (new yQZpYtu()).KgJSeXB(countVector);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234723,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.LinkedList;\nimport javax.servlet.http.*;\n\npublic class oPXIJjn {\n\n    \n    public void fDqjRYE(LinkedList<Integer> countLinkedList) throws Throwable {\n        int count = countLinkedList.remove(2);\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n\n    \n    public void KgJSeXB(LinkedList<Integer> countLinkedList) throws Throwable {\n        int count = countLinkedList.remove(2);\n        int i = 0;\n        \n        if (count > 0 && count <= 20) {\n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n\npublic class OEKXddt extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        LinkedList<Integer> countLinkedList = new LinkedList<Integer>();\n        countLinkedList.add(0, count);\n        countLinkedList.add(1, count);\n        countLinkedList.add(2, count);\n        (new oPXIJjn()).fDqjRYE(countLinkedList);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getenv(\"ADD\");\n            if (\n            stringNumber != null) {\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        }\n        LinkedList<Integer> countLinkedList = new LinkedList<Integer>();\n        countLinkedList.add(0, count);\n        countLinkedList.add(1, count);\n        countLinkedList.add(2, count);\n        (new oPXIJjn()).KgJSeXB(countLinkedList);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234725,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\npublic class CjDRzvI extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getenv(\"ADD\");\n            if (\n            stringNumber != null) {\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        }\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234730,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\npublic class ElEUdty extends AbstractTestCase {\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        if (IO.staticReturnsTrueOrFalse()) {\n            \n            count = 2;\n        } else {\n            \n            count = 2;\n        }\n        if (IO.staticReturnsTrueOrFalse()) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        } else {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        if (IO.staticReturnsTrueOrFalse()) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getenv(\"ADD\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            }\n        } else {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getenv(\"ADD\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            }\n        }\n        if (IO.staticReturnsTrueOrFalse()) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        } else {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234753,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\npublic class vLPkxqf extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        switch(6) {\n            case 6:\n                count = Integer.MIN_VALUE;\n                \n                \n                \n                {\n                    String stringNumber = System.getenv(\"ADD\");\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                count = 0;\n                break;\n        }\n        switch(7) {\n            case 7:\n                File file = new File(\"UIqDuhP\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                \n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234758,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectOutput;\nimport java.io.ObjectOutputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.servlet.http.*;\n\npublic class YTcjcnQ extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getenv(\"ADD\");\n            if (\n            stringNumber != null) {\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        }\n        \n        ByteArrayOutputStream streamByteArrayOutput = null;\n        ObjectOutput outputObject = null;\n        try {\n            streamByteArrayOutput = new ByteArrayOutputStream();\n            outputObject = new ObjectOutputStream(streamByteArrayOutput);\n            outputObject.writeObject(count);\n            byte[] countSerialized = streamByteArrayOutput.toByteArray();\n            (new rucbjLh()).RYNMBky(countSerialized);\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"IQdccST\", exceptIO);\n        } finally {\n            \n            try {\n                if (outputObject != null) {\n                    outputObject.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"LgADWEx\", exceptIO);\n            }\n            try {\n                if (streamByteArrayOutput != null) {\n                    streamByteArrayOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"vFutZps\", exceptIO);\n            }\n        }\n    }\n}\n\npublic class rucbjLh {\n\n    public void RYNMBky(byte[] countSerialized) throws Throwable {\n        \n        ByteArrayInputStream streamByteArrayInput = null;\n        ObjectInputStream streamObjectInput = null;\n        try {\n            streamByteArrayInput = new ByteArrayInputStream(countSerialized);\n            streamObjectInput = new ObjectInputStream(streamByteArrayInput);\n            int count = (Integer) streamObjectInput.readObject();\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VcFIKxo\", exceptIO);\n        } catch (ClassNotFoundException exceptClassNotFound) {\n            IO.logger.log(Level.WARNING, \"XOCCPfT\", exceptClassNotFound);\n        } finally {\n            \n            try {\n                if (streamObjectInput != null) {\n                    streamObjectInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"kpDMUXH\", exceptIO);\n            }\n            try {\n                if (streamByteArrayInput != null) {\n                    streamByteArrayInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"oiWyzFb\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234800,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class wNxrylg extends AbstractTestCase {\n\n    \n    private static final boolean PRIVATE_STATIC_FINAL_TRUE = true;\n\n    private static final boolean PRIVATE_STATIC_FINAL_FALSE = false;\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_FALSE) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            count = Integer.MIN_VALUE;\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (PRIVATE_STATIC_FINAL_FALSE) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            count = Integer.MIN_VALUE;\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234809,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class mqYFpXf extends AbstractTestCase {\n\n    \n    private int privateFive = 5;\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (privateFive == 5) {\n            count = Integer.MIN_VALUE;\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateFive == 5) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234814,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class tGimWUM extends AbstractTestCase {\n\n    \n    private boolean privateReturnsTrue() {\n        return true;\n    }\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (privateReturnsTrue()) {\n            count = Integer.MIN_VALUE;\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateReturnsTrue()) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234816,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class UxuZDea extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (IO.staticFalse) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (IO.staticTrue) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (IO.staticTrue) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticTrue) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (IO.staticTrue) {\n            count = Integer.MIN_VALUE;\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticFalse) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (IO.staticTrue) {\n            count = Integer.MIN_VALUE;\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticTrue) {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234821,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class HEDYtBw {\n\n    \n    public void fDqjRYE(int count) throws Throwable {\n        (new RUDaqrv()).fDqjRYE(count);\n    }\n\n    \n    public void KgJSeXB(int count) throws Throwable {\n        (new RUDaqrv()).KgJSeXB(count);\n    }\n}\n\npublic class RUDaqrv {\n\n    \n    public void fDqjRYE(int count) throws Throwable {\n        (new FHeTxNo()).fDqjRYE(count);\n    }\n\n    \n    public void KgJSeXB(int count) throws Throwable {\n        (new FHeTxNo()).KgJSeXB(count);\n    }\n}\n\npublic class FHeTxNo {\n\n    \n    public void fDqjRYE(int count) throws Throwable {\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n\n    \n    public void KgJSeXB(int count) throws Throwable {\n        int i = 0;\n        \n        if (count > 0 && count <= 20) {\n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n\npublic class mnopMQj extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        (new HEDYtBw()).fDqjRYE(count);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        (new HEDYtBw()).KgJSeXB(count);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234853,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.Vector;\nimport javax.servlet.http.*;\n\npublic class qIFCroI {\n\n    \n    public void fDqjRYE(Vector<Integer> countVector) throws Throwable {\n        int count = countVector.remove(2);\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n\n    \n    public void KgJSeXB(Vector<Integer> countVector) throws Throwable {\n        int count = countVector.remove(2);\n        int i = 0;\n        \n        if (count > 0 && count <= 20) {\n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n\npublic class Dastcsz extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        Vector<Integer> countVector = new Vector<Integer>(5);\n        countVector.add(0, count);\n        countVector.add(1, count);\n        countVector.add(2, count);\n        (new qIFCroI()).fDqjRYE(countVector);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        Vector<Integer> countVector = new Vector<Integer>(5);\n        countVector.add(0, count);\n        countVector.add(1, count);\n        countVector.add(2, count);\n        (new qIFCroI()).KgJSeXB(countVector);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234867,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.LinkedList;\nimport javax.servlet.http.*;\n\npublic class pXMNqhF {\n\n    \n    public void fDqjRYE(LinkedList<Integer> countLinkedList) throws Throwable {\n        int count = countLinkedList.remove(2);\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n\n    \n    public void KgJSeXB(LinkedList<Integer> countLinkedList) throws Throwable {\n        int count = countLinkedList.remove(2);\n        int i = 0;\n        \n        if (count > 0 && count <= 20) {\n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n\npublic class NhornJz extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        LinkedList<Integer> countLinkedList = new LinkedList<Integer>();\n        countLinkedList.add(0, count);\n        countLinkedList.add(1, count);\n        countLinkedList.add(2, count);\n        (new pXMNqhF()).fDqjRYE(countLinkedList);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        LinkedList<Integer> countLinkedList = new LinkedList<Integer>();\n        countLinkedList.add(0, count);\n        countLinkedList.add(1, count);\n        countLinkedList.add(2, count);\n        (new pXMNqhF()).KgJSeXB(countLinkedList);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234869,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class bFNXKPt extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_TRUE) {\n            count = Integer.MIN_VALUE;\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234890,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class Dsetwrl extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (IO.staticReturnsTrueOrFalse()) {\n            count = Integer.MIN_VALUE;\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 2;\n        }\n        if (IO.staticReturnsTrueOrFalse()) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        } else {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234896,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class omTzuxv extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count = (new fSHYwdB()).ImBBndW();\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n}\n\npublic class fSHYwdB {\n\n    public int ImBBndW() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        return count;\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234928,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.io.ByteArrayInputStream;\nimport java.io.ObjectInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.servlet.http.*;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class JNSWhzH extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        \n        ByteArrayOutputStream streamByteArrayOutput = null;\n        ObjectOutput outputObject = null;\n        try {\n            streamByteArrayOutput = new ByteArrayOutputStream();\n            outputObject = new ObjectOutputStream(streamByteArrayOutput);\n            outputObject.writeObject(count);\n            byte[] countSerialized = streamByteArrayOutput.toByteArray();\n            (new rgBNhCD()).RYNMBky(countSerialized);\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"IQdccST\", exceptIO);\n        } finally {\n            \n            try {\n                if (outputObject != null) {\n                    outputObject.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"LgADWEx\", exceptIO);\n            }\n            try {\n                if (streamByteArrayOutput != null) {\n                    streamByteArrayOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"vFutZps\", exceptIO);\n            }\n        }\n    }\n}\n\npublic class rgBNhCD {\n\n    public void RYNMBky(byte[] countSerialized) throws Throwable {\n        \n        ByteArrayInputStream streamByteArrayInput = null;\n        ObjectInputStream streamObjectInput = null;\n        try {\n            streamByteArrayInput = new ByteArrayInputStream(countSerialized);\n            streamObjectInput = new ObjectInputStream(streamByteArrayInput);\n            int count = (Integer) streamObjectInput.readObject();\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VcFIKxo\", exceptIO);\n        } catch (ClassNotFoundException exceptClassNotFound) {\n            IO.logger.log(Level.WARNING, \"XOCCPfT\", exceptClassNotFound);\n        } finally {\n            \n            try {\n                if (streamObjectInput != null) {\n                    streamObjectInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"kpDMUXH\", exceptIO);\n            }\n            try {\n                if (streamByteArrayInput != null) {\n                    streamByteArrayInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"oiWyzFb\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234944,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class NygTrau extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (IO.staticReturnsTrue()) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    String stringNumber = properties.getProperty(\"data\");\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticReturnsTrue()) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234966,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class aJOGuTA extends AbstractTestCase {\n\n    private int jfXyhIP;\n\n    private int buDVqtm;\n\n    private int QsuyNlG;\n\n    private void RYNMBky() throws Throwable {\n        int count = jfXyhIP;\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                String stringNumber = properties.getProperty(\"data\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        jfXyhIP = count;\n        RYNMBky();\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234990,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class UNXwHsY {\n\n    \n    public void fDqjRYE(int count) throws Throwable {\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n\n    \n    public void KgJSeXB(int count) throws Throwable {\n        int i = 0;\n        \n        if (count > 0 && count <= 20) {\n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n\npublic class vKKjWjf extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        (new UNXwHsY()).fDqjRYE(count);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                String stringNumber = properties.getProperty(\"data\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        (new UNXwHsY()).KgJSeXB(count);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234993,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.HashMap;\nimport javax.servlet.http.*;\n\npublic class iJeFEor extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                String stringNumber = properties.getProperty(\"data\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        HashMap<Integer, Integer> countHashMap = new HashMap<Integer, Integer>();\n        countHashMap.put(0, count);\n        countHashMap.put(1, count);\n        countHashMap.put(2, count);\n        (new aEdOfZl()).RYNMBky(countHashMap);\n    }\n}\n\npublic class aEdOfZl {\n\n    public void RYNMBky(HashMap<Integer, Integer> countHashMap) throws Throwable {\n        int count = countHashMap.get(2);\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235014,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class XBRsRGt extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (IO.staticTrue) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    String stringNumber = properties.getProperty(\"data\");\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticTrue) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235036,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class sxQlAsJ extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (IO.staticFive != 5) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (IO.staticFive == 5) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (IO.staticFive == 5) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticFive == 5) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (IO.staticFive == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    String stringNumber = properties.getProperty(\"data\");\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticFive != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (IO.staticFive == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    String stringNumber = properties.getProperty(\"data\");\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticFive == 5) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235045,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class CSpTapY extends AbstractTestCase {\n\n    private int jfXyhIP;\n\n    private int buDVqtm;\n\n    private int QsuyNlG;\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    private void fDqjRYE() throws Throwable {\n        int count = buDVqtm;\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        buDVqtm = count;\n        fDqjRYE();\n    }\n\n    private void KgJSeXB() throws Throwable {\n        int count = QsuyNlG;\n        \n        if (count > 0 && count <= 20) {\n            File file = new File(\"iPuNjQO\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                String stringNumber = properties.getProperty(\"data\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        QsuyNlG = count;\n        KgJSeXB();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235063,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class iPJEggN extends AbstractTestCase {\n\n    static class Container {\n\n        public int containerOne;\n    }\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                String stringNumber = properties.getProperty(\"data\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        Container countContainer = new Container();\n        countContainer.containerOne = count;\n        (new BmQCBMu()).RYNMBky(countContainer);\n    }\n}\n\npublic class BmQCBMu {\n\n    public void RYNMBky(iPJEggN.Container countContainer) throws Throwable {\n        int count = countContainer.containerOne;\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235076,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.Vector;\nimport javax.servlet.http.*;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class bxobelj extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                String stringNumber = properties.getProperty(\"data\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        Vector<Integer> countVector = new Vector<Integer>(5);\n        countVector.add(0, count);\n        countVector.add(1, count);\n        countVector.add(2, count);\n        (new pkahtUy()).RYNMBky(countVector);\n    }\n}\n\npublic class pkahtUy {\n\n    public void RYNMBky(Vector<Integer> countVector) throws Throwable {\n        int count = countVector.remove(2);\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235082,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.HashMap;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class bzPUNIk {\n\n    \n    public void fDqjRYE(HashMap<Integer, Integer> countHashMap) throws Throwable {\n        int count = countHashMap.get(2);\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n\n    \n    public void KgJSeXB(HashMap<Integer, Integer> countHashMap) throws Throwable {\n        int count = countHashMap.get(2);\n        \n        if (count > 0 && count <= 20) {\n            File file = new File(\"iPuNjQO\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n\npublic class tehfUmE extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        HashMap<Integer, Integer> countHashMap = new HashMap<Integer, Integer>();\n        countHashMap.put(0, count);\n        countHashMap.put(1, count);\n        countHashMap.put(2, count);\n        (new bzPUNIk()).fDqjRYE(countHashMap);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                String stringNumber = properties.getProperty(\"data\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        HashMap<Integer, Integer> countHashMap = new HashMap<Integer, Integer>();\n        countHashMap.put(0, count);\n        countHashMap.put(1, count);\n        countHashMap.put(2, count);\n        (new bzPUNIk()).KgJSeXB(countHashMap);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235087,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class iiGoaPa extends AbstractTestCase {\n\n    \n    private static final boolean PRIVATE_STATIC_FINAL_TRUE = true;\n\n    private static final boolean PRIVATE_STATIC_FINAL_FALSE = false;\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getProperty(\"user.home\");\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235096,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class pPSplap extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (IO.staticFalse) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (IO.staticTrue) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (IO.staticTrue) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticTrue) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (IO.staticTrue) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getProperty(\"user.home\");\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticFalse) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (IO.staticTrue) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getProperty(\"user.home\");\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticTrue) {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235109,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class IKiOPcZ extends AbstractTestCase {\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        for (int j = 0; j < 1; j++) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getProperty(\"user.home\");\n            try {\n                count = Integer.parseInt(stringNumber.trim());\n            } catch (NumberFormatException exceptNumberFormat) {\n                IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n            }\n        }\n        for (int k = 0; k < 1; k++) {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235123,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class IsYIFCQ {\n\n    \n    public void fDqjRYE(rCIchCf.Container countContainer) throws Throwable {\n        int count = countContainer.containerOne;\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n\n    \n    public void KgJSeXB(rCIchCf.Container countContainer) throws Throwable {\n        int count = countContainer.containerOne;\n        int i = 0;\n        \n        if (count > 0 && count <= 20) {\n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n\npublic class rCIchCf extends AbstractTestCase {\n\n    static class Container {\n\n        public int containerOne;\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        Container countContainer = new Container();\n        countContainer.containerOne = count;\n        (new IsYIFCQ()).fDqjRYE(countContainer);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getProperty(\"user.home\");\n            try {\n                count = Integer.parseInt(stringNumber.trim());\n            } catch (NumberFormatException exceptNumberFormat) {\n                IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n            }\n        }\n        Container countContainer = new Container();\n        countContainer.containerOne = count;\n        (new IsYIFCQ()).KgJSeXB(countContainer);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235149,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\npublic class PtqVkIE extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (5 != 5) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (5 == 5) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (5 == 5) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (5 == 5) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (5 == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getProperty(\"user.home\");\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (5 != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (5 == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getProperty(\"user.home\");\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (5 == 5) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235167,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\npublic class ldJmbhE extends AbstractTestCase {\n\n    \n    private boolean privateTrue = true;\n\n    private boolean privateFalse = false;\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (privateFalse) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (privateTrue) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (privateTrue) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (privateTrue) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (privateTrue) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getProperty(\"user.home\");\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateFalse) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (privateTrue) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getProperty(\"user.home\");\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateTrue) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235171,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\npublic class LuQqZOl extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (IO.staticFalse) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (IO.staticTrue) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (IO.staticTrue) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticTrue) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (IO.staticTrue) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getProperty(\"user.home\");\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticFalse) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (IO.staticTrue) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getProperty(\"user.home\");\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticTrue) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235181,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\npublic class efJcTSk extends AbstractTestCase {\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        while (true) {\n            \n            count = 2;\n            break;\n        }\n        while (true) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n            break;\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        while (true) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getProperty(\"user.home\");\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n            break;\n        }\n        while (true) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n            break;\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235193,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\npublic class yOeMqnV extends AbstractTestCase {\n\n    private void RYNMBky(int count) throws Throwable {\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getProperty(\"user.home\");\n            try {\n                count = Integer.parseInt(stringNumber.trim());\n            } catch (NumberFormatException exceptNumberFormat) {\n                IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n            }\n        }\n        RYNMBky(count);\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235202,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\npublic class sgzmFMy extends AbstractTestCase {\n\n    \n    private int wHnwAlc() throws Throwable {\n        int count;\n        \n        count = 2;\n        return count;\n    }\n\n    private void EXrOlJC() throws Throwable {\n        int count = wHnwAlc();\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n\n    \n    private int snawHrb() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getProperty(\"user.home\");\n            try {\n                count = Integer.parseInt(stringNumber.trim());\n            } catch (NumberFormatException exceptNumberFormat) {\n                IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n            }\n        }\n        return count;\n    }\n\n    private void NDSwpcn() throws Throwable {\n        int count = snawHrb();\n        \n        if (count > 0 && count <= 20) {\n            File file = new File(\"iPuNjQO\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235205,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class ierrHXt {\n\n    \n    public void fDqjRYE(int count) throws Throwable {\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n\n    \n    public void KgJSeXB(int count) throws Throwable {\n        \n        if (count > 0 && count <= 20) {\n            File file = new File(\"iPuNjQO\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n\npublic class KYPPjQj {\n\n    \n    public void fDqjRYE(int count) throws Throwable {\n        (new ierrHXt()).fDqjRYE(count);\n    }\n\n    \n    public void KgJSeXB(int count) throws Throwable {\n        (new ierrHXt()).KgJSeXB(count);\n    }\n}\n\npublic class jyZxbZZ {\n\n    \n    public void fDqjRYE(int count) throws Throwable {\n        (new KYPPjQj()).fDqjRYE(count);\n    }\n\n    \n    public void KgJSeXB(int count) throws Throwable {\n        (new KYPPjQj()).KgJSeXB(count);\n    }\n}\n\npublic class wkHcSyO extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        (new jyZxbZZ()).fDqjRYE(count);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getProperty(\"user.home\");\n            try {\n                count = Integer.parseInt(stringNumber.trim());\n            } catch (NumberFormatException exceptNumberFormat) {\n                IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n            }\n        }\n        (new jyZxbZZ()).KgJSeXB(count);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235213,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class NFVKQBc {\n\n    \n    public int wHnwAlc() throws Throwable {\n        int count;\n        \n        count = 2;\n        return count;\n    }\n\n    \n    public int snawHrb() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getProperty(\"user.home\");\n            try {\n                count = Integer.parseInt(stringNumber.trim());\n            } catch (NumberFormatException exceptNumberFormat) {\n                IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n            }\n        }\n        return count;\n    }\n}\n\npublic class SKiCRtW extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count = (new NFVKQBc()).wHnwAlc();\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count = (new NFVKQBc()).snawHrb();\n        \n        if (count > 0 && count <= 20) {\n            File file = new File(\"iPuNjQO\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235217,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.HashMap;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class xaHuwQS extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getProperty(\"user.home\");\n            try {\n                count = Integer.parseInt(stringNumber.trim());\n            } catch (NumberFormatException exceptNumberFormat) {\n                IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n            }\n        }\n        HashMap<Integer, Integer> countHashMap = new HashMap<Integer, Integer>();\n        countHashMap.put(0, count);\n        countHashMap.put(1, count);\n        countHashMap.put(2, count);\n        (new WbUuHht()).RYNMBky(countHashMap);\n    }\n}\n\npublic class WbUuHht {\n\n    public void RYNMBky(HashMap<Integer, Integer> countHashMap) throws Throwable {\n        int count = countHashMap.get(2);\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235230,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.FileOutputStream;\nimport java.io.InputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class oMMTCMe extends AbstractTestCaseServlet {\n\n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        if (IO.staticTrue) {\n            \n            if (request.getContentType() == null || !request.getContentType().contains(\"multipart/form-data\")) {\n                return;\n            }\n            FileOutputStream streamFileOutput = null;\n            InputStream streamInput = null;\n            try {\n                streamFileOutput = new FileOutputStream(\"EcNpnbG\");\n                streamInput = request.getInputStream();\n                for (; ; ) {\n                    byte[] inputBytes = new byte[1024];\n                    int bytesRead = streamInput.read(inputBytes);\n                    \n                    if (bytesRead == -1) {\n                        break;\n                    }\n                    streamFileOutput.write(inputBytes);\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"nzyUHlm\", exceptIO);\n            } finally {\n                try {\n                    if (streamInput != null) {\n                        streamInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lEWMuXl\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n            response.getWriter().write(\"YFaRmpT\");\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235252,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\n\npublic class fpbwJhl extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235268,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\n\npublic class nBHwoTY extends AbstractTestCase {\n\n    \n    private static final int PRIVATE_STATIC_FINAL_FIVE = 5;\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235278,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\n\npublic class jlIvPdU extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (IO.staticTrue) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticTrue) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235286,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\n\npublic class aOiEJPR extends AbstractTestCase {\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        if (IO.staticReturnsTrueOrFalse()) {\n            \n            count = 2;\n        } else {\n            \n            count = 2;\n        }\n        if (IO.staticReturnsTrueOrFalse()) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        } else {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        if (IO.staticReturnsTrueOrFalse()) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        }\n        if (IO.staticReturnsTrueOrFalse()) {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        } else {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235291,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\n\npublic class mlTjAwy extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_FIVE != 5) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_FIVE != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235293,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\n\npublic class CqjjPRs extends AbstractTestCase {\n\n    \n    private boolean dWmGbZa = false;\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        dWmGbZa = true;\n        RYNMBky(count);\n    }\n\n    private void RYNMBky(int count) throws Throwable {\n        if (dWmGbZa) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private boolean aRnSMVj = false;\n\n    private boolean aOWZSGn = false;\n\n    private boolean DBbhdbc = false;\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235302,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\n\npublic class pVVaWzV extends AbstractTestCase {\n\n    private void RYNMBky(int count) throws Throwable {\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        RYNMBky(count);\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235308,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\n\npublic class NFIphef extends AbstractTestCase {\n\n    private int ImBBndW() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        return count;\n    }\n\n    public void boNMSnT() throws Throwable {\n        int count = ImBBndW();\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235310,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class rAcgceQ extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        (new YgwtjoI()).RYNMBky(count);\n    }\n}\n\npublic class YgwtjoI {\n\n    public void RYNMBky(int count) throws Throwable {\n        (new CzkgoZA()).RYNMBky(count);\n    }\n}\n\npublic class CzkgoZA {\n\n    public void RYNMBky(int count) throws Throwable {\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235316,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class frgDUjS {\n\n    \n    public void fDqjRYE(int count) throws Throwable {\n        (new bzaubHN()).fDqjRYE(count);\n    }\n\n    \n    public void KgJSeXB(int count) throws Throwable {\n        (new bzaubHN()).KgJSeXB(count);\n    }\n}\n\npublic class iOBkxre {\n\n    \n    public void fDqjRYE(int count) throws Throwable {\n        (new CjgtLvj()).fDqjRYE(count);\n    }\n\n    \n    public void KgJSeXB(int count) throws Throwable {\n        (new CjgtLvj()).KgJSeXB(count);\n    }\n}\n\npublic class CjgtLvj {\n\n    \n    public void fDqjRYE(int count) throws Throwable {\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n\n    \n    public void KgJSeXB(int count) throws Throwable {\n        int i = 0;\n        \n        if (count > 0 && count <= 20) {\n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n\npublic class bzaubHN {\n\n    \n    public void fDqjRYE(int count) throws Throwable {\n        (new iOBkxre()).fDqjRYE(count);\n    }\n\n    \n    public void KgJSeXB(int count) throws Throwable {\n        (new iOBkxre()).KgJSeXB(count);\n    }\n}\n\npublic class bqujpwt extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        (new frgDUjS()).fDqjRYE(count);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        (new frgDUjS()).KgJSeXB(count);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235321,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.Vector;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\n\npublic class pwfDuUN extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        Vector<Integer> countVector = new Vector<Integer>(5);\n        countVector.add(0, count);\n        countVector.add(1, count);\n        countVector.add(2, count);\n        (new CrWnAZG()).RYNMBky(countVector);\n    }\n}\n\npublic class CrWnAZG {\n\n    public void RYNMBky(Vector<Integer> countVector) throws Throwable {\n        int count = countVector.remove(2);\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235332,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class ZwSVLap extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235340,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class fLvsgsZ extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (false) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (true) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (true) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (true) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (true) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (false) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (true) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (true) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235343,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class NSoxfrg extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (IO.staticFive == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticFive == 5) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235366,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class amAZaiD extends AbstractTestCase {\n\n    \n    private boolean dWmGbZa = false;\n\n    \n    private boolean aRnSMVj = false;\n\n    private boolean aOWZSGn = false;\n\n    private boolean DBbhdbc = false;\n\n    public void JttWLtS() throws Throwable {\n        uytpYbp();\n        OQsEKDS();\n        EXrOlJC();\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        aRnSMVj = false;\n        ZpnQtvQ(count);\n    }\n\n    private void ZpnQtvQ(int count) throws Throwable {\n        if (aRnSMVj) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        aOWZSGn = true;\n        VmywRrZ(count);\n    }\n\n    private void VmywRrZ(int count) throws Throwable {\n        if (aOWZSGn) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        DBbhdbc = true;\n        fDqjRYE(count);\n    }\n\n    private void fDqjRYE(int count) throws Throwable {\n        if (DBbhdbc) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235375,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class bCCIMDk extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int countCopy;\n        {\n            int count;\n            \n            count = 2;\n            countCopy = count;\n        }\n        {\n            int count = countCopy;\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int countCopy;\n        {\n            int count;\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n            countCopy = count;\n        }\n        {\n            int count = countCopy;\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235379,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class ZqwvMjF extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    private void fDqjRYE(int count) throws Throwable {\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        fDqjRYE(count);\n    }\n\n    private void KgJSeXB(int count) throws Throwable {\n        \n        if (count > 0 && count <= 20) {\n            File file = new File(\"iPuNjQO\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        KgJSeXB(count);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235381,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\n\npublic class pEBmdfU {\n\n    \n    public void fDqjRYE(int count) throws Throwable {\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n\n    \n    public void KgJSeXB(int count) throws Throwable {\n        \n        if (count > 0 && count <= 20) {\n            File file = new File(\"iPuNjQO\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n\npublic class ydlyCIK extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        (new pEBmdfU()).fDqjRYE(count);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        (new pEBmdfU()).KgJSeXB(count);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235387,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\n\npublic class GFSPGTB extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count = (new HigLBod()).ImBBndW();\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n}\n\npublic class HigLBod {\n\n    public int ImBBndW() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        return count;\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235394,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\n\npublic class dSdvxSZ extends AbstractTestCase {\n\n    public static int count;\n\n    public void boNMSnT() throws Throwable {\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        (new MtxHNJl()).RYNMBky();\n    }\n}\n\npublic class MtxHNJl {\n\n    public void RYNMBky() throws Throwable {\n        int count = dSdvxSZ.count;\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235400,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\n\npublic class bIsDlSQ extends AbstractTestCase {\n\n    \n    private static final int PRIVATE_STATIC_FINAL_FIVE = 5;\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235422,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\n\npublic class UwkYyEQ extends AbstractTestCase {\n\n    \n    private int privateFive = 5;\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (privateFive != 5) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (privateFive == 5) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (privateFive == 5) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (privateFive == 5) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (privateFive == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateFive != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (privateFive == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateFive == 5) {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235425,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\n\npublic class ZkwEdUc extends AbstractTestCase {\n\n    \n    private boolean privateReturnsTrue() {\n        return true;\n    }\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (privateReturnsTrue()) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateReturnsTrue()) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235426,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\n\npublic class lYPpAxi extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (IO.staticReturnsTrueOrFalse()) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 2;\n        }\n        if (IO.staticReturnsTrueOrFalse()) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        } else {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235434,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\n\npublic class lYPpAxi extends AbstractTestCase {\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        if (IO.staticReturnsTrueOrFalse()) {\n            \n            count = 2;\n        } else {\n            \n            count = 2;\n        }\n        if (IO.staticReturnsTrueOrFalse()) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        } else {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        if (IO.staticReturnsTrueOrFalse()) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Socket socket = null;\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    \n                    socket = new Socket(\"host.example.org\", 39544);\n                    \n                    readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    \n                    try {\n                        if (socket != null) {\n                            socket.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                    }\n                }\n            }\n        }\n        if (IO.staticReturnsTrueOrFalse()) {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        } else {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235435,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\n\npublic class xrXhfTN extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        \n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                String stringNumber = readerBuffered.readLine();\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        for (int j = 0; j < 1; j++) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235444,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\n\npublic class xrXhfTN extends AbstractTestCase {\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        for (int j = 0; j < 1; j++) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                String stringNumber = readerBuffered.readLine();\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        for (int k = 0; k < 1; k++) {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235445,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\n\npublic class qmiVSgC extends AbstractTestCase {\n\n    \n    private boolean dWmGbZa = false;\n\n    \n    private boolean aRnSMVj = false;\n\n    private boolean aOWZSGn = false;\n\n    private boolean DBbhdbc = false;\n\n    public void JttWLtS() throws Throwable {\n        uytpYbp();\n        OQsEKDS();\n        EXrOlJC();\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                String stringNumber = readerBuffered.readLine();\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        aRnSMVj = false;\n        ZpnQtvQ(count);\n    }\n\n    private void ZpnQtvQ(int count) throws Throwable {\n        if (aRnSMVj) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                String stringNumber = readerBuffered.readLine();\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        aOWZSGn = true;\n        VmywRrZ(count);\n    }\n\n    private void VmywRrZ(int count) throws Throwable {\n        if (aOWZSGn) {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        DBbhdbc = true;\n        fDqjRYE(count);\n    }\n\n    private void fDqjRYE(int count) throws Throwable {\n        if (DBbhdbc) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235447,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class segJwKX extends AbstractTestCase {\n\n    \n    private static final int PRIVATE_STATIC_FINAL_FIVE = 5;\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_FIVE != 5) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getenv(\"ADD\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getenv(\"ADD\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234669,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class sZZbFHM extends AbstractTestCase {\n\n    \n    private boolean privateReturnsTrue() {\n        return true;\n    }\n\n    private boolean privateReturnsFalse() {\n        return false;\n    }\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (privateReturnsFalse()) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (privateReturnsTrue()) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (privateReturnsTrue()) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (privateReturnsTrue()) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (privateReturnsTrue()) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getenv(\"ADD\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateReturnsFalse()) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (privateReturnsTrue()) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getenv(\"ADD\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateReturnsTrue()) {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234673,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class eEwzkIY extends AbstractTestCase {\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        if (IO.staticReturnsTrueOrFalse()) {\n            \n            count = 2;\n        } else {\n            \n            count = 2;\n        }\n        if (IO.staticReturnsTrueOrFalse()) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        } else {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        if (IO.staticReturnsTrueOrFalse()) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getenv(\"ADD\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            }\n        } else {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getenv(\"ADD\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            }\n        }\n        if (IO.staticReturnsTrueOrFalse()) {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        } else {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234681,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class AcVEgSg extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        switch(6) {\n            case 6:\n                count = Integer.MIN_VALUE;\n                \n                \n                \n                {\n                    String stringNumber = System.getenv(\"ADD\");\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                count = 0;\n                break;\n        }\n        switch(7) {\n            case 7:\n                int i = 0;\n                \n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234686,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class LwiPkPo extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        \n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getenv(\"ADD\");\n            if (\n            stringNumber != null) {\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        }\n        for (int j = 0; j < 1; j++) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234690,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class VKAoxIW extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int countCopy;\n        {\n            int count;\n            \n            count = 2;\n            countCopy = count;\n        }\n        {\n            int count = countCopy;\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int countCopy;\n        {\n            int count;\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getenv(\"ADD\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            }\n            countCopy = count;\n        }\n        {\n            int count = countCopy;\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234697,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class HVWtegy {\n\n    \n    public void fDqjRYE(int count) throws Throwable {\n        (new buRZnSO()).fDqjRYE(count);\n    }\n\n    \n    public void KgJSeXB(int count) throws Throwable {\n        (new buRZnSO()).KgJSeXB(count);\n    }\n}\n\npublic class agWtcuz {\n\n    \n    public void fDqjRYE(int count) throws Throwable {\n        (new DhKxXcW()).fDqjRYE(count);\n    }\n\n    \n    public void KgJSeXB(int count) throws Throwable {\n        (new DhKxXcW()).KgJSeXB(count);\n    }\n}\n\npublic class buRZnSO {\n\n    \n    public void fDqjRYE(int count) throws Throwable {\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n\n    \n    public void KgJSeXB(int count) throws Throwable {\n        int i = 0;\n        \n        if (count > 0 && count <= 20) {\n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n\npublic class DhKxXcW {\n\n    \n    public void fDqjRYE(int count) throws Throwable {\n        (new HVWtegy()).fDqjRYE(count);\n    }\n\n    \n    public void KgJSeXB(int count) throws Throwable {\n        (new HVWtegy()).KgJSeXB(count);\n    }\n}\n\npublic class MgLbaUC extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        (new agWtcuz()).fDqjRYE(count);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getenv(\"ADD\");\n            if (\n            stringNumber != null) {\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        }\n        (new agWtcuz()).KgJSeXB(count);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234711,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\npublic class rIYIlLo extends AbstractTestCase {\n\n    \n    private static final boolean PRIVATE_STATIC_FINAL_TRUE = true;\n\n    private static final boolean PRIVATE_STATIC_FINAL_FALSE = false;\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getenv(\"ADD\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234736,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\npublic class LzVDUTS extends AbstractTestCase {\n\n    \n    private boolean privateReturnsTrue() {\n        return true;\n    }\n\n    private boolean privateReturnsFalse() {\n        return false;\n    }\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (privateReturnsFalse()) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (privateReturnsTrue()) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (privateReturnsTrue()) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (privateReturnsTrue()) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (privateReturnsTrue()) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getenv(\"ADD\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateReturnsFalse()) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (privateReturnsTrue()) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getenv(\"ADD\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateReturnsTrue()) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234745,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\npublic class uNkZijr extends AbstractTestCase {\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        for (int j = 0; j < 1; j++) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getenv(\"ADD\");\n            if (\n            stringNumber != null) {\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        }\n        for (int k = 0; k < 1; k++) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234763,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\npublic class gnbVpNU extends AbstractTestCase {\n\n    \n    private boolean dWmGbZa = false;\n\n    \n    private boolean aRnSMVj = false;\n\n    private boolean aOWZSGn = false;\n\n    private boolean DBbhdbc = false;\n\n    public void JttWLtS() throws Throwable {\n        uytpYbp();\n        OQsEKDS();\n        EXrOlJC();\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getenv(\"ADD\");\n            if (\n            stringNumber != null) {\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        }\n        aRnSMVj = false;\n        ZpnQtvQ(count);\n    }\n\n    private void ZpnQtvQ(int count) throws Throwable {\n        if (aRnSMVj) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getenv(\"ADD\");\n            if (\n            stringNumber != null) {\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        }\n        aOWZSGn = true;\n        VmywRrZ(count);\n    }\n\n    private void VmywRrZ(int count) throws Throwable {\n        if (aOWZSGn) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        DBbhdbc = true;\n        fDqjRYE(count);\n    }\n\n    private void fDqjRYE(int count) throws Throwable {\n        if (DBbhdbc) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234765,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\npublic class bzqNAEj extends AbstractTestCase {\n\n    private int jfXyhIP;\n\n    private int buDVqtm;\n\n    private int QsuyNlG;\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    private void fDqjRYE() throws Throwable {\n        int count = buDVqtm;\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        buDVqtm = count;\n        fDqjRYE();\n    }\n\n    private void KgJSeXB() throws Throwable {\n        int count = QsuyNlG;\n        \n        if (count > 0 && count <= 20) {\n            File file = new File(\"iPuNjQO\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getenv(\"ADD\");\n            if (\n            stringNumber != null) {\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        }\n        QsuyNlG = count;\n        KgJSeXB();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234775,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class dHmnZrE {\n\n    \n    public void fDqjRYE(int count) throws Throwable {\n        (new VgmKVjn()).fDqjRYE(count);\n    }\n\n    \n    public void KgJSeXB(int count) throws Throwable {\n        (new VgmKVjn()).KgJSeXB(count);\n    }\n}\n\npublic class VSIMEYy {\n\n    \n    public void fDqjRYE(int count) throws Throwable {\n        (new YJEqGUQ()).fDqjRYE(count);\n    }\n\n    \n    public void KgJSeXB(int count) throws Throwable {\n        (new YJEqGUQ()).KgJSeXB(count);\n    }\n}\n\npublic class VgmKVjn {\n\n    \n    public void fDqjRYE(int count) throws Throwable {\n        (new VSIMEYy()).fDqjRYE(count);\n    }\n\n    \n    public void KgJSeXB(int count) throws Throwable {\n        (new VSIMEYy()).KgJSeXB(count);\n    }\n}\n\npublic class YJEqGUQ {\n\n    \n    public void fDqjRYE(int count) throws Throwable {\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n\n    \n    public void KgJSeXB(int count) throws Throwable {\n        \n        if (count > 0 && count <= 20) {\n            File file = new File(\"iPuNjQO\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n\npublic class xAyzidY extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        (new dHmnZrE()).fDqjRYE(count);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getenv(\"ADD\");\n            if (\n            stringNumber != null) {\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        }\n        (new dHmnZrE()).KgJSeXB(count);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234783,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class qhlMifx extends AbstractTestCase {\n\n    public static int count;\n\n    public void boNMSnT() throws Throwable {\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getenv(\"ADD\");\n            if (\n            stringNumber != null) {\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        }\n        (new geRDeud()).RYNMBky();\n    }\n}\n\npublic class geRDeud {\n\n    public void RYNMBky() throws Throwable {\n        int count = qhlMifx.count;\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234790,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class geRDeud {\n\n    \n    public void fDqjRYE() throws Throwable {\n        int count = qhlMifx.count;\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n\n    \n    public void KgJSeXB() throws Throwable {\n        int count = qhlMifx.count;\n        \n        if (count > 0 && count <= 20) {\n            File file = new File(\"iPuNjQO\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n\npublic class qhlMifx extends AbstractTestCase {\n\n    public static int count;\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        \n        count = 2;\n        (new geRDeud()).fDqjRYE();\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getenv(\"ADD\");\n            if (\n            stringNumber != null) {\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        }\n        (new geRDeud()).KgJSeXB();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234791,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.Vector;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class RQaoxOg {\n\n    \n    public void fDqjRYE(Vector<Integer> countVector) throws Throwable {\n        int count = countVector.remove(2);\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n\n    \n    public void KgJSeXB(Vector<Integer> countVector) throws Throwable {\n        int count = countVector.remove(2);\n        \n        if (count > 0 && count <= 20) {\n            File file = new File(\"iPuNjQO\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n\npublic class Cmivufy extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        Vector<Integer> countVector = new Vector<Integer>(5);\n        countVector.add(0, count);\n        countVector.add(1, count);\n        countVector.add(2, count);\n        (new RQaoxOg()).fDqjRYE(countVector);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getenv(\"ADD\");\n            if (\n            stringNumber != null) {\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        }\n        Vector<Integer> countVector = new Vector<Integer>(5);\n        countVector.add(0, count);\n        countVector.add(1, count);\n        countVector.add(2, count);\n        (new RQaoxOg()).KgJSeXB(countVector);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234795,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectOutput;\nimport java.io.ObjectOutputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.servlet.http.*;\n\npublic class rucbjLh {\n\n    \n    public void fDqjRYE(byte[] countSerialized) throws Throwable {\n        \n        ByteArrayInputStream streamByteArrayInput = null;\n        ObjectInputStream streamObjectInput = null;\n        try {\n            streamByteArrayInput = new ByteArrayInputStream(countSerialized);\n            streamObjectInput = new ObjectInputStream(streamByteArrayInput);\n            int count = (Integer) streamObjectInput.readObject();\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VcFIKxo\", exceptIO);\n        } catch (ClassNotFoundException exceptClassNotFound) {\n            IO.logger.log(Level.WARNING, \"XOCCPfT\", exceptClassNotFound);\n        } finally {\n            \n            try {\n                if (streamObjectInput != null) {\n                    streamObjectInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"kpDMUXH\", exceptIO);\n            }\n            try {\n                if (streamByteArrayInput != null) {\n                    streamByteArrayInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"oiWyzFb\", exceptIO);\n            }\n        }\n    }\n\n    \n    public void KgJSeXB(byte[] countSerialized) throws Throwable {\n        \n        ByteArrayInputStream streamByteArrayInput = null;\n        ObjectInputStream streamObjectInput = null;\n        try {\n            streamByteArrayInput = new ByteArrayInputStream(countSerialized);\n            streamObjectInput = new ObjectInputStream(streamByteArrayInput);\n            int count = (Integer) streamObjectInput.readObject();\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VcFIKxo\", exceptIO);\n        } catch (ClassNotFoundException exceptClassNotFound) {\n            IO.logger.log(Level.WARNING, \"XOCCPfT\", exceptClassNotFound);\n        } finally {\n            \n            try {\n                if (streamObjectInput != null) {\n                    streamObjectInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"kpDMUXH\", exceptIO);\n            }\n            try {\n                if (streamByteArrayInput != null) {\n                    streamByteArrayInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"oiWyzFb\", exceptIO);\n            }\n        }\n    }\n}\n\npublic class YTcjcnQ extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        \n        ByteArrayOutputStream streamByteArrayOutput = null;\n        ObjectOutput outputObject = null;\n        try {\n            streamByteArrayOutput = new ByteArrayOutputStream();\n            outputObject = new ObjectOutputStream(streamByteArrayOutput);\n            outputObject.writeObject(count);\n            byte[] countSerialized = streamByteArrayOutput.toByteArray();\n            (new rucbjLh()).fDqjRYE(countSerialized);\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"IQdccST\", exceptIO);\n        } finally {\n            \n            try {\n                if (outputObject != null) {\n                    outputObject.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"LgADWEx\", exceptIO);\n            }\n            try {\n                if (streamByteArrayOutput != null) {\n                    streamByteArrayOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"vFutZps\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getenv(\"ADD\");\n            if (\n            stringNumber != null) {\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        }\n        \n        ByteArrayOutputStream streamByteArrayOutput = null;\n        ObjectOutput outputObject = null;\n        try {\n            streamByteArrayOutput = new ByteArrayOutputStream();\n            outputObject = new ObjectOutputStream(streamByteArrayOutput);\n            outputObject.writeObject(count);\n            byte[] countSerialized = streamByteArrayOutput.toByteArray();\n            (new rucbjLh()).KgJSeXB(countSerialized);\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"IQdccST\", exceptIO);\n        } finally {\n            \n            try {\n                if (outputObject != null) {\n                    outputObject.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"LgADWEx\", exceptIO);\n            }\n            try {\n                if (streamByteArrayOutput != null) {\n                    streamByteArrayOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"vFutZps\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234801,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class UxaaozY extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (5 != 5) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (5 == 5) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (5 == 5) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (5 == 5) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (5 == 5) {\n            count = Integer.MIN_VALUE;\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (5 != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (5 == 5) {\n            count = Integer.MIN_VALUE;\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (5 == 5) {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234807,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class mqYFpXf extends AbstractTestCase {\n\n    \n    private int privateFive = 5;\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (privateFive != 5) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (privateFive == 5) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (privateFive == 5) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (privateFive == 5) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (privateFive == 5) {\n            count = Integer.MIN_VALUE;\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateFive != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (privateFive == 5) {\n            count = Integer.MIN_VALUE;\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateFive == 5) {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234815,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class pfXjBcI {\n\n    \n    public void ZpnQtvQ(int count) throws Throwable {\n        if (pzGBvQL.ydhDOMq) {\n            \n            count = 0;\n        } else {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    \n    public void VmywRrZ(int count) throws Throwable {\n        if (pzGBvQL.HHhrjCy) {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n    }\n\n    \n    public void fDqjRYE(int count) throws Throwable {\n        if (pzGBvQL.Pywwbtz) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        } else {\n            \n            count = 0;\n        }\n    }\n}\n\npublic class pzGBvQL extends AbstractTestCase {\n\n    \n    public static boolean qRMEpGJ = false;\n\n    \n    public static boolean ydhDOMq = false;\n\n    public static boolean HHhrjCy = false;\n\n    public static boolean Pywwbtz = false;\n\n    public void JttWLtS() throws Throwable {\n        uytpYbp();\n        OQsEKDS();\n        EXrOlJC();\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count = 0;\n        count = Integer.MIN_VALUE;\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        ydhDOMq = false;\n        (new pfXjBcI()).ZpnQtvQ(count);\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count = 0;\n        count = Integer.MIN_VALUE;\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        HHhrjCy = true;\n        (new pfXjBcI()).VmywRrZ(count);\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count = 0;\n        \n        count = 2;\n        Pywwbtz = true;\n        (new pfXjBcI()).fDqjRYE(count);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234839,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class oHybIAX extends AbstractTestCase {\n\n    private int ImBBndW() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        return count;\n    }\n\n    public void boNMSnT() throws Throwable {\n        int count = ImBBndW();\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234844,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class wzQLfOi {\n\n    \n    public void fDqjRYE(int count) throws Throwable {\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n\n    \n    public void KgJSeXB(int count) throws Throwable {\n        int i = 0;\n        \n        if (count > 0 && count <= 20) {\n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n\npublic class gNyIDTc extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        (new wzQLfOi()).fDqjRYE(count);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        (new wzQLfOi()).KgJSeXB(count);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234849,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class DDVtWZx {\n\n    \n    public void fDqjRYE(int count) throws Throwable {\n        (new wAEYtFn()).fDqjRYE(count);\n    }\n\n    \n    public void KgJSeXB(int count) throws Throwable {\n        (new wAEYtFn()).KgJSeXB(count);\n    }\n}\n\npublic class wAEYtFn {\n\n    \n    public void fDqjRYE(int count) throws Throwable {\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n\n    \n    public void KgJSeXB(int count) throws Throwable {\n        int i = 0;\n        \n        if (count > 0 && count <= 20) {\n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n\npublic class rdAhIhN extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        (new DDVtWZx()).fDqjRYE(count);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        (new DDVtWZx()).KgJSeXB(count);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234851,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class latidCj extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count = (new ixiMYTR()).ImBBndW();\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n}\n\npublic class ixiMYTR {\n\n    public int ImBBndW() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        return count;\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234856,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class FDRaxxO extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (true) {\n            count = Integer.MIN_VALUE;\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (true) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234876,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class rlxIYeZ extends AbstractTestCase {\n\n    \n    private boolean privateTrue = true;\n\n    private boolean privateFalse = false;\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (privateFalse) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (privateTrue) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (privateTrue) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (privateTrue) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (privateTrue) {\n            count = Integer.MIN_VALUE;\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateFalse) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (privateTrue) {\n            count = Integer.MIN_VALUE;\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateTrue) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234883,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class EDVpJTu extends AbstractTestCase {\n\n    \n    private static final int PRIVATE_STATIC_FINAL_FIVE = 5;\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_FIVE != 5) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            count = Integer.MIN_VALUE;\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            count = Integer.MIN_VALUE;\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234885,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class TFZCYOg extends AbstractTestCase {\n\n    \n    private int privateFive = 5;\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (privateFive == 5) {\n            count = Integer.MIN_VALUE;\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateFive == 5) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234886,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class gURDTYM extends AbstractTestCase {\n\n    \n    private boolean privateReturnsTrue() {\n        return true;\n    }\n\n    private boolean privateReturnsFalse() {\n        return false;\n    }\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (privateReturnsFalse()) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (privateReturnsTrue()) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (privateReturnsTrue()) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (privateReturnsTrue()) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (privateReturnsTrue()) {\n            count = Integer.MIN_VALUE;\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateReturnsFalse()) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (privateReturnsTrue()) {\n            count = Integer.MIN_VALUE;\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (stringNumber != null) \n                    {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateReturnsTrue()) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234889,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class LfZuQij extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        switch(5) {\n            case 6:\n                \n                count = 0;\n                break;\n            default:\n                \n                count = 2;\n                break;\n        }\n        switch(7) {\n            case 7:\n                File file = new File(\"UIqDuhP\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                \n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        switch(6) {\n            case 6:\n                \n                count = 2;\n                break;\n            default:\n                \n                count = 0;\n                break;\n        }\n        switch(7) {\n            case 7:\n                File file = new File(\"UIqDuhP\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                \n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        switch(6) {\n            case 6:\n                count = Integer.MIN_VALUE;\n                \n                {\n                    File file = new File(\"C:\\\\data.txt\");\n                    FileInputStream streamFileInput = null;\n                    InputStreamReader readerInputStream = null;\n                    BufferedReader readerBuffered = null;\n                    try {\n                        \n                        streamFileInput = new FileInputStream(file);\n                        readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                        readerBuffered = new BufferedReader(readerInputStream);\n                        \n                        \n                        String stringNumber = readerBuffered.readLine();\n                        if (stringNumber != null) \n                        {\n                            try {\n                                count = Integer.parseInt(stringNumber.trim());\n                            } catch (NumberFormatException exceptNumberFormat) {\n                                IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                            }\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                    } finally {\n                        \n                        try {\n                            if (readerBuffered != null) {\n                                readerBuffered.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                        }\n                        try {\n                            if (readerInputStream != null) {\n                                readerInputStream.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                        }\n                        try {\n                            if (streamFileInput != null) {\n                                streamFileInput.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                count = 0;\n                break;\n        }\n        switch(8) {\n            case 7:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n            default:\n                \n                if (count > 0 && count <= 20) {\n                    File file = new File(\"iPuNjQO\");\n                    FileOutputStream streamFileOutput = new FileOutputStream(file);\n                    OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                    BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                    int i;\n                    for (i = 0; i < count; i++) {\n                        try {\n                            writerBuffered.write(\"CZGMbWo\");\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                        }\n                    }\n                    \n                    try {\n                        if (writerBuffered != null) {\n                            writerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                    }\n                    try {\n                        if (writerOutputStream != null) {\n                            writerOutputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                    }\n                    try {\n                        if (streamFileOutput != null) {\n                            streamFileOutput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                    }\n                }\n                break;\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        switch(6) {\n            case 6:\n                count = Integer.MIN_VALUE;\n                \n                {\n                    File file = new File(\"C:\\\\data.txt\");\n                    FileInputStream streamFileInput = null;\n                    InputStreamReader readerInputStream = null;\n                    BufferedReader readerBuffered = null;\n                    try {\n                        \n                        streamFileInput = new FileInputStream(file);\n                        readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                        readerBuffered = new BufferedReader(readerInputStream);\n                        \n                        \n                        String stringNumber = readerBuffered.readLine();\n                        if (stringNumber != null) \n                        {\n                            try {\n                                count = Integer.parseInt(stringNumber.trim());\n                            } catch (NumberFormatException exceptNumberFormat) {\n                                IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                            }\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                    } finally {\n                        \n                        try {\n                            if (readerBuffered != null) {\n                                readerBuffered.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                        }\n                        try {\n                            if (readerInputStream != null) {\n                                readerInputStream.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                        }\n                        try {\n                            if (streamFileInput != null) {\n                                streamFileInput.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                count = 0;\n                break;\n        }\n        switch(7) {\n            case 7:\n                \n                if (count > 0 && count <= 20) {\n                    File file = new File(\"iPuNjQO\");\n                    FileOutputStream streamFileOutput = new FileOutputStream(file);\n                    OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                    BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                    int i;\n                    for (i = 0; i < count; i++) {\n                        try {\n                            writerBuffered.write(\"CZGMbWo\");\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                        }\n                    }\n                    \n                    try {\n                        if (writerBuffered != null) {\n                            writerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                    }\n                    try {\n                        if (writerOutputStream != null) {\n                            writerOutputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                    }\n                    try {\n                        if (streamFileOutput != null) {\n                            streamFileOutput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                    }\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234903,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class tyZmpiN extends AbstractTestCase {\n\n    private void RYNMBky(int count) throws Throwable {\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        RYNMBky(count);\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234914,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class xDqETSE extends AbstractTestCase {\n\n    private int jfXyhIP;\n\n    private int buDVqtm;\n\n    private int QsuyNlG;\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    private void fDqjRYE() throws Throwable {\n        int count = buDVqtm;\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        buDVqtm = count;\n        fDqjRYE();\n    }\n\n    private void KgJSeXB() throws Throwable {\n        int count = QsuyNlG;\n        \n        if (count > 0 && count <= 20) {\n            File file = new File(\"iPuNjQO\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        QsuyNlG = count;\n        KgJSeXB();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234919,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.Vector;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class deAiGhX extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        Vector<Integer> countVector = new Vector<Integer>(5);\n        countVector.add(0, count);\n        countVector.add(1, count);\n        countVector.add(2, count);\n        (new ikKeBwK()).RYNMBky(countVector);\n    }\n}\n\npublic class ikKeBwK {\n\n    public void RYNMBky(Vector<Integer> countVector) throws Throwable {\n        int count = countVector.remove(2);\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234938,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class YzkeOPl extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        switch(6) {\n            case 6:\n                count = Integer.MIN_VALUE;\n                \n                \n                {\n                    Properties properties = new Properties();\n                    FileInputStream streamFileInput = null;\n                    try {\n                        streamFileInput = new FileInputStream(\"../common/config.properties\");\n                        properties.load(streamFileInput);\n                        \n                        String stringNumber = properties.getProperty(\"data\");\n                        if (\n                        stringNumber != null) {\n                            try {\n                                count = Integer.parseInt(stringNumber.trim());\n                            } catch (NumberFormatException exceptNumberFormat) {\n                                IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                            }\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                    } finally {\n                        \n                        try {\n                            if (streamFileInput != null) {\n                                streamFileInput.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                count = 0;\n                break;\n        }\n        switch(7) {\n            case 7:\n                int i = 0;\n                \n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234974,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class BWHiulq extends AbstractTestCase {\n\n    \n    public static boolean qRMEpGJ = false;\n\n    public void boNMSnT() throws Throwable {\n        int count = 0;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                String stringNumber = properties.getProperty(\"data\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        qRMEpGJ = true;\n        (new ypwxIfd()).RYNMBky(count);\n    }\n\n    \n    public static boolean ydhDOMq = false;\n\n    public static boolean HHhrjCy = false;\n\n    public static boolean Pywwbtz = false;\n}\n\npublic class ypwxIfd {\n\n    public void RYNMBky(int count) throws Throwable {\n        if (BWHiulq.qRMEpGJ) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        } else {\n            \n            count = 0;\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234982,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class ypwxIfd {\n\n    \n    public void ZpnQtvQ(int count) throws Throwable {\n        if (BWHiulq.ydhDOMq) {\n            \n            count = 0;\n        } else {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    \n    public void VmywRrZ(int count) throws Throwable {\n        if (BWHiulq.HHhrjCy) {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n    }\n\n    \n    public void fDqjRYE(int count) throws Throwable {\n        if (BWHiulq.Pywwbtz) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        } else {\n            \n            count = 0;\n        }\n    }\n}\n\npublic class BWHiulq extends AbstractTestCase {\n\n    \n    public static boolean qRMEpGJ = false;\n\n    \n    public static boolean ydhDOMq = false;\n\n    public static boolean HHhrjCy = false;\n\n    public static boolean Pywwbtz = false;\n\n    public void JttWLtS() throws Throwable {\n        uytpYbp();\n        OQsEKDS();\n        EXrOlJC();\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count = 0;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                String stringNumber = properties.getProperty(\"data\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        ydhDOMq = false;\n        (new ypwxIfd()).ZpnQtvQ(count);\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count = 0;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                String stringNumber = properties.getProperty(\"data\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        HHhrjCy = true;\n        (new ypwxIfd()).VmywRrZ(count);\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count = 0;\n        \n        count = 2;\n        Pywwbtz = true;\n        (new ypwxIfd()).fDqjRYE(count);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1234983,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class rxfocoE {\n\n    \n    public void fDqjRYE(int[] countArray) throws Throwable {\n        int count = countArray[2];\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n\n    \n    public void KgJSeXB(int[] countArray) throws Throwable {\n        int count = countArray[2];\n        int i = 0;\n        \n        if (count > 0 && count <= 20) {\n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n\npublic class MjDugob extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        int[] countArray = new int[5];\n        countArray[2] = count;\n        (new rxfocoE()).fDqjRYE(countArray);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                String stringNumber = properties.getProperty(\"data\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        int[] countArray = new int[5];\n        countArray[2] = count;\n        (new rxfocoE()).KgJSeXB(countArray);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235003,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class JugSAVM extends AbstractTestCase {\n\n    public static int count;\n\n    public void boNMSnT() throws Throwable {\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                String stringNumber = properties.getProperty(\"data\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        (new MeqqoVQ()).RYNMBky();\n    }\n}\n\npublic class MeqqoVQ {\n\n    public void RYNMBky() throws Throwable {\n        int count = JugSAVM.count;\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235006,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class vHStXRf extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                String stringNumber = properties.getProperty(\"data\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235018,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class BUjGQJt extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int countCopy;\n        {\n            int count;\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    String stringNumber = properties.getProperty(\"data\");\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n            countCopy = count;\n        }\n        {\n            int count = countCopy;\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235056,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class BUjGQJt extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int countCopy;\n        {\n            int count;\n            \n            count = 2;\n            countCopy = count;\n        }\n        {\n            int count = countCopy;\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int countCopy;\n        {\n            int count;\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    String stringNumber = properties.getProperty(\"data\");\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n            countCopy = count;\n        }\n        {\n            int count = countCopy;\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235057,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class mLwKLvf extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                String stringNumber = properties.getProperty(\"data\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        (new RcotCDV()).RYNMBky(count);\n    }\n}\n\npublic class PoydKJR {\n\n    public void RYNMBky(int count) throws Throwable {\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n}\n\npublic class RcotCDV {\n\n    public void RYNMBky(int count) throws Throwable {\n        (new PoydKJR()).RYNMBky(count);\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235066,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class txQkNrU {\n\n    \n    public void fDqjRYE() throws Throwable {\n        int count = SUdMONK.count;\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n\n    \n    public void KgJSeXB() throws Throwable {\n        int count = SUdMONK.count;\n        \n        if (count > 0 && count <= 20) {\n            File file = new File(\"iPuNjQO\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n\npublic class SUdMONK extends AbstractTestCase {\n\n    public static int count;\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        \n        count = 2;\n        (new txQkNrU()).fDqjRYE();\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                String stringNumber = properties.getProperty(\"data\");\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        (new txQkNrU()).KgJSeXB();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235079,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class wCblvLE extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getProperty(\"user.home\");\n            try {\n                count = Integer.parseInt(stringNumber.trim());\n            } catch (NumberFormatException exceptNumberFormat) {\n                IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n            }\n        }\n        int i = 0;\n        \n        if (count > 0 && count <= 20) {\n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235091,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class iiGoaPa extends AbstractTestCase {\n\n    \n    private static final boolean PRIVATE_STATIC_FINAL_TRUE = true;\n\n    private static final boolean PRIVATE_STATIC_FINAL_FALSE = false;\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_FALSE) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getProperty(\"user.home\");\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (PRIVATE_STATIC_FINAL_FALSE) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getProperty(\"user.home\");\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235097,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class EYHBxPt extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_TRUE) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getProperty(\"user.home\");\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235106,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class hQmFnLp extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_FIVE != 5) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getProperty(\"user.home\");\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_FIVE != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getProperty(\"user.home\");\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            int i = 0;\n            \n            if (count > 0 && count <= 20) {\n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235115,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class zvGXrqo extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (IO.staticFive == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getProperty(\"user.home\");\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticFive == 5) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235116,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class VMaKlVr extends AbstractTestCase {\n\n    private void RYNMBky(int count) throws Throwable {\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getProperty(\"user.home\");\n            try {\n                count = Integer.parseInt(stringNumber.trim());\n            } catch (NumberFormatException exceptNumberFormat) {\n                IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n            }\n        }\n        RYNMBky(count);\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235130,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class nCXgeDC {\n\n    \n    public void fDqjRYE(int count) throws Throwable {\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n\n    \n    public void KgJSeXB(int count) throws Throwable {\n        int i = 0;\n        \n        if (count > 0 && count <= 20) {\n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n\npublic class tWzdiIu extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        (new nCXgeDC()).fDqjRYE(count);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getProperty(\"user.home\");\n            try {\n                count = Integer.parseInt(stringNumber.trim());\n            } catch (NumberFormatException exceptNumberFormat) {\n                IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n            }\n        }\n        (new nCXgeDC()).KgJSeXB(count);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235137,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class OkabPuM {\n\n    \n    public void fDqjRYE(int count) throws Throwable {\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n\n    \n    public void KgJSeXB(int count) throws Throwable {\n        int i = 0;\n        \n        if (count > 0 && count <= 20) {\n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n\npublic class ZWPbNZS {\n\n    \n    public void fDqjRYE(int count) throws Throwable {\n        (new OkabPuM()).fDqjRYE(count);\n    }\n\n    \n    public void KgJSeXB(int count) throws Throwable {\n        (new OkabPuM()).KgJSeXB(count);\n    }\n}\n\npublic class fnLzYCA extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        (new ZWPbNZS()).fDqjRYE(count);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getProperty(\"user.home\");\n            try {\n                count = Integer.parseInt(stringNumber.trim());\n            } catch (NumberFormatException exceptNumberFormat) {\n                IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n            }\n        }\n        (new ZWPbNZS()).KgJSeXB(count);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235139,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class dmDlwjE extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getProperty(\"user.home\");\n            try {\n                count = Integer.parseInt(stringNumber.trim());\n            } catch (NumberFormatException exceptNumberFormat) {\n                IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n            }\n        }\n        (new Vzywolc()).RYNMBky((Object) count);\n    }\n}\n\npublic class Vzywolc {\n\n    public void RYNMBky(Object countObject) throws Throwable {\n        int count = (Integer) countObject;\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235152,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\npublic class KlFQXSd extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_FIVE != 5) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getProperty(\"user.home\");\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_FIVE != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getProperty(\"user.home\");\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235187,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\npublic class efJcTSk extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        while (true) {\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getProperty(\"user.home\");\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n            break;\n        }\n        while (true) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n            break;\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235192,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\npublic class fpTZPBV extends AbstractTestCase {\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        for (int j = 0; j < 1; j++) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getProperty(\"user.home\");\n            try {\n                count = Integer.parseInt(stringNumber.trim());\n            } catch (NumberFormatException exceptNumberFormat) {\n                IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n            }\n        }\n        for (int k = 0; k < 1; k++) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235195,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class WbtUzRX extends AbstractTestCase {\n\n    \n    public static boolean qRMEpGJ = false;\n\n    public void boNMSnT() throws Throwable {\n        int count = 0;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getProperty(\"user.home\");\n            try {\n                count = Integer.parseInt(stringNumber.trim());\n            } catch (NumberFormatException exceptNumberFormat) {\n                IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n            }\n        }\n        qRMEpGJ = true;\n        (new bbjaacC()).RYNMBky(count);\n    }\n\n    \n    public static boolean ydhDOMq = false;\n\n    public static boolean HHhrjCy = false;\n\n    public static boolean Pywwbtz = false;\n}\n\npublic class bbjaacC {\n\n    public void RYNMBky(int count) throws Throwable {\n        if (WbtUzRX.qRMEpGJ) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        } else {\n            \n            count = 0;\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235198,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\npublic class aUgmuAw extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int countCopy;\n        {\n            int count;\n            count = Integer.MIN_VALUE;\n            \n            \n            \n            {\n                String stringNumber = System.getProperty(\"user.home\");\n                try {\n                    count = Integer.parseInt(stringNumber.trim());\n                } catch (NumberFormatException exceptNumberFormat) {\n                    IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                }\n            }\n            countCopy = count;\n        }\n        {\n            int count = countCopy;\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235200,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\npublic class hRnOvWz extends AbstractTestCase {\n\n    private int jfXyhIP;\n\n    private int buDVqtm;\n\n    private int QsuyNlG;\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    private void fDqjRYE() throws Throwable {\n        int count = buDVqtm;\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        buDVqtm = count;\n        fDqjRYE();\n    }\n\n    private void KgJSeXB() throws Throwable {\n        int count = QsuyNlG;\n        \n        if (count > 0 && count <= 20) {\n            File file = new File(\"iPuNjQO\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getProperty(\"user.home\");\n            try {\n                count = Integer.parseInt(stringNumber.trim());\n            } catch (NumberFormatException exceptNumberFormat) {\n                IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n            }\n        }\n        QsuyNlG = count;\n        KgJSeXB();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235207,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class RPkBPxJ extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getProperty(\"user.home\");\n            try {\n                count = Integer.parseInt(stringNumber.trim());\n            } catch (NumberFormatException exceptNumberFormat) {\n                IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n            }\n        }\n        (new hTprSiU()).RYNMBky(count);\n    }\n}\n\npublic class hTprSiU {\n\n    public void RYNMBky(int count) throws Throwable {\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235208,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class gNMhaZu {\n\n    \n    public void fDqjRYE(int count) throws Throwable {\n        (new sTdafYh()).fDqjRYE(count);\n    }\n\n    \n    public void KgJSeXB(int count) throws Throwable {\n        (new sTdafYh()).KgJSeXB(count);\n    }\n}\n\npublic class CrNoGbm {\n\n    \n    public void fDqjRYE(int count) throws Throwable {\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n\n    \n    public void KgJSeXB(int count) throws Throwable {\n        \n        if (count > 0 && count <= 20) {\n            File file = new File(\"iPuNjQO\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n\npublic class lBSolcU {\n\n    \n    public void fDqjRYE(int count) throws Throwable {\n        (new CrNoGbm()).fDqjRYE(count);\n    }\n\n    \n    public void KgJSeXB(int count) throws Throwable {\n        (new CrNoGbm()).KgJSeXB(count);\n    }\n}\n\npublic class sTdafYh {\n\n    \n    public void fDqjRYE(int count) throws Throwable {\n        (new lBSolcU()).fDqjRYE(count);\n    }\n\n    \n    public void KgJSeXB(int count) throws Throwable {\n        (new lBSolcU()).KgJSeXB(count);\n    }\n}\n\npublic class ZDiUwAj extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        (new gNMhaZu()).fDqjRYE(count);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getProperty(\"user.home\");\n            try {\n                count = Integer.parseInt(stringNumber.trim());\n            } catch (NumberFormatException exceptNumberFormat) {\n                IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n            }\n        }\n        (new gNMhaZu()).KgJSeXB(count);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235215,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class SKiCRtW extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count = (new NFVKQBc()).ImBBndW();\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n}\n\npublic class NFVKQBc {\n\n    public int ImBBndW() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getProperty(\"user.home\");\n            try {\n                count = Integer.parseInt(stringNumber.trim());\n            } catch (NumberFormatException exceptNumberFormat) {\n                IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n            }\n        }\n        return count;\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235216,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.logging.Level;\n\npublic class ZSVsZrC extends AbstractTestCase {\n\n    static class Container {\n\n        public int containerOne;\n    }\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getProperty(\"user.home\");\n            try {\n                count = Integer.parseInt(stringNumber.trim());\n            } catch (NumberFormatException exceptNumberFormat) {\n                IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n            }\n        }\n        Container countContainer = new Container();\n        countContainer.containerOne = count;\n        (new lLTKFPi()).RYNMBky(countContainer);\n    }\n}\n\npublic class lLTKFPi {\n\n    public void RYNMBky(ZSVsZrC.Container countContainer) throws Throwable {\n        int count = countContainer.containerOne;\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235220,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.Vector;\nimport javax.servlet.http.*;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class ZefOtFC extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        \n        {\n            String stringNumber = System.getProperty(\"user.home\");\n            try {\n                count = Integer.parseInt(stringNumber.trim());\n            } catch (NumberFormatException exceptNumberFormat) {\n                IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n            }\n        }\n        Vector<Integer> countVector = new Vector<Integer>(5);\n        countVector.add(0, count);\n        countVector.add(1, count);\n        countVector.add(2, count);\n        (new UKZpCqu()).RYNMBky(countVector);\n    }\n}\n\npublic class UKZpCqu {\n\n    public void RYNMBky(Vector<Integer> countVector) throws Throwable {\n        int count = countVector.remove(2);\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235226,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.FileOutputStream;\nimport java.io.InputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class IbmEbLZ extends AbstractTestCaseServlet {\n\n    \n    private boolean privateTrue = true;\n\n    private boolean privateFalse = false;\n\n    \n    private void sEXYVUh(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        if (privateFalse) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (request.getContentType() == null || !request.getContentType().contains(\"multipart/form-data\")) {\n                return;\n            }\n            FileOutputStream streamFileOutput = null;\n            InputStream streamInput = null;\n            try {\n                streamFileOutput = new FileOutputStream(\"vjdOwju\");\n                streamInput = request.getInputStream();\n                \n                final int MAXSIZE = 10485760;\n                int bytesReadCount = 0;\n                for (; ; ) {\n                    \n                    if (bytesReadCount >= MAXSIZE) {\n                        response.getWriter().write(\"yoUhOtk\");\n                        break;\n                    }\n                    byte[] inputBytes = new byte[1024];\n                    int bytesRead = streamInput.read(inputBytes);\n                    if (bytesRead == -1) {\n                        break;\n                    }\n                    bytesReadCount += bytesRead;\n                    streamFileOutput.write(inputBytes);\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"nzyUHlm\", exceptIO);\n            } finally {\n                try {\n                    if (streamInput != null) {\n                        streamInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lEWMuXl\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n            response.getWriter().write(\"YFaRmpT\");\n        }\n    }\n\n    \n    private void kYrcdjt(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        if (privateTrue) {\n            if (request.getContentType() == null || !request.getContentType().contains(\"multipart/form-data\")) {\n                return;\n            }\n            FileOutputStream streamFileOutput = null;\n            InputStream streamInput = null;\n            try {\n                streamFileOutput = new FileOutputStream(\"vjdOwju\");\n                streamInput = request.getInputStream();\n                \n                final int MAXSIZE = 10485760;\n                int bytesReadCount = 0;\n                for (; ; ) {\n                    \n                    if (bytesReadCount >= MAXSIZE) {\n                        response.getWriter().write(\"yoUhOtk\");\n                        break;\n                    }\n                    byte[] inputBytes = new byte[1024];\n                    int bytesRead = streamInput.read(inputBytes);\n                    if (bytesRead == -1) {\n                        break;\n                    }\n                    bytesReadCount += bytesRead;\n                    streamFileOutput.write(inputBytes);\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"nzyUHlm\", exceptIO);\n            } finally {\n                try {\n                    if (streamInput != null) {\n                        streamInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lEWMuXl\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n            response.getWriter().write(\"YFaRmpT\");\n        }\n    }\n\n    public void JttWLtS(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        sEXYVUh(request, response);\n        kYrcdjt(request, response);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235243,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.FileOutputStream;\nimport java.io.InputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class CroGMaj extends AbstractTestCaseServlet {\n\n    \n    private void sEXYVUh(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        if (IO.STATIC_FINAL_FALSE) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (request.getContentType() == null || !request.getContentType().contains(\"multipart/form-data\")) {\n                return;\n            }\n            FileOutputStream streamFileOutput = null;\n            InputStream streamInput = null;\n            try {\n                streamFileOutput = new FileOutputStream(\"vjdOwju\");\n                streamInput = request.getInputStream();\n                \n                final int MAXSIZE = 10485760;\n                int bytesReadCount = 0;\n                for (; ; ) {\n                    \n                    if (bytesReadCount >= MAXSIZE) {\n                        response.getWriter().write(\"yoUhOtk\");\n                        break;\n                    }\n                    byte[] inputBytes = new byte[1024];\n                    int bytesRead = streamInput.read(inputBytes);\n                    if (bytesRead == -1) {\n                        break;\n                    }\n                    bytesReadCount += bytesRead;\n                    streamFileOutput.write(inputBytes);\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"nzyUHlm\", exceptIO);\n            } finally {\n                try {\n                    if (streamInput != null) {\n                        streamInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lEWMuXl\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n            response.getWriter().write(\"YFaRmpT\");\n        }\n    }\n\n    \n    private void kYrcdjt(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        if (IO.STATIC_FINAL_TRUE) {\n            if (request.getContentType() == null || !request.getContentType().contains(\"multipart/form-data\")) {\n                return;\n            }\n            FileOutputStream streamFileOutput = null;\n            InputStream streamInput = null;\n            try {\n                streamFileOutput = new FileOutputStream(\"vjdOwju\");\n                streamInput = request.getInputStream();\n                \n                final int MAXSIZE = 10485760;\n                int bytesReadCount = 0;\n                for (; ; ) {\n                    \n                    if (bytesReadCount >= MAXSIZE) {\n                        response.getWriter().write(\"yoUhOtk\");\n                        break;\n                    }\n                    byte[] inputBytes = new byte[1024];\n                    int bytesRead = streamInput.read(inputBytes);\n                    if (bytesRead == -1) {\n                        break;\n                    }\n                    bytesReadCount += bytesRead;\n                    streamFileOutput.write(inputBytes);\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"nzyUHlm\", exceptIO);\n            } finally {\n                try {\n                    if (streamInput != null) {\n                        streamInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lEWMuXl\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n            response.getWriter().write(\"YFaRmpT\");\n        }\n    }\n\n    public void JttWLtS(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        sEXYVUh(request, response);\n        kYrcdjt(request, response);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235251,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.FileOutputStream;\nimport java.io.InputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class TNDIgoq extends AbstractTestCaseServlet {\n\n    public void boNMSnT(HttpServletRequest request, HttpServletResponse response) throws Throwable {\n        for (int j = 0; j < 1; j++) {\n            \n            if (request.getContentType() == null || !request.getContentType().contains(\"multipart/form-data\")) {\n                return;\n            }\n            FileOutputStream streamFileOutput = null;\n            InputStream streamInput = null;\n            try {\n                streamFileOutput = new FileOutputStream(\"EcNpnbG\");\n                streamInput = request.getInputStream();\n                for (; ; ) {\n                    byte[] inputBytes = new byte[1024];\n                    int bytesRead = streamInput.read(inputBytes);\n                    \n                    if (bytesRead == -1) {\n                        break;\n                    }\n                    streamFileOutput.write(inputBytes);\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"nzyUHlm\", exceptIO);\n            } finally {\n                try {\n                    if (streamInput != null) {\n                        streamInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lEWMuXl\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n            response.getWriter().write(\"YFaRmpT\");\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235266,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\n\npublic class XkzwsTI extends AbstractTestCase {\n\n    \n    private boolean privateTrue = true;\n\n    private boolean privateFalse = false;\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (privateTrue) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateTrue) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235276,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\n\npublic class vDWNBfY extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        while (true) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n            break;\n        }\n        while (true) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n            break;\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235298,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\n\npublic class pVVaWzV extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    private void fDqjRYE(int count) throws Throwable {\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        fDqjRYE(count);\n    }\n\n    private void KgJSeXB(int count) throws Throwable {\n        int i = 0;\n        \n        if (count > 0 && count <= 20) {\n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        KgJSeXB(count);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235309,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class YgwtjoI {\n\n    \n    public void fDqjRYE(int count) throws Throwable {\n        (new CzkgoZA()).fDqjRYE(count);\n    }\n\n    \n    public void KgJSeXB(int count) throws Throwable {\n        (new CzkgoZA()).KgJSeXB(count);\n    }\n}\n\npublic class CzkgoZA {\n\n    \n    public void fDqjRYE(int count) throws Throwable {\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n\n    \n    public void KgJSeXB(int count) throws Throwable {\n        int i = 0;\n        \n        if (count > 0 && count <= 20) {\n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n\npublic class rAcgceQ extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        (new YgwtjoI()).fDqjRYE(count);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        (new YgwtjoI()).KgJSeXB(count);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235317,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class bqujpwt extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        (new frgDUjS()).RYNMBky(count);\n    }\n}\n\npublic class frgDUjS {\n\n    public void RYNMBky(int count) throws Throwable {\n        (new bzaubHN()).RYNMBky(count);\n    }\n}\n\npublic class iOBkxre {\n\n    public void RYNMBky(int count) throws Throwable {\n        (new CjgtLvj()).RYNMBky(count);\n    }\n}\n\npublic class CjgtLvj {\n\n    public void RYNMBky(int count) throws Throwable {\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n}\n\npublic class bzaubHN {\n\n    public void RYNMBky(int count) throws Throwable {\n        (new iOBkxre()).RYNMBky(count);\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235320,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class SsGGuZZ extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        int[] countArray = new int[5];\n        countArray[2] = count;\n        (new xMclacO()).RYNMBky(countArray);\n    }\n}\n\npublic class xMclacO {\n\n    public void RYNMBky(int[] countArray) throws Throwable {\n        int count = countArray[2];\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235324,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.HashMap;\nimport javax.servlet.http.*;\n\npublic class VduMlCD extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        HashMap<Integer, Integer> countHashMap = new HashMap<Integer, Integer>();\n        countHashMap.put(0, count);\n        countHashMap.put(1, count);\n        countHashMap.put(2, count);\n        (new OnGLRLG()).RYNMBky(countHashMap);\n    }\n}\n\npublic class OnGLRLG {\n\n    public void RYNMBky(HashMap<Integer, Integer> countHashMap) throws Throwable {\n        int count = countHashMap.get(2);\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235336,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.HashMap;\nimport javax.servlet.http.*;\n\npublic class OnGLRLG {\n\n    \n    public void fDqjRYE(HashMap<Integer, Integer> countHashMap) throws Throwable {\n        int count = countHashMap.get(2);\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n\n    \n    public void KgJSeXB(HashMap<Integer, Integer> countHashMap) throws Throwable {\n        int count = countHashMap.get(2);\n        int i = 0;\n        \n        if (count > 0 && count <= 20) {\n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n\npublic class VduMlCD extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        HashMap<Integer, Integer> countHashMap = new HashMap<Integer, Integer>();\n        countHashMap.put(0, count);\n        countHashMap.put(1, count);\n        countHashMap.put(2, count);\n        (new OnGLRLG()).fDqjRYE(countHashMap);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        HashMap<Integer, Integer> countHashMap = new HashMap<Integer, Integer>();\n        countHashMap.put(0, count);\n        countHashMap.put(1, count);\n        countHashMap.put(2, count);\n        (new OnGLRLG()).KgJSeXB(countHashMap);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235337,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class fLvsgsZ extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (true) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (true) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235342,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class dGgcMEM extends AbstractTestCase {\n\n    \n    private static final boolean PRIVATE_STATIC_FINAL_TRUE = true;\n\n    private static final boolean PRIVATE_STATIC_FINAL_FALSE = false;\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235346,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class mowRgtW extends AbstractTestCase {\n\n    \n    private boolean privateReturnsTrue() {\n        return true;\n    }\n\n    private boolean privateReturnsFalse() {\n        return false;\n    }\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (privateReturnsFalse()) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (privateReturnsTrue()) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (privateReturnsTrue()) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (privateReturnsTrue()) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (privateReturnsTrue()) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateReturnsFalse()) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (privateReturnsTrue()) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (privateReturnsTrue()) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235355,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class wREcrSp extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (IO.STATIC_FINAL_TRUE) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235356,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class rnMjdbg extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        if (IO.staticFalse) {\n            \n            count = 0;\n        } else {\n            \n            count = 2;\n        }\n        if (IO.staticTrue) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        if (IO.staticTrue) {\n            \n            count = 2;\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticTrue) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        if (IO.staticTrue) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticFalse) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        if (IO.staticTrue) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 0;\n        }\n        if (IO.staticTrue) {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235359,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\n\npublic class IRnNHRK extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        if (IO.staticReturnsTrueOrFalse()) {\n            count = Integer.MIN_VALUE;\n            \n            \n            {\n                URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n                BufferedReader readerBuffered = null;\n                InputStreamReader readerInputStream = null;\n                try {\n                    readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    String stringNumber = readerBuffered.readLine();\n                    if (\n                    stringNumber != null) {\n                        try {\n                            count = Integer.parseInt(stringNumber.trim());\n                        } catch (NumberFormatException exceptNumberFormat) {\n                            IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                        }\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            count = 2;\n        }\n        if (IO.staticReturnsTrueOrFalse()) {\n            File file = new File(\"UIqDuhP\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            \n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        } else {\n            \n            if (count > 0 && count <= 20) {\n                File file = new File(\"iPuNjQO\");\n                FileOutputStream streamFileOutput = new FileOutputStream(file);\n                OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n                BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n                int i;\n                for (i = 0; i < count; i++) {\n                    try {\n                        writerBuffered.write(\"CZGMbWo\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                    }\n                }\n                \n                try {\n                    if (writerBuffered != null) {\n                        writerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n                }\n                try {\n                    if (writerOutputStream != null) {\n                        writerOutputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n                }\n                try {\n                    if (streamFileOutput != null) {\n                        streamFileOutput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235362,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class pytwhzT extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        (new wsGOnex()).RYNMBky(count);\n    }\n}\n\npublic class IIclFEL {\n\n    public void RYNMBky(int count) throws Throwable {\n        (new mHuZClb()).RYNMBky(count);\n    }\n}\n\npublic class ggknYdQ {\n\n    public void RYNMBky(int count) throws Throwable {\n        (new IIclFEL()).RYNMBky(count);\n    }\n}\n\npublic class mHuZClb {\n\n    public void RYNMBky(int count) throws Throwable {\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n}\n\npublic class wsGOnex {\n\n    public void RYNMBky(int count) throws Throwable {\n        (new ggknYdQ()).RYNMBky(count);\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235392,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class aDbOQnL extends AbstractTestCase {\n\n    static class Container {\n\n        public int containerOne;\n    }\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        Container countContainer = new Container();\n        countContainer.containerOne = count;\n        (new TdibSlr()).RYNMBky(countContainer);\n    }\n}\n\npublic class TdibSlr {\n\n    public void RYNMBky(aDbOQnL.Container countContainer) throws Throwable {\n        int count = countContainer.containerOne;\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235398,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.HashMap;\nimport javax.servlet.http.*;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class wMlXWqx {\n\n    \n    public void fDqjRYE(HashMap<Integer, Integer> countHashMap) throws Throwable {\n        int count = countHashMap.get(2);\n        File file = new File(\"UIqDuhP\");\n        FileOutputStream streamFileOutput = new FileOutputStream(file);\n        OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n        BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n        int i;\n        \n        for (i = 0; i < count; i++) {\n            try {\n                writerBuffered.write(\"CZGMbWo\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n            }\n        }\n        \n        try {\n            if (writerBuffered != null) {\n                writerBuffered.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n        }\n        try {\n            if (writerOutputStream != null) {\n                writerOutputStream.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n        }\n        try {\n            if (streamFileOutput != null) {\n                streamFileOutput.close();\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n        }\n    }\n\n    \n    public void KgJSeXB(HashMap<Integer, Integer> countHashMap) throws Throwable {\n        int count = countHashMap.get(2);\n        \n        if (count > 0 && count <= 20) {\n            File file = new File(\"iPuNjQO\");\n            FileOutputStream streamFileOutput = new FileOutputStream(file);\n            OutputStreamWriter writerOutputStream = new OutputStreamWriter(streamFileOutput, \"UTF-8\");\n            BufferedWriter writerBuffered = new BufferedWriter(writerOutputStream);\n            int i;\n            for (i = 0; i < count; i++) {\n                try {\n                    writerBuffered.write(\"CZGMbWo\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"FaEEyHT\", exceptIO);\n                }\n            }\n            \n            try {\n                if (writerBuffered != null) {\n                    writerBuffered.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"VKThYlc\", exceptIO);\n            }\n            try {\n                if (writerOutputStream != null) {\n                    writerOutputStream.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"EghvGwe\", exceptIO);\n            }\n            try {\n                if (streamFileOutput != null) {\n                    streamFileOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"lhXiuTy\", exceptIO);\n            }\n        }\n    }\n}\n\npublic class kTKdhZw extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        HashMap<Integer, Integer> countHashMap = new HashMap<Integer, Integer>();\n        countHashMap.put(0, count);\n        countHashMap.put(1, count);\n        countHashMap.put(2, count);\n        (new wMlXWqx()).fDqjRYE(countHashMap);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            URLConnection urlConnection = (new URL(\"http://www.example.org/\")).openConnection();\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                readerInputStream = new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                String stringNumber = readerBuffered.readLine();\n                if (\n                stringNumber != null) {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n            }\n        }\n        HashMap<Integer, Integer> countHashMap = new HashMap<Integer, Integer>();\n        countHashMap.put(0, count);\n        countHashMap.put(1, count);\n        countHashMap.put(2, count);\n        (new wMlXWqx()).KgJSeXB(countHashMap);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235409,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\n\npublic class gyfYWEW extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        int count;\n        switch(5) {\n            case 6:\n                \n                count = 0;\n                break;\n            default:\n                \n                count = 2;\n                break;\n        }\n        switch(7) {\n            case 7:\n                int i = 0;\n                \n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        int count;\n        switch(6) {\n            case 6:\n                \n                count = 2;\n                break;\n            default:\n                \n                count = 0;\n                break;\n        }\n        switch(7) {\n            case 7:\n                int i = 0;\n                \n                for (i = 0; i < count; i++) {\n                    IO.writeLine(\"CZGMbWo\");\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        int count;\n        switch(6) {\n            case 6:\n                count = Integer.MIN_VALUE;\n                \n                \n                {\n                    Socket socket = null;\n                    BufferedReader readerBuffered = null;\n                    InputStreamReader readerInputStream = null;\n                    try {\n                        \n                        socket = new Socket(\"host.example.org\", 39544);\n                        \n                        readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                        readerBuffered = new BufferedReader(readerInputStream);\n                        \n                        String stringNumber = readerBuffered.readLine();\n                        if (stringNumber != null) \n                        {\n                            try {\n                                count = Integer.parseInt(stringNumber.trim());\n                            } catch (NumberFormatException exceptNumberFormat) {\n                                IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                            }\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                    } finally {\n                        \n                        try {\n                            if (readerBuffered != null) {\n                                readerBuffered.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                        }\n                        try {\n                            if (readerInputStream != null) {\n                                readerInputStream.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                        }\n                        \n                        try {\n                            if (socket != null) {\n                                socket.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                count = 0;\n                break;\n        }\n        switch(8) {\n            case 7:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n            default:\n                int i = 0;\n                \n                if (count > 0 && count <= 20) {\n                    for (i = 0; i < count; i++) {\n                        IO.writeLine(\"CZGMbWo\");\n                    }\n                }\n                break;\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        int count;\n        switch(6) {\n            case 6:\n                count = Integer.MIN_VALUE;\n                \n                \n                {\n                    Socket socket = null;\n                    BufferedReader readerBuffered = null;\n                    InputStreamReader readerInputStream = null;\n                    try {\n                        \n                        socket = new Socket(\"host.example.org\", 39544);\n                        \n                        readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                        readerBuffered = new BufferedReader(readerInputStream);\n                        \n                        String stringNumber = readerBuffered.readLine();\n                        if (stringNumber != null) \n                        {\n                            try {\n                                count = Integer.parseInt(stringNumber.trim());\n                            } catch (NumberFormatException exceptNumberFormat) {\n                                IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                            }\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                    } finally {\n                        \n                        try {\n                            if (readerBuffered != null) {\n                                readerBuffered.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                        }\n                        try {\n                            if (readerInputStream != null) {\n                                readerInputStream.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                        }\n                        \n                        try {\n                            if (socket != null) {\n                                socket.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                count = 0;\n                break;\n        }\n        switch(7) {\n            case 7:\n                int i = 0;\n                \n                if (count > 0 && count <= 20) {\n                    for (i = 0; i < count; i++) {\n                        IO.writeLine(\"CZGMbWo\");\n                    }\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235441,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\n\npublic class qmiVSgC extends AbstractTestCase {\n\n    \n    private boolean dWmGbZa = false;\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                String stringNumber = readerBuffered.readLine();\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        dWmGbZa = true;\n        RYNMBky(count);\n    }\n\n    private void RYNMBky(int count) throws Throwable {\n        if (dWmGbZa) {\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n\n    \n    private boolean aRnSMVj = false;\n\n    private boolean aOWZSGn = false;\n\n    private boolean DBbhdbc = false;\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235446,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.logging.Level;\n\npublic class cgLlQHD extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                String stringNumber = readerBuffered.readLine();\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        (new XOGZrWI()).RYNMBky(count);\n    }\n}\n\npublic class XOGZrWI {\n\n    public void RYNMBky(int count) throws Throwable {\n        (new kGriBct()).RYNMBky(count);\n    }\n}\n\npublic class kGriBct {\n\n    public void RYNMBky(int count) throws Throwable {\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235460,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.LinkedList;\nimport javax.servlet.http.*;\n\npublic class jRphdPE {\n\n    \n    public void fDqjRYE(LinkedList<Integer> countLinkedList) throws Throwable {\n        int count = countLinkedList.remove(2);\n        int i = 0;\n        \n        for (i = 0; i < count; i++) {\n            IO.writeLine(\"CZGMbWo\");\n        }\n    }\n\n    \n    public void KgJSeXB(LinkedList<Integer> countLinkedList) throws Throwable {\n        int count = countLinkedList.remove(2);\n        int i = 0;\n        \n        if (count > 0 && count <= 20) {\n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        }\n    }\n}\n\npublic class MHEcwrs extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        int count;\n        \n        count = 2;\n        LinkedList<Integer> countLinkedList = new LinkedList<Integer>();\n        countLinkedList.add(0, count);\n        countLinkedList.add(1, count);\n        countLinkedList.add(2, count);\n        (new jRphdPE()).fDqjRYE(countLinkedList);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                String stringNumber = readerBuffered.readLine();\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        LinkedList<Integer> countLinkedList = new LinkedList<Integer>();\n        countLinkedList.add(0, count);\n        countLinkedList.add(1, count);\n        countLinkedList.add(2, count);\n        (new jRphdPE()).KgJSeXB(countLinkedList);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235479,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  },
  {
    "CWE_ID": [
      "CWE-400"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectOutput;\nimport java.io.ObjectOutputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.net.Socket;\n\npublic class KkQvZuV extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        int count;\n        count = Integer.MIN_VALUE;\n        \n        \n        {\n            Socket socket = null;\n            BufferedReader readerBuffered = null;\n            InputStreamReader readerInputStream = null;\n            try {\n                \n                socket = new Socket(\"host.example.org\", 39544);\n                \n                readerInputStream = new InputStreamReader(socket.getInputStream(), \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                String stringNumber = readerBuffered.readLine();\n                if (stringNumber != null) \n                {\n                    try {\n                        count = Integer.parseInt(stringNumber.trim());\n                    } catch (NumberFormatException exceptNumberFormat) {\n                        IO.logger.log(Level.WARNING, \"UkOjIXF\", exceptNumberFormat);\n                    }\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                \n                try {\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"wpVXzhZ\", exceptIO);\n                }\n            }\n        }\n        \n        ByteArrayOutputStream streamByteArrayOutput = null;\n        ObjectOutput outputObject = null;\n        try {\n            streamByteArrayOutput = new ByteArrayOutputStream();\n            outputObject = new ObjectOutputStream(streamByteArrayOutput);\n            outputObject.writeObject(count);\n            byte[] countSerialized = streamByteArrayOutput.toByteArray();\n            (new lJWNSko()).RYNMBky(countSerialized);\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"IQdccST\", exceptIO);\n        } finally {\n            \n            try {\n                if (outputObject != null) {\n                    outputObject.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"LgADWEx\", exceptIO);\n            }\n            try {\n                if (streamByteArrayOutput != null) {\n                    streamByteArrayOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"vFutZps\", exceptIO);\n            }\n        }\n    }\n}\n\npublic class lJWNSko {\n\n    public void RYNMBky(byte[] countSerialized) throws Throwable {\n        \n        ByteArrayInputStream streamByteArrayInput = null;\n        ObjectInputStream streamObjectInput = null;\n        try {\n            streamByteArrayInput = new ByteArrayInputStream(countSerialized);\n            streamObjectInput = new ObjectInputStream(streamByteArrayInput);\n            int count = (Integer) streamObjectInput.readObject();\n            int i = 0;\n            \n            for (i = 0; i < count; i++) {\n                IO.writeLine(\"CZGMbWo\");\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VcFIKxo\", exceptIO);\n        } catch (ClassNotFoundException exceptClassNotFound) {\n            IO.logger.log(Level.WARNING, \"XOCCPfT\", exceptClassNotFound);\n        } finally {\n            \n            try {\n                if (streamObjectInput != null) {\n                    streamObjectInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"kpDMUXH\", exceptIO);\n            }\n            try {\n                if (streamByteArrayInput != null) {\n                    streamByteArrayInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"oiWyzFb\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1235482,
    "RELATED_CWE": [
      "CWE-125",
      "CWE-787",
      "CWE-416"
    ]
  }
]