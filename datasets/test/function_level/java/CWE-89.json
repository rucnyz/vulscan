[
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class PXEXDNA extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (true) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (true) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249690,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class hFGXBLz extends AbstractTestCase {\n\n    \n    private static final boolean PRIVATE_STATIC_FINAL_TRUE = true;\n\n    private static final boolean PRIVATE_STATIC_FINAL_FALSE = false;\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249694,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class ztAqfHd extends AbstractTestCase {\n\n    \n    private static final int PRIVATE_STATIC_FINAL_FIVE = 5;\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249698,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class ZVuDhDF extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_TRUE) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249704,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class vdRRVnN extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrueOrFalse()) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = \"foo\";\n        }\n        if (IO.staticReturnsTrueOrFalse()) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        } else {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                PreparedStatement sqlStatement = null;\n                try {\n                    \n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.prepareStatement(\"update users set hitcount=hitcount+1 where name=?\");\n                    for (int i = 0; i < names.length; i++) {\n                        sqlStatement.setString(1, names[i]);\n                        sqlStatement.addBatch();\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249710,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class NNINJBg extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        switch(6) {\n            case 6:\n                \n                \n                data = System.getenv(\"ADD\");\n                break;\n            default:\n                \n                data = null;\n                break;\n        }\n        switch(7) {\n            case 7:\n                if (data != null) {\n                    String[] names = data.split(\"-\");\n                    int successCount = 0;\n                    Connection dbConnection = null;\n                    Statement sqlStatement = null;\n                    try {\n                        dbConnection = IO.getDBConnection();\n                        sqlStatement = dbConnection.createStatement();\n                        for (int i = 0; i < names.length; i++) {\n                            \n                            sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                        }\n                        int[] resultsArray = sqlStatement.executeBatch();\n                        for (int i = 0; i < names.length; i++) {\n                            if (resultsArray[i] > 0) {\n                                successCount++;\n                            }\n                        }\n                        IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                    } finally {\n                        try {\n                            if (sqlStatement != null) {\n                                sqlStatement.close();\n                            }\n                        } catch (SQLException exceptSql) {\n                            IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                        }\n                        try {\n                            if (dbConnection != null) {\n                                dbConnection.close();\n                            }\n                        } catch (SQLException exceptSql) {\n                            IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249716,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class CHUvzxR extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        \n        data = System.getenv(\"ADD\");\n        for (int j = 0; j < 1; j++) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249720,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class cimHQPh extends AbstractTestCase {\n\n    \n    private boolean dWmGbZa = false;\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        dWmGbZa = true;\n        RYNMBky(data);\n    }\n\n    private void RYNMBky(String data) throws Throwable {\n        if (dWmGbZa) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private boolean aRnSMVj = false;\n\n    private boolean aOWZSGn = false;\n\n    private boolean DBbhdbc = false;\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249722,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class ZkBKwEi extends AbstractTestCase {\n\n    private void RYNMBky(String data) throws Throwable {\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                for (int i = 0; i < names.length; i++) {\n                    \n                    sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        RYNMBky(data);\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249728,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class zbYkdxC extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        (new KCkmEVe()).RYNMBky(data);\n    }\n}\n\npublic class dfuUvzZ {\n\n    public void RYNMBky(String data) throws Throwable {\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                for (int i = 0; i < names.length; i++) {\n                    \n                    sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n\npublic class LocAuIe {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new dfuUvzZ()).RYNMBky(data);\n    }\n}\n\npublic class KCkmEVe {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new LocAuIe()).RYNMBky(data);\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249738,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class UvbaPyS extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        String[] dataArray = new String[5];\n        dataArray[2] = data;\n        (new MmxHDbn()).RYNMBky(dataArray);\n    }\n}\n\npublic class MmxHDbn {\n\n    public void RYNMBky(String[] dataArray) throws Throwable {\n        String data = dataArray[2];\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                for (int i = 0; i < names.length; i++) {\n                    \n                    sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249744,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.HashMap;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class RisqYxs extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();\n        dataHashMap.put(0, data);\n        dataHashMap.put(1, data);\n        dataHashMap.put(2, data);\n        (new vIGZYyV()).RYNMBky(dataHashMap);\n    }\n}\n\npublic class vIGZYyV {\n\n    public void RYNMBky(HashMap<Integer, String> dataHashMap) throws Throwable {\n        String data = dataHashMap.get(2);\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                for (int i = 0; i < names.length; i++) {\n                    \n                    sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249756,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.io.ByteArrayInputStream;\nimport java.io.ObjectInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.servlet.http.*;\nimport java.sql.*;\n\npublic class NxqLWAH extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        \n        ByteArrayOutputStream streamByteArrayOutput = null;\n        ObjectOutput outputObject = null;\n        try {\n            streamByteArrayOutput = new ByteArrayOutputStream();\n            outputObject = new ObjectOutputStream(streamByteArrayOutput);\n            outputObject.writeObject(data);\n            byte[] dataSerialized = streamByteArrayOutput.toByteArray();\n            (new ziQQdlV()).RYNMBky(dataSerialized);\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"IQdccST\", exceptIO);\n        } finally {\n            \n            try {\n                if (outputObject != null) {\n                    outputObject.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"LgADWEx\", exceptIO);\n            }\n            try {\n                if (streamByteArrayOutput != null) {\n                    streamByteArrayOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"vFutZps\", exceptIO);\n            }\n        }\n    }\n}\n\npublic class ziQQdlV {\n\n    public void RYNMBky(byte[] dataSerialized) throws Throwable {\n        \n        ByteArrayInputStream streamByteArrayInput = null;\n        ObjectInputStream streamObjectInput = null;\n        try {\n            streamByteArrayInput = new ByteArrayInputStream(dataSerialized);\n            streamObjectInput = new ObjectInputStream(streamByteArrayInput);\n            String data = (String) streamObjectInput.readObject();\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VcFIKxo\", exceptIO);\n        } catch (ClassNotFoundException exceptClassNotFound) {\n            IO.logger.log(Level.WARNING, \"XOCCPfT\", exceptClassNotFound);\n        } finally {\n            \n            try {\n                if (streamObjectInput != null) {\n                    streamObjectInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"kpDMUXH\", exceptIO);\n            }\n            try {\n                if (streamByteArrayInput != null) {\n                    streamByteArrayInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"oiWyzFb\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249758,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class voTYERU extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (true) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (true) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249762,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class sSIMjQz extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (5 != 5) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (5 == 5) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (5 == 5) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (5 == 5) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (5 == 5) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (5 != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"select * from users where name=?\");\n                sqlStatement.setString(1, data);\n                resultSet = sqlStatement.executeQuery();\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (5 == 5) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (5 == 5) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"select * from users where name=?\");\n                sqlStatement.setString(1, data);\n                resultSet = sqlStatement.executeQuery();\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249765,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class Pbwtbpv extends AbstractTestCase {\n\n    \n    private boolean privateTrue = true;\n\n    private boolean privateFalse = false;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (privateFalse) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (privateTrue) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (privateTrue) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (privateTrue) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (privateTrue) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (privateFalse) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"select * from users where name=?\");\n                sqlStatement.setString(1, data);\n                resultSet = sqlStatement.executeQuery();\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (privateTrue) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (privateTrue) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"select * from users where name=?\");\n                sqlStatement.setString(1, data);\n                resultSet = sqlStatement.executeQuery();\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249769,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class OFeGVEs extends AbstractTestCase {\n\n    \n    private int privateFive = 5;\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (privateFive == 5) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (privateFive == 5) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249772,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class vZRNIlt extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (IO.staticReturnsFalse()) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (IO.staticReturnsTrue()) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrue()) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticReturnsTrue()) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrue()) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticReturnsFalse()) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"select * from users where name=?\");\n                sqlStatement.setString(1, data);\n                resultSet = sqlStatement.executeQuery();\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrue()) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticReturnsTrue()) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"select * from users where name=?\");\n                sqlStatement.setString(1, data);\n                resultSet = sqlStatement.executeQuery();\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249781,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class UWEbLwo extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrueOrFalse()) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = \"foo\";\n        }\n        if (IO.staticReturnsTrueOrFalse()) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"select * from users where name=?\");\n                sqlStatement.setString(1, data);\n                resultSet = sqlStatement.executeQuery();\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249782,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class ExyzwCg extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249784,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class IMLeGvD extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticFive == 5) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticFive == 5) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249786,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class hVJLeIb extends AbstractTestCase {\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        while (true) {\n            \n            data = \"foo\";\n            break;\n        }\n        while (true) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n            break;\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        while (true) {\n            \n            \n            data = System.getenv(\"ADD\");\n            break;\n        }\n        while (true) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"select * from users where name=?\");\n                sqlStatement.setString(1, data);\n                resultSet = sqlStatement.executeQuery();\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n            break;\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249791,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class GJIFiUT extends AbstractTestCase {\n\n    \n    private boolean dWmGbZa = false;\n\n    \n    private boolean aRnSMVj = false;\n\n    private boolean aOWZSGn = false;\n\n    private boolean DBbhdbc = false;\n\n    public void JttWLtS() throws Throwable {\n        uytpYbp();\n        OQsEKDS();\n        EXrOlJC();\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        aRnSMVj = false;\n        ZpnQtvQ(data);\n    }\n\n    private void ZpnQtvQ(String data) throws Throwable {\n        if (aRnSMVj) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"select * from users where name=?\");\n                sqlStatement.setString(1, data);\n                resultSet = sqlStatement.executeQuery();\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        aOWZSGn = true;\n        VmywRrZ(data);\n    }\n\n    private void VmywRrZ(String data) throws Throwable {\n        if (aOWZSGn) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"select * from users where name=?\");\n                sqlStatement.setString(1, data);\n                resultSet = sqlStatement.executeQuery();\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        DBbhdbc = true;\n        fDqjRYE(data);\n    }\n\n    private void fDqjRYE(String data) throws Throwable {\n        if (DBbhdbc) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249795,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class JMhhjSG extends AbstractTestCase {\n\n    \n    public static boolean qRMEpGJ = false;\n\n    public void boNMSnT() throws Throwable {\n        String data = null;\n        \n        \n        data = System.getenv(\"ADD\");\n        qRMEpGJ = true;\n        (new HJijAeL()).RYNMBky(data);\n    }\n\n    \n    public static boolean ydhDOMq = false;\n\n    public static boolean HHhrjCy = false;\n\n    public static boolean Pywwbtz = false;\n}\n\npublic class HJijAeL {\n\n    public void RYNMBky(String data) throws Throwable {\n        if (JMhhjSG.qRMEpGJ) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249796,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class HdGqtlu extends AbstractTestCase {\n\n    private void RYNMBky(String data) throws Throwable {\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        ResultSet resultSet = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n            IO.writeLine(resultSet.getRow());\n            \n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        RYNMBky(data);\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249800,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class ZRdqeLM {\n\n    \n    public String wHnwAlc() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        return data;\n    }\n\n    \n    public String snawHrb() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        return data;\n    }\n}\n\npublic class GzsTrSN extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data = (new ZRdqeLM()).wHnwAlc();\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        ResultSet resultSet = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n            IO.writeLine(resultSet.getRow());\n            \n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data = (new ZRdqeLM()).snawHrb();\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        ResultSet resultSet = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"select * from users where name=?\");\n            sqlStatement.setString(1, data);\n            resultSet = sqlStatement.executeQuery();\n            IO.writeLine(resultSet.getRow());\n            \n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249815,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class ckiHWEH extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        String[] dataArray = new String[5];\n        dataArray[2] = data;\n        (new KLOaagu()).RYNMBky(dataArray);\n    }\n}\n\npublic class KLOaagu {\n\n    public void RYNMBky(String[] dataArray) throws Throwable {\n        String data = dataArray[2];\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        ResultSet resultSet = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n            IO.writeLine(resultSet.getRow());\n            \n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249816,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.Vector;\nimport javax.servlet.http.*;\n\npublic class LwIhGEy extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        Vector<String> dataVector = new Vector<String>(5);\n        dataVector.add(0, data);\n        dataVector.add(1, data);\n        dataVector.add(2, data);\n        (new YYwrNuz()).RYNMBky(dataVector);\n    }\n}\n\npublic class YYwrNuz {\n\n    public void RYNMBky(Vector<String> dataVector) throws Throwable {\n        String data = dataVector.remove(2);\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        ResultSet resultSet = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n            IO.writeLine(resultSet.getRow());\n            \n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249824,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.HashMap;\nimport javax.servlet.http.*;\n\npublic class qVeAQbQ extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();\n        dataHashMap.put(0, data);\n        dataHashMap.put(1, data);\n        dataHashMap.put(2, data);\n        (new qBaZhkI()).RYNMBky(dataHashMap);\n    }\n}\n\npublic class qBaZhkI {\n\n    public void RYNMBky(HashMap<Integer, String> dataHashMap) throws Throwable {\n        String data = dataHashMap.get(2);\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        ResultSet resultSet = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n            IO.writeLine(resultSet.getRow());\n            \n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249828,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class jBrhJFU extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (true) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (true) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249834,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class eJifieg extends AbstractTestCase {\n\n    \n    private int privateFive = 5;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (privateFive != 5) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (privateFive == 5) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (privateFive == 5) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (privateFive == 5) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (privateFive == 5) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (privateFive != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                int rowCount = sqlStatement.executeUpdate();\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (privateFive == 5) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (privateFive == 5) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                int rowCount = sqlStatement.executeUpdate();\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249845,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class mCirUTf extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_TRUE) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249848,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class CweCzdg extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249856,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class UspkwZF extends AbstractTestCase {\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        for (int j = 0; j < 1; j++) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        for (int k = 0; k < 1; k++) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                int rowCount = sqlStatement.executeUpdate();\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249865,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class AjYaqqO extends AbstractTestCase {\n\n    \n    public static boolean qRMEpGJ = false;\n\n    public void boNMSnT() throws Throwable {\n        String data = null;\n        \n        \n        data = System.getenv(\"ADD\");\n        qRMEpGJ = true;\n        (new iYochPQ()).RYNMBky(data);\n    }\n\n    \n    public static boolean ydhDOMq = false;\n\n    public static boolean HHhrjCy = false;\n\n    public static boolean Pywwbtz = false;\n}\n\npublic class iYochPQ {\n\n    public void RYNMBky(String data) throws Throwable {\n        if (AjYaqqO.qRMEpGJ) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249868,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class btqQzFz extends AbstractTestCase {\n\n    \n    private String wHnwAlc() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        return data;\n    }\n\n    private void EXrOlJC() throws Throwable {\n        String data = wHnwAlc();\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    private String snawHrb() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        return data;\n    }\n\n    private void NDSwpcn() throws Throwable {\n        String data = snawHrb();\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n            sqlStatement.setString(1, data);\n            int rowCount = sqlStatement.executeUpdate();\n            IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249875,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class lkrybbM extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        (new mbvaTzq()).RYNMBky(data);\n    }\n}\n\npublic class mbvaTzq {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new xvdRjiv()).RYNMBky(data);\n    }\n}\n\npublic class xvdRjiv {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new CCDNcLx()).RYNMBky(data);\n    }\n}\n\npublic class CCDNcLx {\n\n    public void RYNMBky(String data) throws Throwable {\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249882,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class PjiyWsn extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data = (new ZZUExNk()).ImBBndW();\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n\npublic class ZZUExNk {\n\n    public String ImBBndW() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        return data;\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249886,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class yTtmNeY extends AbstractTestCase {\n\n    static class Container {\n\n        public String containerOne;\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        Container dataContainer = new Container();\n        dataContainer.containerOne = data;\n        (new VlVWmnb()).RYNMBky(dataContainer);\n    }\n}\n\npublic class VlVWmnb {\n\n    public void RYNMBky(yTtmNeY.Container dataContainer) throws Throwable {\n        String data = dataContainer.containerOne;\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249890,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class mJQIRHF extends AbstractTestCase {\n\n    \n    private static final int PRIVATE_STATIC_FINAL_FIVE = 5;\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249914,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class PnPMJUH extends AbstractTestCase {\n\n    \n    private int privateFive = 5;\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (privateFive == 5) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (privateFive == 5) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249916,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class YSBMTdj extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrue()) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticReturnsTrue()) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249924,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class ZeiAPuS extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249928,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class iFfhpIk extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticFive == 5) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticFive == 5) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249930,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class eDeYfFe extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        while (true) {\n            \n            \n            data = System.getenv(\"ADD\");\n            break;\n        }\n        while (true) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n            break;\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249934,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class OOQBeza extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        \n        data = System.getenv(\"ADD\");\n        for (int j = 0; j < 1; j++) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249936,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class SEfAXNu extends AbstractTestCase {\n\n    \n    private boolean dWmGbZa = false;\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        dWmGbZa = true;\n        RYNMBky(data);\n    }\n\n    private void RYNMBky(String data) throws Throwable {\n        if (dWmGbZa) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private boolean aRnSMVj = false;\n\n    private boolean aOWZSGn = false;\n\n    private boolean DBbhdbc = false;\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249938,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class AQxmyIp extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String dataCopy;\n        {\n            String data;\n            \n            \n            data = System.getenv(\"ADD\");\n            dataCopy = data;\n        }\n        {\n            String data = dataCopy;\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249942,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class KGsDETM extends AbstractTestCase {\n\n    private void RYNMBky(String data) throws Throwable {\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        RYNMBky(data);\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249944,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class PnwNYjL extends AbstractTestCase {\n\n    \n    private String wHnwAlc() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        return data;\n    }\n\n    private void EXrOlJC() throws Throwable {\n        String data = wHnwAlc();\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    private String snawHrb() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        return data;\n    }\n\n    private void NDSwpcn() throws Throwable {\n        String data = snawHrb();\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n            sqlStatement.setString(1, data);\n            Boolean result = sqlStatement.execute();\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249947,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class okdZrOO {\n\n    \n    public String wHnwAlc() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        return data;\n    }\n\n    \n    public String snawHrb() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        return data;\n    }\n}\n\npublic class YaXcFDZ extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data = (new okdZrOO()).wHnwAlc();\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data = (new okdZrOO()).snawHrb();\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n            sqlStatement.setString(1, data);\n            Boolean result = sqlStatement.execute();\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249959,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class WaEvFNB extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        String[] dataArray = new String[5];\n        dataArray[2] = data;\n        (new OhNWnsc()).RYNMBky(dataArray);\n    }\n}\n\npublic class OhNWnsc {\n\n    public void RYNMBky(String[] dataArray) throws Throwable {\n        String data = dataArray[2];\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249960,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.LinkedList;\nimport javax.servlet.http.*;\n\npublic class CgCiOmg extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        LinkedList<String> dataLinkedList = new LinkedList<String>();\n        dataLinkedList.add(0, data);\n        dataLinkedList.add(1, data);\n        dataLinkedList.add(2, data);\n        (new DHyKRHa()).RYNMBky(dataLinkedList);\n    }\n}\n\npublic class DHyKRHa {\n\n    public void RYNMBky(LinkedList<String> dataLinkedList) throws Throwable {\n        String data = dataLinkedList.remove(2);\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249970,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class ZXHBlMT extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (5 == 5) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (5 == 5) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249980,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class Mmzkbcx extends AbstractTestCase {\n\n    \n    private static final boolean PRIVATE_STATIC_FINAL_TRUE = true;\n\n    private static final boolean PRIVATE_STATIC_FINAL_FALSE = false;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FALSE) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FALSE) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249983,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class aLAeMOw extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_FALSE) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_TRUE) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_TRUE) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (IO.STATIC_FINAL_FALSE) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_TRUE) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249993,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class hqfLJag extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        while (true) {\n            \n            \n            data = System.getenv(\"ADD\");\n            break;\n        }\n        while (true) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n            break;\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250006,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class lUPaOYI extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        (new ViXxVxj()).RYNMBky(data);\n    }\n}\n\npublic class ViXxVxj {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new WUwNlSX()).RYNMBky(data);\n    }\n}\n\npublic class WUwNlSX {\n\n    public void RYNMBky(String data) throws Throwable {\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            Boolean result = sqlStatement.execute();\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250024,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class eKtpIDE extends AbstractTestCase {\n\n    static class Container {\n\n        public String containerOne;\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        Container dataContainer = new Container();\n        dataContainer.containerOne = data;\n        (new MVzromV()).RYNMBky(dataContainer);\n    }\n}\n\npublic class MVzromV {\n\n    public void RYNMBky(eKtpIDE.Container dataContainer) throws Throwable {\n        String data = dataContainer.containerOne;\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            Boolean result = sqlStatement.execute();\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250034,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class CWpuiXG extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                for (int i = 0; i < names.length; i++) {\n                    \n                    sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250048,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class jKMOwwr extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (true) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (true) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250050,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class ZLoRQeJ extends AbstractTestCase {\n\n    \n    private static final boolean PRIVATE_STATIC_FINAL_TRUE = true;\n\n    private static final boolean PRIVATE_STATIC_FINAL_FALSE = false;\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250054,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class UEmwKTv extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticFive == 5) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticFive == 5) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250074,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class HNhvMwm extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        while (true) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n            break;\n        }\n        while (true) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n            break;\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250078,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class iSNirSl extends AbstractTestCase {\n\n    \n    private boolean dWmGbZa = false;\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        dWmGbZa = true;\n        RYNMBky(data);\n    }\n\n    private void RYNMBky(String data) throws Throwable {\n        if (dWmGbZa) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private boolean aRnSMVj = false;\n\n    private boolean aOWZSGn = false;\n\n    private boolean DBbhdbc = false;\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250082,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class HTQfOlX extends AbstractTestCase {\n\n    \n    public static boolean qRMEpGJ = false;\n\n    public void boNMSnT() throws Throwable {\n        String data = null;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        qRMEpGJ = true;\n        (new PeStpnP()).RYNMBky(data);\n    }\n\n    \n    public static boolean ydhDOMq = false;\n\n    public static boolean HHhrjCy = false;\n\n    public static boolean Pywwbtz = false;\n}\n\npublic class PeStpnP {\n\n    public void RYNMBky(String data) throws Throwable {\n        if (HTQfOlX.qRMEpGJ) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250084,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class lhUrGED extends AbstractTestCase {\n\n    private void RYNMBky(String data) throws Throwable {\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                for (int i = 0; i < names.length; i++) {\n                    \n                    sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        RYNMBky(data);\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250088,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class nztkBtv extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        (new nayURjM()).RYNMBky(data);\n    }\n}\n\npublic class LhTNYcS {\n\n    public void RYNMBky(String data) throws Throwable {\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                for (int i = 0; i < names.length; i++) {\n                    \n                    sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n\npublic class nayURjM {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new LhTNYcS()).RYNMBky(data);\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250096,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class UCHsvkq extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        (new FuRYNJp()).RYNMBky(data);\n    }\n}\n\npublic class FuRYNJp {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new GMOKqds()).RYNMBky(data);\n    }\n}\n\npublic class GMOKqds {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new ULwJcOJ()).RYNMBky(data);\n    }\n}\n\npublic class ULwJcOJ {\n\n    public void RYNMBky(String data) throws Throwable {\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                for (int i = 0; i < names.length; i++) {\n                    \n                    sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250098,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class YwxHOFa extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        String[] dataArray = new String[5];\n        dataArray[2] = data;\n        (new MDXLWHH()).RYNMBky(dataArray);\n    }\n}\n\npublic class MDXLWHH {\n\n    public void RYNMBky(String[] dataArray) throws Throwable {\n        String data = dataArray[2];\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                for (int i = 0; i < names.length; i++) {\n                    \n                    sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250104,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class QKqwLxG extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        (new hRmDgMN()).RYNMBky((Object) data);\n    }\n}\n\npublic class hRmDgMN {\n\n    public void RYNMBky(Object dataObject) throws Throwable {\n        String data = (String) dataObject;\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                for (int i = 0; i < names.length; i++) {\n                    \n                    sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250110,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class YpwvyOH extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (5 == 5) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (5 == 5) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250124,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class piBfjGI extends AbstractTestCase {\n\n    \n    private static final boolean PRIVATE_STATIC_FINAL_TRUE = true;\n\n    private static final boolean PRIVATE_STATIC_FINAL_FALSE = false;\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250126,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class piBfjGI extends AbstractTestCase {\n\n    \n    private static final boolean PRIVATE_STATIC_FINAL_TRUE = true;\n\n    private static final boolean PRIVATE_STATIC_FINAL_FALSE = false;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FALSE) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FALSE) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"select * from users where name=?\");\n                sqlStatement.setString(1, data);\n                resultSet = sqlStatement.executeQuery();\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"select * from users where name=?\");\n                sqlStatement.setString(1, data);\n                resultSet = sqlStatement.executeQuery();\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250127,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class fqURrnA extends AbstractTestCase {\n\n    \n    private boolean privateTrue = true;\n\n    private boolean privateFalse = false;\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (privateTrue) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (privateTrue) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250128,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class fqURrnA extends AbstractTestCase {\n\n    \n    private boolean privateTrue = true;\n\n    private boolean privateFalse = false;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (privateFalse) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (privateTrue) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (privateTrue) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (privateTrue) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (privateTrue) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (privateFalse) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"select * from users where name=?\");\n                sqlStatement.setString(1, data);\n                resultSet = sqlStatement.executeQuery();\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (privateTrue) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (privateTrue) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"select * from users where name=?\");\n                sqlStatement.setString(1, data);\n                resultSet = sqlStatement.executeQuery();\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250129,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class HoNsMUJ extends AbstractTestCase {\n\n    \n    private int privateFive = 5;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (privateFive != 5) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (privateFive == 5) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (privateFive == 5) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (privateFive == 5) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (privateFive == 5) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (privateFive != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"select * from users where name=?\");\n                sqlStatement.setString(1, data);\n                resultSet = sqlStatement.executeQuery();\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (privateFive == 5) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (privateFive == 5) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"select * from users where name=?\");\n                sqlStatement.setString(1, data);\n                resultSet = sqlStatement.executeQuery();\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250133,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class MScolBk extends AbstractTestCase {\n\n    \n    private boolean privateReturnsTrue() {\n        return true;\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (privateReturnsTrue()) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (privateReturnsTrue()) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250134,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class eFjbSPR extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrueOrFalse()) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = \"foo\";\n        }\n        if (IO.staticReturnsTrueOrFalse()) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"select * from users where name=?\");\n                sqlStatement.setString(1, data);\n                resultSet = sqlStatement.executeQuery();\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250142,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class XUmeSWU extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        switch(6) {\n            case 6:\n                data = \"\";\n                \n                {\n                    File file = new File(\"C:\\\\data.txt\");\n                    FileInputStream streamFileInput = null;\n                    InputStreamReader readerInputStream = null;\n                    BufferedReader readerBuffered = null;\n                    try {\n                        \n                        streamFileInput = new FileInputStream(file);\n                        readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                        readerBuffered = new BufferedReader(readerInputStream);\n                        \n                        \n                        data = readerBuffered.readLine();\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                    } finally {\n                        \n                        try {\n                            if (readerBuffered != null) {\n                                readerBuffered.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                        }\n                        try {\n                            if (readerInputStream != null) {\n                                readerInputStream.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                        }\n                        try {\n                            if (streamFileInput != null) {\n                                streamFileInput.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                data = null;\n                break;\n        }\n        switch(7) {\n            case 7:\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                ResultSet resultSet = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    \n                    resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                    IO.writeLine(resultSet.getRow());\n                    \n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (resultSet != null) {\n                            resultSet.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                    }\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250148,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class PsmoumO extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        for (int j = 0; j < 1; j++) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250152,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class LYFaidA extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        String[] dataArray = new String[5];\n        dataArray[2] = data;\n        (new zvveBZH()).RYNMBky(dataArray);\n    }\n}\n\npublic class zvveBZH {\n\n    public void RYNMBky(String[] dataArray) throws Throwable {\n        String data = dataArray[2];\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        ResultSet resultSet = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n            IO.writeLine(resultSet.getRow());\n            \n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250176,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class gKssZdY extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        (new mLzuWZg()).RYNMBky((Object) data);\n    }\n}\n\npublic class mLzuWZg {\n\n    public void RYNMBky(Object dataObject) throws Throwable {\n        String data = (String) dataObject;\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        ResultSet resultSet = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n            IO.writeLine(resultSet.getRow());\n            \n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250182,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.HashMap;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class ISLwLTJ extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();\n        dataHashMap.put(0, data);\n        dataHashMap.put(1, data);\n        dataHashMap.put(2, data);\n        (new osQpgao()).RYNMBky(dataHashMap);\n    }\n}\n\npublic class osQpgao {\n\n    public void RYNMBky(HashMap<Integer, String> dataHashMap) throws Throwable {\n        String data = dataHashMap.get(2);\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        ResultSet resultSet = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n            IO.writeLine(resultSet.getRow());\n            \n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250188,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class uTDYYzr extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250192,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class JRYDavO extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (true) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (true) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250194,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class XYHIgCI extends AbstractTestCase {\n\n    \n    private int privateFive = 5;\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (privateFive == 5) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (privateFive == 5) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250204,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class prGnZIc extends AbstractTestCase {\n\n    \n    private boolean privateReturnsTrue() {\n        return true;\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (privateReturnsTrue()) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (privateReturnsTrue()) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250206,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class wpXDGyT extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250216,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class tzgRLtB extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        switch(6) {\n            case 6:\n                data = \"\";\n                \n                {\n                    File file = new File(\"C:\\\\data.txt\");\n                    FileInputStream streamFileInput = null;\n                    InputStreamReader readerInputStream = null;\n                    BufferedReader readerBuffered = null;\n                    try {\n                        \n                        streamFileInput = new FileInputStream(file);\n                        readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                        readerBuffered = new BufferedReader(readerInputStream);\n                        \n                        \n                        data = readerBuffered.readLine();\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                    } finally {\n                        \n                        try {\n                            if (readerBuffered != null) {\n                                readerBuffered.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                        }\n                        try {\n                            if (readerInputStream != null) {\n                                readerInputStream.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                        }\n                        try {\n                            if (streamFileInput != null) {\n                                streamFileInput.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                data = null;\n                break;\n        }\n        switch(7) {\n            case 7:\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    \n                    int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                    IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250220,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class VTZSbYe extends AbstractTestCase {\n\n    private void RYNMBky(String data) throws Throwable {\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        RYNMBky(data);\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250232,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class MUShmxl extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        (new MFJxesJ()).RYNMBky(data);\n    }\n}\n\npublic class OGDWbdj {\n\n    public void RYNMBky(String data) throws Throwable {\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n\npublic class MFJxesJ {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new AAifWJH()).RYNMBky(data);\n    }\n}\n\npublic class AAifWJH {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new UPogWLL()).RYNMBky(data);\n    }\n}\n\npublic class UPogWLL {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new OGDWbdj()).RYNMBky(data);\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250244,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class SquaNBX extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        String[] dataArray = new String[5];\n        dataArray[2] = data;\n        (new xtWlaHx()).RYNMBky(dataArray);\n    }\n}\n\npublic class xtWlaHx {\n\n    public void RYNMBky(String[] dataArray) throws Throwable {\n        String data = dataArray[2];\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250248,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class VKUhKSO extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        (new wkJkFYn()).RYNMBky((Object) data);\n    }\n}\n\npublic class wkJkFYn {\n\n    public void RYNMBky(Object dataObject) throws Throwable {\n        String data = (String) dataObject;\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250254,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.HashMap;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class vnzCAnC extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();\n        dataHashMap.put(0, data);\n        dataHashMap.put(1, data);\n        dataHashMap.put(2, data);\n        (new vUoCOgz()).RYNMBky(dataHashMap);\n    }\n}\n\npublic class vUoCOgz {\n\n    public void RYNMBky(HashMap<Integer, String> dataHashMap) throws Throwable {\n        String data = dataHashMap.get(2);\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250260,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class aXEShRo extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250264,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class RRUQBYC extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (5 == 5) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (5 == 5) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250268,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class eMqtRTO extends AbstractTestCase {\n\n    \n    private boolean privateTrue = true;\n\n    private boolean privateFalse = false;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (privateFalse) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (privateTrue) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (privateTrue) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (privateTrue) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (privateTrue) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (privateFalse) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (privateTrue) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (privateTrue) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250273,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class IZPuRCk extends AbstractTestCase {\n\n    \n    private boolean privateReturnsTrue() {\n        return true;\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (privateReturnsTrue()) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (privateReturnsTrue()) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250278,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class JshdOpw extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_TRUE) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250280,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class pXMyPZT extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticTrue) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticTrue) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250282,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class mYJkiBj extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrueOrFalse()) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = \"foo\";\n        }\n        if (IO.staticReturnsTrueOrFalse()) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250286,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class wHpWLcP extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticFive == 5) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticFive == 5) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250290,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class SDTxRWZ extends AbstractTestCase {\n\n    \n    private boolean dWmGbZa = false;\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        dWmGbZa = true;\n        RYNMBky(data);\n    }\n\n    private void RYNMBky(String data) throws Throwable {\n        if (dWmGbZa) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private boolean aRnSMVj = false;\n\n    private boolean aOWZSGn = false;\n\n    private boolean DBbhdbc = false;\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250298,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class LGlNIcS extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        (new UarLgLP()).RYNMBky(data);\n    }\n}\n\npublic class UarLgLP {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new MgbTOUv()).RYNMBky(data);\n    }\n}\n\npublic class UYrneoV {\n\n    public void RYNMBky(String data) throws Throwable {\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n\npublic class MgbTOUv {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new UYrneoV()).RYNMBky(data);\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250314,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class evrktAh extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data = (new KviOzkY()).ImBBndW();\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n\npublic class KviOzkY {\n\n    public String ImBBndW() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        return data;\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250318,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class LjgUIMn extends AbstractTestCase {\n\n    public static String data;\n\n    public void boNMSnT() throws Throwable {\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        (new rOnKvVy()).RYNMBky();\n    }\n}\n\npublic class rOnKvVy {\n\n    public void RYNMBky() throws Throwable {\n        String data = LjgUIMn.data;\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250324,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.LinkedList;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class MDgLoHD extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        LinkedList<String> dataLinkedList = new LinkedList<String>();\n        dataLinkedList.add(0, data);\n        dataLinkedList.add(1, data);\n        dataLinkedList.add(2, data);\n        (new TotnsbY()).RYNMBky(dataLinkedList);\n    }\n}\n\npublic class TotnsbY {\n\n    public void RYNMBky(LinkedList<String> dataLinkedList) throws Throwable {\n        String data = dataLinkedList.remove(2);\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250330,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectOutput;\nimport java.io.ObjectOutputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\n\npublic class uiBhKGC extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        \n        ByteArrayOutputStream streamByteArrayOutput = null;\n        ObjectOutput outputObject = null;\n        try {\n            streamByteArrayOutput = new ByteArrayOutputStream();\n            outputObject = new ObjectOutputStream(streamByteArrayOutput);\n            outputObject.writeObject(data);\n            byte[] dataSerialized = streamByteArrayOutput.toByteArray();\n            (new seqKLqX()).RYNMBky(dataSerialized);\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"IQdccST\", exceptIO);\n        } finally {\n            \n            try {\n                if (outputObject != null) {\n                    outputObject.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"LgADWEx\", exceptIO);\n            }\n            try {\n                if (streamByteArrayOutput != null) {\n                    streamByteArrayOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"vFutZps\", exceptIO);\n            }\n        }\n    }\n}\n\npublic class seqKLqX {\n\n    public void RYNMBky(byte[] dataSerialized) throws Throwable {\n        \n        ByteArrayInputStream streamByteArrayInput = null;\n        ObjectInputStream streamObjectInput = null;\n        try {\n            streamByteArrayInput = new ByteArrayInputStream(dataSerialized);\n            streamObjectInput = new ObjectInputStream(streamByteArrayInput);\n            String data = (String) streamObjectInput.readObject();\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VcFIKxo\", exceptIO);\n        } catch (ClassNotFoundException exceptClassNotFound) {\n            IO.logger.log(Level.WARNING, \"XOCCPfT\", exceptClassNotFound);\n        } finally {\n            \n            try {\n                if (streamObjectInput != null) {\n                    streamObjectInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"kpDMUXH\", exceptIO);\n            }\n            try {\n                if (streamByteArrayInput != null) {\n                    streamByteArrayInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"oiWyzFb\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250334,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class QerlElt extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            Boolean result = sqlStatement.execute();\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250336,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class XeCnNmE extends AbstractTestCase {\n\n    \n    private boolean privateReturnsTrue() {\n        return true;\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (privateReturnsTrue()) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (privateReturnsTrue()) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250350,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class GvpddrC extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_TRUE) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250352,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class rrdPjKR extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrueOrFalse()) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = \"foo\";\n        }\n        if (IO.staticReturnsTrueOrFalse()) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250358,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class KhswtfF extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticFive == 5) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticFive == 5) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250362,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class CkleRmK extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        switch(6) {\n            case 6:\n                data = \"\";\n                \n                {\n                    File file = new File(\"C:\\\\data.txt\");\n                    FileInputStream streamFileInput = null;\n                    InputStreamReader readerInputStream = null;\n                    BufferedReader readerBuffered = null;\n                    try {\n                        \n                        streamFileInput = new FileInputStream(file);\n                        readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                        readerBuffered = new BufferedReader(readerInputStream);\n                        \n                        \n                        data = readerBuffered.readLine();\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                    } finally {\n                        \n                        try {\n                            if (readerBuffered != null) {\n                                readerBuffered.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                        }\n                        try {\n                            if (readerInputStream != null) {\n                                readerInputStream.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                        }\n                        try {\n                            if (streamFileInput != null) {\n                                streamFileInput.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                data = null;\n                break;\n        }\n        switch(7) {\n            case 7:\n                Connection dbConnection = null;\n                PreparedStatement sqlStatement = null;\n                try {\n                    \n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                    Boolean result = sqlStatement.execute();\n                    if (result) {\n                        IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                    } else {\n                        IO.writeLine(\"iCUpMRN\" + data);\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250364,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class gEouMDL extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        while (true) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n            break;\n        }\n        while (true) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n            break;\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250366,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class xXPCOIn extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        (new GcquTMi()).RYNMBky(data);\n    }\n}\n\npublic class ogXHksJ {\n\n    public void RYNMBky(String data) throws Throwable {\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            Boolean result = sqlStatement.execute();\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n\npublic class GcquTMi {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new ogXHksJ()).RYNMBky(data);\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250384,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class XOjRKcq extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        String[] dataArray = new String[5];\n        dataArray[2] = data;\n        (new aVWVWEZ()).RYNMBky(dataArray);\n    }\n}\n\npublic class aVWVWEZ {\n\n    public void RYNMBky(String[] dataArray) throws Throwable {\n        String data = dataArray[2];\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            Boolean result = sqlStatement.execute();\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250392,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class KihWudY extends AbstractTestCase {\n\n    static class Container {\n\n        public String containerOne;\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        Container dataContainer = new Container();\n        dataContainer.containerOne = data;\n        (new HcrGKGj()).RYNMBky(dataContainer);\n    }\n}\n\npublic class HcrGKGj {\n\n    public void RYNMBky(KihWudY.Container dataContainer) throws Throwable {\n        String data = dataContainer.containerOne;\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            Boolean result = sqlStatement.execute();\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250394,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class hjWUqEo extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        (new hcWoVZs()).RYNMBky((Object) data);\n    }\n}\n\npublic class hcWoVZs {\n\n    public void RYNMBky(Object dataObject) throws Throwable {\n        String data = (String) dataObject;\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            Boolean result = sqlStatement.execute();\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250398,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.HashMap;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class QjBLUxa extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();\n        dataHashMap.put(0, data);\n        dataHashMap.put(1, data);\n        dataHashMap.put(2, data);\n        (new ZYSKJpz()).RYNMBky(dataHashMap);\n    }\n}\n\npublic class ZYSKJpz {\n\n    public void RYNMBky(HashMap<Integer, String> dataHashMap) throws Throwable {\n        String data = dataHashMap.get(2);\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            Boolean result = sqlStatement.execute();\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250404,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class pFcpxed extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (true) {\n            data = \"\";\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    data = properties.getProperty(\"data\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (true) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250410,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class cTZHPwB extends AbstractTestCase {\n\n    \n    private boolean privateTrue = true;\n\n    private boolean privateFalse = false;\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (privateTrue) {\n            data = \"\";\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    data = properties.getProperty(\"data\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (privateTrue) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250416,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class mBJxJep extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_TRUE) {\n            data = \"\";\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    data = properties.getProperty(\"data\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250424,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class uIyCGpd extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticTrue) {\n            data = \"\";\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    data = properties.getProperty(\"data\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticTrue) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250426,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class didQwsB extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrueOrFalse()) {\n            data = \"\";\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    data = properties.getProperty(\"data\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = \"foo\";\n        }\n        if (IO.staticReturnsTrueOrFalse()) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        } else {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                PreparedStatement sqlStatement = null;\n                try {\n                    \n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.prepareStatement(\"update users set hitcount=hitcount+1 where name=?\");\n                    for (int i = 0; i < names.length; i++) {\n                        sqlStatement.setString(1, names[i]);\n                        sqlStatement.addBatch();\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250430,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class PslqyhY extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticFive == 5) {\n            data = \"\";\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    data = properties.getProperty(\"data\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticFive == 5) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250434,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class jaKYZWT extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        switch(6) {\n            case 6:\n                data = \"\";\n                \n                \n                {\n                    Properties properties = new Properties();\n                    FileInputStream streamFileInput = null;\n                    try {\n                        streamFileInput = new FileInputStream(\"../common/config.properties\");\n                        properties.load(streamFileInput);\n                        \n                        data = properties.getProperty(\"data\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                    } finally {\n                        \n                        try {\n                            if (streamFileInput != null) {\n                                streamFileInput.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                data = null;\n                break;\n        }\n        switch(7) {\n            case 7:\n                if (data != null) {\n                    String[] names = data.split(\"-\");\n                    int successCount = 0;\n                    Connection dbConnection = null;\n                    Statement sqlStatement = null;\n                    try {\n                        dbConnection = IO.getDBConnection();\n                        sqlStatement = dbConnection.createStatement();\n                        for (int i = 0; i < names.length; i++) {\n                            \n                            sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                        }\n                        int[] resultsArray = sqlStatement.executeBatch();\n                        for (int i = 0; i < names.length; i++) {\n                            if (resultsArray[i] > 0) {\n                                successCount++;\n                            }\n                        }\n                        IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                    } finally {\n                        try {\n                            if (sqlStatement != null) {\n                                sqlStatement.close();\n                            }\n                        } catch (SQLException exceptSql) {\n                            IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                        }\n                        try {\n                            if (dbConnection != null) {\n                                dbConnection.close();\n                            }\n                        } catch (SQLException exceptSql) {\n                            IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250436,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class uSQOvUr extends AbstractTestCase {\n\n    private String ImBBndW() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                data = properties.getProperty(\"data\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        return data;\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data = ImBBndW();\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                for (int i = 0; i < names.length; i++) {\n                    \n                    sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250450,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class bZmafzw extends AbstractTestCase {\n\n    private String EuzMspW;\n\n    private String vZNWMPE;\n\n    private String FOqrAxr;\n\n    private void RYNMBky() throws Throwable {\n        String data = EuzMspW;\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                for (int i = 0; i < names.length; i++) {\n                    \n                    sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                data = properties.getProperty(\"data\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        EuzMspW = data;\n        RYNMBky();\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250452,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class lIasSAO extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data = (new WOGfItF()).ImBBndW();\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                for (int i = 0; i < names.length; i++) {\n                    \n                    sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n\npublic class WOGfItF {\n\n    public String ImBBndW() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                data = properties.getProperty(\"data\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        return data;\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250462,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class whXIvYc extends AbstractTestCase {\n\n    static class Container {\n\n        public String containerOne;\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                data = properties.getProperty(\"data\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        Container dataContainer = new Container();\n        dataContainer.containerOne = data;\n        (new znqpnso()).RYNMBky(dataContainer);\n    }\n}\n\npublic class znqpnso {\n\n    public void RYNMBky(whXIvYc.Container dataContainer) throws Throwable {\n        String data = dataContainer.containerOne;\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                for (int i = 0; i < names.length; i++) {\n                    \n                    sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250466,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class FRTRBfH extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                data = properties.getProperty(\"data\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        ResultSet resultSet = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n            IO.writeLine(resultSet.getRow());\n            \n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250480,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class FRTRBfH extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        ResultSet resultSet = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n            IO.writeLine(resultSet.getRow());\n            \n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                data = properties.getProperty(\"data\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        ResultSet resultSet = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"select * from users where name=?\");\n            sqlStatement.setString(1, data);\n            resultSet = sqlStatement.executeQuery();\n            IO.writeLine(resultSet.getRow());\n            \n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250481,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class kgbAXoE extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (true) {\n            data = \"\";\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    data = properties.getProperty(\"data\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (true) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250482,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class HtufLJz extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (5 == 5) {\n            data = \"\";\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    data = properties.getProperty(\"data\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (5 == 5) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250484,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class kTPIfdO extends AbstractTestCase {\n\n    \n    private boolean privateTrue = true;\n\n    private boolean privateFalse = false;\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (privateTrue) {\n            data = \"\";\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    data = properties.getProperty(\"data\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (privateTrue) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250488,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class cOUVJRL extends AbstractTestCase {\n\n    \n    private static final int PRIVATE_STATIC_FINAL_FIVE = 5;\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            data = \"\";\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    data = properties.getProperty(\"data\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250490,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class PShgqjt extends AbstractTestCase {\n\n    \n    private int privateFive = 5;\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (privateFive == 5) {\n            data = \"\";\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    data = properties.getProperty(\"data\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (privateFive == 5) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250492,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class LeAnHLz extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrueOrFalse()) {\n            data = \"\";\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    data = properties.getProperty(\"data\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = \"foo\";\n        }\n        if (IO.staticReturnsTrueOrFalse()) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"select * from users where name=?\");\n                sqlStatement.setString(1, data);\n                resultSet = sqlStatement.executeQuery();\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250502,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class pTAVHRJ extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            data = \"\";\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    data = properties.getProperty(\"data\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250504,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class lBQlidm extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticFive == 5) {\n            data = \"\";\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    data = properties.getProperty(\"data\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticFive == 5) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250506,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class JjecVQr extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        while (true) {\n            data = \"\";\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    data = properties.getProperty(\"data\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n            break;\n        }\n        while (true) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n            break;\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250510,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class cXLISny extends AbstractTestCase {\n\n    \n    public static boolean qRMEpGJ = false;\n\n    public void boNMSnT() throws Throwable {\n        String data = null;\n        data = \"\";\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                data = properties.getProperty(\"data\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        qRMEpGJ = true;\n        (new RyRSgrK()).RYNMBky(data);\n    }\n\n    \n    public static boolean ydhDOMq = false;\n\n    public static boolean HHhrjCy = false;\n\n    public static boolean Pywwbtz = false;\n}\n\npublic class RyRSgrK {\n\n    public void RYNMBky(String data) throws Throwable {\n        if (cXLISny.qRMEpGJ) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250516,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class XIZFXdE extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String dataCopy;\n        {\n            String data;\n            \n            data = \"foo\";\n            dataCopy = data;\n        }\n        {\n            String data = dataCopy;\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String dataCopy;\n        {\n            String data;\n            data = \"\";\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    data = properties.getProperty(\"data\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n            dataCopy = data;\n        }\n        {\n            String data = dataCopy;\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"select * from users where name=?\");\n                sqlStatement.setString(1, data);\n                resultSet = sqlStatement.executeQuery();\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250519,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class usmGdmi extends AbstractTestCase {\n\n    private String EuzMspW;\n\n    private String vZNWMPE;\n\n    private String FOqrAxr;\n\n    private void RYNMBky() throws Throwable {\n        String data = EuzMspW;\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        ResultSet resultSet = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n            IO.writeLine(resultSet.getRow());\n            \n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                data = properties.getProperty(\"data\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        EuzMspW = data;\n        RYNMBky();\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250524,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class QlsfJTt extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                data = properties.getProperty(\"data\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        (new BojrLzp()).RYNMBky(data);\n    }\n}\n\npublic class ChvKTWx {\n\n    public void RYNMBky(String data) throws Throwable {\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        ResultSet resultSet = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n            IO.writeLine(resultSet.getRow());\n            \n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n\npublic class BojrLzp {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new ChvKTWx()).RYNMBky(data);\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250528,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class mjpWgMc extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                data = properties.getProperty(\"data\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        (new CXSZZmQ()).RYNMBky(data);\n    }\n}\n\npublic class CXSZZmQ {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new sXfeAsm()).RYNMBky(data);\n    }\n}\n\npublic class Cltdyvy {\n\n    public void RYNMBky(String data) throws Throwable {\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        ResultSet resultSet = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n            IO.writeLine(resultSet.getRow());\n            \n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n\npublic class sXfeAsm {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new Cltdyvy()).RYNMBky(data);\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250530,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class VIuCRgT extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                data = properties.getProperty(\"data\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        String[] dataArray = new String[5];\n        dataArray[2] = data;\n        (new UlorLtW()).RYNMBky(dataArray);\n    }\n}\n\npublic class UlorLtW {\n\n    public void RYNMBky(String[] dataArray) throws Throwable {\n        String data = dataArray[2];\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        ResultSet resultSet = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n            IO.writeLine(resultSet.getRow());\n            \n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250536,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class KQPAaQL extends AbstractTestCase {\n\n    public static String data;\n\n    public void boNMSnT() throws Throwable {\n        data = \"\";\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                data = properties.getProperty(\"data\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        (new OfWvYrd()).RYNMBky();\n    }\n}\n\npublic class OfWvYrd {\n\n    public void RYNMBky() throws Throwable {\n        String data = KQPAaQL.data;\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        ResultSet resultSet = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n            IO.writeLine(resultSet.getRow());\n            \n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250540,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.LinkedList;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class twJlBrY extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                data = properties.getProperty(\"data\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        LinkedList<String> dataLinkedList = new LinkedList<String>();\n        dataLinkedList.add(0, data);\n        dataLinkedList.add(1, data);\n        dataLinkedList.add(2, data);\n        (new thRJvTF()).RYNMBky(dataLinkedList);\n    }\n}\n\npublic class thRJvTF {\n\n    public void RYNMBky(LinkedList<String> dataLinkedList) throws Throwable {\n        String data = dataLinkedList.remove(2);\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        ResultSet resultSet = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n            IO.writeLine(resultSet.getRow());\n            \n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250546,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.HashMap;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class pOBxnwx extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                data = properties.getProperty(\"data\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();\n        dataHashMap.put(0, data);\n        dataHashMap.put(1, data);\n        dataHashMap.put(2, data);\n        (new uauqJLc()).RYNMBky(dataHashMap);\n    }\n}\n\npublic class uauqJLc {\n\n    public void RYNMBky(HashMap<Integer, String> dataHashMap) throws Throwable {\n        String data = dataHashMap.get(2);\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        ResultSet resultSet = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n            IO.writeLine(resultSet.getRow());\n            \n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250548,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.io.ByteArrayInputStream;\nimport java.io.ObjectInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.servlet.http.*;\nimport java.sql.*;\n\npublic class hspgEOR extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                data = properties.getProperty(\"data\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        \n        ByteArrayOutputStream streamByteArrayOutput = null;\n        ObjectOutput outputObject = null;\n        try {\n            streamByteArrayOutput = new ByteArrayOutputStream();\n            outputObject = new ObjectOutputStream(streamByteArrayOutput);\n            outputObject.writeObject(data);\n            byte[] dataSerialized = streamByteArrayOutput.toByteArray();\n            (new cjxRLlR()).RYNMBky(dataSerialized);\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"IQdccST\", exceptIO);\n        } finally {\n            \n            try {\n                if (outputObject != null) {\n                    outputObject.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"LgADWEx\", exceptIO);\n            }\n            try {\n                if (streamByteArrayOutput != null) {\n                    streamByteArrayOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"vFutZps\", exceptIO);\n            }\n        }\n    }\n}\n\npublic class cjxRLlR {\n\n    public void RYNMBky(byte[] dataSerialized) throws Throwable {\n        \n        ByteArrayInputStream streamByteArrayInput = null;\n        ObjectInputStream streamObjectInput = null;\n        try {\n            streamByteArrayInput = new ByteArrayInputStream(dataSerialized);\n            streamObjectInput = new ObjectInputStream(streamByteArrayInput);\n            String data = (String) streamObjectInput.readObject();\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VcFIKxo\", exceptIO);\n        } catch (ClassNotFoundException exceptClassNotFound) {\n            IO.logger.log(Level.WARNING, \"XOCCPfT\", exceptClassNotFound);\n        } finally {\n            \n            try {\n                if (streamObjectInput != null) {\n                    streamObjectInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"kpDMUXH\", exceptIO);\n            }\n            try {\n                if (streamByteArrayInput != null) {\n                    streamByteArrayInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"oiWyzFb\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250550,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class KRxSxQP extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                data = properties.getProperty(\"data\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250552,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class INsRcId extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (5 != 5) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (5 == 5) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (5 == 5) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (5 == 5) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (5 == 5) {\n            data = \"\";\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    data = properties.getProperty(\"data\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (5 != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                int rowCount = sqlStatement.executeUpdate();\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (5 == 5) {\n            data = \"\";\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    data = properties.getProperty(\"data\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (5 == 5) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                int rowCount = sqlStatement.executeUpdate();\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250557,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class MsOtsir extends AbstractTestCase {\n\n    \n    private static final boolean PRIVATE_STATIC_FINAL_TRUE = true;\n\n    private static final boolean PRIVATE_STATIC_FINAL_FALSE = false;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FALSE) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            data = \"\";\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    data = properties.getProperty(\"data\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FALSE) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                int rowCount = sqlStatement.executeUpdate();\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            data = \"\";\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    data = properties.getProperty(\"data\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                int rowCount = sqlStatement.executeUpdate();\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250559,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class QxpUdEn extends AbstractTestCase {\n\n    \n    private boolean privateTrue = true;\n\n    private boolean privateFalse = false;\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (privateTrue) {\n            data = \"\";\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    data = properties.getProperty(\"data\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (privateTrue) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250560,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class UBGcnkr extends AbstractTestCase {\n\n    \n    private boolean privateReturnsTrue() {\n        return true;\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (privateReturnsTrue()) {\n            data = \"\";\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    data = properties.getProperty(\"data\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (privateReturnsTrue()) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250566,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class WUPNikK extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_TRUE) {\n            data = \"\";\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    data = properties.getProperty(\"data\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250568,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class IfvzYZH extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticFive == 5) {\n            data = \"\";\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    data = properties.getProperty(\"data\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticFive == 5) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250578,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class qNmtdJs extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        switch(6) {\n            case 6:\n                data = \"\";\n                \n                \n                {\n                    Properties properties = new Properties();\n                    FileInputStream streamFileInput = null;\n                    try {\n                        streamFileInput = new FileInputStream(\"../common/config.properties\");\n                        properties.load(streamFileInput);\n                        \n                        data = properties.getProperty(\"data\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                    } finally {\n                        \n                        try {\n                            if (streamFileInput != null) {\n                                streamFileInput.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                data = null;\n                break;\n        }\n        switch(7) {\n            case 7:\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    \n                    int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                    IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250580,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class puYMQNg extends AbstractTestCase {\n\n    \n    public static boolean qRMEpGJ = false;\n\n    public void boNMSnT() throws Throwable {\n        String data = null;\n        data = \"\";\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                data = properties.getProperty(\"data\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        qRMEpGJ = true;\n        (new WwvMqRU()).RYNMBky(data);\n    }\n\n    \n    public static boolean ydhDOMq = false;\n\n    public static boolean HHhrjCy = false;\n\n    public static boolean Pywwbtz = false;\n}\n\npublic class WwvMqRU {\n\n    public void RYNMBky(String data) throws Throwable {\n        if (puYMQNg.qRMEpGJ) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250588,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class uizgxUo extends AbstractTestCase {\n\n    private String ImBBndW() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                data = properties.getProperty(\"data\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        return data;\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data = ImBBndW();\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250594,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class JZoVcwA extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                data = properties.getProperty(\"data\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        (new OSpnXOP()).RYNMBky(data);\n    }\n}\n\npublic class OSpnXOP {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new jrImmUV()).RYNMBky(data);\n    }\n}\n\npublic class jrImmUV {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new iIErMcd()).RYNMBky(data);\n    }\n}\n\npublic class iIErMcd {\n\n    public void RYNMBky(String data) throws Throwable {\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250602,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class gFjxbXT extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                data = properties.getProperty(\"data\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        (new MWEVCsA()).RYNMBky(data);\n    }\n}\n\npublic class SWvByth {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new evfDwDJ()).RYNMBky(data);\n    }\n}\n\npublic class MWEVCsA {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new SWvByth()).RYNMBky(data);\n    }\n}\n\npublic class evfDwDJ {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new xoEDDPV()).RYNMBky(data);\n    }\n}\n\npublic class xoEDDPV {\n\n    public void RYNMBky(String data) throws Throwable {\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250604,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.Vector;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class mhhpEWG extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                data = properties.getProperty(\"data\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        Vector<String> dataVector = new Vector<String>(5);\n        dataVector.add(0, data);\n        dataVector.add(1, data);\n        dataVector.add(2, data);\n        (new UcDfuSP()).RYNMBky(dataVector);\n    }\n}\n\npublic class UcDfuSP {\n\n    public void RYNMBky(Vector<String> dataVector) throws Throwable {\n        String data = dataVector.remove(2);\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250616,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.LinkedList;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class rqbmtoS extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                data = properties.getProperty(\"data\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        LinkedList<String> dataLinkedList = new LinkedList<String>();\n        dataLinkedList.add(0, data);\n        dataLinkedList.add(1, data);\n        dataLinkedList.add(2, data);\n        (new yoYNkxc()).RYNMBky(dataLinkedList);\n    }\n}\n\npublic class yoYNkxc {\n\n    public void RYNMBky(LinkedList<String> dataLinkedList) throws Throwable {\n        String data = dataLinkedList.remove(2);\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250618,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.io.ByteArrayInputStream;\nimport java.io.ObjectInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.servlet.http.*;\nimport java.sql.*;\n\npublic class evHtKyr extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                data = properties.getProperty(\"data\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        \n        ByteArrayOutputStream streamByteArrayOutput = null;\n        ObjectOutput outputObject = null;\n        try {\n            streamByteArrayOutput = new ByteArrayOutputStream();\n            outputObject = new ObjectOutputStream(streamByteArrayOutput);\n            outputObject.writeObject(data);\n            byte[] dataSerialized = streamByteArrayOutput.toByteArray();\n            (new UXdoCnm()).RYNMBky(dataSerialized);\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"IQdccST\", exceptIO);\n        } finally {\n            \n            try {\n                if (outputObject != null) {\n                    outputObject.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"LgADWEx\", exceptIO);\n            }\n            try {\n                if (streamByteArrayOutput != null) {\n                    streamByteArrayOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"vFutZps\", exceptIO);\n            }\n        }\n    }\n}\n\npublic class UXdoCnm {\n\n    public void RYNMBky(byte[] dataSerialized) throws Throwable {\n        \n        ByteArrayInputStream streamByteArrayInput = null;\n        ObjectInputStream streamObjectInput = null;\n        try {\n            streamByteArrayInput = new ByteArrayInputStream(dataSerialized);\n            streamObjectInput = new ObjectInputStream(streamByteArrayInput);\n            String data = (String) streamObjectInput.readObject();\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VcFIKxo\", exceptIO);\n        } catch (ClassNotFoundException exceptClassNotFound) {\n            IO.logger.log(Level.WARNING, \"XOCCPfT\", exceptClassNotFound);\n        } finally {\n            \n            try {\n                if (streamObjectInput != null) {\n                    streamObjectInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"kpDMUXH\", exceptIO);\n            }\n            try {\n                if (streamByteArrayInput != null) {\n                    streamByteArrayInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"oiWyzFb\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250622,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.io.ByteArrayInputStream;\nimport java.io.ObjectInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.servlet.http.*;\nimport java.sql.*;\n\npublic class UXdoCnm {\n\n    \n    public void fDqjRYE(byte[] dataSerialized) throws Throwable {\n        \n        ByteArrayInputStream streamByteArrayInput = null;\n        ObjectInputStream streamObjectInput = null;\n        try {\n            streamByteArrayInput = new ByteArrayInputStream(dataSerialized);\n            streamObjectInput = new ObjectInputStream(streamByteArrayInput);\n            String data = (String) streamObjectInput.readObject();\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VcFIKxo\", exceptIO);\n        } catch (ClassNotFoundException exceptClassNotFound) {\n            IO.logger.log(Level.WARNING, \"XOCCPfT\", exceptClassNotFound);\n        } finally {\n            \n            try {\n                if (streamObjectInput != null) {\n                    streamObjectInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"kpDMUXH\", exceptIO);\n            }\n            try {\n                if (streamByteArrayInput != null) {\n                    streamByteArrayInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"oiWyzFb\", exceptIO);\n            }\n        }\n    }\n\n    \n    public void KgJSeXB(byte[] dataSerialized) throws Throwable {\n        \n        ByteArrayInputStream streamByteArrayInput = null;\n        ObjectInputStream streamObjectInput = null;\n        try {\n            streamByteArrayInput = new ByteArrayInputStream(dataSerialized);\n            streamObjectInput = new ObjectInputStream(streamByteArrayInput);\n            String data = (String) streamObjectInput.readObject();\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                int rowCount = sqlStatement.executeUpdate();\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VcFIKxo\", exceptIO);\n        } catch (ClassNotFoundException exceptClassNotFound) {\n            IO.logger.log(Level.WARNING, \"XOCCPfT\", exceptClassNotFound);\n        } finally {\n            \n            try {\n                if (streamObjectInput != null) {\n                    streamObjectInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"kpDMUXH\", exceptIO);\n            }\n            try {\n                if (streamByteArrayInput != null) {\n                    streamByteArrayInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"oiWyzFb\", exceptIO);\n            }\n        }\n    }\n}\n\npublic class evHtKyr extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        \n        ByteArrayOutputStream streamByteArrayOutput = null;\n        ObjectOutput outputObject = null;\n        try {\n            streamByteArrayOutput = new ByteArrayOutputStream();\n            outputObject = new ObjectOutputStream(streamByteArrayOutput);\n            outputObject.writeObject(data);\n            byte[] dataSerialized = streamByteArrayOutput.toByteArray();\n            (new UXdoCnm()).fDqjRYE(dataSerialized);\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"IQdccST\", exceptIO);\n        } finally {\n            \n            try {\n                if (outputObject != null) {\n                    outputObject.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"LgADWEx\", exceptIO);\n            }\n            try {\n                if (streamByteArrayOutput != null) {\n                    streamByteArrayOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"vFutZps\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                data = properties.getProperty(\"data\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        \n        ByteArrayOutputStream streamByteArrayOutput = null;\n        ObjectOutput outputObject = null;\n        try {\n            streamByteArrayOutput = new ByteArrayOutputStream();\n            outputObject = new ObjectOutputStream(streamByteArrayOutput);\n            outputObject.writeObject(data);\n            byte[] dataSerialized = streamByteArrayOutput.toByteArray();\n            (new UXdoCnm()).KgJSeXB(dataSerialized);\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"IQdccST\", exceptIO);\n        } finally {\n            \n            try {\n                if (outputObject != null) {\n                    outputObject.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"LgADWEx\", exceptIO);\n            }\n            try {\n                if (streamByteArrayOutput != null) {\n                    streamByteArrayOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"vFutZps\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250623,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class ulRwSCI extends AbstractTestCase {\n\n    \n    private boolean privateTrue = true;\n\n    private boolean privateFalse = false;\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (privateTrue) {\n            data = \"\";\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    data = properties.getProperty(\"data\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (privateTrue) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250632,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class AVOSOZL extends AbstractTestCase {\n\n    \n    private boolean privateReturnsTrue() {\n        return true;\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (privateReturnsTrue()) {\n            data = \"\";\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    data = properties.getProperty(\"data\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (privateReturnsTrue()) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250638,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class hackCCz extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticTrue) {\n            data = \"\";\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    data = properties.getProperty(\"data\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticTrue) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250642,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class UglbaVG extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        while (true) {\n            data = \"\";\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    data = properties.getProperty(\"data\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n            break;\n        }\n        while (true) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n            break;\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250654,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class rLEXypG extends AbstractTestCase {\n\n    \n    private static final boolean PRIVATE_STATIC_FINAL_TRUE = true;\n\n    private static final boolean PRIVATE_STATIC_FINAL_FALSE = false;\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            data = \"\";\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    data = properties.getProperty(\"data\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250702,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class eUfuleB extends AbstractTestCase {\n\n    \n    private boolean privateTrue = true;\n\n    private boolean privateFalse = false;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (privateFalse) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (privateTrue) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (privateTrue) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (privateTrue) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (privateTrue) {\n            data = \"\";\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    data = properties.getProperty(\"data\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (privateFalse) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (privateTrue) {\n            data = \"\";\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    data = properties.getProperty(\"data\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (privateTrue) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250705,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class BRqdWSR extends AbstractTestCase {\n\n    \n    private int privateFive = 5;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (privateFive != 5) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (privateFive == 5) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (privateFive == 5) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (privateFive == 5) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (privateFive == 5) {\n            data = \"\";\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    data = properties.getProperty(\"data\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (privateFive != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (privateFive == 5) {\n            data = \"\";\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    data = properties.getProperty(\"data\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (privateFive == 5) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250709,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class eFCjkWH extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrue()) {\n            data = \"\";\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    data = properties.getProperty(\"data\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticReturnsTrue()) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250716,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class EAtGToE extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticFive == 5) {\n            data = \"\";\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    data = properties.getProperty(\"data\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticFive == 5) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250722,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class SpUQGjl extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String dataCopy;\n        {\n            String data;\n            data = \"\";\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    data = properties.getProperty(\"data\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n            dataCopy = data;\n        }\n        {\n            String data = dataCopy;\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250734,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class pioJWtT extends AbstractTestCase {\n\n    private String EuzMspW;\n\n    private String vZNWMPE;\n\n    private String FOqrAxr;\n\n    private void RYNMBky() throws Throwable {\n        String data = EuzMspW;\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            Boolean result = sqlStatement.execute();\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                data = properties.getProperty(\"data\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        EuzMspW = data;\n        RYNMBky();\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250740,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.HashMap;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class ElqzMza extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                data = properties.getProperty(\"data\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();\n        dataHashMap.put(0, data);\n        dataHashMap.put(1, data);\n        dataHashMap.put(2, data);\n        (new MOnUSCw()).RYNMBky(dataHashMap);\n    }\n}\n\npublic class MOnUSCw {\n\n    public void RYNMBky(HashMap<Integer, String> dataHashMap) throws Throwable {\n        String data = dataHashMap.get(2);\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            Boolean result = sqlStatement.execute();\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250764,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class mcudCAG extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getProperty(\"user.home\");\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                for (int i = 0; i < names.length; i++) {\n                    \n                    sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250768,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class tswkPWM extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (true) {\n            \n            \n            data = System.getProperty(\"user.home\");\n        } else {\n            \n            data = null;\n        }\n        if (true) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250770,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class DOONUwU extends AbstractTestCase {\n\n    \n    private static final boolean PRIVATE_STATIC_FINAL_TRUE = true;\n\n    private static final boolean PRIVATE_STATIC_FINAL_FALSE = false;\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            \n            \n            data = System.getProperty(\"user.home\");\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250774,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class sVxtMiM extends AbstractTestCase {\n\n    \n    private static final int PRIVATE_STATIC_FINAL_FIVE = 5;\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            \n            \n            data = System.getProperty(\"user.home\");\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250778,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class FnKDfDd extends AbstractTestCase {\n\n    \n    private int privateFive = 5;\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (privateFive == 5) {\n            \n            \n            data = System.getProperty(\"user.home\");\n        } else {\n            \n            data = null;\n        }\n        if (privateFive == 5) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250780,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class cSwgjQS extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrue()) {\n            \n            \n            data = System.getProperty(\"user.home\");\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticReturnsTrue()) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250788,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class cfUGtwv extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrueOrFalse()) {\n            \n            \n            data = System.getProperty(\"user.home\");\n        } else {\n            \n            data = \"foo\";\n        }\n        if (IO.staticReturnsTrueOrFalse()) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        } else {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                PreparedStatement sqlStatement = null;\n                try {\n                    \n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.prepareStatement(\"update users set hitcount=hitcount+1 where name=?\");\n                    for (int i = 0; i < names.length; i++) {\n                        sqlStatement.setString(1, names[i]);\n                        sqlStatement.addBatch();\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250790,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class awTNnFd extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        switch(6) {\n            case 6:\n                \n                \n                data = System.getProperty(\"user.home\");\n                break;\n            default:\n                \n                data = null;\n                break;\n        }\n        switch(7) {\n            case 7:\n                if (data != null) {\n                    String[] names = data.split(\"-\");\n                    int successCount = 0;\n                    Connection dbConnection = null;\n                    Statement sqlStatement = null;\n                    try {\n                        dbConnection = IO.getDBConnection();\n                        sqlStatement = dbConnection.createStatement();\n                        for (int i = 0; i < names.length; i++) {\n                            \n                            sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                        }\n                        int[] resultsArray = sqlStatement.executeBatch();\n                        for (int i = 0; i < names.length; i++) {\n                            if (resultsArray[i] > 0) {\n                                successCount++;\n                            }\n                        }\n                        IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                    } finally {\n                        try {\n                            if (sqlStatement != null) {\n                                sqlStatement.close();\n                            }\n                        } catch (SQLException exceptSql) {\n                            IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                        }\n                        try {\n                            if (dbConnection != null) {\n                                dbConnection.close();\n                            }\n                        } catch (SQLException exceptSql) {\n                            IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250796,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class QJHyqwT extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        \n        data = System.getProperty(\"user.home\");\n        for (int j = 0; j < 1; j++) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250800,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class jXfLtoO extends AbstractTestCase {\n\n    \n    private boolean dWmGbZa = false;\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getProperty(\"user.home\");\n        dWmGbZa = true;\n        RYNMBky(data);\n    }\n\n    private void RYNMBky(String data) throws Throwable {\n        if (dWmGbZa) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private boolean aRnSMVj = false;\n\n    private boolean aOWZSGn = false;\n\n    private boolean DBbhdbc = false;\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250802,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class OUtBOoN extends AbstractTestCase {\n\n    private String EuzMspW;\n\n    private String vZNWMPE;\n\n    private String FOqrAxr;\n\n    private void RYNMBky() throws Throwable {\n        String data = EuzMspW;\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                for (int i = 0; i < names.length; i++) {\n                    \n                    sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getProperty(\"user.home\");\n        EuzMspW = data;\n        RYNMBky();\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250812,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class tzsFFwC extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getProperty(\"user.home\");\n        (new mNcnKTW()).RYNMBky(data);\n    }\n}\n\npublic class laUQsKV {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new dREwMLs()).RYNMBky(data);\n    }\n}\n\npublic class dREwMLs {\n\n    public void RYNMBky(String data) throws Throwable {\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                for (int i = 0; i < names.length; i++) {\n                    \n                    sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n\npublic class mNcnKTW {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new laUQsKV()).RYNMBky(data);\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250818,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class dIPlaSu extends AbstractTestCase {\n\n    static class Container {\n\n        public String containerOne;\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getProperty(\"user.home\");\n        Container dataContainer = new Container();\n        dataContainer.containerOne = data;\n        (new GeqeUsc()).RYNMBky(dataContainer);\n    }\n}\n\npublic class GeqeUsc {\n\n    public void RYNMBky(dIPlaSu.Container dataContainer) throws Throwable {\n        String data = dataContainer.containerOne;\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                for (int i = 0; i < names.length; i++) {\n                    \n                    sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250826,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class JMRJYlM extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getProperty(\"user.home\");\n        (new GtiSYwO()).RYNMBky((Object) data);\n    }\n}\n\npublic class GtiSYwO {\n\n    public void RYNMBky(Object dataObject) throws Throwable {\n        String data = (String) dataObject;\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                for (int i = 0; i < names.length; i++) {\n                    \n                    sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250830,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.Vector;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class dZkZjlV extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getProperty(\"user.home\");\n        Vector<String> dataVector = new Vector<String>(5);\n        dataVector.add(0, data);\n        dataVector.add(1, data);\n        dataVector.add(2, data);\n        (new oLXxvVx()).RYNMBky(dataVector);\n    }\n}\n\npublic class oLXxvVx {\n\n    public void RYNMBky(Vector<String> dataVector) throws Throwable {\n        String data = dataVector.remove(2);\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                for (int i = 0; i < names.length; i++) {\n                    \n                    sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250832,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.HashMap;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class eahKpDe extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getProperty(\"user.home\");\n        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();\n        dataHashMap.put(0, data);\n        dataHashMap.put(1, data);\n        dataHashMap.put(2, data);\n        (new bxPevBU()).RYNMBky(dataHashMap);\n    }\n}\n\npublic class bxPevBU {\n\n    public void RYNMBky(HashMap<Integer, String> dataHashMap) throws Throwable {\n        String data = dataHashMap.get(2);\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                for (int i = 0; i < names.length; i++) {\n                    \n                    sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250836,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class gYCYKHC extends AbstractTestCase {\n\n    \n    private static final boolean PRIVATE_STATIC_FINAL_TRUE = true;\n\n    private static final boolean PRIVATE_STATIC_FINAL_FALSE = false;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FALSE) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            \n            \n            data = System.getProperty(\"user.home\");\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FALSE) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"select * from users where name=?\");\n                sqlStatement.setString(1, data);\n                resultSet = sqlStatement.executeQuery();\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            \n            \n            data = System.getProperty(\"user.home\");\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"select * from users where name=?\");\n                sqlStatement.setString(1, data);\n                resultSet = sqlStatement.executeQuery();\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250847,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class skjCMua extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_TRUE) {\n            \n            \n            data = System.getProperty(\"user.home\");\n        } else {\n            \n            data = null;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250856,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class PCIXpGB extends AbstractTestCase {\n\n    \n    private boolean privateTrue = true;\n\n    private boolean privateFalse = false;\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (privateTrue) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (privateTrue) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249696,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class YrOMUlU extends AbstractTestCase {\n\n    \n    private int privateFive = 5;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (privateFive != 5) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (privateFive == 5) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (privateFive == 5) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (privateFive == 5) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (privateFive == 5) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (privateFive != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                PreparedStatement sqlStatement = null;\n                try {\n                    \n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.prepareStatement(\"update users set hitcount=hitcount+1 where name=?\");\n                    for (int i = 0; i < names.length; i++) {\n                        sqlStatement.setString(1, names[i]);\n                        sqlStatement.addBatch();\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (privateFive == 5) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (privateFive == 5) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                PreparedStatement sqlStatement = null;\n                try {\n                    \n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.prepareStatement(\"update users set hitcount=hitcount+1 where name=?\");\n                    for (int i = 0; i < names.length; i++) {\n                        sqlStatement.setString(1, names[i]);\n                        sqlStatement.addBatch();\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249701,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class kwMHrUk extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (IO.staticReturnsFalse()) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (IO.staticReturnsTrue()) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrue()) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticReturnsTrue()) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrue()) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticReturnsFalse()) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                PreparedStatement sqlStatement = null;\n                try {\n                    \n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.prepareStatement(\"update users set hitcount=hitcount+1 where name=?\");\n                    for (int i = 0; i < names.length; i++) {\n                        sqlStatement.setString(1, names[i]);\n                        sqlStatement.addBatch();\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrue()) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticReturnsTrue()) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                PreparedStatement sqlStatement = null;\n                try {\n                    \n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.prepareStatement(\"update users set hitcount=hitcount+1 where name=?\");\n                    for (int i = 0; i < names.length; i++) {\n                        sqlStatement.setString(1, names[i]);\n                        sqlStatement.addBatch();\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249709,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class NNINJBg extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        switch(5) {\n            case 6:\n                \n                data = null;\n                break;\n            default:\n                \n                data = \"foo\";\n                break;\n        }\n        switch(7) {\n            case 7:\n                if (data != null) {\n                    String[] names = data.split(\"-\");\n                    int successCount = 0;\n                    Connection dbConnection = null;\n                    Statement sqlStatement = null;\n                    try {\n                        dbConnection = IO.getDBConnection();\n                        sqlStatement = dbConnection.createStatement();\n                        for (int i = 0; i < names.length; i++) {\n                            \n                            sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                        }\n                        int[] resultsArray = sqlStatement.executeBatch();\n                        for (int i = 0; i < names.length; i++) {\n                            if (resultsArray[i] > 0) {\n                                successCount++;\n                            }\n                        }\n                        IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                    } finally {\n                        try {\n                            if (sqlStatement != null) {\n                                sqlStatement.close();\n                            }\n                        } catch (SQLException exceptSql) {\n                            IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                        }\n                        try {\n                            if (dbConnection != null) {\n                                dbConnection.close();\n                            }\n                        } catch (SQLException exceptSql) {\n                            IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        switch(6) {\n            case 6:\n                \n                data = \"foo\";\n                break;\n            default:\n                \n                data = null;\n                break;\n        }\n        switch(7) {\n            case 7:\n                if (data != null) {\n                    String[] names = data.split(\"-\");\n                    int successCount = 0;\n                    Connection dbConnection = null;\n                    Statement sqlStatement = null;\n                    try {\n                        dbConnection = IO.getDBConnection();\n                        sqlStatement = dbConnection.createStatement();\n                        for (int i = 0; i < names.length; i++) {\n                            \n                            sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                        }\n                        int[] resultsArray = sqlStatement.executeBatch();\n                        for (int i = 0; i < names.length; i++) {\n                            if (resultsArray[i] > 0) {\n                                successCount++;\n                            }\n                        }\n                        IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                    } finally {\n                        try {\n                            if (sqlStatement != null) {\n                                sqlStatement.close();\n                            }\n                        } catch (SQLException exceptSql) {\n                            IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                        }\n                        try {\n                            if (dbConnection != null) {\n                                dbConnection.close();\n                            }\n                        } catch (SQLException exceptSql) {\n                            IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        switch(6) {\n            case 6:\n                \n                \n                data = System.getenv(\"ADD\");\n                break;\n            default:\n                \n                data = null;\n                break;\n        }\n        switch(8) {\n            case 7:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n            default:\n                if (data != null) {\n                    String[] names = data.split(\"-\");\n                    int successCount = 0;\n                    Connection dbConnection = null;\n                    PreparedStatement sqlStatement = null;\n                    try {\n                        \n                        dbConnection = IO.getDBConnection();\n                        sqlStatement = dbConnection.prepareStatement(\"update users set hitcount=hitcount+1 where name=?\");\n                        for (int i = 0; i < names.length; i++) {\n                            sqlStatement.setString(1, names[i]);\n                            sqlStatement.addBatch();\n                        }\n                        int[] resultsArray = sqlStatement.executeBatch();\n                        for (int i = 0; i < names.length; i++) {\n                            if (resultsArray[i] > 0) {\n                                successCount++;\n                            }\n                        }\n                        IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                    } finally {\n                        try {\n                            if (sqlStatement != null) {\n                                sqlStatement.close();\n                            }\n                        } catch (SQLException exceptSql) {\n                            IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                        }\n                        try {\n                            if (dbConnection != null) {\n                                dbConnection.close();\n                            }\n                        } catch (SQLException exceptSql) {\n                            IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                        }\n                    }\n                }\n                break;\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        switch(6) {\n            case 6:\n                \n                \n                data = System.getenv(\"ADD\");\n                break;\n            default:\n                \n                data = null;\n                break;\n        }\n        switch(7) {\n            case 7:\n                if (data != null) {\n                    String[] names = data.split(\"-\");\n                    int successCount = 0;\n                    Connection dbConnection = null;\n                    PreparedStatement sqlStatement = null;\n                    try {\n                        \n                        dbConnection = IO.getDBConnection();\n                        sqlStatement = dbConnection.prepareStatement(\"update users set hitcount=hitcount+1 where name=?\");\n                        for (int i = 0; i < names.length; i++) {\n                            sqlStatement.setString(1, names[i]);\n                            sqlStatement.addBatch();\n                        }\n                        int[] resultsArray = sqlStatement.executeBatch();\n                        for (int i = 0; i < names.length; i++) {\n                            if (resultsArray[i] > 0) {\n                                successCount++;\n                            }\n                        }\n                        IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                    } finally {\n                        try {\n                            if (sqlStatement != null) {\n                                sqlStatement.close();\n                            }\n                        } catch (SQLException exceptSql) {\n                            IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                        }\n                        try {\n                            if (dbConnection != null) {\n                                dbConnection.close();\n                            }\n                        } catch (SQLException exceptSql) {\n                            IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249717,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class ohgzGjg extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String dataCopy;\n        {\n            String data;\n            \n            \n            data = System.getenv(\"ADD\");\n            dataCopy = data;\n        }\n        {\n            String data = dataCopy;\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249726,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class KwcrEld extends AbstractTestCase {\n\n    \n    private boolean privateReturnsTrue() {\n        return true;\n    }\n\n    private boolean privateReturnsFalse() {\n        return false;\n    }\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (privateReturnsFalse()) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (privateReturnsTrue()) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (privateReturnsTrue()) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (privateReturnsTrue()) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (privateReturnsTrue()) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (privateReturnsFalse()) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"select * from users where name=?\");\n                sqlStatement.setString(1, data);\n                resultSet = sqlStatement.executeQuery();\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (privateReturnsTrue()) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (privateReturnsTrue()) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"select * from users where name=?\");\n                sqlStatement.setString(1, data);\n                resultSet = sqlStatement.executeQuery();\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249775,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class BCXdJNT extends AbstractTestCase {\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        for (int j = 0; j < 1; j++) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        for (int k = 0; k < 1; k++) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"select * from users where name=?\");\n                sqlStatement.setString(1, data);\n                resultSet = sqlStatement.executeQuery();\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249793,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class cMTAOgi {\n\n    \n    public void fDqjRYE(BGprrSP.Container dataContainer) throws Throwable {\n        String data = dataContainer.containerOne;\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        ResultSet resultSet = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n            IO.writeLine(resultSet.getRow());\n            \n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    public void KgJSeXB(BGprrSP.Container dataContainer) throws Throwable {\n        String data = dataContainer.containerOne;\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        ResultSet resultSet = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"select * from users where name=?\");\n            sqlStatement.setString(1, data);\n            resultSet = sqlStatement.executeQuery();\n            IO.writeLine(resultSet.getRow());\n            \n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n\npublic class BGprrSP extends AbstractTestCase {\n\n    static class Container {\n\n        public String containerOne;\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        Container dataContainer = new Container();\n        dataContainer.containerOne = data;\n        (new cMTAOgi()).fDqjRYE(dataContainer);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        Container dataContainer = new Container();\n        dataContainer.containerOne = data;\n        (new cMTAOgi()).KgJSeXB(dataContainer);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249819,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class TDLPxMd extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (5 == 5) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (5 == 5) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249836,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class zcrCSTR extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n            sqlStatement.setString(1, data);\n            Boolean result = sqlStatement.execute();\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249905,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class IFEtYhc extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (IO.staticFalse) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (IO.staticTrue) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (IO.staticTrue) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticTrue) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (IO.staticTrue) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticFalse) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (IO.staticTrue) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticTrue) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249923,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class LmpsKcc extends AbstractTestCase {\n\n    private String EuzMspW;\n\n    private String vZNWMPE;\n\n    private String FOqrAxr;\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    private void fDqjRYE() throws Throwable {\n        String data = vZNWMPE;\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        vZNWMPE = data;\n        fDqjRYE();\n    }\n\n    private void KgJSeXB() throws Throwable {\n        String data = FOqrAxr;\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n            sqlStatement.setString(1, data);\n            Boolean result = sqlStatement.execute();\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        FOqrAxr = data;\n        KgJSeXB();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249949,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class lsMGMrS extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrue()) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticReturnsTrue()) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249996,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class RYmqHkn extends AbstractTestCase {\n\n    private void RYNMBky(String data) throws Throwable {\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            Boolean result = sqlStatement.execute();\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        RYNMBky(data);\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250016,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class ZiqhjoP extends AbstractTestCase {\n\n    private String EuzMspW;\n\n    private String vZNWMPE;\n\n    private String FOqrAxr;\n\n    private void RYNMBky() throws Throwable {\n        String data = EuzMspW;\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            Boolean result = sqlStatement.execute();\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        EuzMspW = data;\n        RYNMBky();\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250020,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.Vector;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class SGgonYc extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        Vector<String> dataVector = new Vector<String>(5);\n        dataVector.add(0, data);\n        dataVector.add(1, data);\n        dataVector.add(2, data);\n        (new fhmFMIr()).RYNMBky(dataVector);\n    }\n}\n\npublic class fhmFMIr {\n\n    public void RYNMBky(Vector<String> dataVector) throws Throwable {\n        String data = dataVector.remove(2);\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            Boolean result = sqlStatement.execute();\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250040,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.LinkedList;\nimport javax.servlet.http.*;\n\npublic class KlMoVru {\n\n    \n    public void fDqjRYE(LinkedList<String> dataLinkedList) throws Throwable {\n        String data = dataLinkedList.remove(2);\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            Boolean result = sqlStatement.execute();\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    public void KgJSeXB(LinkedList<String> dataLinkedList) throws Throwable {\n        String data = dataLinkedList.remove(2);\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n            sqlStatement.setString(1, data);\n            Boolean result = sqlStatement.execute();\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n\npublic class UzfXpTP extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        LinkedList<String> dataLinkedList = new LinkedList<String>();\n        dataLinkedList.add(0, data);\n        dataLinkedList.add(1, data);\n        dataLinkedList.add(2, data);\n        (new KlMoVru()).fDqjRYE(dataLinkedList);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        LinkedList<String> dataLinkedList = new LinkedList<String>();\n        dataLinkedList.add(0, data);\n        dataLinkedList.add(1, data);\n        dataLinkedList.add(2, data);\n        (new KlMoVru()).KgJSeXB(dataLinkedList);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250043,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class LKkspAH extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (5 != 5) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (5 == 5) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (5 == 5) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (5 == 5) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (5 == 5) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (5 != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                PreparedStatement sqlStatement = null;\n                try {\n                    \n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.prepareStatement(\"update users set hitcount=hitcount+1 where name=?\");\n                    for (int i = 0; i < names.length; i++) {\n                        sqlStatement.setString(1, names[i]);\n                        sqlStatement.addBatch();\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (5 == 5) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (5 == 5) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                PreparedStatement sqlStatement = null;\n                try {\n                    \n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.prepareStatement(\"update users set hitcount=hitcount+1 where name=?\");\n                    for (int i = 0; i < names.length; i++) {\n                        sqlStatement.setString(1, names[i]);\n                        sqlStatement.addBatch();\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250053,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class KzLzLkE extends AbstractTestCase {\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrueOrFalse()) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = \"foo\";\n        }\n        if (IO.staticReturnsTrueOrFalse()) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        } else {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrueOrFalse()) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        }\n        if (IO.staticReturnsTrueOrFalse()) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                PreparedStatement sqlStatement = null;\n                try {\n                    \n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.prepareStatement(\"update users set hitcount=hitcount+1 where name=?\");\n                    for (int i = 0; i < names.length; i++) {\n                        sqlStatement.setString(1, names[i]);\n                        sqlStatement.addBatch();\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        } else {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                PreparedStatement sqlStatement = null;\n                try {\n                    \n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.prepareStatement(\"update users set hitcount=hitcount+1 where name=?\");\n                    for (int i = 0; i < names.length; i++) {\n                        sqlStatement.setString(1, names[i]);\n                        sqlStatement.addBatch();\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250071,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class YbWRrVc extends AbstractTestCase {\n\n    static class Container {\n\n        public String containerOne;\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        Container dataContainer = new Container();\n        dataContainer.containerOne = data;\n        (new NPLaSQe()).RYNMBky(dataContainer);\n    }\n}\n\npublic class NPLaSQe {\n\n    public void RYNMBky(YbWRrVc.Container dataContainer) throws Throwable {\n        String data = dataContainer.containerOne;\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                for (int i = 0; i < names.length; i++) {\n                    \n                    sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250106,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class sXUNgqp extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    private void fDqjRYE(String data) throws Throwable {\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        ResultSet resultSet = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n            IO.writeLine(resultSet.getRow());\n            \n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        fDqjRYE(data);\n    }\n\n    private void KgJSeXB(String data) throws Throwable {\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        ResultSet resultSet = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"select * from users where name=?\");\n            sqlStatement.setString(1, data);\n            resultSet = sqlStatement.executeQuery();\n            IO.writeLine(resultSet.getRow());\n            \n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        KgJSeXB(data);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250161,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class ltXMNGZ {\n\n    \n    public String wHnwAlc() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        return data;\n    }\n\n    \n    public String snawHrb() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        return data;\n    }\n}\n\npublic class YUbfTqM extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data = (new ltXMNGZ()).wHnwAlc();\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        ResultSet resultSet = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n            IO.writeLine(resultSet.getRow());\n            \n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data = (new ltXMNGZ()).snawHrb();\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        ResultSet resultSet = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"select * from users where name=?\");\n            sqlStatement.setString(1, data);\n            resultSet = sqlStatement.executeQuery();\n            IO.writeLine(resultSet.getRow());\n            \n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250175,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.LinkedList;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class edWZJDI {\n\n    \n    public void fDqjRYE(LinkedList<String> dataLinkedList) throws Throwable {\n        String data = dataLinkedList.remove(2);\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        ResultSet resultSet = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n            IO.writeLine(resultSet.getRow());\n            \n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    public void KgJSeXB(LinkedList<String> dataLinkedList) throws Throwable {\n        String data = dataLinkedList.remove(2);\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        ResultSet resultSet = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"select * from users where name=?\");\n            sqlStatement.setString(1, data);\n            resultSet = sqlStatement.executeQuery();\n            IO.writeLine(resultSet.getRow());\n            \n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n\npublic class BOhsClZ extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        LinkedList<String> dataLinkedList = new LinkedList<String>();\n        dataLinkedList.add(0, data);\n        dataLinkedList.add(1, data);\n        dataLinkedList.add(2, data);\n        (new edWZJDI()).fDqjRYE(dataLinkedList);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        LinkedList<String> dataLinkedList = new LinkedList<String>();\n        dataLinkedList.add(0, data);\n        dataLinkedList.add(1, data);\n        dataLinkedList.add(2, data);\n        (new edWZJDI()).KgJSeXB(dataLinkedList);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250187,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class uTDYYzr extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n            sqlStatement.setString(1, data);\n            int rowCount = sqlStatement.executeUpdate();\n            IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250193,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class bvHPoIA extends AbstractTestCase {\n\n    static class Container {\n\n        public String containerOne;\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        Container dataContainer = new Container();\n        dataContainer.containerOne = data;\n        (new MDBdaxX()).RYNMBky(dataContainer);\n    }\n}\n\npublic class MDBdaxX {\n\n    public void RYNMBky(bvHPoIA.Container dataContainer) throws Throwable {\n        String data = dataContainer.containerOne;\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250250,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class HdwuHur extends AbstractTestCase {\n\n    \n    private static final boolean PRIVATE_STATIC_FINAL_TRUE = true;\n\n    private static final boolean PRIVATE_STATIC_FINAL_FALSE = false;\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250270,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class YEUkpaL extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        (new ICWFXNi()).RYNMBky(data);\n    }\n}\n\npublic class ICWFXNi {\n\n    public void RYNMBky(String data) throws Throwable {\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250310,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.HashMap;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class JObFKSW {\n\n    \n    public void fDqjRYE(HashMap<Integer, String> dataHashMap) throws Throwable {\n        String data = dataHashMap.get(2);\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    public void KgJSeXB(HashMap<Integer, String> dataHashMap) throws Throwable {\n        String data = dataHashMap.get(2);\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n            sqlStatement.setString(1, data);\n            Boolean result = sqlStatement.execute();\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n\npublic class yuGOLvi extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();\n        dataHashMap.put(0, data);\n        dataHashMap.put(1, data);\n        dataHashMap.put(2, data);\n        (new JObFKSW()).fDqjRYE(dataHashMap);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();\n        dataHashMap.put(0, data);\n        dataHashMap.put(1, data);\n        dataHashMap.put(2, data);\n        (new JObFKSW()).KgJSeXB(dataHashMap);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250333,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class JlFsUaI extends AbstractTestCase {\n\n    \n    private boolean dWmGbZa = false;\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                data = properties.getProperty(\"data\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        dWmGbZa = true;\n        RYNMBky(data);\n    }\n\n    private void RYNMBky(String data) throws Throwable {\n        if (dWmGbZa) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private boolean aRnSMVj = false;\n\n    private boolean aOWZSGn = false;\n\n    private boolean DBbhdbc = false;\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250442,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class HmjzkOn extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                data = properties.getProperty(\"data\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        (new moljhqc()).RYNMBky(data);\n    }\n}\n\npublic class oSkTCuL {\n\n    public void RYNMBky(String data) throws Throwable {\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                for (int i = 0; i < names.length; i++) {\n                    \n                    sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n\npublic class moljhqc {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new oSkTCuL()).RYNMBky(data);\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250456,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class dbhudnC extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (false) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (true) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (true) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (true) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (true) {\n            data = \"\";\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    data = properties.getProperty(\"data\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (false) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                int rowCount = sqlStatement.executeUpdate();\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (true) {\n            data = \"\";\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    data = properties.getProperty(\"data\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (true) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                int rowCount = sqlStatement.executeUpdate();\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250555,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class bgnxRYu extends AbstractTestCase {\n\n    \n    private int privateFive = 5;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (privateFive != 5) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (privateFive == 5) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (privateFive == 5) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (privateFive == 5) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (privateFive == 5) {\n            data = \"\";\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    data = properties.getProperty(\"data\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (privateFive != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                int rowCount = sqlStatement.executeUpdate();\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (privateFive == 5) {\n            data = \"\";\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    data = properties.getProperty(\"data\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (privateFive == 5) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                int rowCount = sqlStatement.executeUpdate();\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250565,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class qNmtdJs extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        switch(5) {\n            case 6:\n                \n                data = null;\n                break;\n            default:\n                \n                data = \"foo\";\n                break;\n        }\n        switch(7) {\n            case 7:\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    \n                    int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                    IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        switch(6) {\n            case 6:\n                \n                data = \"foo\";\n                break;\n            default:\n                \n                data = null;\n                break;\n        }\n        switch(7) {\n            case 7:\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    \n                    int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                    IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        switch(6) {\n            case 6:\n                data = \"\";\n                \n                \n                {\n                    Properties properties = new Properties();\n                    FileInputStream streamFileInput = null;\n                    try {\n                        streamFileInput = new FileInputStream(\"../common/config.properties\");\n                        properties.load(streamFileInput);\n                        \n                        data = properties.getProperty(\"data\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                    } finally {\n                        \n                        try {\n                            if (streamFileInput != null) {\n                                streamFileInput.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                data = null;\n                break;\n        }\n        switch(8) {\n            case 7:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n            default:\n                Connection dbConnection = null;\n                PreparedStatement sqlStatement = null;\n                try {\n                    \n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                    sqlStatement.setString(1, data);\n                    int rowCount = sqlStatement.executeUpdate();\n                    IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n                break;\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        switch(6) {\n            case 6:\n                data = \"\";\n                \n                \n                {\n                    Properties properties = new Properties();\n                    FileInputStream streamFileInput = null;\n                    try {\n                        streamFileInput = new FileInputStream(\"../common/config.properties\");\n                        properties.load(streamFileInput);\n                        \n                        data = properties.getProperty(\"data\");\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                    } finally {\n                        \n                        try {\n                            if (streamFileInput != null) {\n                                streamFileInput.close();\n                            }\n                        } catch (IOException exceptIO) {\n                            IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                        }\n                    }\n                }\n                break;\n            default:\n                \n                data = null;\n                break;\n        }\n        switch(7) {\n            case 7:\n                Connection dbConnection = null;\n                PreparedStatement sqlStatement = null;\n                try {\n                    \n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                    sqlStatement.setString(1, data);\n                    int rowCount = sqlStatement.executeUpdate();\n                    IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250581,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class SgnsaPs extends AbstractTestCase {\n\n    public static String data;\n\n    public void boNMSnT() throws Throwable {\n        data = \"\";\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                data = properties.getProperty(\"data\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        (new eIcdcFR()).RYNMBky();\n    }\n}\n\npublic class eIcdcFR {\n\n    public void RYNMBky() throws Throwable {\n        String data = SgnsaPs.data;\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250612,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class oayPGVG extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                data = properties.getProperty(\"data\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        (new PHuOtIV()).RYNMBky((Object) data);\n    }\n}\n\npublic class PHuOtIV {\n\n    public void RYNMBky(Object dataObject) throws Throwable {\n        String data = (String) dataObject;\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250614,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.HashMap;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class dsRYhTf {\n\n    \n    public void fDqjRYE(HashMap<Integer, String> dataHashMap) throws Throwable {\n        String data = dataHashMap.get(2);\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    public void KgJSeXB(HashMap<Integer, String> dataHashMap) throws Throwable {\n        String data = dataHashMap.get(2);\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n            sqlStatement.setString(1, data);\n            int rowCount = sqlStatement.executeUpdate();\n            IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n\npublic class CdVFvtL extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();\n        dataHashMap.put(0, data);\n        dataHashMap.put(1, data);\n        dataHashMap.put(2, data);\n        (new dsRYhTf()).fDqjRYE(dataHashMap);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                data = properties.getProperty(\"data\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();\n        dataHashMap.put(0, data);\n        dataHashMap.put(1, data);\n        dataHashMap.put(2, data);\n        (new dsRYhTf()).KgJSeXB(dataHashMap);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250621,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class ecdWZaB extends AbstractTestCase {\n\n    private String EuzMspW;\n\n    private String vZNWMPE;\n\n    private String FOqrAxr;\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    private void fDqjRYE() throws Throwable {\n        String data = vZNWMPE;\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        vZNWMPE = data;\n        fDqjRYE();\n    }\n\n    private void KgJSeXB() throws Throwable {\n        String data = FOqrAxr;\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n            sqlStatement.setString(1, data);\n            Boolean result = sqlStatement.execute();\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                data = properties.getProperty(\"data\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        FOqrAxr = data;\n        KgJSeXB();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250669,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class pNEKXJu extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                data = properties.getProperty(\"data\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            Boolean result = sqlStatement.execute();\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250696,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class whKEExK extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (true) {\n            data = \"\";\n            \n            \n            {\n                Properties properties = new Properties();\n                FileInputStream streamFileInput = null;\n                try {\n                    streamFileInput = new FileInputStream(\"../common/config.properties\");\n                    properties.load(streamFileInput);\n                    \n                    data = properties.getProperty(\"data\");\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (true) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250698,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.util.Properties;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class YuZmzbl {\n\n    \n    public void fDqjRYE(qucQIVh.Container dataContainer) throws Throwable {\n        String data = dataContainer.containerOne;\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            Boolean result = sqlStatement.execute();\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    public void KgJSeXB(qucQIVh.Container dataContainer) throws Throwable {\n        String data = dataContainer.containerOne;\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n            sqlStatement.setString(1, data);\n            Boolean result = sqlStatement.execute();\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n\npublic class qucQIVh extends AbstractTestCase {\n\n    static class Container {\n\n        public String containerOne;\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        Container dataContainer = new Container();\n        dataContainer.containerOne = data;\n        (new YuZmzbl()).fDqjRYE(dataContainer);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        data = \"\";\n        \n        \n        {\n            Properties properties = new Properties();\n            FileInputStream streamFileInput = null;\n            try {\n                streamFileInput = new FileInputStream(\"../common/config.properties\");\n                properties.load(streamFileInput);\n                \n                data = properties.getProperty(\"data\");\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        Container dataContainer = new Container();\n        dataContainer.containerOne = data;\n        (new YuZmzbl()).KgJSeXB(dataContainer);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250755,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class pCsLJKh extends AbstractTestCase {\n\n    \n    private String wHnwAlc() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        return data;\n    }\n\n    private void EXrOlJC() throws Throwable {\n        String data = wHnwAlc();\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                for (int i = 0; i < names.length; i++) {\n                    \n                    sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private String snawHrb() throws Throwable {\n        String data;\n        \n        \n        data = System.getProperty(\"user.home\");\n        return data;\n    }\n\n    private void NDSwpcn() throws Throwable {\n        String data = snawHrb();\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"update users set hitcount=hitcount+1 where name=?\");\n                for (int i = 0; i < names.length; i++) {\n                    sqlStatement.setString(1, names[i]);\n                    sqlStatement.addBatch();\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250811,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class Hmwdafp extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (false) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (true) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (true) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (true) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (true) {\n            \n            \n            data = System.getProperty(\"user.home\");\n        } else {\n            \n            data = null;\n        }\n        if (false) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"select * from users where name=?\");\n                sqlStatement.setString(1, data);\n                resultSet = sqlStatement.executeQuery();\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (true) {\n            \n            \n            data = System.getProperty(\"user.home\");\n        } else {\n            \n            data = null;\n        }\n        if (true) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"select * from users where name=?\");\n                sqlStatement.setString(1, data);\n                resultSet = sqlStatement.executeQuery();\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250843,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class skjCMua extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_FALSE) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_TRUE) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_TRUE) {\n            \n            \n            data = System.getProperty(\"user.home\");\n        } else {\n            \n            data = null;\n        }\n        if (IO.STATIC_FINAL_FALSE) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"select * from users where name=?\");\n                sqlStatement.setString(1, data);\n                resultSet = sqlStatement.executeQuery();\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_TRUE) {\n            \n            \n            data = System.getProperty(\"user.home\");\n        } else {\n            \n            data = null;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"select * from users where name=?\");\n                sqlStatement.setString(1, data);\n                resultSet = sqlStatement.executeQuery();\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250857,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class DCDeThP extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticTrue) {\n            \n            \n            data = System.getProperty(\"user.home\");\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticTrue) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250858,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class bhTtFFg extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                for (int i = 0; i < names.length; i++) {\n                    \n                    sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"update users set hitcount=hitcount+1 where name=?\");\n                for (int i = 0; i < names.length; i++) {\n                    sqlStatement.setString(1, names[i]);\n                    sqlStatement.addBatch();\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249689,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class ztAqfHd extends AbstractTestCase {\n\n    \n    private static final int PRIVATE_STATIC_FINAL_FIVE = 5;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE != 5) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                PreparedStatement sqlStatement = null;\n                try {\n                    \n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.prepareStatement(\"update users set hitcount=hitcount+1 where name=?\");\n                    for (int i = 0; i < names.length; i++) {\n                        sqlStatement.setString(1, names[i]);\n                        sqlStatement.addBatch();\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                PreparedStatement sqlStatement = null;\n                try {\n                    \n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.prepareStatement(\"update users set hitcount=hitcount+1 where name=?\");\n                    for (int i = 0; i < names.length; i++) {\n                        sqlStatement.setString(1, names[i]);\n                        sqlStatement.addBatch();\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249699,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class cAUctdg extends AbstractTestCase {\n\n    \n    private boolean privateReturnsTrue() {\n        return true;\n    }\n\n    private boolean privateReturnsFalse() {\n        return false;\n    }\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (privateReturnsFalse()) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (privateReturnsTrue()) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (privateReturnsTrue()) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (privateReturnsTrue()) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (privateReturnsTrue()) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (privateReturnsFalse()) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                PreparedStatement sqlStatement = null;\n                try {\n                    \n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.prepareStatement(\"update users set hitcount=hitcount+1 where name=?\");\n                    for (int i = 0; i < names.length; i++) {\n                        sqlStatement.setString(1, names[i]);\n                        sqlStatement.addBatch();\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (privateReturnsTrue()) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (privateReturnsTrue()) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                PreparedStatement sqlStatement = null;\n                try {\n                    \n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.prepareStatement(\"update users set hitcount=hitcount+1 where name=?\");\n                    for (int i = 0; i < names.length; i++) {\n                        sqlStatement.setString(1, names[i]);\n                        sqlStatement.addBatch();\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249703,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class ZVuDhDF extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_FALSE) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_TRUE) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_TRUE) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (IO.STATIC_FINAL_FALSE) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                PreparedStatement sqlStatement = null;\n                try {\n                    \n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.prepareStatement(\"update users set hitcount=hitcount+1 where name=?\");\n                    for (int i = 0; i < names.length; i++) {\n                        sqlStatement.setString(1, names[i]);\n                        sqlStatement.addBatch();\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_TRUE) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                PreparedStatement sqlStatement = null;\n                try {\n                    \n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.prepareStatement(\"update users set hitcount=hitcount+1 where name=?\");\n                    for (int i = 0; i < names.length; i++) {\n                        sqlStatement.setString(1, names[i]);\n                        sqlStatement.addBatch();\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249705,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class CHUvzxR extends AbstractTestCase {\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        for (int j = 0; j < 1; j++) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        for (int k = 0; k < 1; k++) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                PreparedStatement sqlStatement = null;\n                try {\n                    \n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.prepareStatement(\"update users set hitcount=hitcount+1 where name=?\");\n                    for (int i = 0; i < names.length; i++) {\n                        sqlStatement.setString(1, names[i]);\n                        sqlStatement.addBatch();\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249721,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class ZkBKwEi extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    private void fDqjRYE(String data) throws Throwable {\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                for (int i = 0; i < names.length; i++) {\n                    \n                    sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        fDqjRYE(data);\n    }\n\n    private void KgJSeXB(String data) throws Throwable {\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"update users set hitcount=hitcount+1 where name=?\");\n                for (int i = 0; i < names.length; i++) {\n                    sqlStatement.setString(1, names[i]);\n                    sqlStatement.addBatch();\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        KgJSeXB(data);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249729,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class ExgeBMI extends AbstractTestCase {\n\n    private String ImBBndW() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        return data;\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data = ImBBndW();\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                for (int i = 0; i < names.length; i++) {\n                    \n                    sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249730,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class yeHcFAf {\n\n    \n    public void fDqjRYE() throws Throwable {\n        String data = EpnNJKq.data;\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                for (int i = 0; i < names.length; i++) {\n                    \n                    sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    public void KgJSeXB() throws Throwable {\n        String data = EpnNJKq.data;\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"update users set hitcount=hitcount+1 where name=?\");\n                for (int i = 0; i < names.length; i++) {\n                    sqlStatement.setString(1, names[i]);\n                    sqlStatement.addBatch();\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n\npublic class EpnNJKq extends AbstractTestCase {\n\n    public static String data;\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        \n        data = \"foo\";\n        (new yeHcFAf()).fDqjRYE();\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        \n        \n        data = System.getenv(\"ADD\");\n        (new yeHcFAf()).KgJSeXB();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249749,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class RRYiDUR extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        (new GoqbUZq()).RYNMBky((Object) data);\n    }\n}\n\npublic class GoqbUZq {\n\n    public void RYNMBky(Object dataObject) throws Throwable {\n        String data = (String) dataObject;\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                for (int i = 0; i < names.length; i++) {\n                    \n                    sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249750,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class voTYERU extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (false) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (true) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (true) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (true) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (true) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (false) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"select * from users where name=?\");\n                sqlStatement.setString(1, data);\n                resultSet = sqlStatement.executeQuery();\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (true) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (true) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"select * from users where name=?\");\n                sqlStatement.setString(1, data);\n                resultSet = sqlStatement.executeQuery();\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249763,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class sSIMjQz extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (5 == 5) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (5 == 5) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249764,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class iyRAHmB extends AbstractTestCase {\n\n    private String ImBBndW() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        return data;\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data = ImBBndW();\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        ResultSet resultSet = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n            IO.writeLine(resultSet.getRow());\n            \n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249802,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class PIWOadX extends AbstractTestCase {\n\n    private String EuzMspW;\n\n    private String vZNWMPE;\n\n    private String FOqrAxr;\n\n    private void RYNMBky() throws Throwable {\n        String data = EuzMspW;\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        ResultSet resultSet = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n            IO.writeLine(resultSet.getRow());\n            \n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        EuzMspW = data;\n        RYNMBky();\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249804,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class yBCfubo extends AbstractTestCase {\n\n    public static String data;\n\n    public void boNMSnT() throws Throwable {\n        \n        \n        data = System.getenv(\"ADD\");\n        (new ODImUZr()).RYNMBky();\n    }\n}\n\npublic class ODImUZr {\n\n    public void RYNMBky() throws Throwable {\n        String data = yBCfubo.data;\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        ResultSet resultSet = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n            IO.writeLine(resultSet.getRow());\n            \n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249820,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class HceqnHS extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        (new SebJzgM()).RYNMBky((Object) data);\n    }\n}\n\npublic class SebJzgM {\n\n    public void RYNMBky(Object dataObject) throws Throwable {\n        String data = (String) dataObject;\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        ResultSet resultSet = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n            IO.writeLine(resultSet.getRow());\n            \n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249822,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class TDLPxMd extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (5 != 5) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (5 == 5) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (5 == 5) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (5 == 5) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (5 == 5) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (5 != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                int rowCount = sqlStatement.executeUpdate();\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (5 == 5) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (5 == 5) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                int rowCount = sqlStatement.executeUpdate();\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249837,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class eJifieg extends AbstractTestCase {\n\n    \n    private int privateFive = 5;\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (privateFive == 5) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (privateFive == 5) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249844,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class PhNzEfF extends AbstractTestCase {\n\n    \n    private boolean privateReturnsTrue() {\n        return true;\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (privateReturnsTrue()) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (privateReturnsTrue()) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249846,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class TzuaqBn extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrue()) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticReturnsTrue()) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249852,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class TkPBWUF extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrueOrFalse()) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = \"foo\";\n        }\n        if (IO.staticReturnsTrueOrFalse()) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                int rowCount = sqlStatement.executeUpdate();\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249854,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class qmSJEFR extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        switch(6) {\n            case 6:\n                \n                \n                data = System.getenv(\"ADD\");\n                break;\n            default:\n                \n                data = null;\n                break;\n        }\n        switch(7) {\n            case 7:\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    \n                    int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                    IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249860,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class qmSJEFR extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        switch(5) {\n            case 6:\n                \n                data = null;\n                break;\n            default:\n                \n                data = \"foo\";\n                break;\n        }\n        switch(7) {\n            case 7:\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    \n                    int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                    IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        switch(6) {\n            case 6:\n                \n                data = \"foo\";\n                break;\n            default:\n                \n                data = null;\n                break;\n        }\n        switch(7) {\n            case 7:\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    \n                    int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                    IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        switch(6) {\n            case 6:\n                \n                \n                data = System.getenv(\"ADD\");\n                break;\n            default:\n                \n                data = null;\n                break;\n        }\n        switch(8) {\n            case 7:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n            default:\n                Connection dbConnection = null;\n                PreparedStatement sqlStatement = null;\n                try {\n                    \n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                    sqlStatement.setString(1, data);\n                    int rowCount = sqlStatement.executeUpdate();\n                    IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n                break;\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        switch(6) {\n            case 6:\n                \n                \n                data = System.getenv(\"ADD\");\n                break;\n            default:\n                \n                data = null;\n                break;\n        }\n        switch(7) {\n            case 7:\n                Connection dbConnection = null;\n                PreparedStatement sqlStatement = null;\n                try {\n                    \n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                    sqlStatement.setString(1, data);\n                    int rowCount = sqlStatement.executeUpdate();\n                    IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249861,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class iYochPQ {\n\n    \n    public void ZpnQtvQ(String data) throws Throwable {\n        if (AjYaqqO.ydhDOMq) {\n            \n            data = null;\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                int rowCount = sqlStatement.executeUpdate();\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    public void VmywRrZ(String data) throws Throwable {\n        if (AjYaqqO.HHhrjCy) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                int rowCount = sqlStatement.executeUpdate();\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n    }\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        if (AjYaqqO.Pywwbtz) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n    }\n}\n\npublic class AjYaqqO extends AbstractTestCase {\n\n    \n    public static boolean qRMEpGJ = false;\n\n    \n    public static boolean ydhDOMq = false;\n\n    public static boolean HHhrjCy = false;\n\n    public static boolean Pywwbtz = false;\n\n    public void JttWLtS() throws Throwable {\n        uytpYbp();\n        OQsEKDS();\n        EXrOlJC();\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data = null;\n        \n        \n        data = System.getenv(\"ADD\");\n        ydhDOMq = false;\n        (new iYochPQ()).ZpnQtvQ(data);\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data = null;\n        \n        \n        data = System.getenv(\"ADD\");\n        HHhrjCy = true;\n        (new iYochPQ()).VmywRrZ(data);\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data = null;\n        \n        data = \"foo\";\n        Pywwbtz = true;\n        (new iYochPQ()).fDqjRYE(data);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249869,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class PkBYmZc {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    public void KgJSeXB(String data) throws Throwable {\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n            sqlStatement.setString(1, data);\n            int rowCount = sqlStatement.executeUpdate();\n            IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n\npublic class NygfIbU extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        (new PkBYmZc()).fDqjRYE(data);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        (new PkBYmZc()).KgJSeXB(data);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249879,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class mbvaTzq {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        (new xvdRjiv()).fDqjRYE(data);\n    }\n\n    \n    public void KgJSeXB(String data) throws Throwable {\n        (new xvdRjiv()).KgJSeXB(data);\n    }\n}\n\npublic class xvdRjiv {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        (new CCDNcLx()).fDqjRYE(data);\n    }\n\n    \n    public void KgJSeXB(String data) throws Throwable {\n        (new CCDNcLx()).KgJSeXB(data);\n    }\n}\n\npublic class CCDNcLx {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    public void KgJSeXB(String data) throws Throwable {\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n            sqlStatement.setString(1, data);\n            int rowCount = sqlStatement.executeUpdate();\n            IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n\npublic class lkrybbM extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        (new mbvaTzq()).fDqjRYE(data);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        (new mbvaTzq()).KgJSeXB(data);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249883,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class oApvXnn {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        (new GOEJGDX()).fDqjRYE(data);\n    }\n\n    \n    public void KgJSeXB(String data) throws Throwable {\n        (new GOEJGDX()).KgJSeXB(data);\n    }\n}\n\npublic class yUrfIBY {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        (new oApvXnn()).fDqjRYE(data);\n    }\n\n    \n    public void KgJSeXB(String data) throws Throwable {\n        (new oApvXnn()).KgJSeXB(data);\n    }\n}\n\npublic class GOEJGDX {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        (new GjpPqEU()).fDqjRYE(data);\n    }\n\n    \n    public void KgJSeXB(String data) throws Throwable {\n        (new GjpPqEU()).KgJSeXB(data);\n    }\n}\n\npublic class GjpPqEU {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    public void KgJSeXB(String data) throws Throwable {\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n            sqlStatement.setString(1, data);\n            int rowCount = sqlStatement.executeUpdate();\n            IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n\npublic class IbVpFzl extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        (new yUrfIBY()).fDqjRYE(data);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        (new yUrfIBY()).KgJSeXB(data);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249885,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.io.ByteArrayInputStream;\nimport java.io.ObjectInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.servlet.http.*;\nimport java.sql.*;\n\npublic class gWcTouO {\n\n    \n    public void fDqjRYE(byte[] dataSerialized) throws Throwable {\n        \n        ByteArrayInputStream streamByteArrayInput = null;\n        ObjectInputStream streamObjectInput = null;\n        try {\n            streamByteArrayInput = new ByteArrayInputStream(dataSerialized);\n            streamObjectInput = new ObjectInputStream(streamByteArrayInput);\n            String data = (String) streamObjectInput.readObject();\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VcFIKxo\", exceptIO);\n        } catch (ClassNotFoundException exceptClassNotFound) {\n            IO.logger.log(Level.WARNING, \"XOCCPfT\", exceptClassNotFound);\n        } finally {\n            \n            try {\n                if (streamObjectInput != null) {\n                    streamObjectInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"kpDMUXH\", exceptIO);\n            }\n            try {\n                if (streamByteArrayInput != null) {\n                    streamByteArrayInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"oiWyzFb\", exceptIO);\n            }\n        }\n    }\n\n    \n    public void KgJSeXB(byte[] dataSerialized) throws Throwable {\n        \n        ByteArrayInputStream streamByteArrayInput = null;\n        ObjectInputStream streamObjectInput = null;\n        try {\n            streamByteArrayInput = new ByteArrayInputStream(dataSerialized);\n            streamObjectInput = new ObjectInputStream(streamByteArrayInput);\n            String data = (String) streamObjectInput.readObject();\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                int rowCount = sqlStatement.executeUpdate();\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VcFIKxo\", exceptIO);\n        } catch (ClassNotFoundException exceptClassNotFound) {\n            IO.logger.log(Level.WARNING, \"XOCCPfT\", exceptClassNotFound);\n        } finally {\n            \n            try {\n                if (streamObjectInput != null) {\n                    streamObjectInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"kpDMUXH\", exceptIO);\n            }\n            try {\n                if (streamByteArrayInput != null) {\n                    streamByteArrayInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"oiWyzFb\", exceptIO);\n            }\n        }\n    }\n}\n\npublic class wWsBTgZ extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        \n        ByteArrayOutputStream streamByteArrayOutput = null;\n        ObjectOutput outputObject = null;\n        try {\n            streamByteArrayOutput = new ByteArrayOutputStream();\n            outputObject = new ObjectOutputStream(streamByteArrayOutput);\n            outputObject.writeObject(data);\n            byte[] dataSerialized = streamByteArrayOutput.toByteArray();\n            (new gWcTouO()).fDqjRYE(dataSerialized);\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"IQdccST\", exceptIO);\n        } finally {\n            \n            try {\n                if (outputObject != null) {\n                    outputObject.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"LgADWEx\", exceptIO);\n            }\n            try {\n                if (streamByteArrayOutput != null) {\n                    streamByteArrayOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"vFutZps\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        \n        ByteArrayOutputStream streamByteArrayOutput = null;\n        ObjectOutput outputObject = null;\n        try {\n            streamByteArrayOutput = new ByteArrayOutputStream();\n            outputObject = new ObjectOutputStream(streamByteArrayOutput);\n            outputObject.writeObject(data);\n            byte[] dataSerialized = streamByteArrayOutput.toByteArray();\n            (new gWcTouO()).KgJSeXB(dataSerialized);\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"IQdccST\", exceptIO);\n        } finally {\n            \n            try {\n                if (outputObject != null) {\n                    outputObject.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"LgADWEx\", exceptIO);\n            }\n            try {\n                if (streamByteArrayOutput != null) {\n                    streamByteArrayOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"vFutZps\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249903,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class pWxpFIC extends AbstractTestCase {\n\n    \n    private boolean privateTrue = true;\n\n    private boolean privateFalse = false;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (privateFalse) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (privateTrue) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (privateTrue) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (privateTrue) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (privateTrue) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (privateFalse) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (privateTrue) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (privateTrue) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249913,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class udNOOQn extends AbstractTestCase {\n\n    \n    private boolean privateReturnsTrue() {\n        return true;\n    }\n\n    private boolean privateReturnsFalse() {\n        return false;\n    }\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (privateReturnsFalse()) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (privateReturnsTrue()) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (privateReturnsTrue()) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (privateReturnsTrue()) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (privateReturnsTrue()) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (privateReturnsFalse()) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (privateReturnsTrue()) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (privateReturnsTrue()) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249919,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class GALyfBJ extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_FALSE) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_TRUE) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_TRUE) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (IO.STATIC_FINAL_FALSE) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_TRUE) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249921,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class IFEtYhc extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticTrue) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticTrue) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249922,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class KGsDETM extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    private void fDqjRYE(String data) throws Throwable {\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        fDqjRYE(data);\n    }\n\n    private void KgJSeXB(String data) throws Throwable {\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n            sqlStatement.setString(1, data);\n            Boolean result = sqlStatement.execute();\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        KgJSeXB(data);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249945,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.Vector;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class uKPZUha extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        Vector<String> dataVector = new Vector<String>(5);\n        dataVector.add(0, data);\n        dataVector.add(1, data);\n        dataVector.add(2, data);\n        (new qiDbPbx()).RYNMBky(dataVector);\n    }\n}\n\npublic class qiDbPbx {\n\n    public void RYNMBky(Vector<String> dataVector) throws Throwable {\n        String data = dataVector.remove(2);\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249968,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.HashMap;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class eZvvzfN extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();\n        dataHashMap.put(0, data);\n        dataHashMap.put(1, data);\n        dataHashMap.put(2, data);\n        (new fVCjhQX()).RYNMBky(dataHashMap);\n    }\n}\n\npublic class fVCjhQX {\n\n    public void RYNMBky(HashMap<Integer, String> dataHashMap) throws Throwable {\n        String data = dataHashMap.get(2);\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249972,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class PFqoeSX extends AbstractTestCase {\n\n    \n    private boolean privateTrue = true;\n\n    private boolean privateFalse = false;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (privateFalse) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (privateTrue) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (privateTrue) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (privateTrue) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (privateTrue) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (privateFalse) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (privateTrue) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (privateTrue) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249985,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class wTkHRjj extends AbstractTestCase {\n\n    \n    private static final int PRIVATE_STATIC_FINAL_FIVE = 5;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE != 5) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249987,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class lsMGMrS extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (IO.staticReturnsFalse()) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (IO.staticReturnsTrue()) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrue()) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticReturnsTrue()) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrue()) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticReturnsFalse()) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrue()) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticReturnsTrue()) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249997,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class wQZvfYV extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        switch(6) {\n            case 6:\n                \n                \n                data = System.getenv(\"ADD\");\n                break;\n            default:\n                \n                data = null;\n                break;\n        }\n        switch(7) {\n            case 7:\n                Connection dbConnection = null;\n                PreparedStatement sqlStatement = null;\n                try {\n                    \n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                    Boolean result = sqlStatement.execute();\n                    if (result) {\n                        IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                    } else {\n                        IO.writeLine(\"iCUpMRN\" + data);\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250004,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class LuilTwM extends AbstractTestCase {\n\n    \n    public static boolean qRMEpGJ = false;\n\n    public void boNMSnT() throws Throwable {\n        String data = null;\n        \n        \n        data = System.getenv(\"ADD\");\n        qRMEpGJ = true;\n        (new VcZZBNW()).RYNMBky(data);\n    }\n\n    \n    public static boolean ydhDOMq = false;\n\n    public static boolean HHhrjCy = false;\n\n    public static boolean Pywwbtz = false;\n}\n\npublic class VcZZBNW {\n\n    public void RYNMBky(String data) throws Throwable {\n        if (LuilTwM.qRMEpGJ) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250012,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class RYmqHkn extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    private void fDqjRYE(String data) throws Throwable {\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            Boolean result = sqlStatement.execute();\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        fDqjRYE(data);\n    }\n\n    private void KgJSeXB(String data) throws Throwable {\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n            sqlStatement.setString(1, data);\n            Boolean result = sqlStatement.execute();\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        KgJSeXB(data);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250017,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class djQpUka {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        (new zyPwrHD()).fDqjRYE(data);\n    }\n\n    \n    public void KgJSeXB(String data) throws Throwable {\n        (new zyPwrHD()).KgJSeXB(data);\n    }\n}\n\npublic class zyPwrHD {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        (new IcMyapx()).fDqjRYE(data);\n    }\n\n    \n    public void KgJSeXB(String data) throws Throwable {\n        (new IcMyapx()).KgJSeXB(data);\n    }\n}\n\npublic class IcMyapx {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            Boolean result = sqlStatement.execute();\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    public void KgJSeXB(String data) throws Throwable {\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n            sqlStatement.setString(1, data);\n            Boolean result = sqlStatement.execute();\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n\npublic class IDksPos extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        (new djQpUka()).fDqjRYE(data);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        (new djQpUka()).KgJSeXB(data);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250027,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.io.ByteArrayInputStream;\nimport java.io.ObjectInputStream;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport javax.servlet.http.*;\nimport java.sql.*;\n\npublic class jqroFaF {\n\n    \n    public void fDqjRYE(byte[] dataSerialized) throws Throwable {\n        \n        ByteArrayInputStream streamByteArrayInput = null;\n        ObjectInputStream streamObjectInput = null;\n        try {\n            streamByteArrayInput = new ByteArrayInputStream(dataSerialized);\n            streamObjectInput = new ObjectInputStream(streamByteArrayInput);\n            String data = (String) streamObjectInput.readObject();\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VcFIKxo\", exceptIO);\n        } catch (ClassNotFoundException exceptClassNotFound) {\n            IO.logger.log(Level.WARNING, \"XOCCPfT\", exceptClassNotFound);\n        } finally {\n            \n            try {\n                if (streamObjectInput != null) {\n                    streamObjectInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"kpDMUXH\", exceptIO);\n            }\n            try {\n                if (streamByteArrayInput != null) {\n                    streamByteArrayInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"oiWyzFb\", exceptIO);\n            }\n        }\n    }\n\n    \n    public void KgJSeXB(byte[] dataSerialized) throws Throwable {\n        \n        ByteArrayInputStream streamByteArrayInput = null;\n        ObjectInputStream streamObjectInput = null;\n        try {\n            streamByteArrayInput = new ByteArrayInputStream(dataSerialized);\n            streamObjectInput = new ObjectInputStream(streamByteArrayInput);\n            String data = (String) streamObjectInput.readObject();\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"VcFIKxo\", exceptIO);\n        } catch (ClassNotFoundException exceptClassNotFound) {\n            IO.logger.log(Level.WARNING, \"XOCCPfT\", exceptClassNotFound);\n        } finally {\n            \n            try {\n                if (streamObjectInput != null) {\n                    streamObjectInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"kpDMUXH\", exceptIO);\n            }\n            try {\n                if (streamByteArrayInput != null) {\n                    streamByteArrayInput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"oiWyzFb\", exceptIO);\n            }\n        }\n    }\n}\n\npublic class XIsoYDI extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        \n        ByteArrayOutputStream streamByteArrayOutput = null;\n        ObjectOutput outputObject = null;\n        try {\n            streamByteArrayOutput = new ByteArrayOutputStream();\n            outputObject = new ObjectOutputStream(streamByteArrayOutput);\n            outputObject.writeObject(data);\n            byte[] dataSerialized = streamByteArrayOutput.toByteArray();\n            (new jqroFaF()).fDqjRYE(dataSerialized);\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"IQdccST\", exceptIO);\n        } finally {\n            \n            try {\n                if (outputObject != null) {\n                    outputObject.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"LgADWEx\", exceptIO);\n            }\n            try {\n                if (streamByteArrayOutput != null) {\n                    streamByteArrayOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"vFutZps\", exceptIO);\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        \n        ByteArrayOutputStream streamByteArrayOutput = null;\n        ObjectOutput outputObject = null;\n        try {\n            streamByteArrayOutput = new ByteArrayOutputStream();\n            outputObject = new ObjectOutputStream(streamByteArrayOutput);\n            outputObject.writeObject(data);\n            byte[] dataSerialized = streamByteArrayOutput.toByteArray();\n            (new jqroFaF()).KgJSeXB(dataSerialized);\n        } catch (IOException exceptIO) {\n            IO.logger.log(Level.WARNING, \"IQdccST\", exceptIO);\n        } finally {\n            \n            try {\n                if (outputObject != null) {\n                    outputObject.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"LgADWEx\", exceptIO);\n            }\n            try {\n                if (streamByteArrayOutput != null) {\n                    streamByteArrayOutput.close();\n                }\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"vFutZps\", exceptIO);\n            }\n        }\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250047,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class yvQwRde extends AbstractTestCase {\n\n    \n    private boolean privateTrue = true;\n\n    private boolean privateFalse = false;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (privateFalse) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (privateTrue) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (privateTrue) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (privateTrue) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (privateTrue) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (privateFalse) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                PreparedStatement sqlStatement = null;\n                try {\n                    \n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.prepareStatement(\"update users set hitcount=hitcount+1 where name=?\");\n                    for (int i = 0; i < names.length; i++) {\n                        sqlStatement.setString(1, names[i]);\n                        sqlStatement.addBatch();\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (privateTrue) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (privateTrue) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                PreparedStatement sqlStatement = null;\n                try {\n                    \n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.prepareStatement(\"update users set hitcount=hitcount+1 where name=?\");\n                    for (int i = 0; i < names.length; i++) {\n                        sqlStatement.setString(1, names[i]);\n                        sqlStatement.addBatch();\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250057,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class pQSSTDa extends AbstractTestCase {\n\n    \n    private static final int PRIVATE_STATIC_FINAL_FIVE = 5;\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250058,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class dDxTaOR extends AbstractTestCase {\n\n    \n    private boolean privateReturnsTrue() {\n        return true;\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (privateReturnsTrue()) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (privateReturnsTrue()) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250062,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class vODUWzD extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_FALSE) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_TRUE) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_TRUE) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (IO.STATIC_FINAL_FALSE) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                PreparedStatement sqlStatement = null;\n                try {\n                    \n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.prepareStatement(\"update users set hitcount=hitcount+1 where name=?\");\n                    for (int i = 0; i < names.length; i++) {\n                        sqlStatement.setString(1, names[i]);\n                        sqlStatement.addBatch();\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_TRUE) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                PreparedStatement sqlStatement = null;\n                try {\n                    \n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.prepareStatement(\"update users set hitcount=hitcount+1 where name=?\");\n                    for (int i = 0; i < names.length; i++) {\n                        sqlStatement.setString(1, names[i]);\n                        sqlStatement.addBatch();\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250065,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class XBfGvRK extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (IO.staticReturnsFalse()) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (IO.staticReturnsTrue()) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrue()) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticReturnsTrue()) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrue()) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticReturnsFalse()) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                PreparedStatement sqlStatement = null;\n                try {\n                    \n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.prepareStatement(\"update users set hitcount=hitcount+1 where name=?\");\n                    for (int i = 0; i < names.length; i++) {\n                        sqlStatement.setString(1, names[i]);\n                        sqlStatement.addBatch();\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrue()) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticReturnsTrue()) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                PreparedStatement sqlStatement = null;\n                try {\n                    \n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.prepareStatement(\"update users set hitcount=hitcount+1 where name=?\");\n                    for (int i = 0; i < names.length; i++) {\n                        sqlStatement.setString(1, names[i]);\n                        sqlStatement.addBatch();\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250069,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class CEUFDar extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        for (int j = 0; j < 1; j++) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250080,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.HashMap;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class UyJLPyy {\n\n    \n    public void fDqjRYE(HashMap<Integer, String> dataHashMap) throws Throwable {\n        String data = dataHashMap.get(2);\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                for (int i = 0; i < names.length; i++) {\n                    \n                    sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    public void KgJSeXB(HashMap<Integer, String> dataHashMap) throws Throwable {\n        String data = dataHashMap.get(2);\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"update users set hitcount=hitcount+1 where name=?\");\n                for (int i = 0; i < names.length; i++) {\n                    sqlStatement.setString(1, names[i]);\n                    sqlStatement.addBatch();\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n\npublic class JgTuFSv extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();\n        dataHashMap.put(0, data);\n        dataHashMap.put(1, data);\n        dataHashMap.put(2, data);\n        (new UyJLPyy()).fDqjRYE(dataHashMap);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        HashMap<Integer, String> dataHashMap = new HashMap<Integer, String>();\n        dataHashMap.put(0, data);\n        dataHashMap.put(1, data);\n        dataHashMap.put(2, data);\n        (new UyJLPyy()).KgJSeXB(dataHashMap);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250117,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class Nwkocdf extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_TRUE) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250136,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class agNbPlG extends AbstractTestCase {\n\n    private String EuzMspW;\n\n    private String vZNWMPE;\n\n    private String FOqrAxr;\n\n    private void RYNMBky() throws Throwable {\n        String data = EuzMspW;\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        ResultSet resultSet = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n            IO.writeLine(resultSet.getRow());\n            \n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        EuzMspW = data;\n        RYNMBky();\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250164,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class LobdEEw extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        (new hMDflLC()).RYNMBky(data);\n    }\n}\n\npublic class sybMmAg {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new CkzjVHm()).RYNMBky(data);\n    }\n}\n\npublic class CkzjVHm {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new qgDtlDz()).RYNMBky(data);\n    }\n}\n\npublic class hMDflLC {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new sybMmAg()).RYNMBky(data);\n    }\n}\n\npublic class qgDtlDz {\n\n    public void RYNMBky(String data) throws Throwable {\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        ResultSet resultSet = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n            IO.writeLine(resultSet.getRow());\n            \n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250172,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.LinkedList;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class BOhsClZ extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        LinkedList<String> dataLinkedList = new LinkedList<String>();\n        dataLinkedList.add(0, data);\n        dataLinkedList.add(1, data);\n        dataLinkedList.add(2, data);\n        (new edWZJDI()).RYNMBky(dataLinkedList);\n    }\n}\n\npublic class edWZJDI {\n\n    public void RYNMBky(LinkedList<String> dataLinkedList) throws Throwable {\n        String data = dataLinkedList.remove(2);\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        ResultSet resultSet = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n            IO.writeLine(resultSet.getRow());\n            \n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250186,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class oTohxhG extends AbstractTestCase {\n\n    \n    private static final int PRIVATE_STATIC_FINAL_FIVE = 5;\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250202,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class gzPIzHM extends AbstractTestCase {\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        while (true) {\n            \n            data = \"foo\";\n            break;\n        }\n        while (true) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n            break;\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        while (true) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n            break;\n        }\n        while (true) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                int rowCount = sqlStatement.executeUpdate();\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n            break;\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250223,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class YxJmjel extends AbstractTestCase {\n\n    private String EuzMspW;\n\n    private String vZNWMPE;\n\n    private String FOqrAxr;\n\n    private void RYNMBky() throws Throwable {\n        String data = EuzMspW;\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        EuzMspW = data;\n        RYNMBky();\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250236,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class kBbeeFX extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        (new Xptdfdr()).RYNMBky(data);\n    }\n}\n\npublic class Xptdfdr {\n\n    public void RYNMBky(String data) throws Throwable {\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250238,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class YGFuKbG extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data = (new dhsIxSH()).ImBBndW();\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n\npublic class dhsIxSH {\n\n    public String ImBBndW() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        return data;\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250246,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class MDBdaxX {\n\n    \n    public void fDqjRYE(bvHPoIA.Container dataContainer) throws Throwable {\n        String data = dataContainer.containerOne;\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    public void KgJSeXB(bvHPoIA.Container dataContainer) throws Throwable {\n        String data = dataContainer.containerOne;\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n            sqlStatement.setString(1, data);\n            int rowCount = sqlStatement.executeUpdate();\n            IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n\npublic class bvHPoIA extends AbstractTestCase {\n\n    static class Container {\n\n        public String containerOne;\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        Container dataContainer = new Container();\n        dataContainer.containerOne = data;\n        (new MDBdaxX()).fDqjRYE(dataContainer);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        Container dataContainer = new Container();\n        dataContainer.containerOne = data;\n        (new MDBdaxX()).KgJSeXB(dataContainer);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250251,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.LinkedList;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class VRUECrO extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        LinkedList<String> dataLinkedList = new LinkedList<String>();\n        dataLinkedList.add(0, data);\n        dataLinkedList.add(1, data);\n        dataLinkedList.add(2, data);\n        (new YgiUGMO()).RYNMBky(dataLinkedList);\n    }\n}\n\npublic class YgiUGMO {\n\n    public void RYNMBky(LinkedList<String> dataLinkedList) throws Throwable {\n        String data = dataLinkedList.remove(2);\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250258,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class KTwlhEV extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrue()) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticReturnsTrue()) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250284,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class mYJkiBj extends AbstractTestCase {\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrueOrFalse()) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = \"foo\";\n        }\n        if (IO.staticReturnsTrueOrFalse()) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        } else {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrueOrFalse()) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        }\n        if (IO.staticReturnsTrueOrFalse()) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250287,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class GtIHeXc extends AbstractTestCase {\n\n    private String EuzMspW;\n\n    private String vZNWMPE;\n\n    private String FOqrAxr;\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    private void fDqjRYE() throws Throwable {\n        String data = vZNWMPE;\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        vZNWMPE = data;\n        fDqjRYE();\n    }\n\n    private void KgJSeXB() throws Throwable {\n        String data = FOqrAxr;\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n            sqlStatement.setString(1, data);\n            Boolean result = sqlStatement.execute();\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        FOqrAxr = data;\n        KgJSeXB();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250309,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class VmUxBfN extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        (new tqOVYCz()).RYNMBky((Object) data);\n    }\n}\n\npublic class tqOVYCz {\n\n    public void RYNMBky(Object dataObject) throws Throwable {\n        String data = (String) dataObject;\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250326,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class hczCWDy extends AbstractTestCase {\n\n    \n    private static final int PRIVATE_STATIC_FINAL_FIVE = 5;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE != 5) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250347,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class tTrfmKT extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250360,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class uyxhpDc extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        for (int j = 0; j < 1; j++) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250368,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class uyxhpDc extends AbstractTestCase {\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        for (int j = 0; j < 1; j++) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        for (int k = 0; k < 1; k++) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250369,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class QYAtLGC extends AbstractTestCase {\n\n    \n    private boolean dWmGbZa = false;\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        dWmGbZa = true;\n        RYNMBky(data);\n    }\n\n    private void RYNMBky(String data) throws Throwable {\n        if (dWmGbZa) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private boolean aRnSMVj = false;\n\n    private boolean aOWZSGn = false;\n\n    private boolean DBbhdbc = false;\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250370,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class aVUncon extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    private void fDqjRYE(String data) throws Throwable {\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            Boolean result = sqlStatement.execute();\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        fDqjRYE(data);\n    }\n\n    private void KgJSeXB(String data) throws Throwable {\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n            sqlStatement.setString(1, data);\n            Boolean result = sqlStatement.execute();\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        KgJSeXB(data);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250377,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class YrOMUlU extends AbstractTestCase {\n\n    \n    private int privateFive = 5;\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (privateFive == 5) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (privateFive == 5) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249700,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class kwMHrUk extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrue()) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticReturnsTrue()) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249708,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class ZGkRmZp extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (IO.STATIC_FINAL_FIVE == 5) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249712,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class EWDosgj extends AbstractTestCase {\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        while (true) {\n            \n            data = \"foo\";\n            break;\n        }\n        while (true) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n            break;\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        while (true) {\n            \n            \n            data = System.getenv(\"ADD\");\n            break;\n        }\n        while (true) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                PreparedStatement sqlStatement = null;\n                try {\n                    \n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.prepareStatement(\"update users set hitcount=hitcount+1 where name=?\");\n                    for (int i = 0; i < names.length; i++) {\n                        sqlStatement.setString(1, names[i]);\n                        sqlStatement.addBatch();\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n            break;\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249719,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class ExgeBMI extends AbstractTestCase {\n\n    \n    private String wHnwAlc() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        return data;\n    }\n\n    private void EXrOlJC() throws Throwable {\n        String data = wHnwAlc();\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                for (int i = 0; i < names.length; i++) {\n                    \n                    sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private String snawHrb() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        return data;\n    }\n\n    private void NDSwpcn() throws Throwable {\n        String data = snawHrb();\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"update users set hitcount=hitcount+1 where name=?\");\n                for (int i = 0; i < names.length; i++) {\n                    sqlStatement.setString(1, names[i]);\n                    sqlStatement.addBatch();\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249731,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class AuTlrMr extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        (new xKPWoZF()).RYNMBky(data);\n    }\n}\n\npublic class ljrBxAB {\n\n    public void RYNMBky(String data) throws Throwable {\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                for (int i = 0; i < names.length; i++) {\n                    \n                    sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n\npublic class xKPWoZF {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new ljrBxAB()).RYNMBky(data);\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249736,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class ljrBxAB {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                for (int i = 0; i < names.length; i++) {\n                    \n                    sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    public void KgJSeXB(String data) throws Throwable {\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"update users set hitcount=hitcount+1 where name=?\");\n                for (int i = 0; i < names.length; i++) {\n                    sqlStatement.setString(1, names[i]);\n                    sqlStatement.addBatch();\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n\npublic class xKPWoZF {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        (new ljrBxAB()).fDqjRYE(data);\n    }\n\n    \n    public void KgJSeXB(String data) throws Throwable {\n        (new ljrBxAB()).KgJSeXB(data);\n    }\n}\n\npublic class AuTlrMr extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        (new xKPWoZF()).fDqjRYE(data);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        (new xKPWoZF()).KgJSeXB(data);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249737,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class OoMWxnx extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        (new kmwpnhV()).RYNMBky(data);\n    }\n}\n\npublic class uVJKtvR {\n\n    public void RYNMBky(String data) throws Throwable {\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                for (int i = 0; i < names.length; i++) {\n                    \n                    sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n\npublic class kmwpnhV {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new NSIxDyH()).RYNMBky(data);\n    }\n}\n\npublic class xYlucsH {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new uVJKtvR()).RYNMBky(data);\n    }\n}\n\npublic class NSIxDyH {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new xYlucsH()).RYNMBky(data);\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249740,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class MmxHDbn {\n\n    \n    public void fDqjRYE(String[] dataArray) throws Throwable {\n        String data = dataArray[2];\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                for (int i = 0; i < names.length; i++) {\n                    \n                    sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    public void KgJSeXB(String[] dataArray) throws Throwable {\n        String data = dataArray[2];\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"update users set hitcount=hitcount+1 where name=?\");\n                for (int i = 0; i < names.length; i++) {\n                    sqlStatement.setString(1, names[i]);\n                    sqlStatement.addBatch();\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n\npublic class UvbaPyS extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        String[] dataArray = new String[5];\n        dataArray[2] = data;\n        (new MmxHDbn()).fDqjRYE(dataArray);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        String[] dataArray = new String[5];\n        dataArray[2] = data;\n        (new MmxHDbn()).KgJSeXB(dataArray);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249745,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class EpnNJKq extends AbstractTestCase {\n\n    public static String data;\n\n    public void boNMSnT() throws Throwable {\n        \n        \n        data = System.getenv(\"ADD\");\n        (new yeHcFAf()).RYNMBky();\n    }\n}\n\npublic class yeHcFAf {\n\n    public void RYNMBky() throws Throwable {\n        String data = EpnNJKq.data;\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                for (int i = 0; i < names.length; i++) {\n                    \n                    sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249748,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class ydHfHrF extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        ResultSet resultSet = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n            IO.writeLine(resultSet.getRow());\n            \n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249760,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class wWfOnFr extends AbstractTestCase {\n\n    \n    private static final boolean PRIVATE_STATIC_FINAL_TRUE = true;\n\n    private static final boolean PRIVATE_STATIC_FINAL_FALSE = false;\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249766,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class IMLeGvD extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (IO.staticFive != 5) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (IO.staticFive == 5) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (IO.staticFive == 5) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticFive == 5) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (IO.staticFive == 5) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticFive != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"select * from users where name=?\");\n                sqlStatement.setString(1, data);\n                resultSet = sqlStatement.executeQuery();\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (IO.staticFive == 5) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticFive == 5) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"select * from users where name=?\");\n                sqlStatement.setString(1, data);\n                resultSet = sqlStatement.executeQuery();\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249787,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class HJijAeL {\n\n    \n    public void ZpnQtvQ(String data) throws Throwable {\n        if (JMhhjSG.ydhDOMq) {\n            \n            data = null;\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"select * from users where name=?\");\n                sqlStatement.setString(1, data);\n                resultSet = sqlStatement.executeQuery();\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    public void VmywRrZ(String data) throws Throwable {\n        if (JMhhjSG.HHhrjCy) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"select * from users where name=?\");\n                sqlStatement.setString(1, data);\n                resultSet = sqlStatement.executeQuery();\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n    }\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        if (JMhhjSG.Pywwbtz) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n    }\n}\n\npublic class JMhhjSG extends AbstractTestCase {\n\n    \n    public static boolean qRMEpGJ = false;\n\n    \n    public static boolean ydhDOMq = false;\n\n    public static boolean HHhrjCy = false;\n\n    public static boolean Pywwbtz = false;\n\n    public void JttWLtS() throws Throwable {\n        uytpYbp();\n        OQsEKDS();\n        EXrOlJC();\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data = null;\n        \n        \n        data = System.getenv(\"ADD\");\n        ydhDOMq = false;\n        (new HJijAeL()).ZpnQtvQ(data);\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data = null;\n        \n        \n        data = System.getenv(\"ADD\");\n        HHhrjCy = true;\n        (new HJijAeL()).VmywRrZ(data);\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data = null;\n        \n        data = \"foo\";\n        Pywwbtz = true;\n        (new HJijAeL()).fDqjRYE(data);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249797,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class GfDaBWf extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String dataCopy;\n        {\n            String data;\n            \n            data = \"foo\";\n            dataCopy = data;\n        }\n        {\n            String data = dataCopy;\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String dataCopy;\n        {\n            String data;\n            \n            \n            data = System.getenv(\"ADD\");\n            dataCopy = data;\n        }\n        {\n            String data = dataCopy;\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"select * from users where name=?\");\n                sqlStatement.setString(1, data);\n                resultSet = sqlStatement.executeQuery();\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249799,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class twElSho {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        ResultSet resultSet = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n            IO.writeLine(resultSet.getRow());\n            \n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    public void KgJSeXB(String data) throws Throwable {\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        ResultSet resultSet = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"select * from users where name=?\");\n            sqlStatement.setString(1, data);\n            resultSet = sqlStatement.executeQuery();\n            IO.writeLine(resultSet.getRow());\n            \n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n\npublic class XshhHtd {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        (new twElSho()).fDqjRYE(data);\n    }\n\n    \n    public void KgJSeXB(String data) throws Throwable {\n        (new twElSho()).KgJSeXB(data);\n    }\n}\n\npublic class AYbVSNU extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        (new XshhHtd()).fDqjRYE(data);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        (new XshhHtd()).KgJSeXB(data);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249809,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class GzsTrSN extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data = (new ZRdqeLM()).ImBBndW();\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        ResultSet resultSet = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n            IO.writeLine(resultSet.getRow());\n            \n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n\npublic class ZRdqeLM {\n\n    public String ImBBndW() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        return data;\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249814,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class cDgZmkl extends AbstractTestCase {\n\n    \n    private static final int PRIVATE_STATIC_FINAL_FIVE = 5;\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249842,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class PhNzEfF extends AbstractTestCase {\n\n    \n    private boolean privateReturnsTrue() {\n        return true;\n    }\n\n    private boolean privateReturnsFalse() {\n        return false;\n    }\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (privateReturnsFalse()) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (privateReturnsTrue()) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (privateReturnsTrue()) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (privateReturnsTrue()) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (privateReturnsTrue()) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (privateReturnsFalse()) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                int rowCount = sqlStatement.executeUpdate();\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (privateReturnsTrue()) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (privateReturnsTrue()) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                int rowCount = sqlStatement.executeUpdate();\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249847,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class HJQRwip extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (IO.staticFalse) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (IO.staticTrue) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (IO.staticTrue) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticTrue) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (IO.staticTrue) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticFalse) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                int rowCount = sqlStatement.executeUpdate();\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (IO.staticTrue) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticTrue) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                int rowCount = sqlStatement.executeUpdate();\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249851,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class TkPBWUF extends AbstractTestCase {\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrueOrFalse()) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = \"foo\";\n        }\n        if (IO.staticReturnsTrueOrFalse()) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        } else {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrueOrFalse()) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            \n            data = System.getenv(\"ADD\");\n        }\n        if (IO.staticReturnsTrueOrFalse()) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                int rowCount = sqlStatement.executeUpdate();\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                int rowCount = sqlStatement.executeUpdate();\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249855,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class VTcMiro extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String dataCopy;\n        {\n            String data;\n            \n            data = \"foo\";\n            dataCopy = data;\n        }\n        {\n            String data = dataCopy;\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String dataCopy;\n        {\n            String data;\n            \n            \n            data = System.getenv(\"ADD\");\n            dataCopy = data;\n        }\n        {\n            String data = dataCopy;\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                int rowCount = sqlStatement.executeUpdate();\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249871,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class rswvuBq extends AbstractTestCase {\n\n    private void RYNMBky(String data) throws Throwable {\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        RYNMBky(data);\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249872,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class jVwhlfs extends AbstractTestCase {\n\n    private String EuzMspW;\n\n    private String vZNWMPE;\n\n    private String FOqrAxr;\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    private void fDqjRYE() throws Throwable {\n        String data = vZNWMPE;\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        vZNWMPE = data;\n        fDqjRYE();\n    }\n\n    private void KgJSeXB() throws Throwable {\n        String data = FOqrAxr;\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n            sqlStatement.setString(1, data);\n            int rowCount = sqlStatement.executeUpdate();\n            IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        FOqrAxr = data;\n        KgJSeXB();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249877,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class gjzyYyj {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        (new OHfZrvh()).fDqjRYE(data);\n    }\n\n    \n    public void KgJSeXB(String data) throws Throwable {\n        (new OHfZrvh()).KgJSeXB(data);\n    }\n}\n\npublic class OHfZrvh {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    public void KgJSeXB(String data) throws Throwable {\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n            sqlStatement.setString(1, data);\n            int rowCount = sqlStatement.executeUpdate();\n            IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n\npublic class ugRGaPc extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        (new gjzyYyj()).fDqjRYE(data);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        (new gjzyYyj()).KgJSeXB(data);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249881,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.Vector;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class sopYnJX extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        Vector<String> dataVector = new Vector<String>(5);\n        dataVector.add(0, data);\n        dataVector.add(1, data);\n        dataVector.add(2, data);\n        (new CZNNXvi()).RYNMBky(dataVector);\n    }\n}\n\npublic class CZNNXvi {\n\n    public void RYNMBky(Vector<String> dataVector) throws Throwable {\n        String data = dataVector.remove(2);\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249896,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class mJQIRHF extends AbstractTestCase {\n\n    \n    private static final int PRIVATE_STATIC_FINAL_FIVE = 5;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE != 5) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249915,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class acllzbF extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrueOrFalse()) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = \"foo\";\n        }\n        if (IO.staticReturnsTrueOrFalse()) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249926,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class iFfhpIk extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (IO.staticFive != 5) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (IO.staticFive == 5) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (IO.staticFive == 5) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticFive == 5) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (IO.staticFive == 5) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticFive != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (IO.staticFive == 5) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticFive == 5) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249931,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class ZmptUon extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        switch(5) {\n            case 6:\n                \n                data = null;\n                break;\n            default:\n                \n                data = \"foo\";\n                break;\n        }\n        switch(7) {\n            case 7:\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    \n                    Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                    if (result) {\n                        IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                    } else {\n                        IO.writeLine(\"iCUpMRN\" + data);\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        switch(6) {\n            case 6:\n                \n                data = \"foo\";\n                break;\n            default:\n                \n                data = null;\n                break;\n        }\n        switch(7) {\n            case 7:\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    \n                    Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                    if (result) {\n                        IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                    } else {\n                        IO.writeLine(\"iCUpMRN\" + data);\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        switch(6) {\n            case 6:\n                \n                \n                data = System.getenv(\"ADD\");\n                break;\n            default:\n                \n                data = null;\n                break;\n        }\n        switch(8) {\n            case 7:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n            default:\n                Connection dbConnection = null;\n                PreparedStatement sqlStatement = null;\n                try {\n                    \n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                    sqlStatement.setString(1, data);\n                    Boolean result = sqlStatement.execute();\n                    if (result) {\n                        IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                    } else {\n                        IO.writeLine(\"iCUpMRN\" + data);\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n                break;\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        switch(6) {\n            case 6:\n                \n                \n                data = System.getenv(\"ADD\");\n                break;\n            default:\n                \n                data = null;\n                break;\n        }\n        switch(7) {\n            case 7:\n                Connection dbConnection = null;\n                PreparedStatement sqlStatement = null;\n                try {\n                    \n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                    sqlStatement.setString(1, data);\n                    Boolean result = sqlStatement.execute();\n                    if (result) {\n                        IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                    } else {\n                        IO.writeLine(\"iCUpMRN\" + data);\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n                break;\n            default:\n                \n                IO.writeLine(\"fWyUuQv\");\n                break;\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249933,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class dWEjYKR {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    public void KgJSeXB(String data) throws Throwable {\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n            sqlStatement.setString(1, data);\n            Boolean result = sqlStatement.execute();\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n\npublic class BTqtopN extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        (new dWEjYKR()).fDqjRYE(data);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        (new dWEjYKR()).KgJSeXB(data);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249951,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class bbCXuuL extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        (new lZzedWw()).RYNMBky(data);\n    }\n}\n\npublic class oKOuKrQ {\n\n    public void RYNMBky(String data) throws Throwable {\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n\npublic class lZzedWw {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new oKOuKrQ()).RYNMBky(data);\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249952,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class okwuRMN extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        (new NsExvdh()).RYNMBky(data);\n    }\n}\n\npublic class dIyRDob {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new XszsYKM()).RYNMBky(data);\n    }\n}\n\npublic class NsExvdh {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new dIyRDob()).RYNMBky(data);\n    }\n}\n\npublic class TSpxLTg {\n\n    public void RYNMBky(String data) throws Throwable {\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n\npublic class XszsYKM {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new TSpxLTg()).RYNMBky(data);\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249956,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class PFqoeSX extends AbstractTestCase {\n\n    \n    private boolean privateTrue = true;\n\n    private boolean privateFalse = false;\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (privateTrue) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (privateTrue) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249984,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class UMJcSVy extends AbstractTestCase {\n\n    \n    private boolean privateReturnsTrue() {\n        return true;\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (privateReturnsTrue()) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (privateReturnsTrue()) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249990,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class UMJcSVy extends AbstractTestCase {\n\n    \n    private boolean privateReturnsTrue() {\n        return true;\n    }\n\n    private boolean privateReturnsFalse() {\n        return false;\n    }\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (privateReturnsFalse()) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (privateReturnsTrue()) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (privateReturnsTrue()) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (privateReturnsTrue()) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (privateReturnsTrue()) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (privateReturnsFalse()) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (privateReturnsTrue()) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (privateReturnsTrue()) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1249991,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class ZMMJhhm extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticFive == 5) {\n            \n            \n            data = System.getenv(\"ADD\");\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticFive == 5) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250002,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class KEEsWDu extends AbstractTestCase {\n\n    private String ImBBndW() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        return data;\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data = ImBBndW();\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            Boolean result = sqlStatement.execute();\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250018,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class HBiYMIX extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        (new JIJYFif()).RYNMBky(data);\n    }\n}\n\npublic class JIJYFif {\n\n    public void RYNMBky(String data) throws Throwable {\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            Boolean result = sqlStatement.execute();\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250022,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class ViXxVxj {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        (new WUwNlSX()).fDqjRYE(data);\n    }\n\n    \n    public void KgJSeXB(String data) throws Throwable {\n        (new WUwNlSX()).KgJSeXB(data);\n    }\n}\n\npublic class WUwNlSX {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            Boolean result = sqlStatement.execute();\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    public void KgJSeXB(String data) throws Throwable {\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n            sqlStatement.setString(1, data);\n            Boolean result = sqlStatement.execute();\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n\npublic class lUPaOYI extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        (new ViXxVxj()).fDqjRYE(data);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        (new ViXxVxj()).KgJSeXB(data);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250025,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class IDksPos extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        \n        \n        data = System.getenv(\"ADD\");\n        (new djQpUka()).RYNMBky(data);\n    }\n}\n\npublic class djQpUka {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new zyPwrHD()).RYNMBky(data);\n    }\n}\n\npublic class zyPwrHD {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new IcMyapx()).RYNMBky(data);\n    }\n}\n\npublic class IcMyapx {\n\n    public void RYNMBky(String data) throws Throwable {\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            Boolean result = sqlStatement.execute();\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250026,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class pQSSTDa extends AbstractTestCase {\n\n    \n    private static final int PRIVATE_STATIC_FINAL_FIVE = 5;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE != 5) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                PreparedStatement sqlStatement = null;\n                try {\n                    \n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.prepareStatement(\"update users set hitcount=hitcount+1 where name=?\");\n                    for (int i = 0; i < names.length; i++) {\n                        sqlStatement.setString(1, names[i]);\n                        sqlStatement.addBatch();\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                PreparedStatement sqlStatement = null;\n                try {\n                    \n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.prepareStatement(\"update users set hitcount=hitcount+1 where name=?\");\n                    for (int i = 0; i < names.length; i++) {\n                        sqlStatement.setString(1, names[i]);\n                        sqlStatement.addBatch();\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250059,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class FhiQlFG extends AbstractTestCase {\n\n    \n    private int privateFive = 5;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (privateFive != 5) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (privateFive == 5) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (privateFive == 5) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (privateFive == 5) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (privateFive == 5) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (privateFive != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                PreparedStatement sqlStatement = null;\n                try {\n                    \n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.prepareStatement(\"update users set hitcount=hitcount+1 where name=?\");\n                    for (int i = 0; i < names.length; i++) {\n                        sqlStatement.setString(1, names[i]);\n                        sqlStatement.addBatch();\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (privateFive == 5) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (privateFive == 5) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                PreparedStatement sqlStatement = null;\n                try {\n                    \n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.prepareStatement(\"update users set hitcount=hitcount+1 where name=?\");\n                    for (int i = 0; i < names.length; i++) {\n                        sqlStatement.setString(1, names[i]);\n                        sqlStatement.addBatch();\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250061,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class vODUWzD extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_TRUE) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            if (data != null) {\n                String[] names = data.split(\"-\");\n                int successCount = 0;\n                Connection dbConnection = null;\n                Statement sqlStatement = null;\n                try {\n                    dbConnection = IO.getDBConnection();\n                    sqlStatement = dbConnection.createStatement();\n                    for (int i = 0; i < names.length; i++) {\n                        \n                        sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                    }\n                    int[] resultsArray = sqlStatement.executeBatch();\n                    for (int i = 0; i < names.length; i++) {\n                        if (resultsArray[i] > 0) {\n                            successCount++;\n                        }\n                    }\n                    IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n                } finally {\n                    try {\n                        if (sqlStatement != null) {\n                            sqlStatement.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                    }\n                    try {\n                        if (dbConnection != null) {\n                            dbConnection.close();\n                        }\n                    } catch (SQLException exceptSql) {\n                        IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                    }\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250064,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class lhUrGED extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    private void fDqjRYE(String data) throws Throwable {\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                for (int i = 0; i < names.length; i++) {\n                    \n                    sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        fDqjRYE(data);\n    }\n\n    private void KgJSeXB(String data) throws Throwable {\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"update users set hitcount=hitcount+1 where name=?\");\n                for (int i = 0; i < names.length; i++) {\n                    sqlStatement.setString(1, names[i]);\n                    sqlStatement.addBatch();\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        KgJSeXB(data);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250089,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class RWRRlYc extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        (new LjsnVpr()).RYNMBky(data);\n    }\n}\n\npublic class LjsnVpr {\n\n    public void RYNMBky(String data) throws Throwable {\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                for (int i = 0; i < names.length; i++) {\n                    \n                    sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250094,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class LjsnVpr {\n\n    \n    public void fDqjRYE(String data) throws Throwable {\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                for (int i = 0; i < names.length; i++) {\n                    \n                    sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    public void KgJSeXB(String data) throws Throwable {\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"update users set hitcount=hitcount+1 where name=?\");\n                for (int i = 0; i < names.length; i++) {\n                    sqlStatement.setString(1, names[i]);\n                    sqlStatement.addBatch();\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n\npublic class RWRRlYc extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        (new LjsnVpr()).fDqjRYE(data);\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        (new LjsnVpr()).KgJSeXB(data);\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250095,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class haEFvdI extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        (new lwDxYfX()).RYNMBky(data);\n    }\n}\n\npublic class lwDxYfX {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new mlpJtCM()).RYNMBky(data);\n    }\n}\n\npublic class rQXbkdX {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new PjPvSPl()).RYNMBky(data);\n    }\n}\n\npublic class PjPvSPl {\n\n    public void RYNMBky(String data) throws Throwable {\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                for (int i = 0; i < names.length; i++) {\n                    \n                    sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n\npublic class mlpJtCM {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new rQXbkdX()).RYNMBky(data);\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250100,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class aoqRlub extends AbstractTestCase {\n\n    public static String data;\n\n    public void boNMSnT() throws Throwable {\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        (new XvyBSZc()).RYNMBky();\n    }\n}\n\npublic class XvyBSZc {\n\n    public void RYNMBky() throws Throwable {\n        String data = aoqRlub.data;\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                for (int i = 0; i < names.length; i++) {\n                    \n                    sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250108,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.LinkedList;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class qzKAlmd extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        LinkedList<String> dataLinkedList = new LinkedList<String>();\n        dataLinkedList.add(0, data);\n        dataLinkedList.add(1, data);\n        dataLinkedList.add(2, data);\n        (new lysSWXH()).RYNMBky(dataLinkedList);\n    }\n}\n\npublic class lysSWXH {\n\n    public void RYNMBky(LinkedList<String> dataLinkedList) throws Throwable {\n        String data = dataLinkedList.remove(2);\n        if (data != null) {\n            String[] names = data.split(\"-\");\n            int successCount = 0;\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                for (int i = 0; i < names.length; i++) {\n                    \n                    sqlStatement.addBatch(\"update users set hitcount=hitcount+1 where name='\" + names[i] + \"'\");\n                }\n                int[] resultsArray = sqlStatement.executeBatch();\n                for (int i = 0; i < names.length; i++) {\n                    if (resultsArray[i] > 0) {\n                        successCount++;\n                    }\n                }\n                IO.writeLine(\"CzohtZG\" + successCount + \"wuLDMAT\" + names.length + \"PkVTtDj\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"RPzuGDd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250114,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class iMTgOQY extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        ResultSet resultSet = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n            IO.writeLine(resultSet.getRow());\n            \n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        ResultSet resultSet = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"select * from users where name=?\");\n            sqlStatement.setString(1, data);\n            resultSet = sqlStatement.executeQuery();\n            IO.writeLine(resultSet.getRow());\n            \n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250121,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class whARNfj extends AbstractTestCase {\n\n    \n    private static final int PRIVATE_STATIC_FINAL_FIVE = 5;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE != 5) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"select * from users where name=?\");\n                sqlStatement.setString(1, data);\n                resultSet = sqlStatement.executeQuery();\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"select * from users where name=?\");\n                sqlStatement.setString(1, data);\n                resultSet = sqlStatement.executeQuery();\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250131,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class sIKcFNL extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrue()) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticReturnsTrue()) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250140,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class sIKcFNL extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (IO.staticReturnsFalse()) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (IO.staticReturnsTrue()) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrue()) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticReturnsTrue()) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrue()) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticReturnsFalse()) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"select * from users where name=?\");\n                sqlStatement.setString(1, data);\n                resultSet = sqlStatement.executeQuery();\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrue()) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticReturnsTrue()) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"select * from users where name=?\");\n                sqlStatement.setString(1, data);\n                resultSet = sqlStatement.executeQuery();\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250141,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class eFjbSPR extends AbstractTestCase {\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrueOrFalse()) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = \"foo\";\n        }\n        if (IO.staticReturnsTrueOrFalse()) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        } else {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrueOrFalse()) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        }\n        if (IO.staticReturnsTrueOrFalse()) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"select * from users where name=?\");\n                sqlStatement.setString(1, data);\n                resultSet = sqlStatement.executeQuery();\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"select * from users where name=?\");\n                sqlStatement.setString(1, data);\n                resultSet = sqlStatement.executeQuery();\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250143,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class jgZesFt extends AbstractTestCase {\n\n    \n    public static boolean qRMEpGJ = false;\n\n    public void boNMSnT() throws Throwable {\n        String data = null;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        qRMEpGJ = true;\n        (new pmlZkNb()).RYNMBky(data);\n    }\n\n    \n    public static boolean ydhDOMq = false;\n\n    public static boolean HHhrjCy = false;\n\n    public static boolean Pywwbtz = false;\n}\n\npublic class pmlZkNb {\n\n    public void RYNMBky(String data) throws Throwable {\n        if (jgZesFt.qRMEpGJ) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            ResultSet resultSet = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n                IO.writeLine(resultSet.getRow());\n                \n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (resultSet != null) {\n                        resultSet.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n                }\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250156,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class sXUNgqp extends AbstractTestCase {\n\n    private void RYNMBky(String data) throws Throwable {\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        ResultSet resultSet = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n            IO.writeLine(resultSet.getRow());\n            \n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        RYNMBky(data);\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250160,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class agNbPlG extends AbstractTestCase {\n\n    private String EuzMspW;\n\n    private String vZNWMPE;\n\n    private String FOqrAxr;\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    private void fDqjRYE() throws Throwable {\n        String data = vZNWMPE;\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        ResultSet resultSet = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n            IO.writeLine(resultSet.getRow());\n            \n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String data;\n        \n        data = \"foo\";\n        vZNWMPE = data;\n        fDqjRYE();\n    }\n\n    private void KgJSeXB() throws Throwable {\n        String data = FOqrAxr;\n        Connection dbConnection = null;\n        PreparedStatement sqlStatement = null;\n        ResultSet resultSet = null;\n        try {\n            \n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.prepareStatement(\"select * from users where name=?\");\n            sqlStatement.setString(1, data);\n            resultSet = sqlStatement.executeQuery();\n            IO.writeLine(resultSet.getRow());\n            \n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        FOqrAxr = data;\n        KgJSeXB();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250165,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class GzNMvPL extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        (new wAJfzFY()).RYNMBky(data);\n    }\n}\n\npublic class wAJfzFY {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new uwjvBOx()).RYNMBky(data);\n    }\n}\n\npublic class uwjvBOx {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new xhrNMyO()).RYNMBky(data);\n    }\n}\n\npublic class xhrNMyO {\n\n    public void RYNMBky(String data) throws Throwable {\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        ResultSet resultSet = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n            IO.writeLine(resultSet.getRow());\n            \n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250170,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class YUbfTqM extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data = (new ltXMNGZ()).ImBBndW();\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        ResultSet resultSet = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            resultSet = sqlStatement.executeQuery(\"select * from users where name='\" + data + \"'\");\n            IO.writeLine(resultSet.getRow());\n            \n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"VvCeZRu\", exceptSql);\n            }\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n\npublic class ltXMNGZ {\n\n    public String ImBBndW() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        return data;\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250174,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class oTohxhG extends AbstractTestCase {\n\n    \n    private static final int PRIVATE_STATIC_FINAL_FIVE = 5;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE != 5) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE != 5) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                int rowCount = sqlStatement.executeUpdate();\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FIVE == 5) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                int rowCount = sqlStatement.executeUpdate();\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250203,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class TcysHoo extends AbstractTestCase {\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_FALSE) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_TRUE) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_TRUE) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (IO.STATIC_FINAL_FALSE) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                int rowCount = sqlStatement.executeUpdate();\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (IO.STATIC_FINAL_TRUE) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (IO.STATIC_FINAL_TRUE) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                int rowCount = sqlStatement.executeUpdate();\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250209,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class hLOZGzq extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrue()) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (IO.staticReturnsTrue()) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250212,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class QFlguIB extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (IO.staticReturnsTrueOrFalse()) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = \"foo\";\n        }\n        if (IO.staticReturnsTrueOrFalse()) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                int rowCount = sqlStatement.executeUpdate();\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250214,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class kmpbIiA extends AbstractTestCase {\n\n    public void JttWLtS() throws Throwable {\n        EXrOlJC();\n        NDSwpcn();\n    }\n\n    \n    private void EXrOlJC() throws Throwable {\n        String dataCopy;\n        {\n            String data;\n            \n            data = \"foo\";\n            dataCopy = data;\n        }\n        {\n            String data = dataCopy;\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void NDSwpcn() throws Throwable {\n        String dataCopy;\n        {\n            String data;\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n            dataCopy = data;\n        }\n        {\n            String data = dataCopy;\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                int rowCount = sqlStatement.executeUpdate();\n                IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250231,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\n\npublic class arzdhAi extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        (new WoRMpda()).RYNMBky(data);\n    }\n}\n\npublic class WoRMpda {\n\n    public void RYNMBky(String data) throws Throwable {\n        (new yFZLkoN()).RYNMBky(data);\n    }\n}\n\npublic class yFZLkoN {\n\n    public void RYNMBky(String data) throws Throwable {\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250240,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.sql.*;\nimport java.util.logging.Level;\n\npublic class WroaCUQ extends AbstractTestCase {\n\n    public static String data;\n\n    public void boNMSnT() throws Throwable {\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        (new fnmPrVe()).RYNMBky();\n    }\n}\n\npublic class fnmPrVe {\n\n    public void RYNMBky() throws Throwable {\n        String data = WroaCUQ.data;\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250252,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport java.util.Vector;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\npublic class LsjpVwD extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        Vector<String> dataVector = new Vector<String>(5);\n        dataVector.add(0, data);\n        dataVector.add(1, data);\n        dataVector.add(2, data);\n        (new RZfSucR()).RYNMBky(dataVector);\n    }\n}\n\npublic class RZfSucR {\n\n    public void RYNMBky(Vector<String> dataVector) throws Throwable {\n        String data = dataVector.remove(2);\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            int rowCount = sqlStatement.executeUpdate(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            IO.writeLine(\"jgAPhyc\" + rowCount + \"EgMrRqb\");\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250256,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class HdwuHur extends AbstractTestCase {\n\n    \n    private static final boolean PRIVATE_STATIC_FINAL_TRUE = true;\n\n    private static final boolean PRIVATE_STATIC_FINAL_FALSE = false;\n\n    \n    private void nrUZtTn() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_FALSE) {\n            \n            data = null;\n        } else {\n            \n            data = \"foo\";\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void iEftrkw() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            \n            data = \"foo\";\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void uytpYbp() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_FALSE) {\n            \n            IO.writeLine(\"fWyUuQv\");\n        } else {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    \n    private void OQsEKDS() throws Throwable {\n        String data;\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (PRIVATE_STATIC_FINAL_TRUE) {\n            Connection dbConnection = null;\n            PreparedStatement sqlStatement = null;\n            try {\n                \n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.prepareStatement(\"insert into users (status) values ('updated') where name=?\");\n                sqlStatement.setString(1, data);\n                Boolean result = sqlStatement.execute();\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"tBLwrWM\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n\n    public void JttWLtS() throws Throwable {\n        nrUZtTn();\n        iEftrkw();\n        uytpYbp();\n        OQsEKDS();\n    }\n}\n",
    "target": 0,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250271,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class iYTmnpG extends AbstractTestCase {\n\n    \n    private int privateFive = 5;\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        if (privateFive == 5) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n        } else {\n            \n            data = null;\n        }\n        if (privateFive == 5) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250276,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class gCxHXIJ extends AbstractTestCase {\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        while (true) {\n            data = \"\";\n            \n            {\n                File file = new File(\"C:\\\\data.txt\");\n                FileInputStream streamFileInput = null;\n                InputStreamReader readerInputStream = null;\n                BufferedReader readerBuffered = null;\n                try {\n                    \n                    streamFileInput = new FileInputStream(file);\n                    readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                    readerBuffered = new BufferedReader(readerInputStream);\n                    \n                    \n                    data = readerBuffered.readLine();\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n                } finally {\n                    \n                    try {\n                        if (readerBuffered != null) {\n                            readerBuffered.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                    }\n                    try {\n                        if (readerInputStream != null) {\n                            readerInputStream.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                    }\n                    try {\n                        if (streamFileInput != null) {\n                            streamFileInput.close();\n                        }\n                    } catch (IOException exceptIO) {\n                        IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                    }\n                }\n            }\n            break;\n        }\n        while (true) {\n            Connection dbConnection = null;\n            Statement sqlStatement = null;\n            try {\n                dbConnection = IO.getDBConnection();\n                sqlStatement = dbConnection.createStatement();\n                \n                Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n                if (result) {\n                    IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n                } else {\n                    IO.writeLine(\"iCUpMRN\" + data);\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n            } finally {\n                try {\n                    if (sqlStatement != null) {\n                        sqlStatement.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n                }\n                try {\n                    if (dbConnection != null) {\n                        dbConnection.close();\n                    }\n                } catch (SQLException exceptSql) {\n                    IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n                }\n            }\n            break;\n        }\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250294,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\nimport testcasesupport.*;\nimport javax.servlet.http.*;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.FileInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.sql.*;\n\npublic class GtIHeXc extends AbstractTestCase {\n\n    private String EuzMspW;\n\n    private String vZNWMPE;\n\n    private String FOqrAxr;\n\n    private void RYNMBky() throws Throwable {\n        String data = EuzMspW;\n        Connection dbConnection = null;\n        Statement sqlStatement = null;\n        try {\n            dbConnection = IO.getDBConnection();\n            sqlStatement = dbConnection.createStatement();\n            \n            Boolean result = sqlStatement.execute(\"insert into users (status) values ('updated') where name='\" + data + \"'\");\n            if (result) {\n                IO.writeLine(\"RUjJsMi\" + data + \"IsTWSgq\");\n            } else {\n                IO.writeLine(\"iCUpMRN\" + data);\n            }\n        } catch (SQLException exceptSql) {\n            IO.logger.log(Level.WARNING, \"WluePKO\", exceptSql);\n        } finally {\n            try {\n                if (sqlStatement != null) {\n                    sqlStatement.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"CCgjcNd\", exceptSql);\n            }\n            try {\n                if (dbConnection != null) {\n                    dbConnection.close();\n                }\n            } catch (SQLException exceptSql) {\n                IO.logger.log(Level.WARNING, \"sPvuLKK\", exceptSql);\n            }\n        }\n    }\n\n    public void boNMSnT() throws Throwable {\n        String data;\n        data = \"\";\n        \n        {\n            File file = new File(\"C:\\\\data.txt\");\n            FileInputStream streamFileInput = null;\n            InputStreamReader readerInputStream = null;\n            BufferedReader readerBuffered = null;\n            try {\n                \n                streamFileInput = new FileInputStream(file);\n                readerInputStream = new InputStreamReader(streamFileInput, \"UTF-8\");\n                readerBuffered = new BufferedReader(readerInputStream);\n                \n                \n                data = readerBuffered.readLine();\n            } catch (IOException exceptIO) {\n                IO.logger.log(Level.WARNING, \"IYYVZaV\", exceptIO);\n            } finally {\n                \n                try {\n                    if (readerBuffered != null) {\n                        readerBuffered.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"WeqfbqF\", exceptIO);\n                }\n                try {\n                    if (readerInputStream != null) {\n                        readerInputStream.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"kEdxQqs\", exceptIO);\n                }\n                try {\n                    if (streamFileInput != null) {\n                        streamFileInput.close();\n                    }\n                } catch (IOException exceptIO) {\n                    IO.logger.log(Level.WARNING, \"NYmPNkP\", exceptIO);\n                }\n            }\n        }\n        EuzMspW = data;\n        RYNMBky();\n    }\n}\n",
    "target": 1,
    "language": "java",
    "dataset": "juliet 1.3",
    "idx": 1250308,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  }
]