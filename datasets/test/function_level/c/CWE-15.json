[
  {
    "CWE_ID": [
      "CWE-15"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#include <winsock2.h>\n#pragma comment(lib, \"ws2_32\")\n\n#define LISTEN_PORT 999\n#define LISTEN_BACKLOG 5\n\n#include <windows.h>\n\n\n\n\nstatic int G2B1Static = 0;\nstatic int G2B2Static = 0;\n\n\nstatic char * G2B1Source(char * data)\n{\n    if(G2B1Static)\n    {\n        \n        printLine(\"Benign, fixed string\");\n    }\n    else\n    {\n        \n        strcpy(data, \"hostname\");\n    }\n    return data;\n}\n\nstatic void f_sezefeht()\n{\n    char * data;\n    char dataBuffer[100] = \"\";\n    data = dataBuffer;\n    G2B1Static = 0; \n    data = G2B1Source(data);\n    \n    if (!SetComputerNameA(data))\n    {\n        printLine(\"Failure setting computer name\");\n        exit(1);\n    }\n}\n\n\nstatic char * G2B2Source(char * data)\n{\n    if(G2B2Static)\n    {\n        \n        strcpy(data, \"hostname\");\n    }\n    return data;\n}\n\nstatic void f_lbdazyir()\n{\n    char * data;\n    char dataBuffer[100] = \"\";\n    data = dataBuffer;\n    G2B2Static = 1; \n    data = G2B2Source(data);\n    \n    if (!SetComputerNameA(data))\n    {\n        printLine(\"Failure setting computer name\");\n        exit(1);\n    }\n}\n\nvoid f_cythmbfu()\n{\n    f_sezefeht();\n    f_lbdazyir();\n}\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_cythmbfu();\n\n    return 0;\n}\n\n",
    "target": 0,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 401340,
    "original_file": "testcases/CWE15_External_Control_of_System_or_Configuration_Setting/CWE15_External_Control_of_System_or_Configuration_Setting__w32_21.c",
    "RELATED_CWE": [
      "CWE-79",
      "CWE-352",
      "CWE-918"
    ]
  },
  {
    "CWE_ID": [
      "CWE-15"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#include <winsock2.h>\n#pragma comment(lib, \"ws2_32\")\n\n#define LISTEN_PORT 999\n#define LISTEN_BACKLOG 5\n\n#include <windows.h>\n\n\n\nstatic int Static = 0;\n\nstatic char * Source(char * data)\n{\n    if(Static)\n    {\n        {\n            WSADATA wsaData;\n            BOOL wsaDataInit = FALSE;\n            SOCKET listenSocket = INVALID_SOCKET;\n            SOCKET acceptSocket = INVALID_SOCKET;\n            struct sockaddr_in service;\n            int recvResult;\n            do\n            {\n                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n                {\n                    break;\n                }\n                wsaDataInit = 1;\n                listenSocket = socket(PF_INET, SOCK_STREAM, 0);\n                if (listenSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                memset(&service, 0, sizeof(service));\n                service.sin_family = AF_INET;\n                service.sin_addr.s_addr = INADDR_ANY;\n                service.sin_port = htons(LISTEN_PORT);\n                if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))\n                {\n                    break;\n                }\n                if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))\n                {\n                    break;\n                }\n                acceptSocket = accept(listenSocket, NULL, NULL);\n                if (acceptSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                \n                \n                recvResult = recv(acceptSocket, data, 100 - 1, 0);\n                if (recvResult == SOCKET_ERROR || recvResult == 0)\n                {\n                    break;\n                }\n                data[recvResult] = '\\0';\n            }\n            while (0);\n            if (acceptSocket != INVALID_SOCKET)\n            {\n                closesocket(acceptSocket);\n            }\n            if (listenSocket != INVALID_SOCKET)\n            {\n                closesocket(listenSocket);\n            }\n            if (wsaDataInit)\n            {\n                WSACleanup();\n            }\n        }\n    }\n    return data;\n}\n\nvoid f_kpdtkzgp()\n{\n    char * data;\n    char dataBuffer[100] = \"\";\n    data = dataBuffer;\n    Static = 1; \n    data = Source(data);\n    \n    if (!SetComputerNameA(data))\n    {\n        printLine(\"Failure setting computer name\");\n        exit(1);\n    }\n}\n\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_kpdtkzgp();\n\n    return 0;\n}\n\n",
    "target": 1,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 401341,
    "original_file": "testcases/CWE15_External_Control_of_System_or_Configuration_Setting/CWE15_External_Control_of_System_or_Configuration_Setting__w32_21.c",
    "RELATED_CWE": [
      "CWE-79",
      "CWE-352",
      "CWE-918"
    ]
  },
  {
    "CWE_ID": [
      "CWE-15"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#include <winsock2.h>\n#pragma comment(lib, \"ws2_32\")\n\n#define LISTEN_PORT 999\n#define LISTEN_BACKLOG 5\n\n#include <windows.h>\n\n\nstatic int staticReturnsTrue()\n{\n    return 1;\n}\n\nstatic int staticReturnsFalse()\n{\n    return 0;\n}\n\n\n\n\nstatic void f_hfyxsbll()\n{\n    char * data;\n    char dataBuffer[100] = \"\";\n    data = dataBuffer;\n    if(staticReturnsFalse())\n    {\n        \n        printLine(\"Benign, fixed string\");\n    }\n    else\n    {\n        \n        strcpy(data, \"hostname\");\n    }\n    \n    if (!SetComputerNameA(data))\n    {\n        printLine(\"Failure setting computer name\");\n        exit(1);\n    }\n}\n\n\nstatic void f_solaerxi()\n{\n    char * data;\n    char dataBuffer[100] = \"\";\n    data = dataBuffer;\n    if(staticReturnsTrue())\n    {\n        \n        strcpy(data, \"hostname\");\n    }\n    \n    if (!SetComputerNameA(data))\n    {\n        printLine(\"Failure setting computer name\");\n        exit(1);\n    }\n}\n\nvoid f_nlydhbdg()\n{\n    f_hfyxsbll();\n    f_solaerxi();\n}\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_nlydhbdg();\n\n    return 0;\n}\n\n",
    "target": 0,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 401342,
    "original_file": "testcases/CWE15_External_Control_of_System_or_Configuration_Setting/CWE15_External_Control_of_System_or_Configuration_Setting__w32_08.c",
    "RELATED_CWE": [
      "CWE-79",
      "CWE-352",
      "CWE-918"
    ]
  },
  {
    "CWE_ID": [
      "CWE-15"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#include <winsock2.h>\n#pragma comment(lib, \"ws2_32\")\n\n#define LISTEN_PORT 999\n#define LISTEN_BACKLOG 5\n\n#include <windows.h>\n\n\nstatic int staticReturnsTrue()\n{\n    return 1;\n}\n\nstatic int staticReturnsFalse()\n{\n    return 0;\n}\n\n\nvoid f_btwizakf()\n{\n    char * data;\n    char dataBuffer[100] = \"\";\n    data = dataBuffer;\n    if(staticReturnsTrue())\n    {\n        {\n            WSADATA wsaData;\n            BOOL wsaDataInit = FALSE;\n            SOCKET listenSocket = INVALID_SOCKET;\n            SOCKET acceptSocket = INVALID_SOCKET;\n            struct sockaddr_in service;\n            int recvResult;\n            do\n            {\n                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n                {\n                    break;\n                }\n                wsaDataInit = 1;\n                listenSocket = socket(PF_INET, SOCK_STREAM, 0);\n                if (listenSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                memset(&service, 0, sizeof(service));\n                service.sin_family = AF_INET;\n                service.sin_addr.s_addr = INADDR_ANY;\n                service.sin_port = htons(LISTEN_PORT);\n                if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))\n                {\n                    break;\n                }\n                if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))\n                {\n                    break;\n                }\n                acceptSocket = accept(listenSocket, NULL, NULL);\n                if (acceptSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                \n                \n                recvResult = recv(acceptSocket, data, 100 - 1, 0);\n                if (recvResult == SOCKET_ERROR || recvResult == 0)\n                {\n                    break;\n                }\n                data[recvResult] = '\\0';\n            }\n            while (0);\n            if (acceptSocket != INVALID_SOCKET)\n            {\n                closesocket(acceptSocket);\n            }\n            if (listenSocket != INVALID_SOCKET)\n            {\n                closesocket(listenSocket);\n            }\n            if (wsaDataInit)\n            {\n                WSACleanup();\n            }\n        }\n    }\n    \n    if (!SetComputerNameA(data))\n    {\n        printLine(\"Failure setting computer name\");\n        exit(1);\n    }\n}\n\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_btwizakf();\n\n    return 0;\n}\n\n",
    "target": 1,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 401343,
    "original_file": "testcases/CWE15_External_Control_of_System_or_Configuration_Setting/CWE15_External_Control_of_System_or_Configuration_Setting__w32_08.c",
    "RELATED_CWE": [
      "CWE-79",
      "CWE-352",
      "CWE-918"
    ]
  },
  {
    "CWE_ID": [
      "CWE-15"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#include <winsock2.h>\n#pragma comment(lib, \"ws2_32\")\n\n#define LISTEN_PORT 999\n#define LISTEN_BACKLOG 5\n\n#include <windows.h>\n\n\n\n\nstatic void f_hkheppgm()\n{\n    char * data;\n    char dataBuffer[100] = \"\";\n    data = dataBuffer;\n    switch(5)\n    {\n    case 6:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    default:\n        \n        strcpy(data, \"hostname\");\n        break;\n    }\n    \n    if (!SetComputerNameA(data))\n    {\n        printLine(\"Failure setting computer name\");\n        exit(1);\n    }\n}\n\n\nstatic void f_peoiuqyo()\n{\n    char * data;\n    char dataBuffer[100] = \"\";\n    data = dataBuffer;\n    switch(6)\n    {\n    case 6:\n        \n        strcpy(data, \"hostname\");\n        break;\n    default:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    }\n    \n    if (!SetComputerNameA(data))\n    {\n        printLine(\"Failure setting computer name\");\n        exit(1);\n    }\n}\n\nvoid f_pssnmtdz()\n{\n    f_hkheppgm();\n    f_peoiuqyo();\n}\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_pssnmtdz();\n\n    return 0;\n}\n\n",
    "target": 0,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 401344,
    "original_file": "testcases/CWE15_External_Control_of_System_or_Configuration_Setting/CWE15_External_Control_of_System_or_Configuration_Setting__w32_15.c",
    "RELATED_CWE": [
      "CWE-79",
      "CWE-352",
      "CWE-918"
    ]
  },
  {
    "CWE_ID": [
      "CWE-15"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#include <winsock2.h>\n#pragma comment(lib, \"ws2_32\")\n\n#define LISTEN_PORT 999\n#define LISTEN_BACKLOG 5\n\n#include <windows.h>\n\n\nvoid f_cakohofy()\n{\n    char * data;\n    char dataBuffer[100] = \"\";\n    data = dataBuffer;\n    switch(6)\n    {\n    case 6:\n    {\n        WSADATA wsaData;\n        BOOL wsaDataInit = FALSE;\n        SOCKET listenSocket = INVALID_SOCKET;\n        SOCKET acceptSocket = INVALID_SOCKET;\n        struct sockaddr_in service;\n        int recvResult;\n        do\n        {\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n            listenSocket = socket(PF_INET, SOCK_STREAM, 0);\n            if (listenSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = INADDR_ANY;\n            service.sin_port = htons(LISTEN_PORT);\n            if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))\n            {\n                break;\n            }\n            if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))\n            {\n                break;\n            }\n            acceptSocket = accept(listenSocket, NULL, NULL);\n            if (acceptSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            \n            \n            recvResult = recv(acceptSocket, data, 100 - 1, 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            data[recvResult] = '\\0';\n        }\n        while (0);\n        if (acceptSocket != INVALID_SOCKET)\n        {\n            closesocket(acceptSocket);\n        }\n        if (listenSocket != INVALID_SOCKET)\n        {\n            closesocket(listenSocket);\n        }\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n    }\n    break;\n    default:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    }\n    \n    if (!SetComputerNameA(data))\n    {\n        printLine(\"Failure setting computer name\");\n        exit(1);\n    }\n}\n\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_cakohofy();\n\n    return 0;\n}\n\n",
    "target": 1,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 401345,
    "original_file": "testcases/CWE15_External_Control_of_System_or_Configuration_Setting/CWE15_External_Control_of_System_or_Configuration_Setting__w32_15.c",
    "RELATED_CWE": [
      "CWE-79",
      "CWE-352",
      "CWE-918"
    ]
  },
  {
    "CWE_ID": [
      "CWE-15"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#include <winsock2.h>\n#pragma comment(lib, \"ws2_32\")\n\n#define LISTEN_PORT 999\n#define LISTEN_BACKLOG 5\n\n#include <windows.h>\n\n\nstatic int staticTrue = 1; \nstatic int staticFalse = 0; \n\n\n\n\nstatic void f_sfaizbbt()\n{\n    char * data;\n    char dataBuffer[100] = \"\";\n    data = dataBuffer;\n    if(staticFalse)\n    {\n        \n        printLine(\"Benign, fixed string\");\n    }\n    else\n    {\n        \n        strcpy(data, \"hostname\");\n    }\n    \n    if (!SetComputerNameA(data))\n    {\n        printLine(\"Failure setting computer name\");\n        exit(1);\n    }\n}\n\n\nstatic void f_whvoquey()\n{\n    char * data;\n    char dataBuffer[100] = \"\";\n    data = dataBuffer;\n    if(staticTrue)\n    {\n        \n        strcpy(data, \"hostname\");\n    }\n    \n    if (!SetComputerNameA(data))\n    {\n        printLine(\"Failure setting computer name\");\n        exit(1);\n    }\n}\n\nvoid f_tgefnbqh()\n{\n    f_sfaizbbt();\n    f_whvoquey();\n}\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_tgefnbqh();\n\n    return 0;\n}\n\n",
    "target": 0,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 401346,
    "original_file": "testcases/CWE15_External_Control_of_System_or_Configuration_Setting/CWE15_External_Control_of_System_or_Configuration_Setting__w32_05.c",
    "RELATED_CWE": [
      "CWE-79",
      "CWE-352",
      "CWE-918"
    ]
  },
  {
    "CWE_ID": [
      "CWE-15"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#include <winsock2.h>\n#pragma comment(lib, \"ws2_32\")\n\n#define LISTEN_PORT 999\n#define LISTEN_BACKLOG 5\n\n#include <windows.h>\n\n\nstatic int staticTrue = 1; \nstatic int staticFalse = 0; \n\n\nvoid f_arzmkxzt()\n{\n    char * data;\n    char dataBuffer[100] = \"\";\n    data = dataBuffer;\n    if(staticTrue)\n    {\n        {\n            WSADATA wsaData;\n            BOOL wsaDataInit = FALSE;\n            SOCKET listenSocket = INVALID_SOCKET;\n            SOCKET acceptSocket = INVALID_SOCKET;\n            struct sockaddr_in service;\n            int recvResult;\n            do\n            {\n                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n                {\n                    break;\n                }\n                wsaDataInit = 1;\n                listenSocket = socket(PF_INET, SOCK_STREAM, 0);\n                if (listenSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                memset(&service, 0, sizeof(service));\n                service.sin_family = AF_INET;\n                service.sin_addr.s_addr = INADDR_ANY;\n                service.sin_port = htons(LISTEN_PORT);\n                if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))\n                {\n                    break;\n                }\n                if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))\n                {\n                    break;\n                }\n                acceptSocket = accept(listenSocket, NULL, NULL);\n                if (acceptSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                \n                \n                recvResult = recv(acceptSocket, data, 100 - 1, 0);\n                if (recvResult == SOCKET_ERROR || recvResult == 0)\n                {\n                    break;\n                }\n                data[recvResult] = '\\0';\n            }\n            while (0);\n            if (acceptSocket != INVALID_SOCKET)\n            {\n                closesocket(acceptSocket);\n            }\n            if (listenSocket != INVALID_SOCKET)\n            {\n                closesocket(listenSocket);\n            }\n            if (wsaDataInit)\n            {\n                WSACleanup();\n            }\n        }\n    }\n    \n    if (!SetComputerNameA(data))\n    {\n        printLine(\"Failure setting computer name\");\n        exit(1);\n    }\n}\n\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_arzmkxzt();\n\n    return 0;\n}\n\n",
    "target": 1,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 401347,
    "original_file": "testcases/CWE15_External_Control_of_System_or_Configuration_Setting/CWE15_External_Control_of_System_or_Configuration_Setting__w32_05.c",
    "RELATED_CWE": [
      "CWE-79",
      "CWE-352",
      "CWE-918"
    ]
  },
  {
    "CWE_ID": [
      "CWE-15"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#include <winsock2.h>\n#pragma comment(lib, \"ws2_32\")\n\n#define LISTEN_PORT 999\n#define LISTEN_BACKLOG 5\n\n#include <windows.h>\n\n\nstatic const int STATIC_CONST_TRUE = 1; \nstatic const int STATIC_CONST_FALSE = 0; \n\n\n\n\nstatic void f_cnkewbre()\n{\n    char * data;\n    char dataBuffer[100] = \"\";\n    data = dataBuffer;\n    if(STATIC_CONST_FALSE)\n    {\n        \n        printLine(\"Benign, fixed string\");\n    }\n    else\n    {\n        \n        strcpy(data, \"hostname\");\n    }\n    \n    if (!SetComputerNameA(data))\n    {\n        printLine(\"Failure setting computer name\");\n        exit(1);\n    }\n}\n\n\nstatic void f_xvhkwgxh()\n{\n    char * data;\n    char dataBuffer[100] = \"\";\n    data = dataBuffer;\n    if(STATIC_CONST_TRUE)\n    {\n        \n        strcpy(data, \"hostname\");\n    }\n    \n    if (!SetComputerNameA(data))\n    {\n        printLine(\"Failure setting computer name\");\n        exit(1);\n    }\n}\n\nvoid f_kdiliwgr()\n{\n    f_cnkewbre();\n    f_xvhkwgxh();\n}\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_kdiliwgr();\n\n    return 0;\n}\n\n",
    "target": 0,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 401348,
    "original_file": "testcases/CWE15_External_Control_of_System_or_Configuration_Setting/CWE15_External_Control_of_System_or_Configuration_Setting__w32_04.c",
    "RELATED_CWE": [
      "CWE-79",
      "CWE-352",
      "CWE-918"
    ]
  },
  {
    "CWE_ID": [
      "CWE-15"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#include <winsock2.h>\n#pragma comment(lib, \"ws2_32\")\n\n#define LISTEN_PORT 999\n#define LISTEN_BACKLOG 5\n\n#include <windows.h>\n\n\nstatic const int STATIC_CONST_TRUE = 1; \nstatic const int STATIC_CONST_FALSE = 0; \n\n\nvoid f_avsysvpq()\n{\n    char * data;\n    char dataBuffer[100] = \"\";\n    data = dataBuffer;\n    if(STATIC_CONST_TRUE)\n    {\n        {\n            WSADATA wsaData;\n            BOOL wsaDataInit = FALSE;\n            SOCKET listenSocket = INVALID_SOCKET;\n            SOCKET acceptSocket = INVALID_SOCKET;\n            struct sockaddr_in service;\n            int recvResult;\n            do\n            {\n                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n                {\n                    break;\n                }\n                wsaDataInit = 1;\n                listenSocket = socket(PF_INET, SOCK_STREAM, 0);\n                if (listenSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                memset(&service, 0, sizeof(service));\n                service.sin_family = AF_INET;\n                service.sin_addr.s_addr = INADDR_ANY;\n                service.sin_port = htons(LISTEN_PORT);\n                if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))\n                {\n                    break;\n                }\n                if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))\n                {\n                    break;\n                }\n                acceptSocket = accept(listenSocket, NULL, NULL);\n                if (acceptSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                \n                \n                recvResult = recv(acceptSocket, data, 100 - 1, 0);\n                if (recvResult == SOCKET_ERROR || recvResult == 0)\n                {\n                    break;\n                }\n                data[recvResult] = '\\0';\n            }\n            while (0);\n            if (acceptSocket != INVALID_SOCKET)\n            {\n                closesocket(acceptSocket);\n            }\n            if (listenSocket != INVALID_SOCKET)\n            {\n                closesocket(listenSocket);\n            }\n            if (wsaDataInit)\n            {\n                WSACleanup();\n            }\n        }\n    }\n    \n    if (!SetComputerNameA(data))\n    {\n        printLine(\"Failure setting computer name\");\n        exit(1);\n    }\n}\n\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_avsysvpq();\n\n    return 0;\n}\n\n",
    "target": 1,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 401349,
    "original_file": "testcases/CWE15_External_Control_of_System_or_Configuration_Setting/CWE15_External_Control_of_System_or_Configuration_Setting__w32_04.c",
    "RELATED_CWE": [
      "CWE-79",
      "CWE-352",
      "CWE-918"
    ]
  },
  {
    "CWE_ID": [
      "CWE-15"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#include <winsock2.h>\n#pragma comment(lib, \"ws2_32\")\n\n#define LISTEN_PORT 999\n#define LISTEN_BACKLOG 5\n\n#include <windows.h>\n\n\nstatic int staticFive = 5;\n\n\n\n\nstatic void f_adenouok()\n{\n    char * data;\n    char dataBuffer[100] = \"\";\n    data = dataBuffer;\n    if(staticFive!=5)\n    {\n        \n        printLine(\"Benign, fixed string\");\n    }\n    else\n    {\n        \n        strcpy(data, \"hostname\");\n    }\n    \n    if (!SetComputerNameA(data))\n    {\n        printLine(\"Failure setting computer name\");\n        exit(1);\n    }\n}\n\n\nstatic void f_tlvnqlyf()\n{\n    char * data;\n    char dataBuffer[100] = \"\";\n    data = dataBuffer;\n    if(staticFive==5)\n    {\n        \n        strcpy(data, \"hostname\");\n    }\n    \n    if (!SetComputerNameA(data))\n    {\n        printLine(\"Failure setting computer name\");\n        exit(1);\n    }\n}\n\nvoid f_votmwgky()\n{\n    f_adenouok();\n    f_tlvnqlyf();\n}\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_votmwgky();\n\n    return 0;\n}\n\n",
    "target": 0,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 401350,
    "original_file": "testcases/CWE15_External_Control_of_System_or_Configuration_Setting/CWE15_External_Control_of_System_or_Configuration_Setting__w32_07.c",
    "RELATED_CWE": [
      "CWE-79",
      "CWE-352",
      "CWE-918"
    ]
  },
  {
    "CWE_ID": [
      "CWE-15"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#include <winsock2.h>\n#pragma comment(lib, \"ws2_32\")\n\n#define LISTEN_PORT 999\n#define LISTEN_BACKLOG 5\n\n#include <windows.h>\n\n\nstatic int staticFive = 5;\n\n\nvoid f_zdwmaydb()\n{\n    char * data;\n    char dataBuffer[100] = \"\";\n    data = dataBuffer;\n    if(staticFive==5)\n    {\n        {\n            WSADATA wsaData;\n            BOOL wsaDataInit = FALSE;\n            SOCKET listenSocket = INVALID_SOCKET;\n            SOCKET acceptSocket = INVALID_SOCKET;\n            struct sockaddr_in service;\n            int recvResult;\n            do\n            {\n                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n                {\n                    break;\n                }\n                wsaDataInit = 1;\n                listenSocket = socket(PF_INET, SOCK_STREAM, 0);\n                if (listenSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                memset(&service, 0, sizeof(service));\n                service.sin_family = AF_INET;\n                service.sin_addr.s_addr = INADDR_ANY;\n                service.sin_port = htons(LISTEN_PORT);\n                if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))\n                {\n                    break;\n                }\n                if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))\n                {\n                    break;\n                }\n                acceptSocket = accept(listenSocket, NULL, NULL);\n                if (acceptSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                \n                \n                recvResult = recv(acceptSocket, data, 100 - 1, 0);\n                if (recvResult == SOCKET_ERROR || recvResult == 0)\n                {\n                    break;\n                }\n                data[recvResult] = '\\0';\n            }\n            while (0);\n            if (acceptSocket != INVALID_SOCKET)\n            {\n                closesocket(acceptSocket);\n            }\n            if (listenSocket != INVALID_SOCKET)\n            {\n                closesocket(listenSocket);\n            }\n            if (wsaDataInit)\n            {\n                WSACleanup();\n            }\n        }\n    }\n    \n    if (!SetComputerNameA(data))\n    {\n        printLine(\"Failure setting computer name\");\n        exit(1);\n    }\n}\n\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_zdwmaydb();\n\n    return 0;\n}\n\n",
    "target": 1,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 401351,
    "original_file": "testcases/CWE15_External_Control_of_System_or_Configuration_Setting/CWE15_External_Control_of_System_or_Configuration_Setting__w32_07.c",
    "RELATED_CWE": [
      "CWE-79",
      "CWE-352",
      "CWE-918"
    ]
  },
  {
    "CWE_ID": [
      "CWE-15"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#include <winsock2.h>\n#pragma comment(lib, \"ws2_32\")\n\n#define LISTEN_PORT 999\n#define LISTEN_BACKLOG 5\n\n#include <windows.h>\n\n\nstatic const int STATIC_CONST_FIVE = 5;\n\n\n\n\nstatic void f_dlvxseob()\n{\n    char * data;\n    char dataBuffer[100] = \"\";\n    data = dataBuffer;\n    if(STATIC_CONST_FIVE!=5)\n    {\n        \n        printLine(\"Benign, fixed string\");\n    }\n    else\n    {\n        \n        strcpy(data, \"hostname\");\n    }\n    \n    if (!SetComputerNameA(data))\n    {\n        printLine(\"Failure setting computer name\");\n        exit(1);\n    }\n}\n\n\nstatic void f_qfwqcqyz()\n{\n    char * data;\n    char dataBuffer[100] = \"\";\n    data = dataBuffer;\n    if(STATIC_CONST_FIVE==5)\n    {\n        \n        strcpy(data, \"hostname\");\n    }\n    \n    if (!SetComputerNameA(data))\n    {\n        printLine(\"Failure setting computer name\");\n        exit(1);\n    }\n}\n\nvoid f_ljuotrbl()\n{\n    f_dlvxseob();\n    f_qfwqcqyz();\n}\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_ljuotrbl();\n\n    return 0;\n}\n\n",
    "target": 0,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 401352,
    "original_file": "testcases/CWE15_External_Control_of_System_or_Configuration_Setting/CWE15_External_Control_of_System_or_Configuration_Setting__w32_06.c",
    "RELATED_CWE": [
      "CWE-79",
      "CWE-352",
      "CWE-918"
    ]
  },
  {
    "CWE_ID": [
      "CWE-15"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#include <winsock2.h>\n#pragma comment(lib, \"ws2_32\")\n\n#define LISTEN_PORT 999\n#define LISTEN_BACKLOG 5\n\n#include <windows.h>\n\n\nstatic const int STATIC_CONST_FIVE = 5;\n\n\nvoid f_bummqwxd()\n{\n    char * data;\n    char dataBuffer[100] = \"\";\n    data = dataBuffer;\n    if(STATIC_CONST_FIVE==5)\n    {\n        {\n            WSADATA wsaData;\n            BOOL wsaDataInit = FALSE;\n            SOCKET listenSocket = INVALID_SOCKET;\n            SOCKET acceptSocket = INVALID_SOCKET;\n            struct sockaddr_in service;\n            int recvResult;\n            do\n            {\n                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n                {\n                    break;\n                }\n                wsaDataInit = 1;\n                listenSocket = socket(PF_INET, SOCK_STREAM, 0);\n                if (listenSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                memset(&service, 0, sizeof(service));\n                service.sin_family = AF_INET;\n                service.sin_addr.s_addr = INADDR_ANY;\n                service.sin_port = htons(LISTEN_PORT);\n                if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))\n                {\n                    break;\n                }\n                if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))\n                {\n                    break;\n                }\n                acceptSocket = accept(listenSocket, NULL, NULL);\n                if (acceptSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                \n                \n                recvResult = recv(acceptSocket, data, 100 - 1, 0);\n                if (recvResult == SOCKET_ERROR || recvResult == 0)\n                {\n                    break;\n                }\n                data[recvResult] = '\\0';\n            }\n            while (0);\n            if (acceptSocket != INVALID_SOCKET)\n            {\n                closesocket(acceptSocket);\n            }\n            if (listenSocket != INVALID_SOCKET)\n            {\n                closesocket(listenSocket);\n            }\n            if (wsaDataInit)\n            {\n                WSACleanup();\n            }\n        }\n    }\n    \n    if (!SetComputerNameA(data))\n    {\n        printLine(\"Failure setting computer name\");\n        exit(1);\n    }\n}\n\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_bummqwxd();\n\n    return 0;\n}\n\n",
    "target": 1,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 401353,
    "original_file": "testcases/CWE15_External_Control_of_System_or_Configuration_Setting/CWE15_External_Control_of_System_or_Configuration_Setting__w32_06.c",
    "RELATED_CWE": [
      "CWE-79",
      "CWE-352",
      "CWE-918"
    ]
  },
  {
    "CWE_ID": [
      "CWE-15"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#include <winsock2.h>\n#pragma comment(lib, \"ws2_32\")\n\n#define LISTEN_PORT 999\n#define LISTEN_BACKLOG 5\n\n#include <windows.h>\n\n\n\n\nstatic void f_xklisjdu()\n{\n    char * data;\n    char dataBuffer[100] = \"\";\n    data = dataBuffer;\n    if(globalFive!=5)\n    {\n        \n        printLine(\"Benign, fixed string\");\n    }\n    else\n    {\n        \n        strcpy(data, \"hostname\");\n    }\n    \n    if (!SetComputerNameA(data))\n    {\n        printLine(\"Failure setting computer name\");\n        exit(1);\n    }\n}\n\n\nstatic void f_zbkjezqe()\n{\n    char * data;\n    char dataBuffer[100] = \"\";\n    data = dataBuffer;\n    if(globalFive==5)\n    {\n        \n        strcpy(data, \"hostname\");\n    }\n    \n    if (!SetComputerNameA(data))\n    {\n        printLine(\"Failure setting computer name\");\n        exit(1);\n    }\n}\n\nvoid f_blxzwcjs()\n{\n    f_xklisjdu();\n    f_zbkjezqe();\n}\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_blxzwcjs();\n\n    return 0;\n}\n\n",
    "target": 0,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 401354,
    "original_file": "testcases/CWE15_External_Control_of_System_or_Configuration_Setting/CWE15_External_Control_of_System_or_Configuration_Setting__w32_14.c",
    "RELATED_CWE": [
      "CWE-79",
      "CWE-352",
      "CWE-918"
    ]
  },
  {
    "CWE_ID": [
      "CWE-15"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#include <winsock2.h>\n#pragma comment(lib, \"ws2_32\")\n\n#define LISTEN_PORT 999\n#define LISTEN_BACKLOG 5\n\n#include <windows.h>\n\n\nvoid f_ucwsgmue()\n{\n    char * data;\n    char dataBuffer[100] = \"\";\n    data = dataBuffer;\n    if(globalFive==5)\n    {\n        {\n            WSADATA wsaData;\n            BOOL wsaDataInit = FALSE;\n            SOCKET listenSocket = INVALID_SOCKET;\n            SOCKET acceptSocket = INVALID_SOCKET;\n            struct sockaddr_in service;\n            int recvResult;\n            do\n            {\n                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n                {\n                    break;\n                }\n                wsaDataInit = 1;\n                listenSocket = socket(PF_INET, SOCK_STREAM, 0);\n                if (listenSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                memset(&service, 0, sizeof(service));\n                service.sin_family = AF_INET;\n                service.sin_addr.s_addr = INADDR_ANY;\n                service.sin_port = htons(LISTEN_PORT);\n                if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))\n                {\n                    break;\n                }\n                if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))\n                {\n                    break;\n                }\n                acceptSocket = accept(listenSocket, NULL, NULL);\n                if (acceptSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                \n                \n                recvResult = recv(acceptSocket, data, 100 - 1, 0);\n                if (recvResult == SOCKET_ERROR || recvResult == 0)\n                {\n                    break;\n                }\n                data[recvResult] = '\\0';\n            }\n            while (0);\n            if (acceptSocket != INVALID_SOCKET)\n            {\n                closesocket(acceptSocket);\n            }\n            if (listenSocket != INVALID_SOCKET)\n            {\n                closesocket(listenSocket);\n            }\n            if (wsaDataInit)\n            {\n                WSACleanup();\n            }\n        }\n    }\n    \n    if (!SetComputerNameA(data))\n    {\n        printLine(\"Failure setting computer name\");\n        exit(1);\n    }\n}\n\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_ucwsgmue();\n\n    return 0;\n}\n\n",
    "target": 1,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 401355,
    "original_file": "testcases/CWE15_External_Control_of_System_or_Configuration_Setting/CWE15_External_Control_of_System_or_Configuration_Setting__w32_14.c",
    "RELATED_CWE": [
      "CWE-79",
      "CWE-352",
      "CWE-918"
    ]
  },
  {
    "CWE_ID": [
      "CWE-15"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#include <winsock2.h>\n#pragma comment(lib, \"ws2_32\")\n\n#define LISTEN_PORT 999\n#define LISTEN_BACKLOG 5\n\n#include <windows.h>\n\n\n\n\nstatic void f_ixgzhecv()\n{\n    char * data;\n    char dataBuffer[100] = \"\";\n    data = dataBuffer;\n    if(GLOBAL_CONST_FIVE!=5)\n    {\n        \n        printLine(\"Benign, fixed string\");\n    }\n    else\n    {\n        \n        strcpy(data, \"hostname\");\n    }\n    \n    if (!SetComputerNameA(data))\n    {\n        printLine(\"Failure setting computer name\");\n        exit(1);\n    }\n}\n\n\nstatic void f_apihgxte()\n{\n    char * data;\n    char dataBuffer[100] = \"\";\n    data = dataBuffer;\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        \n        strcpy(data, \"hostname\");\n    }\n    \n    if (!SetComputerNameA(data))\n    {\n        printLine(\"Failure setting computer name\");\n        exit(1);\n    }\n}\n\nvoid f_ehcxskuf()\n{\n    f_ixgzhecv();\n    f_apihgxte();\n}\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_ehcxskuf();\n\n    return 0;\n}\n\n",
    "target": 0,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 401356,
    "original_file": "testcases/CWE15_External_Control_of_System_or_Configuration_Setting/CWE15_External_Control_of_System_or_Configuration_Setting__w32_13.c",
    "RELATED_CWE": [
      "CWE-79",
      "CWE-352",
      "CWE-918"
    ]
  },
  {
    "CWE_ID": [
      "CWE-15"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#include <winsock2.h>\n#pragma comment(lib, \"ws2_32\")\n\n#define LISTEN_PORT 999\n#define LISTEN_BACKLOG 5\n\n#include <windows.h>\n\n\nvoid f_cqhyvdky()\n{\n    char * data;\n    char dataBuffer[100] = \"\";\n    data = dataBuffer;\n    if(GLOBAL_CONST_FIVE==5)\n    {\n        {\n            WSADATA wsaData;\n            BOOL wsaDataInit = FALSE;\n            SOCKET listenSocket = INVALID_SOCKET;\n            SOCKET acceptSocket = INVALID_SOCKET;\n            struct sockaddr_in service;\n            int recvResult;\n            do\n            {\n                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n                {\n                    break;\n                }\n                wsaDataInit = 1;\n                listenSocket = socket(PF_INET, SOCK_STREAM, 0);\n                if (listenSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                memset(&service, 0, sizeof(service));\n                service.sin_family = AF_INET;\n                service.sin_addr.s_addr = INADDR_ANY;\n                service.sin_port = htons(LISTEN_PORT);\n                if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))\n                {\n                    break;\n                }\n                if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))\n                {\n                    break;\n                }\n                acceptSocket = accept(listenSocket, NULL, NULL);\n                if (acceptSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                \n                \n                recvResult = recv(acceptSocket, data, 100 - 1, 0);\n                if (recvResult == SOCKET_ERROR || recvResult == 0)\n                {\n                    break;\n                }\n                data[recvResult] = '\\0';\n            }\n            while (0);\n            if (acceptSocket != INVALID_SOCKET)\n            {\n                closesocket(acceptSocket);\n            }\n            if (listenSocket != INVALID_SOCKET)\n            {\n                closesocket(listenSocket);\n            }\n            if (wsaDataInit)\n            {\n                WSACleanup();\n            }\n        }\n    }\n    \n    if (!SetComputerNameA(data))\n    {\n        printLine(\"Failure setting computer name\");\n        exit(1);\n    }\n}\n\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_cqhyvdky();\n\n    return 0;\n}\n\n",
    "target": 1,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 401357,
    "original_file": "testcases/CWE15_External_Control_of_System_or_Configuration_Setting/CWE15_External_Control_of_System_or_Configuration_Setting__w32_13.c",
    "RELATED_CWE": [
      "CWE-79",
      "CWE-352",
      "CWE-918"
    ]
  },
  {
    "CWE_ID": [
      "CWE-15"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#include <winsock2.h>\n#pragma comment(lib, \"ws2_32\")\n\n#define LISTEN_PORT 999\n#define LISTEN_BACKLOG 5\n\n#include <windows.h>\n\n\n\n\nstatic void f_lmvlikdx()\n{\n    char * data;\n    char dataBuffer[100] = \"\";\n    data = dataBuffer;\n    if(globalFalse)\n    {\n        \n        printLine(\"Benign, fixed string\");\n    }\n    else\n    {\n        \n        strcpy(data, \"hostname\");\n    }\n    \n    if (!SetComputerNameA(data))\n    {\n        printLine(\"Failure setting computer name\");\n        exit(1);\n    }\n}\n\n\nstatic void f_sfufdtjh()\n{\n    char * data;\n    char dataBuffer[100] = \"\";\n    data = dataBuffer;\n    if(globalTrue)\n    {\n        \n        strcpy(data, \"hostname\");\n    }\n    \n    if (!SetComputerNameA(data))\n    {\n        printLine(\"Failure setting computer name\");\n        exit(1);\n    }\n}\n\nvoid f_detjdbod()\n{\n    f_lmvlikdx();\n    f_sfufdtjh();\n}\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_detjdbod();\n\n    return 0;\n}\n\n",
    "target": 0,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 401358,
    "original_file": "testcases/CWE15_External_Control_of_System_or_Configuration_Setting/CWE15_External_Control_of_System_or_Configuration_Setting__w32_10.c",
    "RELATED_CWE": [
      "CWE-79",
      "CWE-352",
      "CWE-918"
    ]
  },
  {
    "CWE_ID": [
      "CWE-15"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#include <winsock2.h>\n#pragma comment(lib, \"ws2_32\")\n\n#define LISTEN_PORT 999\n#define LISTEN_BACKLOG 5\n\n#include <windows.h>\n\n\nvoid f_gsfypolr()\n{\n    char * data;\n    char dataBuffer[100] = \"\";\n    data = dataBuffer;\n    if(globalTrue)\n    {\n        {\n            WSADATA wsaData;\n            BOOL wsaDataInit = FALSE;\n            SOCKET listenSocket = INVALID_SOCKET;\n            SOCKET acceptSocket = INVALID_SOCKET;\n            struct sockaddr_in service;\n            int recvResult;\n            do\n            {\n                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n                {\n                    break;\n                }\n                wsaDataInit = 1;\n                listenSocket = socket(PF_INET, SOCK_STREAM, 0);\n                if (listenSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                memset(&service, 0, sizeof(service));\n                service.sin_family = AF_INET;\n                service.sin_addr.s_addr = INADDR_ANY;\n                service.sin_port = htons(LISTEN_PORT);\n                if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))\n                {\n                    break;\n                }\n                if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))\n                {\n                    break;\n                }\n                acceptSocket = accept(listenSocket, NULL, NULL);\n                if (acceptSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                \n                \n                recvResult = recv(acceptSocket, data, 100 - 1, 0);\n                if (recvResult == SOCKET_ERROR || recvResult == 0)\n                {\n                    break;\n                }\n                data[recvResult] = '\\0';\n            }\n            while (0);\n            if (acceptSocket != INVALID_SOCKET)\n            {\n                closesocket(acceptSocket);\n            }\n            if (listenSocket != INVALID_SOCKET)\n            {\n                closesocket(listenSocket);\n            }\n            if (wsaDataInit)\n            {\n                WSACleanup();\n            }\n        }\n    }\n    \n    if (!SetComputerNameA(data))\n    {\n        printLine(\"Failure setting computer name\");\n        exit(1);\n    }\n}\n\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_gsfypolr();\n\n    return 0;\n}\n\n",
    "target": 1,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 401359,
    "original_file": "testcases/CWE15_External_Control_of_System_or_Configuration_Setting/CWE15_External_Control_of_System_or_Configuration_Setting__w32_10.c",
    "RELATED_CWE": [
      "CWE-79",
      "CWE-352",
      "CWE-918"
    ]
  }
]