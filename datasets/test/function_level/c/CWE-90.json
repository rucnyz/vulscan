[
  {
    "CWE_ID": [
      "CWE-90"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n\n#include <Winldap.h>\n\n#pragma comment(lib, \"wldap32\")\n\n\n\n\nstatic int G2B1Static = 0;\nstatic int G2B2Static = 0;\n\n\nstatic wchar_t * G2B1Source(wchar_t * data)\n{\n    if(G2B1Static)\n    {\n        \n        printLine(\"Benign, fixed string\");\n    }\n    else\n    {\n        \n        wcscat(data, L\"Doe, XXXXX\");\n    }\n    return data;\n}\n\nstatic void f_uqhmermd()\n{\n    wchar_t * data;\n    wchar_t dataBuffer[256] = L\"\";\n    data = dataBuffer;\n    G2B1Static = 0; \n    data = G2B1Source(data);\n    {\n        LDAP* pLdapConnection = NULL;\n        ULONG connectSuccess = 0L;\n        ULONG searchSuccess = 0L;\n        LDAPMessage *pMessage = NULL;\n        wchar_t filter[256];\n        \n        _snwprintf(filter, 256-1, L\"(cn=%s)\", data);\n        pLdapConnection = ldap_initW(L\"localhost\", LDAP_PORT);\n        if (pLdapConnection == NULL)\n        {\n            printLine(\"Initialization failed\");\n            exit(1);\n        }\n        connectSuccess = ldap_connect(pLdapConnection, NULL);\n        if (connectSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Connection failed\");\n            exit(1);\n        }\n        searchSuccess = ldap_search_ext_sW(\n                            pLdapConnection,\n                            L\"base\",\n                            LDAP_SCOPE_SUBTREE,\n                            filter,\n                            NULL,\n                            0,\n                            NULL,\n                            NULL,\n                            LDAP_NO_LIMIT,\n                            LDAP_NO_LIMIT,\n                            &pMessage);\n        if (searchSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Search failed\");\n            if (pMessage != NULL)\n            {\n                ldap_msgfree(pMessage);\n            }\n            exit(1);\n        }\n        \n        \n        if (pMessage != NULL)\n        {\n            ldap_msgfree(pMessage);\n        }\n        \n        ldap_unbind(pLdapConnection);\n    }\n}\n\n\nstatic wchar_t * G2B2Source(wchar_t * data)\n{\n    if(G2B2Static)\n    {\n        \n        wcscat(data, L\"Doe, XXXXX\");\n    }\n    return data;\n}\n\nstatic void f_fdoxsozy()\n{\n    wchar_t * data;\n    wchar_t dataBuffer[256] = L\"\";\n    data = dataBuffer;\n    G2B2Static = 1; \n    data = G2B2Source(data);\n    {\n        LDAP* pLdapConnection = NULL;\n        ULONG connectSuccess = 0L;\n        ULONG searchSuccess = 0L;\n        LDAPMessage *pMessage = NULL;\n        wchar_t filter[256];\n        \n        _snwprintf(filter, 256-1, L\"(cn=%s)\", data);\n        pLdapConnection = ldap_initW(L\"localhost\", LDAP_PORT);\n        if (pLdapConnection == NULL)\n        {\n            printLine(\"Initialization failed\");\n            exit(1);\n        }\n        connectSuccess = ldap_connect(pLdapConnection, NULL);\n        if (connectSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Connection failed\");\n            exit(1);\n        }\n        searchSuccess = ldap_search_ext_sW(\n                            pLdapConnection,\n                            L\"base\",\n                            LDAP_SCOPE_SUBTREE,\n                            filter,\n                            NULL,\n                            0,\n                            NULL,\n                            NULL,\n                            LDAP_NO_LIMIT,\n                            LDAP_NO_LIMIT,\n                            &pMessage);\n        if (searchSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Search failed\");\n            if (pMessage != NULL)\n            {\n                ldap_msgfree(pMessage);\n            }\n            exit(1);\n        }\n        \n        \n        if (pMessage != NULL)\n        {\n            ldap_msgfree(pMessage);\n        }\n        \n        ldap_unbind(pLdapConnection);\n    }\n}\n\nvoid f_pnchgzlm()\n{\n    f_uqhmermd();\n    f_fdoxsozy();\n}\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_pnchgzlm();\n\n    return 0;\n}\n\n",
    "target": 0,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 400956,
    "original_file": "testcases/CWE90_LDAP_Injection/CWE90_LDAP_Injection__w32_wchar_t_listen_socket_21.c",
    "RELATED_CWE": [
      "CWE-89",
      "CWE-77",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-90"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n\n#include <Winldap.h>\n\n#pragma comment(lib, \"wldap32\")\n\n\n\nstatic int Static = 0;\n\nstatic wchar_t * Source(wchar_t * data)\n{\n    if(Static)\n    {\n        {\n#ifdef _WIN32\n            WSADATA wsaData;\n            int wsaDataInit = 0;\n#endif\n            int recvResult;\n            struct sockaddr_in service;\n            wchar_t *replace;\n            SOCKET listenSocket = INVALID_SOCKET;\n            SOCKET acceptSocket = INVALID_SOCKET;\n            size_t dataLen = wcslen(data);\n            do\n            {\n#ifdef _WIN32\n                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n                {\n                    break;\n                }\n                wsaDataInit = 1;\n#endif\n                \n                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n                if (listenSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                memset(&service, 0, sizeof(service));\n                service.sin_family = AF_INET;\n                service.sin_addr.s_addr = INADDR_ANY;\n                service.sin_port = htons(TCP_PORT);\n                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                acceptSocket = accept(listenSocket, NULL, NULL);\n                if (acceptSocket == SOCKET_ERROR)\n                {\n                    break;\n                }\n                \n                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (256 - dataLen - 1), 0);\n                if (recvResult == SOCKET_ERROR || recvResult == 0)\n                {\n                    break;\n                }\n                \n                data[dataLen + recvResult / sizeof(wchar_t)] = L'\\0';\n                \n                replace = wcschr(data, L'\\r');\n                if (replace)\n                {\n                    *replace = L'\\0';\n                }\n                replace = wcschr(data, L'\\n');\n                if (replace)\n                {\n                    *replace = L'\\0';\n                }\n            }\n            while (0);\n            if (listenSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(listenSocket);\n            }\n            if (acceptSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(acceptSocket);\n            }\n#ifdef _WIN32\n            if (wsaDataInit)\n            {\n                WSACleanup();\n            }\n#endif\n        }\n    }\n    return data;\n}\n\nvoid f_ngpbasyl()\n{\n    wchar_t * data;\n    wchar_t dataBuffer[256] = L\"\";\n    data = dataBuffer;\n    Static = 1; \n    data = Source(data);\n    {\n        LDAP* pLdapConnection = NULL;\n        ULONG connectSuccess = 0L;\n        ULONG searchSuccess = 0L;\n        LDAPMessage *pMessage = NULL;\n        wchar_t filter[256];\n        \n        _snwprintf(filter, 256-1, L\"(cn=%s)\", data);\n        pLdapConnection = ldap_initW(L\"localhost\", LDAP_PORT);\n        if (pLdapConnection == NULL)\n        {\n            printLine(\"Initialization failed\");\n            exit(1);\n        }\n        connectSuccess = ldap_connect(pLdapConnection, NULL);\n        if (connectSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Connection failed\");\n            exit(1);\n        }\n        searchSuccess = ldap_search_ext_sW(\n                            pLdapConnection,\n                            L\"base\",\n                            LDAP_SCOPE_SUBTREE,\n                            filter,\n                            NULL,\n                            0,\n                            NULL,\n                            NULL,\n                            LDAP_NO_LIMIT,\n                            LDAP_NO_LIMIT,\n                            &pMessage);\n        if (searchSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Search failed\");\n            if (pMessage != NULL)\n            {\n                ldap_msgfree(pMessage);\n            }\n            exit(1);\n        }\n        \n        \n        if (pMessage != NULL)\n        {\n            ldap_msgfree(pMessage);\n        }\n        \n        ldap_unbind(pLdapConnection);\n    }\n}\n\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_ngpbasyl();\n\n    return 0;\n}\n\n",
    "target": 1,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 400957,
    "original_file": "testcases/CWE90_LDAP_Injection/CWE90_LDAP_Injection__w32_wchar_t_listen_socket_21.c",
    "RELATED_CWE": [
      "CWE-89",
      "CWE-77",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-90"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n\n#include <Winldap.h>\n\n#pragma comment(lib, \"wldap32\")\n\n\n\n\nstatic int G2B1Static = 0;\nstatic int G2B2Static = 0;\n\n\nstatic char * G2B1Source(char * data)\n{\n    if(G2B1Static)\n    {\n        \n        printLine(\"Benign, fixed string\");\n    }\n    else\n    {\n        \n        strcat(data, \"Doe, XXXXX\");\n    }\n    return data;\n}\n\nstatic void f_poypttmv()\n{\n    char * data;\n    char dataBuffer[256] = \"\";\n    data = dataBuffer;\n    G2B1Static = 0; \n    data = G2B1Source(data);\n    {\n        LDAP* pLdapConnection = NULL;\n        ULONG connectSuccess = 0L;\n        ULONG searchSuccess = 0L;\n        LDAPMessage *pMessage = NULL;\n        char filter[256];\n        \n        _snprintf(filter, 256-1, \"(cn=%s)\", data);\n        pLdapConnection = ldap_initA(\"localhost\", LDAP_PORT);\n        if (pLdapConnection == NULL)\n        {\n            printLine(\"Initialization failed\");\n            exit(1);\n        }\n        connectSuccess = ldap_connect(pLdapConnection, NULL);\n        if (connectSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Connection failed\");\n            exit(1);\n        }\n        searchSuccess = ldap_search_ext_sA(\n                            pLdapConnection,\n                            \"base\",\n                            LDAP_SCOPE_SUBTREE,\n                            filter,\n                            NULL,\n                            0,\n                            NULL,\n                            NULL,\n                            LDAP_NO_LIMIT,\n                            LDAP_NO_LIMIT,\n                            &pMessage);\n        if (searchSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Search failed\");\n            if (pMessage != NULL)\n            {\n                ldap_msgfree(pMessage);\n            }\n            exit(1);\n        }\n        \n        \n        if (pMessage != NULL)\n        {\n            ldap_msgfree(pMessage);\n        }\n        \n        ldap_unbind(pLdapConnection);\n    }\n}\n\n\nstatic char * G2B2Source(char * data)\n{\n    if(G2B2Static)\n    {\n        \n        strcat(data, \"Doe, XXXXX\");\n    }\n    return data;\n}\n\nstatic void f_bbgphgan()\n{\n    char * data;\n    char dataBuffer[256] = \"\";\n    data = dataBuffer;\n    G2B2Static = 1; \n    data = G2B2Source(data);\n    {\n        LDAP* pLdapConnection = NULL;\n        ULONG connectSuccess = 0L;\n        ULONG searchSuccess = 0L;\n        LDAPMessage *pMessage = NULL;\n        char filter[256];\n        \n        _snprintf(filter, 256-1, \"(cn=%s)\", data);\n        pLdapConnection = ldap_initA(\"localhost\", LDAP_PORT);\n        if (pLdapConnection == NULL)\n        {\n            printLine(\"Initialization failed\");\n            exit(1);\n        }\n        connectSuccess = ldap_connect(pLdapConnection, NULL);\n        if (connectSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Connection failed\");\n            exit(1);\n        }\n        searchSuccess = ldap_search_ext_sA(\n                            pLdapConnection,\n                            \"base\",\n                            LDAP_SCOPE_SUBTREE,\n                            filter,\n                            NULL,\n                            0,\n                            NULL,\n                            NULL,\n                            LDAP_NO_LIMIT,\n                            LDAP_NO_LIMIT,\n                            &pMessage);\n        if (searchSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Search failed\");\n            if (pMessage != NULL)\n            {\n                ldap_msgfree(pMessage);\n            }\n            exit(1);\n        }\n        \n        \n        if (pMessage != NULL)\n        {\n            ldap_msgfree(pMessage);\n        }\n        \n        ldap_unbind(pLdapConnection);\n    }\n}\n\nvoid f_azzfqctz()\n{\n    f_poypttmv();\n    f_bbgphgan();\n}\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_azzfqctz();\n\n    return 0;\n}\n\n",
    "target": 0,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 400958,
    "original_file": "testcases/CWE90_LDAP_Injection/CWE90_LDAP_Injection__w32_char_listen_socket_21.c",
    "RELATED_CWE": [
      "CWE-89",
      "CWE-77",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-90"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n\n#include <Winldap.h>\n\n#pragma comment(lib, \"wldap32\")\n\n\n\nstatic int Static = 0;\n\nstatic char * Source(char * data)\n{\n    if(Static)\n    {\n        {\n#ifdef _WIN32\n            WSADATA wsaData;\n            int wsaDataInit = 0;\n#endif\n            int recvResult;\n            struct sockaddr_in service;\n            char *replace;\n            SOCKET listenSocket = INVALID_SOCKET;\n            SOCKET acceptSocket = INVALID_SOCKET;\n            size_t dataLen = strlen(data);\n            do\n            {\n#ifdef _WIN32\n                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n                {\n                    break;\n                }\n                wsaDataInit = 1;\n#endif\n                \n                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n                if (listenSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                memset(&service, 0, sizeof(service));\n                service.sin_family = AF_INET;\n                service.sin_addr.s_addr = INADDR_ANY;\n                service.sin_port = htons(TCP_PORT);\n                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                acceptSocket = accept(listenSocket, NULL, NULL);\n                if (acceptSocket == SOCKET_ERROR)\n                {\n                    break;\n                }\n                \n                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (256 - dataLen - 1), 0);\n                if (recvResult == SOCKET_ERROR || recvResult == 0)\n                {\n                    break;\n                }\n                \n                data[dataLen + recvResult / sizeof(char)] = '\\0';\n                \n                replace = strchr(data, '\\r');\n                if (replace)\n                {\n                    *replace = '\\0';\n                }\n                replace = strchr(data, '\\n');\n                if (replace)\n                {\n                    *replace = '\\0';\n                }\n            }\n            while (0);\n            if (listenSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(listenSocket);\n            }\n            if (acceptSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(acceptSocket);\n            }\n#ifdef _WIN32\n            if (wsaDataInit)\n            {\n                WSACleanup();\n            }\n#endif\n        }\n    }\n    return data;\n}\n\nvoid f_hwbhhdui()\n{\n    char * data;\n    char dataBuffer[256] = \"\";\n    data = dataBuffer;\n    Static = 1; \n    data = Source(data);\n    {\n        LDAP* pLdapConnection = NULL;\n        ULONG connectSuccess = 0L;\n        ULONG searchSuccess = 0L;\n        LDAPMessage *pMessage = NULL;\n        char filter[256];\n        \n        _snprintf(filter, 256-1, \"(cn=%s)\", data);\n        pLdapConnection = ldap_initA(\"localhost\", LDAP_PORT);\n        if (pLdapConnection == NULL)\n        {\n            printLine(\"Initialization failed\");\n            exit(1);\n        }\n        connectSuccess = ldap_connect(pLdapConnection, NULL);\n        if (connectSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Connection failed\");\n            exit(1);\n        }\n        searchSuccess = ldap_search_ext_sA(\n                            pLdapConnection,\n                            \"base\",\n                            LDAP_SCOPE_SUBTREE,\n                            filter,\n                            NULL,\n                            0,\n                            NULL,\n                            NULL,\n                            LDAP_NO_LIMIT,\n                            LDAP_NO_LIMIT,\n                            &pMessage);\n        if (searchSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Search failed\");\n            if (pMessage != NULL)\n            {\n                ldap_msgfree(pMessage);\n            }\n            exit(1);\n        }\n        \n        \n        if (pMessage != NULL)\n        {\n            ldap_msgfree(pMessage);\n        }\n        \n        ldap_unbind(pLdapConnection);\n    }\n}\n\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_hwbhhdui();\n\n    return 0;\n}\n\n",
    "target": 1,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 400959,
    "original_file": "testcases/CWE90_LDAP_Injection/CWE90_LDAP_Injection__w32_char_listen_socket_21.c",
    "RELATED_CWE": [
      "CWE-89",
      "CWE-77",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-90"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n\n#include <Winldap.h>\n\n#pragma comment(lib, \"wldap32\")\n\n\n\n\nstatic int G2B1Static = 0;\nstatic int G2B2Static = 0;\n\n\nstatic char * G2B1Source(char * data)\n{\n    if(G2B1Static)\n    {\n        \n        printLine(\"Benign, fixed string\");\n    }\n    else\n    {\n        \n        strcat(data, \"Doe, XXXXX\");\n    }\n    return data;\n}\n\nstatic void f_latoizxy()\n{\n    char * data;\n    char dataBuffer[256] = \"\";\n    data = dataBuffer;\n    G2B1Static = 0; \n    data = G2B1Source(data);\n    {\n        LDAP* pLdapConnection = NULL;\n        ULONG connectSuccess = 0L;\n        ULONG searchSuccess = 0L;\n        LDAPMessage *pMessage = NULL;\n        char filter[256];\n        \n        _snprintf(filter, 256-1, \"(cn=%s)\", data);\n        pLdapConnection = ldap_initA(\"localhost\", LDAP_PORT);\n        if (pLdapConnection == NULL)\n        {\n            printLine(\"Initialization failed\");\n            exit(1);\n        }\n        connectSuccess = ldap_connect(pLdapConnection, NULL);\n        if (connectSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Connection failed\");\n            exit(1);\n        }\n        searchSuccess = ldap_search_ext_sA(\n                            pLdapConnection,\n                            \"base\",\n                            LDAP_SCOPE_SUBTREE,\n                            filter,\n                            NULL,\n                            0,\n                            NULL,\n                            NULL,\n                            LDAP_NO_LIMIT,\n                            LDAP_NO_LIMIT,\n                            &pMessage);\n        if (searchSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Search failed\");\n            if (pMessage != NULL)\n            {\n                ldap_msgfree(pMessage);\n            }\n            exit(1);\n        }\n        \n        \n        if (pMessage != NULL)\n        {\n            ldap_msgfree(pMessage);\n        }\n        \n        ldap_unbind(pLdapConnection);\n    }\n}\n\n\nstatic char * G2B2Source(char * data)\n{\n    if(G2B2Static)\n    {\n        \n        strcat(data, \"Doe, XXXXX\");\n    }\n    return data;\n}\n\nstatic void f_gaqaiira()\n{\n    char * data;\n    char dataBuffer[256] = \"\";\n    data = dataBuffer;\n    G2B2Static = 1; \n    data = G2B2Source(data);\n    {\n        LDAP* pLdapConnection = NULL;\n        ULONG connectSuccess = 0L;\n        ULONG searchSuccess = 0L;\n        LDAPMessage *pMessage = NULL;\n        char filter[256];\n        \n        _snprintf(filter, 256-1, \"(cn=%s)\", data);\n        pLdapConnection = ldap_initA(\"localhost\", LDAP_PORT);\n        if (pLdapConnection == NULL)\n        {\n            printLine(\"Initialization failed\");\n            exit(1);\n        }\n        connectSuccess = ldap_connect(pLdapConnection, NULL);\n        if (connectSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Connection failed\");\n            exit(1);\n        }\n        searchSuccess = ldap_search_ext_sA(\n                            pLdapConnection,\n                            \"base\",\n                            LDAP_SCOPE_SUBTREE,\n                            filter,\n                            NULL,\n                            0,\n                            NULL,\n                            NULL,\n                            LDAP_NO_LIMIT,\n                            LDAP_NO_LIMIT,\n                            &pMessage);\n        if (searchSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Search failed\");\n            if (pMessage != NULL)\n            {\n                ldap_msgfree(pMessage);\n            }\n            exit(1);\n        }\n        \n        \n        if (pMessage != NULL)\n        {\n            ldap_msgfree(pMessage);\n        }\n        \n        ldap_unbind(pLdapConnection);\n    }\n}\n\nvoid f_ejbrauif()\n{\n    f_latoizxy();\n    f_gaqaiira();\n}\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_ejbrauif();\n\n    return 0;\n}\n\n",
    "target": 0,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 400960,
    "original_file": "testcases/CWE90_LDAP_Injection/CWE90_LDAP_Injection__w32_char_connect_socket_21.c",
    "RELATED_CWE": [
      "CWE-89",
      "CWE-77",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-90"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n\n#include <Winldap.h>\n\n#pragma comment(lib, \"wldap32\")\n\n\n\nstatic int Static = 0;\n\nstatic char * Source(char * data)\n{\n    if(Static)\n    {\n        {\n#ifdef _WIN32\n            WSADATA wsaData;\n            int wsaDataInit = 0;\n#endif\n            int recvResult;\n            struct sockaddr_in service;\n            char *replace;\n            SOCKET connectSocket = INVALID_SOCKET;\n            size_t dataLen = strlen(data);\n            do\n            {\n#ifdef _WIN32\n                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n                {\n                    break;\n                }\n                wsaDataInit = 1;\n#endif\n                \n                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n                if (connectSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                memset(&service, 0, sizeof(service));\n                service.sin_family = AF_INET;\n                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n                service.sin_port = htons(TCP_PORT);\n                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                \n                \n                recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (256 - dataLen - 1), 0);\n                if (recvResult == SOCKET_ERROR || recvResult == 0)\n                {\n                    break;\n                }\n                \n                data[dataLen + recvResult / sizeof(char)] = '\\0';\n                \n                replace = strchr(data, '\\r');\n                if (replace)\n                {\n                    *replace = '\\0';\n                }\n                replace = strchr(data, '\\n');\n                if (replace)\n                {\n                    *replace = '\\0';\n                }\n            }\n            while (0);\n            if (connectSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(connectSocket);\n            }\n#ifdef _WIN32\n            if (wsaDataInit)\n            {\n                WSACleanup();\n            }\n#endif\n        }\n    }\n    return data;\n}\n\nvoid f_zxwkxgvd()\n{\n    char * data;\n    char dataBuffer[256] = \"\";\n    data = dataBuffer;\n    Static = 1; \n    data = Source(data);\n    {\n        LDAP* pLdapConnection = NULL;\n        ULONG connectSuccess = 0L;\n        ULONG searchSuccess = 0L;\n        LDAPMessage *pMessage = NULL;\n        char filter[256];\n        \n        _snprintf(filter, 256-1, \"(cn=%s)\", data);\n        pLdapConnection = ldap_initA(\"localhost\", LDAP_PORT);\n        if (pLdapConnection == NULL)\n        {\n            printLine(\"Initialization failed\");\n            exit(1);\n        }\n        connectSuccess = ldap_connect(pLdapConnection, NULL);\n        if (connectSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Connection failed\");\n            exit(1);\n        }\n        searchSuccess = ldap_search_ext_sA(\n                            pLdapConnection,\n                            \"base\",\n                            LDAP_SCOPE_SUBTREE,\n                            filter,\n                            NULL,\n                            0,\n                            NULL,\n                            NULL,\n                            LDAP_NO_LIMIT,\n                            LDAP_NO_LIMIT,\n                            &pMessage);\n        if (searchSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Search failed\");\n            if (pMessage != NULL)\n            {\n                ldap_msgfree(pMessage);\n            }\n            exit(1);\n        }\n        \n        \n        if (pMessage != NULL)\n        {\n            ldap_msgfree(pMessage);\n        }\n        \n        ldap_unbind(pLdapConnection);\n    }\n}\n\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_zxwkxgvd();\n\n    return 0;\n}\n\n",
    "target": 1,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 400961,
    "original_file": "testcases/CWE90_LDAP_Injection/CWE90_LDAP_Injection__w32_char_connect_socket_21.c",
    "RELATED_CWE": [
      "CWE-89",
      "CWE-77",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-90"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n\n#include <Winldap.h>\n\n#pragma comment(lib, \"wldap32\")\n\n\n\n\nstatic int G2B1Static = 0;\nstatic int G2B2Static = 0;\n\n\nstatic wchar_t * G2B1Source(wchar_t * data)\n{\n    if(G2B1Static)\n    {\n        \n        printLine(\"Benign, fixed string\");\n    }\n    else\n    {\n        \n        wcscat(data, L\"Doe, XXXXX\");\n    }\n    return data;\n}\n\nstatic void f_mknftkdu()\n{\n    wchar_t * data;\n    wchar_t dataBuffer[256] = L\"\";\n    data = dataBuffer;\n    G2B1Static = 0; \n    data = G2B1Source(data);\n    {\n        LDAP* pLdapConnection = NULL;\n        ULONG connectSuccess = 0L;\n        ULONG searchSuccess = 0L;\n        LDAPMessage *pMessage = NULL;\n        wchar_t filter[256];\n        \n        _snwprintf(filter, 256-1, L\"(cn=%s)\", data);\n        pLdapConnection = ldap_initW(L\"localhost\", LDAP_PORT);\n        if (pLdapConnection == NULL)\n        {\n            printLine(\"Initialization failed\");\n            exit(1);\n        }\n        connectSuccess = ldap_connect(pLdapConnection, NULL);\n        if (connectSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Connection failed\");\n            exit(1);\n        }\n        searchSuccess = ldap_search_ext_sW(\n                            pLdapConnection,\n                            L\"base\",\n                            LDAP_SCOPE_SUBTREE,\n                            filter,\n                            NULL,\n                            0,\n                            NULL,\n                            NULL,\n                            LDAP_NO_LIMIT,\n                            LDAP_NO_LIMIT,\n                            &pMessage);\n        if (searchSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Search failed\");\n            if (pMessage != NULL)\n            {\n                ldap_msgfree(pMessage);\n            }\n            exit(1);\n        }\n        \n        \n        if (pMessage != NULL)\n        {\n            ldap_msgfree(pMessage);\n        }\n        \n        ldap_unbind(pLdapConnection);\n    }\n}\n\n\nstatic wchar_t * G2B2Source(wchar_t * data)\n{\n    if(G2B2Static)\n    {\n        \n        wcscat(data, L\"Doe, XXXXX\");\n    }\n    return data;\n}\n\nstatic void f_zhxnsqdb()\n{\n    wchar_t * data;\n    wchar_t dataBuffer[256] = L\"\";\n    data = dataBuffer;\n    G2B2Static = 1; \n    data = G2B2Source(data);\n    {\n        LDAP* pLdapConnection = NULL;\n        ULONG connectSuccess = 0L;\n        ULONG searchSuccess = 0L;\n        LDAPMessage *pMessage = NULL;\n        wchar_t filter[256];\n        \n        _snwprintf(filter, 256-1, L\"(cn=%s)\", data);\n        pLdapConnection = ldap_initW(L\"localhost\", LDAP_PORT);\n        if (pLdapConnection == NULL)\n        {\n            printLine(\"Initialization failed\");\n            exit(1);\n        }\n        connectSuccess = ldap_connect(pLdapConnection, NULL);\n        if (connectSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Connection failed\");\n            exit(1);\n        }\n        searchSuccess = ldap_search_ext_sW(\n                            pLdapConnection,\n                            L\"base\",\n                            LDAP_SCOPE_SUBTREE,\n                            filter,\n                            NULL,\n                            0,\n                            NULL,\n                            NULL,\n                            LDAP_NO_LIMIT,\n                            LDAP_NO_LIMIT,\n                            &pMessage);\n        if (searchSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Search failed\");\n            if (pMessage != NULL)\n            {\n                ldap_msgfree(pMessage);\n            }\n            exit(1);\n        }\n        \n        \n        if (pMessage != NULL)\n        {\n            ldap_msgfree(pMessage);\n        }\n        \n        ldap_unbind(pLdapConnection);\n    }\n}\n\nvoid f_ttragftt()\n{\n    f_mknftkdu();\n    f_zhxnsqdb();\n}\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_ttragftt();\n\n    return 0;\n}\n\n",
    "target": 0,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 400962,
    "original_file": "testcases/CWE90_LDAP_Injection/CWE90_LDAP_Injection__w32_wchar_t_connect_socket_21.c",
    "RELATED_CWE": [
      "CWE-89",
      "CWE-77",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-90"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n\n#include <Winldap.h>\n\n#pragma comment(lib, \"wldap32\")\n\n\n\nstatic int Static = 0;\n\nstatic wchar_t * Source(wchar_t * data)\n{\n    if(Static)\n    {\n        {\n#ifdef _WIN32\n            WSADATA wsaData;\n            int wsaDataInit = 0;\n#endif\n            int recvResult;\n            struct sockaddr_in service;\n            wchar_t *replace;\n            SOCKET connectSocket = INVALID_SOCKET;\n            size_t dataLen = wcslen(data);\n            do\n            {\n#ifdef _WIN32\n                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n                {\n                    break;\n                }\n                wsaDataInit = 1;\n#endif\n                \n                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n                if (connectSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                memset(&service, 0, sizeof(service));\n                service.sin_family = AF_INET;\n                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n                service.sin_port = htons(TCP_PORT);\n                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                \n                \n                recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(wchar_t) * (256 - dataLen - 1), 0);\n                if (recvResult == SOCKET_ERROR || recvResult == 0)\n                {\n                    break;\n                }\n                \n                data[dataLen + recvResult / sizeof(wchar_t)] = L'\\0';\n                \n                replace = wcschr(data, L'\\r');\n                if (replace)\n                {\n                    *replace = L'\\0';\n                }\n                replace = wcschr(data, L'\\n');\n                if (replace)\n                {\n                    *replace = L'\\0';\n                }\n            }\n            while (0);\n            if (connectSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(connectSocket);\n            }\n#ifdef _WIN32\n            if (wsaDataInit)\n            {\n                WSACleanup();\n            }\n#endif\n        }\n    }\n    return data;\n}\n\nvoid f_uplpghsz()\n{\n    wchar_t * data;\n    wchar_t dataBuffer[256] = L\"\";\n    data = dataBuffer;\n    Static = 1; \n    data = Source(data);\n    {\n        LDAP* pLdapConnection = NULL;\n        ULONG connectSuccess = 0L;\n        ULONG searchSuccess = 0L;\n        LDAPMessage *pMessage = NULL;\n        wchar_t filter[256];\n        \n        _snwprintf(filter, 256-1, L\"(cn=%s)\", data);\n        pLdapConnection = ldap_initW(L\"localhost\", LDAP_PORT);\n        if (pLdapConnection == NULL)\n        {\n            printLine(\"Initialization failed\");\n            exit(1);\n        }\n        connectSuccess = ldap_connect(pLdapConnection, NULL);\n        if (connectSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Connection failed\");\n            exit(1);\n        }\n        searchSuccess = ldap_search_ext_sW(\n                            pLdapConnection,\n                            L\"base\",\n                            LDAP_SCOPE_SUBTREE,\n                            filter,\n                            NULL,\n                            0,\n                            NULL,\n                            NULL,\n                            LDAP_NO_LIMIT,\n                            LDAP_NO_LIMIT,\n                            &pMessage);\n        if (searchSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Search failed\");\n            if (pMessage != NULL)\n            {\n                ldap_msgfree(pMessage);\n            }\n            exit(1);\n        }\n        \n        \n        if (pMessage != NULL)\n        {\n            ldap_msgfree(pMessage);\n        }\n        \n        ldap_unbind(pLdapConnection);\n    }\n}\n\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_uplpghsz();\n\n    return 0;\n}\n\n",
    "target": 1,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 400963,
    "original_file": "testcases/CWE90_LDAP_Injection/CWE90_LDAP_Injection__w32_wchar_t_connect_socket_21.c",
    "RELATED_CWE": [
      "CWE-89",
      "CWE-77",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-90"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n\n#include <Winldap.h>\n\n#pragma comment(lib, \"wldap32\")\n\n\nstatic int staticReturnsTrue()\n{\n    return 1;\n}\n\nstatic int staticReturnsFalse()\n{\n    return 0;\n}\n\n\n\n\nstatic void f_gvdbhgat()\n{\n    wchar_t * data;\n    wchar_t dataBuffer[256] = L\"\";\n    data = dataBuffer;\n    if(staticReturnsFalse())\n    {\n        \n        printLine(\"Benign, fixed string\");\n    }\n    else\n    {\n        \n        wcscat(data, L\"Doe, XXXXX\");\n    }\n    {\n        LDAP* pLdapConnection = NULL;\n        ULONG connectSuccess = 0L;\n        ULONG searchSuccess = 0L;\n        LDAPMessage *pMessage = NULL;\n        wchar_t filter[256];\n        \n        _snwprintf(filter, 256-1, L\"(cn=%s)\", data);\n        pLdapConnection = ldap_initW(L\"localhost\", LDAP_PORT);\n        if (pLdapConnection == NULL)\n        {\n            printLine(\"Initialization failed\");\n            exit(1);\n        }\n        connectSuccess = ldap_connect(pLdapConnection, NULL);\n        if (connectSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Connection failed\");\n            exit(1);\n        }\n        searchSuccess = ldap_search_ext_sW(\n                            pLdapConnection,\n                            L\"base\",\n                            LDAP_SCOPE_SUBTREE,\n                            filter,\n                            NULL,\n                            0,\n                            NULL,\n                            NULL,\n                            LDAP_NO_LIMIT,\n                            LDAP_NO_LIMIT,\n                            &pMessage);\n        if (searchSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Search failed\");\n            if (pMessage != NULL)\n            {\n                ldap_msgfree(pMessage);\n            }\n            exit(1);\n        }\n        \n        \n        if (pMessage != NULL)\n        {\n            ldap_msgfree(pMessage);\n        }\n        \n        ldap_unbind(pLdapConnection);\n    }\n}\n\n\nstatic void f_uuekhkyc()\n{\n    wchar_t * data;\n    wchar_t dataBuffer[256] = L\"\";\n    data = dataBuffer;\n    if(staticReturnsTrue())\n    {\n        \n        wcscat(data, L\"Doe, XXXXX\");\n    }\n    {\n        LDAP* pLdapConnection = NULL;\n        ULONG connectSuccess = 0L;\n        ULONG searchSuccess = 0L;\n        LDAPMessage *pMessage = NULL;\n        wchar_t filter[256];\n        \n        _snwprintf(filter, 256-1, L\"(cn=%s)\", data);\n        pLdapConnection = ldap_initW(L\"localhost\", LDAP_PORT);\n        if (pLdapConnection == NULL)\n        {\n            printLine(\"Initialization failed\");\n            exit(1);\n        }\n        connectSuccess = ldap_connect(pLdapConnection, NULL);\n        if (connectSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Connection failed\");\n            exit(1);\n        }\n        searchSuccess = ldap_search_ext_sW(\n                            pLdapConnection,\n                            L\"base\",\n                            LDAP_SCOPE_SUBTREE,\n                            filter,\n                            NULL,\n                            0,\n                            NULL,\n                            NULL,\n                            LDAP_NO_LIMIT,\n                            LDAP_NO_LIMIT,\n                            &pMessage);\n        if (searchSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Search failed\");\n            if (pMessage != NULL)\n            {\n                ldap_msgfree(pMessage);\n            }\n            exit(1);\n        }\n        \n        \n        if (pMessage != NULL)\n        {\n            ldap_msgfree(pMessage);\n        }\n        \n        ldap_unbind(pLdapConnection);\n    }\n}\n\nvoid f_nzxlnyhz()\n{\n    f_gvdbhgat();\n    f_uuekhkyc();\n}\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_nzxlnyhz();\n\n    return 0;\n}\n\n",
    "target": 0,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 400964,
    "original_file": "testcases/CWE90_LDAP_Injection/CWE90_LDAP_Injection__w32_wchar_t_listen_socket_08.c",
    "RELATED_CWE": [
      "CWE-89",
      "CWE-77",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-90"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n\n#include <Winldap.h>\n\n#pragma comment(lib, \"wldap32\")\n\n\nstatic int staticReturnsTrue()\n{\n    return 1;\n}\n\nstatic int staticReturnsFalse()\n{\n    return 0;\n}\n\n\nvoid f_ancadvcg()\n{\n    wchar_t * data;\n    wchar_t dataBuffer[256] = L\"\";\n    data = dataBuffer;\n    if(staticReturnsTrue())\n    {\n        {\n#ifdef _WIN32\n            WSADATA wsaData;\n            int wsaDataInit = 0;\n#endif\n            int recvResult;\n            struct sockaddr_in service;\n            wchar_t *replace;\n            SOCKET listenSocket = INVALID_SOCKET;\n            SOCKET acceptSocket = INVALID_SOCKET;\n            size_t dataLen = wcslen(data);\n            do\n            {\n#ifdef _WIN32\n                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n                {\n                    break;\n                }\n                wsaDataInit = 1;\n#endif\n                \n                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n                if (listenSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                memset(&service, 0, sizeof(service));\n                service.sin_family = AF_INET;\n                service.sin_addr.s_addr = INADDR_ANY;\n                service.sin_port = htons(TCP_PORT);\n                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                acceptSocket = accept(listenSocket, NULL, NULL);\n                if (acceptSocket == SOCKET_ERROR)\n                {\n                    break;\n                }\n                \n                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (256 - dataLen - 1), 0);\n                if (recvResult == SOCKET_ERROR || recvResult == 0)\n                {\n                    break;\n                }\n                \n                data[dataLen + recvResult / sizeof(wchar_t)] = L'\\0';\n                \n                replace = wcschr(data, L'\\r');\n                if (replace)\n                {\n                    *replace = L'\\0';\n                }\n                replace = wcschr(data, L'\\n');\n                if (replace)\n                {\n                    *replace = L'\\0';\n                }\n            }\n            while (0);\n            if (listenSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(listenSocket);\n            }\n            if (acceptSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(acceptSocket);\n            }\n#ifdef _WIN32\n            if (wsaDataInit)\n            {\n                WSACleanup();\n            }\n#endif\n        }\n    }\n    {\n        LDAP* pLdapConnection = NULL;\n        ULONG connectSuccess = 0L;\n        ULONG searchSuccess = 0L;\n        LDAPMessage *pMessage = NULL;\n        wchar_t filter[256];\n        \n        _snwprintf(filter, 256-1, L\"(cn=%s)\", data);\n        pLdapConnection = ldap_initW(L\"localhost\", LDAP_PORT);\n        if (pLdapConnection == NULL)\n        {\n            printLine(\"Initialization failed\");\n            exit(1);\n        }\n        connectSuccess = ldap_connect(pLdapConnection, NULL);\n        if (connectSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Connection failed\");\n            exit(1);\n        }\n        searchSuccess = ldap_search_ext_sW(\n                            pLdapConnection,\n                            L\"base\",\n                            LDAP_SCOPE_SUBTREE,\n                            filter,\n                            NULL,\n                            0,\n                            NULL,\n                            NULL,\n                            LDAP_NO_LIMIT,\n                            LDAP_NO_LIMIT,\n                            &pMessage);\n        if (searchSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Search failed\");\n            if (pMessage != NULL)\n            {\n                ldap_msgfree(pMessage);\n            }\n            exit(1);\n        }\n        \n        \n        if (pMessage != NULL)\n        {\n            ldap_msgfree(pMessage);\n        }\n        \n        ldap_unbind(pLdapConnection);\n    }\n}\n\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_ancadvcg();\n\n    return 0;\n}\n\n",
    "target": 1,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 400965,
    "original_file": "testcases/CWE90_LDAP_Injection/CWE90_LDAP_Injection__w32_wchar_t_listen_socket_08.c",
    "RELATED_CWE": [
      "CWE-89",
      "CWE-77",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-90"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n\n#include <Winldap.h>\n\n#pragma comment(lib, \"wldap32\")\n\n\nstatic int staticReturnsTrue()\n{\n    return 1;\n}\n\nstatic int staticReturnsFalse()\n{\n    return 0;\n}\n\n\n\n\nstatic void f_kixazrts()\n{\n    char * data;\n    char dataBuffer[256] = \"\";\n    data = dataBuffer;\n    if(staticReturnsFalse())\n    {\n        \n        printLine(\"Benign, fixed string\");\n    }\n    else\n    {\n        \n        strcat(data, \"Doe, XXXXX\");\n    }\n    {\n        LDAP* pLdapConnection = NULL;\n        ULONG connectSuccess = 0L;\n        ULONG searchSuccess = 0L;\n        LDAPMessage *pMessage = NULL;\n        char filter[256];\n        \n        _snprintf(filter, 256-1, \"(cn=%s)\", data);\n        pLdapConnection = ldap_initA(\"localhost\", LDAP_PORT);\n        if (pLdapConnection == NULL)\n        {\n            printLine(\"Initialization failed\");\n            exit(1);\n        }\n        connectSuccess = ldap_connect(pLdapConnection, NULL);\n        if (connectSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Connection failed\");\n            exit(1);\n        }\n        searchSuccess = ldap_search_ext_sA(\n                            pLdapConnection,\n                            \"base\",\n                            LDAP_SCOPE_SUBTREE,\n                            filter,\n                            NULL,\n                            0,\n                            NULL,\n                            NULL,\n                            LDAP_NO_LIMIT,\n                            LDAP_NO_LIMIT,\n                            &pMessage);\n        if (searchSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Search failed\");\n            if (pMessage != NULL)\n            {\n                ldap_msgfree(pMessage);\n            }\n            exit(1);\n        }\n        \n        \n        if (pMessage != NULL)\n        {\n            ldap_msgfree(pMessage);\n        }\n        \n        ldap_unbind(pLdapConnection);\n    }\n}\n\n\nstatic void f_kydlmyll()\n{\n    char * data;\n    char dataBuffer[256] = \"\";\n    data = dataBuffer;\n    if(staticReturnsTrue())\n    {\n        \n        strcat(data, \"Doe, XXXXX\");\n    }\n    {\n        LDAP* pLdapConnection = NULL;\n        ULONG connectSuccess = 0L;\n        ULONG searchSuccess = 0L;\n        LDAPMessage *pMessage = NULL;\n        char filter[256];\n        \n        _snprintf(filter, 256-1, \"(cn=%s)\", data);\n        pLdapConnection = ldap_initA(\"localhost\", LDAP_PORT);\n        if (pLdapConnection == NULL)\n        {\n            printLine(\"Initialization failed\");\n            exit(1);\n        }\n        connectSuccess = ldap_connect(pLdapConnection, NULL);\n        if (connectSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Connection failed\");\n            exit(1);\n        }\n        searchSuccess = ldap_search_ext_sA(\n                            pLdapConnection,\n                            \"base\",\n                            LDAP_SCOPE_SUBTREE,\n                            filter,\n                            NULL,\n                            0,\n                            NULL,\n                            NULL,\n                            LDAP_NO_LIMIT,\n                            LDAP_NO_LIMIT,\n                            &pMessage);\n        if (searchSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Search failed\");\n            if (pMessage != NULL)\n            {\n                ldap_msgfree(pMessage);\n            }\n            exit(1);\n        }\n        \n        \n        if (pMessage != NULL)\n        {\n            ldap_msgfree(pMessage);\n        }\n        \n        ldap_unbind(pLdapConnection);\n    }\n}\n\nvoid f_qlcjclzw()\n{\n    f_kixazrts();\n    f_kydlmyll();\n}\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_qlcjclzw();\n\n    return 0;\n}\n\n",
    "target": 0,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 400966,
    "original_file": "testcases/CWE90_LDAP_Injection/CWE90_LDAP_Injection__w32_char_listen_socket_08.c",
    "RELATED_CWE": [
      "CWE-89",
      "CWE-77",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-90"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n\n#include <Winldap.h>\n\n#pragma comment(lib, \"wldap32\")\n\n\nstatic int staticReturnsTrue()\n{\n    return 1;\n}\n\nstatic int staticReturnsFalse()\n{\n    return 0;\n}\n\n\nvoid f_ipqxyzps()\n{\n    char * data;\n    char dataBuffer[256] = \"\";\n    data = dataBuffer;\n    if(staticReturnsTrue())\n    {\n        {\n#ifdef _WIN32\n            WSADATA wsaData;\n            int wsaDataInit = 0;\n#endif\n            int recvResult;\n            struct sockaddr_in service;\n            char *replace;\n            SOCKET listenSocket = INVALID_SOCKET;\n            SOCKET acceptSocket = INVALID_SOCKET;\n            size_t dataLen = strlen(data);\n            do\n            {\n#ifdef _WIN32\n                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n                {\n                    break;\n                }\n                wsaDataInit = 1;\n#endif\n                \n                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n                if (listenSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                memset(&service, 0, sizeof(service));\n                service.sin_family = AF_INET;\n                service.sin_addr.s_addr = INADDR_ANY;\n                service.sin_port = htons(TCP_PORT);\n                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                acceptSocket = accept(listenSocket, NULL, NULL);\n                if (acceptSocket == SOCKET_ERROR)\n                {\n                    break;\n                }\n                \n                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (256 - dataLen - 1), 0);\n                if (recvResult == SOCKET_ERROR || recvResult == 0)\n                {\n                    break;\n                }\n                \n                data[dataLen + recvResult / sizeof(char)] = '\\0';\n                \n                replace = strchr(data, '\\r');\n                if (replace)\n                {\n                    *replace = '\\0';\n                }\n                replace = strchr(data, '\\n');\n                if (replace)\n                {\n                    *replace = '\\0';\n                }\n            }\n            while (0);\n            if (listenSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(listenSocket);\n            }\n            if (acceptSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(acceptSocket);\n            }\n#ifdef _WIN32\n            if (wsaDataInit)\n            {\n                WSACleanup();\n            }\n#endif\n        }\n    }\n    {\n        LDAP* pLdapConnection = NULL;\n        ULONG connectSuccess = 0L;\n        ULONG searchSuccess = 0L;\n        LDAPMessage *pMessage = NULL;\n        char filter[256];\n        \n        _snprintf(filter, 256-1, \"(cn=%s)\", data);\n        pLdapConnection = ldap_initA(\"localhost\", LDAP_PORT);\n        if (pLdapConnection == NULL)\n        {\n            printLine(\"Initialization failed\");\n            exit(1);\n        }\n        connectSuccess = ldap_connect(pLdapConnection, NULL);\n        if (connectSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Connection failed\");\n            exit(1);\n        }\n        searchSuccess = ldap_search_ext_sA(\n                            pLdapConnection,\n                            \"base\",\n                            LDAP_SCOPE_SUBTREE,\n                            filter,\n                            NULL,\n                            0,\n                            NULL,\n                            NULL,\n                            LDAP_NO_LIMIT,\n                            LDAP_NO_LIMIT,\n                            &pMessage);\n        if (searchSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Search failed\");\n            if (pMessage != NULL)\n            {\n                ldap_msgfree(pMessage);\n            }\n            exit(1);\n        }\n        \n        \n        if (pMessage != NULL)\n        {\n            ldap_msgfree(pMessage);\n        }\n        \n        ldap_unbind(pLdapConnection);\n    }\n}\n\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_ipqxyzps();\n\n    return 0;\n}\n\n",
    "target": 1,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 400967,
    "original_file": "testcases/CWE90_LDAP_Injection/CWE90_LDAP_Injection__w32_char_listen_socket_08.c",
    "RELATED_CWE": [
      "CWE-89",
      "CWE-77",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-90"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n\n#include <Winldap.h>\n\n#pragma comment(lib, \"wldap32\")\n\n\n\n\nstatic void f_flujsrpm()\n{\n    wchar_t * data;\n    wchar_t dataBuffer[256] = L\"\";\n    data = dataBuffer;\n    switch(5)\n    {\n    case 6:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    default:\n        \n        wcscat(data, L\"Doe, XXXXX\");\n        break;\n    }\n    {\n        LDAP* pLdapConnection = NULL;\n        ULONG connectSuccess = 0L;\n        ULONG searchSuccess = 0L;\n        LDAPMessage *pMessage = NULL;\n        wchar_t filter[256];\n        \n        _snwprintf(filter, 256-1, L\"(cn=%s)\", data);\n        pLdapConnection = ldap_initW(L\"localhost\", LDAP_PORT);\n        if (pLdapConnection == NULL)\n        {\n            printLine(\"Initialization failed\");\n            exit(1);\n        }\n        connectSuccess = ldap_connect(pLdapConnection, NULL);\n        if (connectSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Connection failed\");\n            exit(1);\n        }\n        searchSuccess = ldap_search_ext_sW(\n                            pLdapConnection,\n                            L\"base\",\n                            LDAP_SCOPE_SUBTREE,\n                            filter,\n                            NULL,\n                            0,\n                            NULL,\n                            NULL,\n                            LDAP_NO_LIMIT,\n                            LDAP_NO_LIMIT,\n                            &pMessage);\n        if (searchSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Search failed\");\n            if (pMessage != NULL)\n            {\n                ldap_msgfree(pMessage);\n            }\n            exit(1);\n        }\n        \n        \n        if (pMessage != NULL)\n        {\n            ldap_msgfree(pMessage);\n        }\n        \n        ldap_unbind(pLdapConnection);\n    }\n}\n\n\nstatic void f_byspfifr()\n{\n    wchar_t * data;\n    wchar_t dataBuffer[256] = L\"\";\n    data = dataBuffer;\n    switch(6)\n    {\n    case 6:\n        \n        wcscat(data, L\"Doe, XXXXX\");\n        break;\n    default:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    }\n    {\n        LDAP* pLdapConnection = NULL;\n        ULONG connectSuccess = 0L;\n        ULONG searchSuccess = 0L;\n        LDAPMessage *pMessage = NULL;\n        wchar_t filter[256];\n        \n        _snwprintf(filter, 256-1, L\"(cn=%s)\", data);\n        pLdapConnection = ldap_initW(L\"localhost\", LDAP_PORT);\n        if (pLdapConnection == NULL)\n        {\n            printLine(\"Initialization failed\");\n            exit(1);\n        }\n        connectSuccess = ldap_connect(pLdapConnection, NULL);\n        if (connectSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Connection failed\");\n            exit(1);\n        }\n        searchSuccess = ldap_search_ext_sW(\n                            pLdapConnection,\n                            L\"base\",\n                            LDAP_SCOPE_SUBTREE,\n                            filter,\n                            NULL,\n                            0,\n                            NULL,\n                            NULL,\n                            LDAP_NO_LIMIT,\n                            LDAP_NO_LIMIT,\n                            &pMessage);\n        if (searchSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Search failed\");\n            if (pMessage != NULL)\n            {\n                ldap_msgfree(pMessage);\n            }\n            exit(1);\n        }\n        \n        \n        if (pMessage != NULL)\n        {\n            ldap_msgfree(pMessage);\n        }\n        \n        ldap_unbind(pLdapConnection);\n    }\n}\n\nvoid f_nyrhfsic()\n{\n    f_flujsrpm();\n    f_byspfifr();\n}\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_nyrhfsic();\n\n    return 0;\n}\n\n",
    "target": 0,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 400968,
    "original_file": "testcases/CWE90_LDAP_Injection/CWE90_LDAP_Injection__w32_wchar_t_listen_socket_15.c",
    "RELATED_CWE": [
      "CWE-89",
      "CWE-77",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-90"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n\n#include <Winldap.h>\n\n#pragma comment(lib, \"wldap32\")\n\n\nvoid f_bhzfgpto()\n{\n    wchar_t * data;\n    wchar_t dataBuffer[256] = L\"\";\n    data = dataBuffer;\n    switch(6)\n    {\n    case 6:\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        wchar_t *replace;\n        SOCKET listenSocket = INVALID_SOCKET;\n        SOCKET acceptSocket = INVALID_SOCKET;\n        size_t dataLen = wcslen(data);\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            \n            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (listenSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = INADDR_ANY;\n            service.sin_port = htons(TCP_PORT);\n            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n            {\n                break;\n            }\n            acceptSocket = accept(listenSocket, NULL, NULL);\n            if (acceptSocket == SOCKET_ERROR)\n            {\n                break;\n            }\n            \n            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (256 - dataLen - 1), 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            \n            data[dataLen + recvResult / sizeof(wchar_t)] = L'\\0';\n            \n            replace = wcschr(data, L'\\r');\n            if (replace)\n            {\n                *replace = L'\\0';\n            }\n            replace = wcschr(data, L'\\n');\n            if (replace)\n            {\n                *replace = L'\\0';\n            }\n        }\n        while (0);\n        if (listenSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(listenSocket);\n        }\n        if (acceptSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(acceptSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n    break;\n    default:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    }\n    {\n        LDAP* pLdapConnection = NULL;\n        ULONG connectSuccess = 0L;\n        ULONG searchSuccess = 0L;\n        LDAPMessage *pMessage = NULL;\n        wchar_t filter[256];\n        \n        _snwprintf(filter, 256-1, L\"(cn=%s)\", data);\n        pLdapConnection = ldap_initW(L\"localhost\", LDAP_PORT);\n        if (pLdapConnection == NULL)\n        {\n            printLine(\"Initialization failed\");\n            exit(1);\n        }\n        connectSuccess = ldap_connect(pLdapConnection, NULL);\n        if (connectSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Connection failed\");\n            exit(1);\n        }\n        searchSuccess = ldap_search_ext_sW(\n                            pLdapConnection,\n                            L\"base\",\n                            LDAP_SCOPE_SUBTREE,\n                            filter,\n                            NULL,\n                            0,\n                            NULL,\n                            NULL,\n                            LDAP_NO_LIMIT,\n                            LDAP_NO_LIMIT,\n                            &pMessage);\n        if (searchSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Search failed\");\n            if (pMessage != NULL)\n            {\n                ldap_msgfree(pMessage);\n            }\n            exit(1);\n        }\n        \n        \n        if (pMessage != NULL)\n        {\n            ldap_msgfree(pMessage);\n        }\n        \n        ldap_unbind(pLdapConnection);\n    }\n}\n\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_bhzfgpto();\n\n    return 0;\n}\n\n",
    "target": 1,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 400969,
    "original_file": "testcases/CWE90_LDAP_Injection/CWE90_LDAP_Injection__w32_wchar_t_listen_socket_15.c",
    "RELATED_CWE": [
      "CWE-89",
      "CWE-77",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-90"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n\n#include <Winldap.h>\n\n#pragma comment(lib, \"wldap32\")\n\n\n\n\nstatic void f_zvjfkcsq()\n{\n    char * data;\n    char dataBuffer[256] = \"\";\n    data = dataBuffer;\n    switch(5)\n    {\n    case 6:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    default:\n        \n        strcat(data, \"Doe, XXXXX\");\n        break;\n    }\n    {\n        LDAP* pLdapConnection = NULL;\n        ULONG connectSuccess = 0L;\n        ULONG searchSuccess = 0L;\n        LDAPMessage *pMessage = NULL;\n        char filter[256];\n        \n        _snprintf(filter, 256-1, \"(cn=%s)\", data);\n        pLdapConnection = ldap_initA(\"localhost\", LDAP_PORT);\n        if (pLdapConnection == NULL)\n        {\n            printLine(\"Initialization failed\");\n            exit(1);\n        }\n        connectSuccess = ldap_connect(pLdapConnection, NULL);\n        if (connectSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Connection failed\");\n            exit(1);\n        }\n        searchSuccess = ldap_search_ext_sA(\n                            pLdapConnection,\n                            \"base\",\n                            LDAP_SCOPE_SUBTREE,\n                            filter,\n                            NULL,\n                            0,\n                            NULL,\n                            NULL,\n                            LDAP_NO_LIMIT,\n                            LDAP_NO_LIMIT,\n                            &pMessage);\n        if (searchSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Search failed\");\n            if (pMessage != NULL)\n            {\n                ldap_msgfree(pMessage);\n            }\n            exit(1);\n        }\n        \n        \n        if (pMessage != NULL)\n        {\n            ldap_msgfree(pMessage);\n        }\n        \n        ldap_unbind(pLdapConnection);\n    }\n}\n\n\nstatic void f_shmstmuv()\n{\n    char * data;\n    char dataBuffer[256] = \"\";\n    data = dataBuffer;\n    switch(6)\n    {\n    case 6:\n        \n        strcat(data, \"Doe, XXXXX\");\n        break;\n    default:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    }\n    {\n        LDAP* pLdapConnection = NULL;\n        ULONG connectSuccess = 0L;\n        ULONG searchSuccess = 0L;\n        LDAPMessage *pMessage = NULL;\n        char filter[256];\n        \n        _snprintf(filter, 256-1, \"(cn=%s)\", data);\n        pLdapConnection = ldap_initA(\"localhost\", LDAP_PORT);\n        if (pLdapConnection == NULL)\n        {\n            printLine(\"Initialization failed\");\n            exit(1);\n        }\n        connectSuccess = ldap_connect(pLdapConnection, NULL);\n        if (connectSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Connection failed\");\n            exit(1);\n        }\n        searchSuccess = ldap_search_ext_sA(\n                            pLdapConnection,\n                            \"base\",\n                            LDAP_SCOPE_SUBTREE,\n                            filter,\n                            NULL,\n                            0,\n                            NULL,\n                            NULL,\n                            LDAP_NO_LIMIT,\n                            LDAP_NO_LIMIT,\n                            &pMessage);\n        if (searchSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Search failed\");\n            if (pMessage != NULL)\n            {\n                ldap_msgfree(pMessage);\n            }\n            exit(1);\n        }\n        \n        \n        if (pMessage != NULL)\n        {\n            ldap_msgfree(pMessage);\n        }\n        \n        ldap_unbind(pLdapConnection);\n    }\n}\n\nvoid f_danlqpmn()\n{\n    f_zvjfkcsq();\n    f_shmstmuv();\n}\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_danlqpmn();\n\n    return 0;\n}\n\n",
    "target": 0,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 400970,
    "original_file": "testcases/CWE90_LDAP_Injection/CWE90_LDAP_Injection__w32_char_listen_socket_15.c",
    "RELATED_CWE": [
      "CWE-89",
      "CWE-77",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-90"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n\n#include <Winldap.h>\n\n#pragma comment(lib, \"wldap32\")\n\n\nvoid f_nukbxana()\n{\n    char * data;\n    char dataBuffer[256] = \"\";\n    data = dataBuffer;\n    switch(6)\n    {\n    case 6:\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        char *replace;\n        SOCKET listenSocket = INVALID_SOCKET;\n        SOCKET acceptSocket = INVALID_SOCKET;\n        size_t dataLen = strlen(data);\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            \n            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (listenSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = INADDR_ANY;\n            service.sin_port = htons(TCP_PORT);\n            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n            {\n                break;\n            }\n            acceptSocket = accept(listenSocket, NULL, NULL);\n            if (acceptSocket == SOCKET_ERROR)\n            {\n                break;\n            }\n            \n            recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(char) * (256 - dataLen - 1), 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            \n            data[dataLen + recvResult / sizeof(char)] = '\\0';\n            \n            replace = strchr(data, '\\r');\n            if (replace)\n            {\n                *replace = '\\0';\n            }\n            replace = strchr(data, '\\n');\n            if (replace)\n            {\n                *replace = '\\0';\n            }\n        }\n        while (0);\n        if (listenSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(listenSocket);\n        }\n        if (acceptSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(acceptSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n    break;\n    default:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    }\n    {\n        LDAP* pLdapConnection = NULL;\n        ULONG connectSuccess = 0L;\n        ULONG searchSuccess = 0L;\n        LDAPMessage *pMessage = NULL;\n        char filter[256];\n        \n        _snprintf(filter, 256-1, \"(cn=%s)\", data);\n        pLdapConnection = ldap_initA(\"localhost\", LDAP_PORT);\n        if (pLdapConnection == NULL)\n        {\n            printLine(\"Initialization failed\");\n            exit(1);\n        }\n        connectSuccess = ldap_connect(pLdapConnection, NULL);\n        if (connectSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Connection failed\");\n            exit(1);\n        }\n        searchSuccess = ldap_search_ext_sA(\n                            pLdapConnection,\n                            \"base\",\n                            LDAP_SCOPE_SUBTREE,\n                            filter,\n                            NULL,\n                            0,\n                            NULL,\n                            NULL,\n                            LDAP_NO_LIMIT,\n                            LDAP_NO_LIMIT,\n                            &pMessage);\n        if (searchSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Search failed\");\n            if (pMessage != NULL)\n            {\n                ldap_msgfree(pMessage);\n            }\n            exit(1);\n        }\n        \n        \n        if (pMessage != NULL)\n        {\n            ldap_msgfree(pMessage);\n        }\n        \n        ldap_unbind(pLdapConnection);\n    }\n}\n\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_nukbxana();\n\n    return 0;\n}\n\n",
    "target": 1,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 400971,
    "original_file": "testcases/CWE90_LDAP_Injection/CWE90_LDAP_Injection__w32_char_listen_socket_15.c",
    "RELATED_CWE": [
      "CWE-89",
      "CWE-77",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-90"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n\n#include <Winldap.h>\n\n#pragma comment(lib, \"wldap32\")\n\n\nstatic const int STATIC_CONST_TRUE = 1; \nstatic const int STATIC_CONST_FALSE = 0; \n\n\n\n\nstatic void f_lbmcpgsd()\n{\n    wchar_t * data;\n    wchar_t dataBuffer[256] = L\"\";\n    data = dataBuffer;\n    if(STATIC_CONST_FALSE)\n    {\n        \n        printLine(\"Benign, fixed string\");\n    }\n    else\n    {\n        \n        wcscat(data, L\"Doe, XXXXX\");\n    }\n    {\n        LDAP* pLdapConnection = NULL;\n        ULONG connectSuccess = 0L;\n        ULONG searchSuccess = 0L;\n        LDAPMessage *pMessage = NULL;\n        wchar_t filter[256];\n        \n        _snwprintf(filter, 256-1, L\"(cn=%s)\", data);\n        pLdapConnection = ldap_initW(L\"localhost\", LDAP_PORT);\n        if (pLdapConnection == NULL)\n        {\n            printLine(\"Initialization failed\");\n            exit(1);\n        }\n        connectSuccess = ldap_connect(pLdapConnection, NULL);\n        if (connectSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Connection failed\");\n            exit(1);\n        }\n        searchSuccess = ldap_search_ext_sW(\n                            pLdapConnection,\n                            L\"base\",\n                            LDAP_SCOPE_SUBTREE,\n                            filter,\n                            NULL,\n                            0,\n                            NULL,\n                            NULL,\n                            LDAP_NO_LIMIT,\n                            LDAP_NO_LIMIT,\n                            &pMessage);\n        if (searchSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Search failed\");\n            if (pMessage != NULL)\n            {\n                ldap_msgfree(pMessage);\n            }\n            exit(1);\n        }\n        \n        \n        if (pMessage != NULL)\n        {\n            ldap_msgfree(pMessage);\n        }\n        \n        ldap_unbind(pLdapConnection);\n    }\n}\n\n\nstatic void f_ggtrwvdj()\n{\n    wchar_t * data;\n    wchar_t dataBuffer[256] = L\"\";\n    data = dataBuffer;\n    if(STATIC_CONST_TRUE)\n    {\n        \n        wcscat(data, L\"Doe, XXXXX\");\n    }\n    {\n        LDAP* pLdapConnection = NULL;\n        ULONG connectSuccess = 0L;\n        ULONG searchSuccess = 0L;\n        LDAPMessage *pMessage = NULL;\n        wchar_t filter[256];\n        \n        _snwprintf(filter, 256-1, L\"(cn=%s)\", data);\n        pLdapConnection = ldap_initW(L\"localhost\", LDAP_PORT);\n        if (pLdapConnection == NULL)\n        {\n            printLine(\"Initialization failed\");\n            exit(1);\n        }\n        connectSuccess = ldap_connect(pLdapConnection, NULL);\n        if (connectSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Connection failed\");\n            exit(1);\n        }\n        searchSuccess = ldap_search_ext_sW(\n                            pLdapConnection,\n                            L\"base\",\n                            LDAP_SCOPE_SUBTREE,\n                            filter,\n                            NULL,\n                            0,\n                            NULL,\n                            NULL,\n                            LDAP_NO_LIMIT,\n                            LDAP_NO_LIMIT,\n                            &pMessage);\n        if (searchSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Search failed\");\n            if (pMessage != NULL)\n            {\n                ldap_msgfree(pMessage);\n            }\n            exit(1);\n        }\n        \n        \n        if (pMessage != NULL)\n        {\n            ldap_msgfree(pMessage);\n        }\n        \n        ldap_unbind(pLdapConnection);\n    }\n}\n\nvoid f_jozjirmd()\n{\n    f_lbmcpgsd();\n    f_ggtrwvdj();\n}\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_jozjirmd();\n\n    return 0;\n}\n\n",
    "target": 0,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 400972,
    "original_file": "testcases/CWE90_LDAP_Injection/CWE90_LDAP_Injection__w32_wchar_t_listen_socket_04.c",
    "RELATED_CWE": [
      "CWE-89",
      "CWE-77",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-90"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n\n#include <Winldap.h>\n\n#pragma comment(lib, \"wldap32\")\n\n\nstatic const int STATIC_CONST_TRUE = 1; \nstatic const int STATIC_CONST_FALSE = 0; \n\n\nvoid f_urqyseyu()\n{\n    wchar_t * data;\n    wchar_t dataBuffer[256] = L\"\";\n    data = dataBuffer;\n    if(STATIC_CONST_TRUE)\n    {\n        {\n#ifdef _WIN32\n            WSADATA wsaData;\n            int wsaDataInit = 0;\n#endif\n            int recvResult;\n            struct sockaddr_in service;\n            wchar_t *replace;\n            SOCKET listenSocket = INVALID_SOCKET;\n            SOCKET acceptSocket = INVALID_SOCKET;\n            size_t dataLen = wcslen(data);\n            do\n            {\n#ifdef _WIN32\n                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n                {\n                    break;\n                }\n                wsaDataInit = 1;\n#endif\n                \n                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n                if (listenSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                memset(&service, 0, sizeof(service));\n                service.sin_family = AF_INET;\n                service.sin_addr.s_addr = INADDR_ANY;\n                service.sin_port = htons(TCP_PORT);\n                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                acceptSocket = accept(listenSocket, NULL, NULL);\n                if (acceptSocket == SOCKET_ERROR)\n                {\n                    break;\n                }\n                \n                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (256 - dataLen - 1), 0);\n                if (recvResult == SOCKET_ERROR || recvResult == 0)\n                {\n                    break;\n                }\n                \n                data[dataLen + recvResult / sizeof(wchar_t)] = L'\\0';\n                \n                replace = wcschr(data, L'\\r');\n                if (replace)\n                {\n                    *replace = L'\\0';\n                }\n                replace = wcschr(data, L'\\n');\n                if (replace)\n                {\n                    *replace = L'\\0';\n                }\n            }\n            while (0);\n            if (listenSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(listenSocket);\n            }\n            if (acceptSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(acceptSocket);\n            }\n#ifdef _WIN32\n            if (wsaDataInit)\n            {\n                WSACleanup();\n            }\n#endif\n        }\n    }\n    {\n        LDAP* pLdapConnection = NULL;\n        ULONG connectSuccess = 0L;\n        ULONG searchSuccess = 0L;\n        LDAPMessage *pMessage = NULL;\n        wchar_t filter[256];\n        \n        _snwprintf(filter, 256-1, L\"(cn=%s)\", data);\n        pLdapConnection = ldap_initW(L\"localhost\", LDAP_PORT);\n        if (pLdapConnection == NULL)\n        {\n            printLine(\"Initialization failed\");\n            exit(1);\n        }\n        connectSuccess = ldap_connect(pLdapConnection, NULL);\n        if (connectSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Connection failed\");\n            exit(1);\n        }\n        searchSuccess = ldap_search_ext_sW(\n                            pLdapConnection,\n                            L\"base\",\n                            LDAP_SCOPE_SUBTREE,\n                            filter,\n                            NULL,\n                            0,\n                            NULL,\n                            NULL,\n                            LDAP_NO_LIMIT,\n                            LDAP_NO_LIMIT,\n                            &pMessage);\n        if (searchSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Search failed\");\n            if (pMessage != NULL)\n            {\n                ldap_msgfree(pMessage);\n            }\n            exit(1);\n        }\n        \n        \n        if (pMessage != NULL)\n        {\n            ldap_msgfree(pMessage);\n        }\n        \n        ldap_unbind(pLdapConnection);\n    }\n}\n\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_urqyseyu();\n\n    return 0;\n}\n\n",
    "target": 1,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 400973,
    "original_file": "testcases/CWE90_LDAP_Injection/CWE90_LDAP_Injection__w32_wchar_t_listen_socket_04.c",
    "RELATED_CWE": [
      "CWE-89",
      "CWE-77",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-90"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n\n#include <Winldap.h>\n\n#pragma comment(lib, \"wldap32\")\n\n\nstatic int staticTrue = 1; \nstatic int staticFalse = 0; \n\n\n\n\nstatic void f_xoeeknnw()\n{\n    wchar_t * data;\n    wchar_t dataBuffer[256] = L\"\";\n    data = dataBuffer;\n    if(staticFalse)\n    {\n        \n        printLine(\"Benign, fixed string\");\n    }\n    else\n    {\n        \n        wcscat(data, L\"Doe, XXXXX\");\n    }\n    {\n        LDAP* pLdapConnection = NULL;\n        ULONG connectSuccess = 0L;\n        ULONG searchSuccess = 0L;\n        LDAPMessage *pMessage = NULL;\n        wchar_t filter[256];\n        \n        _snwprintf(filter, 256-1, L\"(cn=%s)\", data);\n        pLdapConnection = ldap_initW(L\"localhost\", LDAP_PORT);\n        if (pLdapConnection == NULL)\n        {\n            printLine(\"Initialization failed\");\n            exit(1);\n        }\n        connectSuccess = ldap_connect(pLdapConnection, NULL);\n        if (connectSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Connection failed\");\n            exit(1);\n        }\n        searchSuccess = ldap_search_ext_sW(\n                            pLdapConnection,\n                            L\"base\",\n                            LDAP_SCOPE_SUBTREE,\n                            filter,\n                            NULL,\n                            0,\n                            NULL,\n                            NULL,\n                            LDAP_NO_LIMIT,\n                            LDAP_NO_LIMIT,\n                            &pMessage);\n        if (searchSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Search failed\");\n            if (pMessage != NULL)\n            {\n                ldap_msgfree(pMessage);\n            }\n            exit(1);\n        }\n        \n        \n        if (pMessage != NULL)\n        {\n            ldap_msgfree(pMessage);\n        }\n        \n        ldap_unbind(pLdapConnection);\n    }\n}\n\n\nstatic void f_kvnurwkd()\n{\n    wchar_t * data;\n    wchar_t dataBuffer[256] = L\"\";\n    data = dataBuffer;\n    if(staticTrue)\n    {\n        \n        wcscat(data, L\"Doe, XXXXX\");\n    }\n    {\n        LDAP* pLdapConnection = NULL;\n        ULONG connectSuccess = 0L;\n        ULONG searchSuccess = 0L;\n        LDAPMessage *pMessage = NULL;\n        wchar_t filter[256];\n        \n        _snwprintf(filter, 256-1, L\"(cn=%s)\", data);\n        pLdapConnection = ldap_initW(L\"localhost\", LDAP_PORT);\n        if (pLdapConnection == NULL)\n        {\n            printLine(\"Initialization failed\");\n            exit(1);\n        }\n        connectSuccess = ldap_connect(pLdapConnection, NULL);\n        if (connectSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Connection failed\");\n            exit(1);\n        }\n        searchSuccess = ldap_search_ext_sW(\n                            pLdapConnection,\n                            L\"base\",\n                            LDAP_SCOPE_SUBTREE,\n                            filter,\n                            NULL,\n                            0,\n                            NULL,\n                            NULL,\n                            LDAP_NO_LIMIT,\n                            LDAP_NO_LIMIT,\n                            &pMessage);\n        if (searchSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Search failed\");\n            if (pMessage != NULL)\n            {\n                ldap_msgfree(pMessage);\n            }\n            exit(1);\n        }\n        \n        \n        if (pMessage != NULL)\n        {\n            ldap_msgfree(pMessage);\n        }\n        \n        ldap_unbind(pLdapConnection);\n    }\n}\n\nvoid f_cnzlsnfw()\n{\n    f_xoeeknnw();\n    f_kvnurwkd();\n}\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_cnzlsnfw();\n\n    return 0;\n}\n\n",
    "target": 0,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 400974,
    "original_file": "testcases/CWE90_LDAP_Injection/CWE90_LDAP_Injection__w32_wchar_t_listen_socket_05.c",
    "RELATED_CWE": [
      "CWE-89",
      "CWE-77",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-90"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n\n#include <Winldap.h>\n\n#pragma comment(lib, \"wldap32\")\n\n\nstatic int staticTrue = 1; \nstatic int staticFalse = 0; \n\n\nvoid f_cflmszdn()\n{\n    wchar_t * data;\n    wchar_t dataBuffer[256] = L\"\";\n    data = dataBuffer;\n    if(staticTrue)\n    {\n        {\n#ifdef _WIN32\n            WSADATA wsaData;\n            int wsaDataInit = 0;\n#endif\n            int recvResult;\n            struct sockaddr_in service;\n            wchar_t *replace;\n            SOCKET listenSocket = INVALID_SOCKET;\n            SOCKET acceptSocket = INVALID_SOCKET;\n            size_t dataLen = wcslen(data);\n            do\n            {\n#ifdef _WIN32\n                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n                {\n                    break;\n                }\n                wsaDataInit = 1;\n#endif\n                \n                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n                if (listenSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                memset(&service, 0, sizeof(service));\n                service.sin_family = AF_INET;\n                service.sin_addr.s_addr = INADDR_ANY;\n                service.sin_port = htons(TCP_PORT);\n                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                acceptSocket = accept(listenSocket, NULL, NULL);\n                if (acceptSocket == SOCKET_ERROR)\n                {\n                    break;\n                }\n                \n                recvResult = recv(acceptSocket, (char *)(data + dataLen), sizeof(wchar_t) * (256 - dataLen - 1), 0);\n                if (recvResult == SOCKET_ERROR || recvResult == 0)\n                {\n                    break;\n                }\n                \n                data[dataLen + recvResult / sizeof(wchar_t)] = L'\\0';\n                \n                replace = wcschr(data, L'\\r');\n                if (replace)\n                {\n                    *replace = L'\\0';\n                }\n                replace = wcschr(data, L'\\n');\n                if (replace)\n                {\n                    *replace = L'\\0';\n                }\n            }\n            while (0);\n            if (listenSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(listenSocket);\n            }\n            if (acceptSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(acceptSocket);\n            }\n#ifdef _WIN32\n            if (wsaDataInit)\n            {\n                WSACleanup();\n            }\n#endif\n        }\n    }\n    {\n        LDAP* pLdapConnection = NULL;\n        ULONG connectSuccess = 0L;\n        ULONG searchSuccess = 0L;\n        LDAPMessage *pMessage = NULL;\n        wchar_t filter[256];\n        \n        _snwprintf(filter, 256-1, L\"(cn=%s)\", data);\n        pLdapConnection = ldap_initW(L\"localhost\", LDAP_PORT);\n        if (pLdapConnection == NULL)\n        {\n            printLine(\"Initialization failed\");\n            exit(1);\n        }\n        connectSuccess = ldap_connect(pLdapConnection, NULL);\n        if (connectSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Connection failed\");\n            exit(1);\n        }\n        searchSuccess = ldap_search_ext_sW(\n                            pLdapConnection,\n                            L\"base\",\n                            LDAP_SCOPE_SUBTREE,\n                            filter,\n                            NULL,\n                            0,\n                            NULL,\n                            NULL,\n                            LDAP_NO_LIMIT,\n                            LDAP_NO_LIMIT,\n                            &pMessage);\n        if (searchSuccess != LDAP_SUCCESS)\n        {\n            printLine(\"Search failed\");\n            if (pMessage != NULL)\n            {\n                ldap_msgfree(pMessage);\n            }\n            exit(1);\n        }\n        \n        \n        if (pMessage != NULL)\n        {\n            ldap_msgfree(pMessage);\n        }\n        \n        ldap_unbind(pLdapConnection);\n    }\n}\n\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_cflmszdn();\n\n    return 0;\n}\n\n",
    "target": 1,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 400975,
    "original_file": "testcases/CWE90_LDAP_Injection/CWE90_LDAP_Injection__w32_wchar_t_listen_socket_05.c",
    "RELATED_CWE": [
      "CWE-89",
      "CWE-77",
      "CWE-78"
    ]
  }
]