[
  {
    "CWE_ID": [
      "CWE-123"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\ntypedef struct _linkedList\n{\n    struct _linkedList *next;\n    struct _linkedList *prev;\n} linkedList;\n\ntypedef struct _Struct\n{\n    linkedList list;\n} Struct;\n\nstatic linkedList *linkedListPrev, *linkedListNext;\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n\n\n\n\nstatic int G2B1Static = 0;\nstatic int G2B2Static = 0;\n\n\nstatic Struct f_tfcqwvfd(Struct data)\n{\n    if(G2B1Static)\n    {\n        \n        printLine(\"Benign, fixed string\");\n    }\n    else\n    {\n        \n        ; \n    }\n    return data;\n}\n\nstatic void f_ddtmkjqn()\n{\n    Struct data;\n    linkedList head = { &head, &head };\n    \n    data.list.next = head.next;\n    data.list.prev = head.prev;\n    head.next = &data.list;\n    head.prev = &data.list;\n    G2B1Static = 0; \n    data = f_tfcqwvfd(data);\n    \n    linkedListPrev = data.list.prev;\n    linkedListNext = data.list.next;\n    linkedListPrev->next = linkedListNext;\n    linkedListNext->prev = linkedListPrev;\n}\n\n\nstatic Struct f_hjejmnuh(Struct data)\n{\n    if(G2B2Static)\n    {\n        \n        ; \n    }\n    return data;\n}\n\nstatic void f_ealghttk()\n{\n    Struct data;\n    linkedList head = { &head, &head };\n    \n    data.list.next = head.next;\n    data.list.prev = head.prev;\n    head.next = &data.list;\n    head.prev = &data.list;\n    G2B2Static = 1; \n    data = f_hjejmnuh(data);\n    \n    linkedListPrev = data.list.prev;\n    linkedListNext = data.list.next;\n    linkedListPrev->next = linkedListNext;\n    linkedListNext->prev = linkedListPrev;\n}\n\nvoid f_ofcktwdv()\n{\n    f_ddtmkjqn();\n    f_ealghttk();\n}\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_ofcktwdv();\n\n    return 0;\n}\n\n",
    "target": 0,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 401320,
    "original_file": "testcases/CWE123_Write_What_Where_Condition/CWE123_Write_What_Where_Condition__listen_socket_21.c",
    "RELATED_CWE": [
      "CWE-22",
      "CWE-79",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-123"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\ntypedef struct _linkedList\n{\n    struct _linkedList *next;\n    struct _linkedList *prev;\n} linkedList;\n\ntypedef struct _Struct\n{\n    linkedList list;\n} Struct;\n\nstatic linkedList *linkedListPrev, *linkedListNext;\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n\n\n\nstatic int Static = 0;\n\nstatic Struct f_zvlbqxfr(Struct data)\n{\n    if(Static)\n    {\n        {\n#ifdef _WIN32\n            WSADATA wsaData;\n            int wsaDataInit = 0;\n#endif\n            int recvResult;\n            struct sockaddr_in service;\n            SOCKET listenSocket = INVALID_SOCKET;\n            SOCKET acceptSocket = INVALID_SOCKET;\n            do\n            {\n#ifdef _WIN32\n                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n                {\n                    break;\n                }\n                wsaDataInit = 1;\n#endif\n                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n                if (listenSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                memset(&service, 0, sizeof(service));\n                service.sin_family = AF_INET;\n                service.sin_addr.s_addr = INADDR_ANY;\n                service.sin_port = htons(TCP_PORT);\n                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                acceptSocket = accept(listenSocket, NULL, NULL);\n                if (acceptSocket == SOCKET_ERROR)\n                {\n                    break;\n                }\n                \n                \n                recvResult = recv(acceptSocket, (char*)&data, sizeof(data), 0);\n                if (recvResult == SOCKET_ERROR || recvResult == 0)\n                {\n                    break;\n                }\n            }\n            while (0);\n            if (listenSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(listenSocket);\n            }\n            if (acceptSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(acceptSocket);\n            }\n#ifdef _WIN32\n            if (wsaDataInit)\n            {\n                WSACleanup();\n            }\n#endif\n        }\n    }\n    return data;\n}\n\nvoid f_hcxuqgkf()\n{\n    Struct data;\n    linkedList head = { &head, &head };\n    \n    data.list.next = head.next;\n    data.list.prev = head.prev;\n    head.next = &data.list;\n    head.prev = &data.list;\n    Static = 1; \n    data = f_zvlbqxfr(data);\n    \n    linkedListPrev = data.list.prev;\n    linkedListNext = data.list.next;\n    linkedListPrev->next = linkedListNext;\n    linkedListNext->prev = linkedListPrev;\n}\n\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_hcxuqgkf();\n\n    return 0;\n}\n\n",
    "target": 1,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 401321,
    "original_file": "testcases/CWE123_Write_What_Where_Condition/CWE123_Write_What_Where_Condition__listen_socket_21.c",
    "RELATED_CWE": [
      "CWE-22",
      "CWE-79",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-123"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\ntypedef struct _linkedList\n{\n    struct _linkedList *next;\n    struct _linkedList *prev;\n} linkedList;\n\ntypedef struct _Struct\n{\n    linkedList list;\n} Struct;\n\nstatic linkedList *linkedListPrev, *linkedListNext;\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n\n\n\n\nstatic int G2B1Static = 0;\nstatic int G2B2Static = 0;\n\n\nstatic Struct f_fcuamwfj(Struct data)\n{\n    if(G2B1Static)\n    {\n        \n        printLine(\"Benign, fixed string\");\n    }\n    else\n    {\n        \n        ; \n    }\n    return data;\n}\n\nstatic void f_rovgcmjd()\n{\n    Struct data;\n    linkedList head = { &head, &head };\n    \n    data.list.next = head.next;\n    data.list.prev = head.prev;\n    head.next = &data.list;\n    head.prev = &data.list;\n    G2B1Static = 0; \n    data = f_fcuamwfj(data);\n    \n    linkedListPrev = data.list.prev;\n    linkedListNext = data.list.next;\n    linkedListPrev->next = linkedListNext;\n    linkedListNext->prev = linkedListPrev;\n}\n\n\nstatic Struct f_znmnuaat(Struct data)\n{\n    if(G2B2Static)\n    {\n        \n        ; \n    }\n    return data;\n}\n\nstatic void f_nvqidkrb()\n{\n    Struct data;\n    linkedList head = { &head, &head };\n    \n    data.list.next = head.next;\n    data.list.prev = head.prev;\n    head.next = &data.list;\n    head.prev = &data.list;\n    G2B2Static = 1; \n    data = f_znmnuaat(data);\n    \n    linkedListPrev = data.list.prev;\n    linkedListNext = data.list.next;\n    linkedListPrev->next = linkedListNext;\n    linkedListNext->prev = linkedListPrev;\n}\n\nvoid f_bwggktpd()\n{\n    f_rovgcmjd();\n    f_nvqidkrb();\n}\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_bwggktpd();\n\n    return 0;\n}\n\n",
    "target": 0,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 401322,
    "original_file": "testcases/CWE123_Write_What_Where_Condition/CWE123_Write_What_Where_Condition__connect_socket_21.c",
    "RELATED_CWE": [
      "CWE-22",
      "CWE-79",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-123"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\ntypedef struct _linkedList\n{\n    struct _linkedList *next;\n    struct _linkedList *prev;\n} linkedList;\n\ntypedef struct _Struct\n{\n    linkedList list;\n} Struct;\n\nstatic linkedList *linkedListPrev, *linkedListNext;\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n\n\n\nstatic int Static = 0;\n\nstatic Struct f_emeevewj(Struct data)\n{\n    if(Static)\n    {\n        {\n#ifdef _WIN32\n            WSADATA wsaData;\n            int wsaDataInit = 0;\n#endif\n            int recvResult;\n            struct sockaddr_in service;\n            SOCKET connectSocket = INVALID_SOCKET;\n            do\n            {\n#ifdef _WIN32\n                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n                {\n                    break;\n                }\n                wsaDataInit = 1;\n#endif\n                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n                if (connectSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                memset(&service, 0, sizeof(service));\n                service.sin_family = AF_INET;\n                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n                service.sin_port = htons(TCP_PORT);\n                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                \n                \n                recvResult = recv(connectSocket, (char*)&data, sizeof(data), 0);\n                if (recvResult == SOCKET_ERROR || recvResult == 0)\n                {\n                    break;\n                }\n            }\n            while (0);\n            if (connectSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(connectSocket);\n            }\n#ifdef _WIN32\n            if (wsaDataInit)\n            {\n                WSACleanup();\n            }\n#endif\n        }\n    }\n    return data;\n}\n\nvoid f_qxkmcmjp()\n{\n    Struct data;\n    linkedList head = { &head, &head };\n    \n    data.list.next = head.next;\n    data.list.prev = head.prev;\n    head.next = &data.list;\n    head.prev = &data.list;\n    Static = 1; \n    data = f_emeevewj(data);\n    \n    linkedListPrev = data.list.prev;\n    linkedListNext = data.list.next;\n    linkedListPrev->next = linkedListNext;\n    linkedListNext->prev = linkedListPrev;\n}\n\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_qxkmcmjp();\n\n    return 0;\n}\n\n",
    "target": 1,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 401323,
    "original_file": "testcases/CWE123_Write_What_Where_Condition/CWE123_Write_What_Where_Condition__connect_socket_21.c",
    "RELATED_CWE": [
      "CWE-22",
      "CWE-79",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-123"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\ntypedef struct _linkedList\n{\n    struct _linkedList *next;\n    struct _linkedList *prev;\n} linkedList;\n\ntypedef struct _Struct\n{\n    linkedList list;\n} Struct;\n\nstatic linkedList *linkedListPrev, *linkedListNext;\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n\n\nstatic int staticReturnsTrue()\n{\n    return 1;\n}\n\nstatic int staticReturnsFalse()\n{\n    return 0;\n}\n\n\n\n\nstatic void f_mmyxfapr()\n{\n    Struct data;\n    linkedList head = { &head, &head };\n    \n    data.list.next = head.next;\n    data.list.prev = head.prev;\n    head.next = &data.list;\n    head.prev = &data.list;\n    if(staticReturnsFalse())\n    {\n        \n        printLine(\"Benign, fixed string\");\n    }\n    else\n    {\n        \n        ; \n    }\n    \n    linkedListPrev = data.list.prev;\n    linkedListNext = data.list.next;\n    linkedListPrev->next = linkedListNext;\n    linkedListNext->prev = linkedListPrev;\n}\n\n\nstatic void f_unwvfmts()\n{\n    Struct data;\n    linkedList head = { &head, &head };\n    \n    data.list.next = head.next;\n    data.list.prev = head.prev;\n    head.next = &data.list;\n    head.prev = &data.list;\n    if(staticReturnsTrue())\n    {\n        \n        ; \n    }\n    \n    linkedListPrev = data.list.prev;\n    linkedListNext = data.list.next;\n    linkedListPrev->next = linkedListNext;\n    linkedListNext->prev = linkedListPrev;\n}\n\nvoid f_pgolnycb()\n{\n    f_mmyxfapr();\n    f_unwvfmts();\n}\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_pgolnycb();\n\n    return 0;\n}\n\n",
    "target": 0,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 401324,
    "original_file": "testcases/CWE123_Write_What_Where_Condition/CWE123_Write_What_Where_Condition__listen_socket_08.c",
    "RELATED_CWE": [
      "CWE-22",
      "CWE-79",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-123"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\ntypedef struct _linkedList\n{\n    struct _linkedList *next;\n    struct _linkedList *prev;\n} linkedList;\n\ntypedef struct _Struct\n{\n    linkedList list;\n} Struct;\n\nstatic linkedList *linkedListPrev, *linkedListNext;\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n\n\nstatic int staticReturnsTrue()\n{\n    return 1;\n}\n\nstatic int staticReturnsFalse()\n{\n    return 0;\n}\n\n\nvoid f_xhokrift()\n{\n    Struct data;\n    linkedList head = { &head, &head };\n    \n    data.list.next = head.next;\n    data.list.prev = head.prev;\n    head.next = &data.list;\n    head.prev = &data.list;\n    if(staticReturnsTrue())\n    {\n        {\n#ifdef _WIN32\n            WSADATA wsaData;\n            int wsaDataInit = 0;\n#endif\n            int recvResult;\n            struct sockaddr_in service;\n            SOCKET listenSocket = INVALID_SOCKET;\n            SOCKET acceptSocket = INVALID_SOCKET;\n            do\n            {\n#ifdef _WIN32\n                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n                {\n                    break;\n                }\n                wsaDataInit = 1;\n#endif\n                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n                if (listenSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                memset(&service, 0, sizeof(service));\n                service.sin_family = AF_INET;\n                service.sin_addr.s_addr = INADDR_ANY;\n                service.sin_port = htons(TCP_PORT);\n                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                acceptSocket = accept(listenSocket, NULL, NULL);\n                if (acceptSocket == SOCKET_ERROR)\n                {\n                    break;\n                }\n                \n                \n                recvResult = recv(acceptSocket, (char*)&data, sizeof(data), 0);\n                if (recvResult == SOCKET_ERROR || recvResult == 0)\n                {\n                    break;\n                }\n            }\n            while (0);\n            if (listenSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(listenSocket);\n            }\n            if (acceptSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(acceptSocket);\n            }\n#ifdef _WIN32\n            if (wsaDataInit)\n            {\n                WSACleanup();\n            }\n#endif\n        }\n    }\n    \n    linkedListPrev = data.list.prev;\n    linkedListNext = data.list.next;\n    linkedListPrev->next = linkedListNext;\n    linkedListNext->prev = linkedListPrev;\n}\n\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_xhokrift();\n\n    return 0;\n}\n\n",
    "target": 1,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 401325,
    "original_file": "testcases/CWE123_Write_What_Where_Condition/CWE123_Write_What_Where_Condition__listen_socket_08.c",
    "RELATED_CWE": [
      "CWE-22",
      "CWE-79",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-123"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\ntypedef struct _linkedList\n{\n    struct _linkedList *next;\n    struct _linkedList *prev;\n} linkedList;\n\ntypedef struct _Struct\n{\n    linkedList list;\n} Struct;\n\nstatic linkedList *linkedListPrev, *linkedListNext;\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n\n\n\n\nstatic void f_sgteooww()\n{\n    Struct data;\n    linkedList head = { &head, &head };\n    \n    data.list.next = head.next;\n    data.list.prev = head.prev;\n    head.next = &data.list;\n    head.prev = &data.list;\n    switch(5)\n    {\n    case 6:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    default:\n        \n        ; \n        break;\n    }\n    \n    linkedListPrev = data.list.prev;\n    linkedListNext = data.list.next;\n    linkedListPrev->next = linkedListNext;\n    linkedListNext->prev = linkedListPrev;\n}\n\n\nstatic void f_uqhapwxc()\n{\n    Struct data;\n    linkedList head = { &head, &head };\n    \n    data.list.next = head.next;\n    data.list.prev = head.prev;\n    head.next = &data.list;\n    head.prev = &data.list;\n    switch(6)\n    {\n    case 6:\n        \n        ; \n        break;\n    default:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    }\n    \n    linkedListPrev = data.list.prev;\n    linkedListNext = data.list.next;\n    linkedListPrev->next = linkedListNext;\n    linkedListNext->prev = linkedListPrev;\n}\n\nvoid f_bqthzdsn()\n{\n    f_sgteooww();\n    f_uqhapwxc();\n}\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_bqthzdsn();\n\n    return 0;\n}\n\n",
    "target": 0,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 401326,
    "original_file": "testcases/CWE123_Write_What_Where_Condition/CWE123_Write_What_Where_Condition__listen_socket_15.c",
    "RELATED_CWE": [
      "CWE-22",
      "CWE-79",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-123"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\ntypedef struct _linkedList\n{\n    struct _linkedList *next;\n    struct _linkedList *prev;\n} linkedList;\n\ntypedef struct _Struct\n{\n    linkedList list;\n} Struct;\n\nstatic linkedList *linkedListPrev, *linkedListNext;\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n\n\nvoid f_qnyeyvle()\n{\n    Struct data;\n    linkedList head = { &head, &head };\n    \n    data.list.next = head.next;\n    data.list.prev = head.prev;\n    head.next = &data.list;\n    head.prev = &data.list;\n    switch(6)\n    {\n    case 6:\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        SOCKET listenSocket = INVALID_SOCKET;\n        SOCKET acceptSocket = INVALID_SOCKET;\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (listenSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = INADDR_ANY;\n            service.sin_port = htons(TCP_PORT);\n            if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n            {\n                break;\n            }\n            acceptSocket = accept(listenSocket, NULL, NULL);\n            if (acceptSocket == SOCKET_ERROR)\n            {\n                break;\n            }\n            \n            \n            recvResult = recv(acceptSocket, (char*)&data, sizeof(data), 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n        }\n        while (0);\n        if (listenSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(listenSocket);\n        }\n        if (acceptSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(acceptSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n    break;\n    default:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    }\n    \n    linkedListPrev = data.list.prev;\n    linkedListNext = data.list.next;\n    linkedListPrev->next = linkedListNext;\n    linkedListNext->prev = linkedListPrev;\n}\n\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_qnyeyvle();\n\n    return 0;\n}\n\n",
    "target": 1,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 401327,
    "original_file": "testcases/CWE123_Write_What_Where_Condition/CWE123_Write_What_Where_Condition__listen_socket_15.c",
    "RELATED_CWE": [
      "CWE-22",
      "CWE-79",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-123"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\ntypedef struct _linkedList\n{\n    struct _linkedList *next;\n    struct _linkedList *prev;\n} linkedList;\n\ntypedef struct _Struct\n{\n    linkedList list;\n} Struct;\n\nstatic linkedList *linkedListPrev, *linkedListNext;\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n\n\nstatic const int STATIC_CONST_TRUE = 1; \nstatic const int STATIC_CONST_FALSE = 0; \n\n\n\n\nstatic void f_ypfzcntk()\n{\n    Struct data;\n    linkedList head = { &head, &head };\n    \n    data.list.next = head.next;\n    data.list.prev = head.prev;\n    head.next = &data.list;\n    head.prev = &data.list;\n    if(STATIC_CONST_FALSE)\n    {\n        \n        printLine(\"Benign, fixed string\");\n    }\n    else\n    {\n        \n        ; \n    }\n    \n    linkedListPrev = data.list.prev;\n    linkedListNext = data.list.next;\n    linkedListPrev->next = linkedListNext;\n    linkedListNext->prev = linkedListPrev;\n}\n\n\nstatic void f_vdhqkhvc()\n{\n    Struct data;\n    linkedList head = { &head, &head };\n    \n    data.list.next = head.next;\n    data.list.prev = head.prev;\n    head.next = &data.list;\n    head.prev = &data.list;\n    if(STATIC_CONST_TRUE)\n    {\n        \n        ; \n    }\n    \n    linkedListPrev = data.list.prev;\n    linkedListNext = data.list.next;\n    linkedListPrev->next = linkedListNext;\n    linkedListNext->prev = linkedListPrev;\n}\n\nvoid f_fyisubee()\n{\n    f_ypfzcntk();\n    f_vdhqkhvc();\n}\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_fyisubee();\n\n    return 0;\n}\n\n",
    "target": 0,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 401328,
    "original_file": "testcases/CWE123_Write_What_Where_Condition/CWE123_Write_What_Where_Condition__listen_socket_04.c",
    "RELATED_CWE": [
      "CWE-22",
      "CWE-79",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-123"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\ntypedef struct _linkedList\n{\n    struct _linkedList *next;\n    struct _linkedList *prev;\n} linkedList;\n\ntypedef struct _Struct\n{\n    linkedList list;\n} Struct;\n\nstatic linkedList *linkedListPrev, *linkedListNext;\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n\n\nstatic const int STATIC_CONST_TRUE = 1; \nstatic const int STATIC_CONST_FALSE = 0; \n\n\nvoid f_nuhpfapc()\n{\n    Struct data;\n    linkedList head = { &head, &head };\n    \n    data.list.next = head.next;\n    data.list.prev = head.prev;\n    head.next = &data.list;\n    head.prev = &data.list;\n    if(STATIC_CONST_TRUE)\n    {\n        {\n#ifdef _WIN32\n            WSADATA wsaData;\n            int wsaDataInit = 0;\n#endif\n            int recvResult;\n            struct sockaddr_in service;\n            SOCKET listenSocket = INVALID_SOCKET;\n            SOCKET acceptSocket = INVALID_SOCKET;\n            do\n            {\n#ifdef _WIN32\n                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n                {\n                    break;\n                }\n                wsaDataInit = 1;\n#endif\n                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n                if (listenSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                memset(&service, 0, sizeof(service));\n                service.sin_family = AF_INET;\n                service.sin_addr.s_addr = INADDR_ANY;\n                service.sin_port = htons(TCP_PORT);\n                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                acceptSocket = accept(listenSocket, NULL, NULL);\n                if (acceptSocket == SOCKET_ERROR)\n                {\n                    break;\n                }\n                \n                \n                recvResult = recv(acceptSocket, (char*)&data, sizeof(data), 0);\n                if (recvResult == SOCKET_ERROR || recvResult == 0)\n                {\n                    break;\n                }\n            }\n            while (0);\n            if (listenSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(listenSocket);\n            }\n            if (acceptSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(acceptSocket);\n            }\n#ifdef _WIN32\n            if (wsaDataInit)\n            {\n                WSACleanup();\n            }\n#endif\n        }\n    }\n    \n    linkedListPrev = data.list.prev;\n    linkedListNext = data.list.next;\n    linkedListPrev->next = linkedListNext;\n    linkedListNext->prev = linkedListPrev;\n}\n\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_nuhpfapc();\n\n    return 0;\n}\n\n",
    "target": 1,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 401329,
    "original_file": "testcases/CWE123_Write_What_Where_Condition/CWE123_Write_What_Where_Condition__listen_socket_04.c",
    "RELATED_CWE": [
      "CWE-22",
      "CWE-79",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-123"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\ntypedef struct _linkedList\n{\n    struct _linkedList *next;\n    struct _linkedList *prev;\n} linkedList;\n\ntypedef struct _Struct\n{\n    linkedList list;\n} Struct;\n\nstatic linkedList *linkedListPrev, *linkedListNext;\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n\n\nstatic int staticTrue = 1; \nstatic int staticFalse = 0; \n\n\n\n\nstatic void f_vuncpkmi()\n{\n    Struct data;\n    linkedList head = { &head, &head };\n    \n    data.list.next = head.next;\n    data.list.prev = head.prev;\n    head.next = &data.list;\n    head.prev = &data.list;\n    if(staticFalse)\n    {\n        \n        printLine(\"Benign, fixed string\");\n    }\n    else\n    {\n        \n        ; \n    }\n    \n    linkedListPrev = data.list.prev;\n    linkedListNext = data.list.next;\n    linkedListPrev->next = linkedListNext;\n    linkedListNext->prev = linkedListPrev;\n}\n\n\nstatic void f_eiawpwwr()\n{\n    Struct data;\n    linkedList head = { &head, &head };\n    \n    data.list.next = head.next;\n    data.list.prev = head.prev;\n    head.next = &data.list;\n    head.prev = &data.list;\n    if(staticTrue)\n    {\n        \n        ; \n    }\n    \n    linkedListPrev = data.list.prev;\n    linkedListNext = data.list.next;\n    linkedListPrev->next = linkedListNext;\n    linkedListNext->prev = linkedListPrev;\n}\n\nvoid f_fldsokms()\n{\n    f_vuncpkmi();\n    f_eiawpwwr();\n}\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_fldsokms();\n\n    return 0;\n}\n\n",
    "target": 0,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 401330,
    "original_file": "testcases/CWE123_Write_What_Where_Condition/CWE123_Write_What_Where_Condition__listen_socket_05.c",
    "RELATED_CWE": [
      "CWE-22",
      "CWE-79",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-123"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\ntypedef struct _linkedList\n{\n    struct _linkedList *next;\n    struct _linkedList *prev;\n} linkedList;\n\ntypedef struct _Struct\n{\n    linkedList list;\n} Struct;\n\nstatic linkedList *linkedListPrev, *linkedListNext;\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n\n\nstatic int staticTrue = 1; \nstatic int staticFalse = 0; \n\n\nvoid f_nbgepmkr()\n{\n    Struct data;\n    linkedList head = { &head, &head };\n    \n    data.list.next = head.next;\n    data.list.prev = head.prev;\n    head.next = &data.list;\n    head.prev = &data.list;\n    if(staticTrue)\n    {\n        {\n#ifdef _WIN32\n            WSADATA wsaData;\n            int wsaDataInit = 0;\n#endif\n            int recvResult;\n            struct sockaddr_in service;\n            SOCKET listenSocket = INVALID_SOCKET;\n            SOCKET acceptSocket = INVALID_SOCKET;\n            do\n            {\n#ifdef _WIN32\n                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n                {\n                    break;\n                }\n                wsaDataInit = 1;\n#endif\n                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n                if (listenSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                memset(&service, 0, sizeof(service));\n                service.sin_family = AF_INET;\n                service.sin_addr.s_addr = INADDR_ANY;\n                service.sin_port = htons(TCP_PORT);\n                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                acceptSocket = accept(listenSocket, NULL, NULL);\n                if (acceptSocket == SOCKET_ERROR)\n                {\n                    break;\n                }\n                \n                \n                recvResult = recv(acceptSocket, (char*)&data, sizeof(data), 0);\n                if (recvResult == SOCKET_ERROR || recvResult == 0)\n                {\n                    break;\n                }\n            }\n            while (0);\n            if (listenSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(listenSocket);\n            }\n            if (acceptSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(acceptSocket);\n            }\n#ifdef _WIN32\n            if (wsaDataInit)\n            {\n                WSACleanup();\n            }\n#endif\n        }\n    }\n    \n    linkedListPrev = data.list.prev;\n    linkedListNext = data.list.next;\n    linkedListPrev->next = linkedListNext;\n    linkedListNext->prev = linkedListPrev;\n}\n\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_nbgepmkr();\n\n    return 0;\n}\n\n",
    "target": 1,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 401331,
    "original_file": "testcases/CWE123_Write_What_Where_Condition/CWE123_Write_What_Where_Condition__listen_socket_05.c",
    "RELATED_CWE": [
      "CWE-22",
      "CWE-79",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-123"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\ntypedef struct _linkedList\n{\n    struct _linkedList *next;\n    struct _linkedList *prev;\n} linkedList;\n\ntypedef struct _Struct\n{\n    linkedList list;\n} Struct;\n\nstatic linkedList *linkedListPrev, *linkedListNext;\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n\n\nstatic int staticFive = 5;\n\n\n\n\nstatic void f_mmawbgtt()\n{\n    Struct data;\n    linkedList head = { &head, &head };\n    \n    data.list.next = head.next;\n    data.list.prev = head.prev;\n    head.next = &data.list;\n    head.prev = &data.list;\n    if(staticFive!=5)\n    {\n        \n        printLine(\"Benign, fixed string\");\n    }\n    else\n    {\n        \n        ; \n    }\n    \n    linkedListPrev = data.list.prev;\n    linkedListNext = data.list.next;\n    linkedListPrev->next = linkedListNext;\n    linkedListNext->prev = linkedListPrev;\n}\n\n\nstatic void f_tflxbvex()\n{\n    Struct data;\n    linkedList head = { &head, &head };\n    \n    data.list.next = head.next;\n    data.list.prev = head.prev;\n    head.next = &data.list;\n    head.prev = &data.list;\n    if(staticFive==5)\n    {\n        \n        ; \n    }\n    \n    linkedListPrev = data.list.prev;\n    linkedListNext = data.list.next;\n    linkedListPrev->next = linkedListNext;\n    linkedListNext->prev = linkedListPrev;\n}\n\nvoid f_mqpvohjf()\n{\n    f_mmawbgtt();\n    f_tflxbvex();\n}\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_mqpvohjf();\n\n    return 0;\n}\n\n",
    "target": 0,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 401332,
    "original_file": "testcases/CWE123_Write_What_Where_Condition/CWE123_Write_What_Where_Condition__listen_socket_07.c",
    "RELATED_CWE": [
      "CWE-22",
      "CWE-79",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-123"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\ntypedef struct _linkedList\n{\n    struct _linkedList *next;\n    struct _linkedList *prev;\n} linkedList;\n\ntypedef struct _Struct\n{\n    linkedList list;\n} Struct;\n\nstatic linkedList *linkedListPrev, *linkedListNext;\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n\n\nstatic int staticFive = 5;\n\n\nvoid f_xozirflc()\n{\n    Struct data;\n    linkedList head = { &head, &head };\n    \n    data.list.next = head.next;\n    data.list.prev = head.prev;\n    head.next = &data.list;\n    head.prev = &data.list;\n    if(staticFive==5)\n    {\n        {\n#ifdef _WIN32\n            WSADATA wsaData;\n            int wsaDataInit = 0;\n#endif\n            int recvResult;\n            struct sockaddr_in service;\n            SOCKET listenSocket = INVALID_SOCKET;\n            SOCKET acceptSocket = INVALID_SOCKET;\n            do\n            {\n#ifdef _WIN32\n                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n                {\n                    break;\n                }\n                wsaDataInit = 1;\n#endif\n                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n                if (listenSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                memset(&service, 0, sizeof(service));\n                service.sin_family = AF_INET;\n                service.sin_addr.s_addr = INADDR_ANY;\n                service.sin_port = htons(TCP_PORT);\n                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                acceptSocket = accept(listenSocket, NULL, NULL);\n                if (acceptSocket == SOCKET_ERROR)\n                {\n                    break;\n                }\n                \n                \n                recvResult = recv(acceptSocket, (char*)&data, sizeof(data), 0);\n                if (recvResult == SOCKET_ERROR || recvResult == 0)\n                {\n                    break;\n                }\n            }\n            while (0);\n            if (listenSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(listenSocket);\n            }\n            if (acceptSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(acceptSocket);\n            }\n#ifdef _WIN32\n            if (wsaDataInit)\n            {\n                WSACleanup();\n            }\n#endif\n        }\n    }\n    \n    linkedListPrev = data.list.prev;\n    linkedListNext = data.list.next;\n    linkedListPrev->next = linkedListNext;\n    linkedListNext->prev = linkedListPrev;\n}\n\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_xozirflc();\n\n    return 0;\n}\n\n",
    "target": 1,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 401333,
    "original_file": "testcases/CWE123_Write_What_Where_Condition/CWE123_Write_What_Where_Condition__listen_socket_07.c",
    "RELATED_CWE": [
      "CWE-22",
      "CWE-79",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-123"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\ntypedef struct _linkedList\n{\n    struct _linkedList *next;\n    struct _linkedList *prev;\n} linkedList;\n\ntypedef struct _Struct\n{\n    linkedList list;\n} Struct;\n\nstatic linkedList *linkedListPrev, *linkedListNext;\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n\n\nstatic const int STATIC_CONST_FIVE = 5;\n\n\n\n\nstatic void f_myefhupt()\n{\n    Struct data;\n    linkedList head = { &head, &head };\n    \n    data.list.next = head.next;\n    data.list.prev = head.prev;\n    head.next = &data.list;\n    head.prev = &data.list;\n    if(STATIC_CONST_FIVE!=5)\n    {\n        \n        printLine(\"Benign, fixed string\");\n    }\n    else\n    {\n        \n        ; \n    }\n    \n    linkedListPrev = data.list.prev;\n    linkedListNext = data.list.next;\n    linkedListPrev->next = linkedListNext;\n    linkedListNext->prev = linkedListPrev;\n}\n\n\nstatic void f_psobqqbe()\n{\n    Struct data;\n    linkedList head = { &head, &head };\n    \n    data.list.next = head.next;\n    data.list.prev = head.prev;\n    head.next = &data.list;\n    head.prev = &data.list;\n    if(STATIC_CONST_FIVE==5)\n    {\n        \n        ; \n    }\n    \n    linkedListPrev = data.list.prev;\n    linkedListNext = data.list.next;\n    linkedListPrev->next = linkedListNext;\n    linkedListNext->prev = linkedListPrev;\n}\n\nvoid f_rumoaoab()\n{\n    f_myefhupt();\n    f_psobqqbe();\n}\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_rumoaoab();\n\n    return 0;\n}\n\n",
    "target": 0,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 401334,
    "original_file": "testcases/CWE123_Write_What_Where_Condition/CWE123_Write_What_Where_Condition__listen_socket_06.c",
    "RELATED_CWE": [
      "CWE-22",
      "CWE-79",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-123"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\ntypedef struct _linkedList\n{\n    struct _linkedList *next;\n    struct _linkedList *prev;\n} linkedList;\n\ntypedef struct _Struct\n{\n    linkedList list;\n} Struct;\n\nstatic linkedList *linkedListPrev, *linkedListNext;\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define LISTEN_BACKLOG 5\n\n\nstatic const int STATIC_CONST_FIVE = 5;\n\n\nvoid f_kkhvfsvg()\n{\n    Struct data;\n    linkedList head = { &head, &head };\n    \n    data.list.next = head.next;\n    data.list.prev = head.prev;\n    head.next = &data.list;\n    head.prev = &data.list;\n    if(STATIC_CONST_FIVE==5)\n    {\n        {\n#ifdef _WIN32\n            WSADATA wsaData;\n            int wsaDataInit = 0;\n#endif\n            int recvResult;\n            struct sockaddr_in service;\n            SOCKET listenSocket = INVALID_SOCKET;\n            SOCKET acceptSocket = INVALID_SOCKET;\n            do\n            {\n#ifdef _WIN32\n                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n                {\n                    break;\n                }\n                wsaDataInit = 1;\n#endif\n                listenSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n                if (listenSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                memset(&service, 0, sizeof(service));\n                service.sin_family = AF_INET;\n                service.sin_addr.s_addr = INADDR_ANY;\n                service.sin_port = htons(TCP_PORT);\n                if (bind(listenSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                if (listen(listenSocket, LISTEN_BACKLOG) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                acceptSocket = accept(listenSocket, NULL, NULL);\n                if (acceptSocket == SOCKET_ERROR)\n                {\n                    break;\n                }\n                \n                \n                recvResult = recv(acceptSocket, (char*)&data, sizeof(data), 0);\n                if (recvResult == SOCKET_ERROR || recvResult == 0)\n                {\n                    break;\n                }\n            }\n            while (0);\n            if (listenSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(listenSocket);\n            }\n            if (acceptSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(acceptSocket);\n            }\n#ifdef _WIN32\n            if (wsaDataInit)\n            {\n                WSACleanup();\n            }\n#endif\n        }\n    }\n    \n    linkedListPrev = data.list.prev;\n    linkedListNext = data.list.next;\n    linkedListPrev->next = linkedListNext;\n    linkedListNext->prev = linkedListPrev;\n}\n\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_kkhvfsvg();\n\n    return 0;\n}\n\n",
    "target": 1,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 401335,
    "original_file": "testcases/CWE123_Write_What_Where_Condition/CWE123_Write_What_Where_Condition__listen_socket_06.c",
    "RELATED_CWE": [
      "CWE-22",
      "CWE-79",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-123"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\ntypedef struct _linkedList\n{\n    struct _linkedList *next;\n    struct _linkedList *prev;\n} linkedList;\n\ntypedef struct _Struct\n{\n    linkedList list;\n} Struct;\n\nstatic linkedList *linkedListPrev, *linkedListNext;\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n\n\nstatic int staticReturnsTrue()\n{\n    return 1;\n}\n\nstatic int staticReturnsFalse()\n{\n    return 0;\n}\n\n\n\n\nstatic void f_mqorqwfe()\n{\n    Struct data;\n    linkedList head = { &head, &head };\n    \n    data.list.next = head.next;\n    data.list.prev = head.prev;\n    head.next = &data.list;\n    head.prev = &data.list;\n    if(staticReturnsFalse())\n    {\n        \n        printLine(\"Benign, fixed string\");\n    }\n    else\n    {\n        \n        ; \n    }\n    \n    linkedListPrev = data.list.prev;\n    linkedListNext = data.list.next;\n    linkedListPrev->next = linkedListNext;\n    linkedListNext->prev = linkedListPrev;\n}\n\n\nstatic void f_nqancvsf()\n{\n    Struct data;\n    linkedList head = { &head, &head };\n    \n    data.list.next = head.next;\n    data.list.prev = head.prev;\n    head.next = &data.list;\n    head.prev = &data.list;\n    if(staticReturnsTrue())\n    {\n        \n        ; \n    }\n    \n    linkedListPrev = data.list.prev;\n    linkedListNext = data.list.next;\n    linkedListPrev->next = linkedListNext;\n    linkedListNext->prev = linkedListPrev;\n}\n\nvoid f_hjqtaadv()\n{\n    f_mqorqwfe();\n    f_nqancvsf();\n}\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_hjqtaadv();\n\n    return 0;\n}\n\n",
    "target": 0,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 401336,
    "original_file": "testcases/CWE123_Write_What_Where_Condition/CWE123_Write_What_Where_Condition__connect_socket_08.c",
    "RELATED_CWE": [
      "CWE-22",
      "CWE-79",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-123"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\ntypedef struct _linkedList\n{\n    struct _linkedList *next;\n    struct _linkedList *prev;\n} linkedList;\n\ntypedef struct _Struct\n{\n    linkedList list;\n} Struct;\n\nstatic linkedList *linkedListPrev, *linkedListNext;\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n\n\nstatic int staticReturnsTrue()\n{\n    return 1;\n}\n\nstatic int staticReturnsFalse()\n{\n    return 0;\n}\n\n\nvoid f_vvqghutl()\n{\n    Struct data;\n    linkedList head = { &head, &head };\n    \n    data.list.next = head.next;\n    data.list.prev = head.prev;\n    head.next = &data.list;\n    head.prev = &data.list;\n    if(staticReturnsTrue())\n    {\n        {\n#ifdef _WIN32\n            WSADATA wsaData;\n            int wsaDataInit = 0;\n#endif\n            int recvResult;\n            struct sockaddr_in service;\n            SOCKET connectSocket = INVALID_SOCKET;\n            do\n            {\n#ifdef _WIN32\n                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n                {\n                    break;\n                }\n                wsaDataInit = 1;\n#endif\n                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n                if (connectSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                memset(&service, 0, sizeof(service));\n                service.sin_family = AF_INET;\n                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n                service.sin_port = htons(TCP_PORT);\n                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                \n                \n                recvResult = recv(connectSocket, (char*)&data, sizeof(data), 0);\n                if (recvResult == SOCKET_ERROR || recvResult == 0)\n                {\n                    break;\n                }\n            }\n            while (0);\n            if (connectSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(connectSocket);\n            }\n#ifdef _WIN32\n            if (wsaDataInit)\n            {\n                WSACleanup();\n            }\n#endif\n        }\n    }\n    \n    linkedListPrev = data.list.prev;\n    linkedListNext = data.list.next;\n    linkedListPrev->next = linkedListNext;\n    linkedListNext->prev = linkedListPrev;\n}\n\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_vvqghutl();\n\n    return 0;\n}\n\n",
    "target": 1,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 401337,
    "original_file": "testcases/CWE123_Write_What_Where_Condition/CWE123_Write_What_Where_Condition__connect_socket_08.c",
    "RELATED_CWE": [
      "CWE-22",
      "CWE-79",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-123"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\ntypedef struct _linkedList\n{\n    struct _linkedList *next;\n    struct _linkedList *prev;\n} linkedList;\n\ntypedef struct _Struct\n{\n    linkedList list;\n} Struct;\n\nstatic linkedList *linkedListPrev, *linkedListNext;\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n\n\n\n\nstatic void f_obdquqqm()\n{\n    Struct data;\n    linkedList head = { &head, &head };\n    \n    data.list.next = head.next;\n    data.list.prev = head.prev;\n    head.next = &data.list;\n    head.prev = &data.list;\n    switch(5)\n    {\n    case 6:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    default:\n        \n        ; \n        break;\n    }\n    \n    linkedListPrev = data.list.prev;\n    linkedListNext = data.list.next;\n    linkedListPrev->next = linkedListNext;\n    linkedListNext->prev = linkedListPrev;\n}\n\n\nstatic void f_lgyzrssb()\n{\n    Struct data;\n    linkedList head = { &head, &head };\n    \n    data.list.next = head.next;\n    data.list.prev = head.prev;\n    head.next = &data.list;\n    head.prev = &data.list;\n    switch(6)\n    {\n    case 6:\n        \n        ; \n        break;\n    default:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    }\n    \n    linkedListPrev = data.list.prev;\n    linkedListNext = data.list.next;\n    linkedListPrev->next = linkedListNext;\n    linkedListNext->prev = linkedListPrev;\n}\n\nvoid f_djtfkytm()\n{\n    f_obdquqqm();\n    f_lgyzrssb();\n}\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_djtfkytm();\n\n    return 0;\n}\n\n",
    "target": 0,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 401338,
    "original_file": "testcases/CWE123_Write_What_Where_Condition/CWE123_Write_What_Where_Condition__connect_socket_15.c",
    "RELATED_CWE": [
      "CWE-22",
      "CWE-79",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-123"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\ntypedef struct _linkedList\n{\n    struct _linkedList *next;\n    struct _linkedList *prev;\n} linkedList;\n\ntypedef struct _Struct\n{\n    linkedList list;\n} Struct;\n\nstatic linkedList *linkedListPrev, *linkedListNext;\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n\n\nvoid f_oduhlnop()\n{\n    Struct data;\n    linkedList head = { &head, &head };\n    \n    data.list.next = head.next;\n    data.list.prev = head.prev;\n    head.next = &data.list;\n    head.prev = &data.list;\n    switch(6)\n    {\n    case 6:\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        SOCKET connectSocket = INVALID_SOCKET;\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (connectSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n            service.sin_port = htons(TCP_PORT);\n            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            \n            \n            recvResult = recv(connectSocket, (char*)&data, sizeof(data), 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n        }\n        while (0);\n        if (connectSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(connectSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n    break;\n    default:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    }\n    \n    linkedListPrev = data.list.prev;\n    linkedListNext = data.list.next;\n    linkedListPrev->next = linkedListNext;\n    linkedListNext->prev = linkedListPrev;\n}\n\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_oduhlnop();\n\n    return 0;\n}\n\n",
    "target": 1,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 401339,
    "original_file": "testcases/CWE123_Write_What_Where_Condition/CWE123_Write_What_Where_Condition__connect_socket_15.c",
    "RELATED_CWE": [
      "CWE-22",
      "CWE-79",
      "CWE-89"
    ]
  }
]