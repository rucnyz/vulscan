[
  {
    "CWE_ID": [
      "CWE-506"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#include \"windows.h\"\n#pragma comment(lib, \"user32.lib\")\n#pragma comment(lib, \"Gdi32.lib\")\n\n\nstatic int staticReturnsTrue()\n{\n    return 1;\n}\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n    return 0;\n}\n\n",
    "target": 0,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 402856,
    "original_file": "testcases/CWE506_Embedded_Malicious_Code/CWE506_Embedded_Malicious_Code__w32_screen_capture_08.c",
    "RELATED_CWE": [
      "CWE-306",
      "CWE-862",
      "CWE-863"
    ]
  },
  {
    "CWE_ID": [
      "CWE-506"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#include \"windows.h\"\n#pragma comment(lib, \"user32.lib\")\n#pragma comment(lib, \"Gdi32.lib\")\n\n\nstatic int staticReturnsTrue()\n{\n    return 1;\n}\n\n\nvoid f_fuiubjxd()\n{\n    if(staticReturnsTrue())\n    {\n        {\n            \n            HDC hdcWindow = NULL;\n            HDC hdcMemDC = NULL;\n            HBITMAP hbmScreen = NULL;\n            HGDIOBJ selectResult = NULL;\n            BITMAP bmpScreen;\n            RECT rcClient;\n            BITMAPFILEHEADER   bmfHeader;\n            BITMAPINFOHEADER   bmiHeader;\n            DWORD dwBmpSize;\n            HANDLE hDIB = NULL;\n            char *lpbitmap = NULL;\n            HANDLE hFile = INVALID_HANDLE_VALUE;\n            DWORD dwSizeofDIB;\n            DWORD dwBytesWritten;\n            HWND hWnd = GetDesktopWindow();\n            do\n            {\n                \n                hdcWindow = GetDC(hWnd);\n                if (hdcWindow == NULL)\n                {\n                    break;\n                }\n                \n                hdcMemDC = CreateCompatibleDC(hdcWindow);\n                if (hdcMemDC == NULL)\n                {\n                    break;\n                }\n                \n                if (GetClientRect(hWnd, &rcClient) == 0)\n                {\n                    break;\n                }\n                \n                hbmScreen = CreateCompatibleBitmap(hdcWindow, rcClient.right-rcClient.left, rcClient.bottom-rcClient.top);\n                if (hbmScreen == NULL)\n                {\n                    break;\n                }\n                \n                selectResult = SelectObject(hdcMemDC,hbmScreen);\n                if (selectResult == NULL || selectResult == HGDI_ERROR)\n                {\n                    break;\n                }\n                \n                if (BitBlt(hdcMemDC,\n                           0,0,\n                           rcClient.right-rcClient.left, rcClient.bottom-rcClient.top,\n                           hdcWindow,\n                           0,0,\n                           SRCCOPY) == 0)\n                {\n                    break;\n                }\n                \n                if (GetObject(hbmScreen,sizeof(BITMAP),&bmpScreen) == 0)\n                {\n                    break;\n                }\n                bmiHeader.biSize = sizeof(BITMAPINFOHEADER);\n                bmiHeader.biWidth = bmpScreen.bmWidth;\n                bmiHeader.biHeight = bmpScreen.bmHeight;\n                bmiHeader.biPlanes = 1;\n                bmiHeader.biBitCount = 32;\n                bmiHeader.biCompression = BI_RGB;\n                bmiHeader.biSizeImage = 0;\n                bmiHeader.biXPelsPerMeter = 0;\n                bmiHeader.biYPelsPerMeter = 0;\n                bmiHeader.biClrUsed = 0;\n                bmiHeader.biClrImportant = 0;\n                dwBmpSize = ((bmpScreen.bmWidth * bmiHeader.biBitCount + 31) / 32) * 4 * bmpScreen.bmHeight;\n                \n                hDIB = GlobalAlloc(GHND,dwBmpSize);\n                if (hDIB == NULL)\n                {\n                    break;\n                }\n                lpbitmap = (char *)GlobalLock(hDIB);\n                if (lpbitmap == NULL)\n                {\n                    break;\n                }\n                \n                if (GetDIBits(hdcWindow, hbmScreen, 0,\n                              (UINT)bmpScreen.bmHeight,\n                              lpbitmap,\n                              (BITMAPINFO *)&bmiHeader, DIB_RGB_COLORS) == 0)\n                {\n                    break;\n                }\n                \n                hFile = CreateFile(TEXT(\"capture.bmp\"),\n                                   GENERIC_WRITE,\n                                   0,\n                                   NULL,\n                                   CREATE_ALWAYS,\n                                   FILE_ATTRIBUTE_NORMAL, NULL);\n                if (hFile == INVALID_HANDLE_VALUE)\n                {\n                    break;\n                }\n                \n                dwSizeofDIB = dwBmpSize + sizeof(BITMAPFILEHEADER) + sizeof(BITMAPINFOHEADER);\n                \n                bmfHeader.bfOffBits = (DWORD)sizeof(BITMAPFILEHEADER) + (DWORD)sizeof(BITMAPINFOHEADER);\n                \n                bmfHeader.bfSize = dwSizeofDIB;\n                \n                bmfHeader.bfType = 0x4D42; \n                dwBytesWritten = 0;\n                \n                if (WriteFile(hFile, (LPSTR)&bmfHeader, sizeof(BITMAPFILEHEADER), &dwBytesWritten, NULL) == 0)\n                {\n                    break;\n                }\n                if (WriteFile(hFile, (LPSTR)&bmiHeader, sizeof(BITMAPINFOHEADER), &dwBytesWritten, NULL) == 0)\n                {\n                    break;\n                }\n                if (WriteFile(hFile, (LPSTR)lpbitmap, dwBmpSize, &dwBytesWritten, NULL) == 0)\n                {\n                    break;\n                }\n            }\n            while (0);\n            \n            if (hDIB != NULL)\n            {\n                GlobalUnlock(hDIB);\n                GlobalFree(hDIB);\n            }\n            \n            if (hFile != INVALID_HANDLE_VALUE)\n            {\n                CloseHandle(hFile);\n            }\n            \n            if (hbmScreen != NULL)\n            {\n                DeleteObject(hbmScreen);\n            }\n            if (hdcMemDC != NULL)\n            {\n                DeleteObject(hdcMemDC);\n            }\n            if (hdcWindow != NULL)\n            {\n                ReleaseDC(hWnd,hdcWindow);\n            }\n        }\n    }\n}\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_fuiubjxd();\n\n    return 0;\n}\n\n",
    "target": 1,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 402857,
    "original_file": "testcases/CWE506_Embedded_Malicious_Code/CWE506_Embedded_Malicious_Code__w32_screen_capture_08.c",
    "RELATED_CWE": [
      "CWE-306",
      "CWE-862",
      "CWE-863"
    ]
  },
  {
    "CWE_ID": [
      "CWE-506"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#include \"windows.h\"\n#pragma comment(lib, \"user32.lib\")\n#pragma comment(lib, \"Gdi32.lib\")\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n    return 0;\n}\n\n",
    "target": 0,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 402858,
    "original_file": "testcases/CWE506_Embedded_Malicious_Code/CWE506_Embedded_Malicious_Code__w32_screen_capture_15.c",
    "RELATED_CWE": [
      "CWE-306",
      "CWE-862",
      "CWE-863"
    ]
  },
  {
    "CWE_ID": [
      "CWE-506"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#include \"windows.h\"\n#pragma comment(lib, \"user32.lib\")\n#pragma comment(lib, \"Gdi32.lib\")\n\n\nvoid f_fykcqsjw()\n{\n    switch(6)\n    {\n    case 6:\n    {\n        \n        HDC hdcWindow = NULL;\n        HDC hdcMemDC = NULL;\n        HBITMAP hbmScreen = NULL;\n        HGDIOBJ selectResult = NULL;\n        BITMAP bmpScreen;\n        RECT rcClient;\n        BITMAPFILEHEADER   bmfHeader;\n        BITMAPINFOHEADER   bmiHeader;\n        DWORD dwBmpSize;\n        HANDLE hDIB = NULL;\n        char *lpbitmap = NULL;\n        HANDLE hFile = INVALID_HANDLE_VALUE;\n        DWORD dwSizeofDIB;\n        DWORD dwBytesWritten;\n        HWND hWnd = GetDesktopWindow();\n        do\n        {\n            \n            hdcWindow = GetDC(hWnd);\n            if (hdcWindow == NULL)\n            {\n                break;\n            }\n            \n            hdcMemDC = CreateCompatibleDC(hdcWindow);\n            if (hdcMemDC == NULL)\n            {\n                break;\n            }\n            \n            if (GetClientRect(hWnd, &rcClient) == 0)\n            {\n                break;\n            }\n            \n            hbmScreen = CreateCompatibleBitmap(hdcWindow, rcClient.right-rcClient.left, rcClient.bottom-rcClient.top);\n            if (hbmScreen == NULL)\n            {\n                break;\n            }\n            \n            selectResult = SelectObject(hdcMemDC,hbmScreen);\n            if (selectResult == NULL || selectResult == HGDI_ERROR)\n            {\n                break;\n            }\n            \n            if (BitBlt(hdcMemDC,\n                       0,0,\n                       rcClient.right-rcClient.left, rcClient.bottom-rcClient.top,\n                       hdcWindow,\n                       0,0,\n                       SRCCOPY) == 0)\n            {\n                break;\n            }\n            \n            if (GetObject(hbmScreen,sizeof(BITMAP),&bmpScreen) == 0)\n            {\n                break;\n            }\n            bmiHeader.biSize = sizeof(BITMAPINFOHEADER);\n            bmiHeader.biWidth = bmpScreen.bmWidth;\n            bmiHeader.biHeight = bmpScreen.bmHeight;\n            bmiHeader.biPlanes = 1;\n            bmiHeader.biBitCount = 32;\n            bmiHeader.biCompression = BI_RGB;\n            bmiHeader.biSizeImage = 0;\n            bmiHeader.biXPelsPerMeter = 0;\n            bmiHeader.biYPelsPerMeter = 0;\n            bmiHeader.biClrUsed = 0;\n            bmiHeader.biClrImportant = 0;\n            dwBmpSize = ((bmpScreen.bmWidth * bmiHeader.biBitCount + 31) / 32) * 4 * bmpScreen.bmHeight;\n            \n            hDIB = GlobalAlloc(GHND,dwBmpSize);\n            if (hDIB == NULL)\n            {\n                break;\n            }\n            lpbitmap = (char *)GlobalLock(hDIB);\n            if (lpbitmap == NULL)\n            {\n                break;\n            }\n            \n            if (GetDIBits(hdcWindow, hbmScreen, 0,\n                          (UINT)bmpScreen.bmHeight,\n                          lpbitmap,\n                          (BITMAPINFO *)&bmiHeader, DIB_RGB_COLORS) == 0)\n            {\n                break;\n            }\n            \n            hFile = CreateFile(TEXT(\"capture.bmp\"),\n                               GENERIC_WRITE,\n                               0,\n                               NULL,\n                               CREATE_ALWAYS,\n                               FILE_ATTRIBUTE_NORMAL, NULL);\n            if (hFile == INVALID_HANDLE_VALUE)\n            {\n                break;\n            }\n            \n            dwSizeofDIB = dwBmpSize + sizeof(BITMAPFILEHEADER) + sizeof(BITMAPINFOHEADER);\n            \n            bmfHeader.bfOffBits = (DWORD)sizeof(BITMAPFILEHEADER) + (DWORD)sizeof(BITMAPINFOHEADER);\n            \n            bmfHeader.bfSize = dwSizeofDIB;\n            \n            bmfHeader.bfType = 0x4D42; \n            dwBytesWritten = 0;\n            \n            if (WriteFile(hFile, (LPSTR)&bmfHeader, sizeof(BITMAPFILEHEADER), &dwBytesWritten, NULL) == 0)\n            {\n                break;\n            }\n            if (WriteFile(hFile, (LPSTR)&bmiHeader, sizeof(BITMAPINFOHEADER), &dwBytesWritten, NULL) == 0)\n            {\n                break;\n            }\n            if (WriteFile(hFile, (LPSTR)lpbitmap, dwBmpSize, &dwBytesWritten, NULL) == 0)\n            {\n                break;\n            }\n        }\n        while (0);\n        \n        if (hDIB != NULL)\n        {\n            GlobalUnlock(hDIB);\n            GlobalFree(hDIB);\n        }\n        \n        if (hFile != INVALID_HANDLE_VALUE)\n        {\n            CloseHandle(hFile);\n        }\n        \n        if (hbmScreen != NULL)\n        {\n            DeleteObject(hbmScreen);\n        }\n        if (hdcMemDC != NULL)\n        {\n            DeleteObject(hdcMemDC);\n        }\n        if (hdcWindow != NULL)\n        {\n            ReleaseDC(hWnd,hdcWindow);\n        }\n    }\n    break;\n    default:\n        \n        printLine(\"Benign, fixed string\");\n        break;\n    }\n}\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_fykcqsjw();\n\n    return 0;\n}\n\n",
    "target": 1,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 402859,
    "original_file": "testcases/CWE506_Embedded_Malicious_Code/CWE506_Embedded_Malicious_Code__w32_screen_capture_15.c",
    "RELATED_CWE": [
      "CWE-306",
      "CWE-862",
      "CWE-863"
    ]
  },
  {
    "CWE_ID": [
      "CWE-506"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#include \"windows.h\"\n#pragma comment(lib, \"user32.lib\")\n#pragma comment(lib, \"Gdi32.lib\")\n\n\nstatic const int STATIC_CONST_TRUE = 1; \n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n    return 0;\n}\n\n",
    "target": 0,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 402860,
    "original_file": "testcases/CWE506_Embedded_Malicious_Code/CWE506_Embedded_Malicious_Code__w32_screen_capture_04.c",
    "RELATED_CWE": [
      "CWE-306",
      "CWE-862",
      "CWE-863"
    ]
  },
  {
    "CWE_ID": [
      "CWE-506"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#include \"windows.h\"\n#pragma comment(lib, \"user32.lib\")\n#pragma comment(lib, \"Gdi32.lib\")\n\n\nstatic const int STATIC_CONST_TRUE = 1; \n\n\nvoid f_lwmnvajj()\n{\n    if(STATIC_CONST_TRUE)\n    {\n        {\n            \n            HDC hdcWindow = NULL;\n            HDC hdcMemDC = NULL;\n            HBITMAP hbmScreen = NULL;\n            HGDIOBJ selectResult = NULL;\n            BITMAP bmpScreen;\n            RECT rcClient;\n            BITMAPFILEHEADER   bmfHeader;\n            BITMAPINFOHEADER   bmiHeader;\n            DWORD dwBmpSize;\n            HANDLE hDIB = NULL;\n            char *lpbitmap = NULL;\n            HANDLE hFile = INVALID_HANDLE_VALUE;\n            DWORD dwSizeofDIB;\n            DWORD dwBytesWritten;\n            HWND hWnd = GetDesktopWindow();\n            do\n            {\n                \n                hdcWindow = GetDC(hWnd);\n                if (hdcWindow == NULL)\n                {\n                    break;\n                }\n                \n                hdcMemDC = CreateCompatibleDC(hdcWindow);\n                if (hdcMemDC == NULL)\n                {\n                    break;\n                }\n                \n                if (GetClientRect(hWnd, &rcClient) == 0)\n                {\n                    break;\n                }\n                \n                hbmScreen = CreateCompatibleBitmap(hdcWindow, rcClient.right-rcClient.left, rcClient.bottom-rcClient.top);\n                if (hbmScreen == NULL)\n                {\n                    break;\n                }\n                \n                selectResult = SelectObject(hdcMemDC,hbmScreen);\n                if (selectResult == NULL || selectResult == HGDI_ERROR)\n                {\n                    break;\n                }\n                \n                if (BitBlt(hdcMemDC,\n                           0,0,\n                           rcClient.right-rcClient.left, rcClient.bottom-rcClient.top,\n                           hdcWindow,\n                           0,0,\n                           SRCCOPY) == 0)\n                {\n                    break;\n                }\n                \n                if (GetObject(hbmScreen,sizeof(BITMAP),&bmpScreen) == 0)\n                {\n                    break;\n                }\n                bmiHeader.biSize = sizeof(BITMAPINFOHEADER);\n                bmiHeader.biWidth = bmpScreen.bmWidth;\n                bmiHeader.biHeight = bmpScreen.bmHeight;\n                bmiHeader.biPlanes = 1;\n                bmiHeader.biBitCount = 32;\n                bmiHeader.biCompression = BI_RGB;\n                bmiHeader.biSizeImage = 0;\n                bmiHeader.biXPelsPerMeter = 0;\n                bmiHeader.biYPelsPerMeter = 0;\n                bmiHeader.biClrUsed = 0;\n                bmiHeader.biClrImportant = 0;\n                dwBmpSize = ((bmpScreen.bmWidth * bmiHeader.biBitCount + 31) / 32) * 4 * bmpScreen.bmHeight;\n                \n                hDIB = GlobalAlloc(GHND,dwBmpSize);\n                if (hDIB == NULL)\n                {\n                    break;\n                }\n                lpbitmap = (char *)GlobalLock(hDIB);\n                if (lpbitmap == NULL)\n                {\n                    break;\n                }\n                \n                if (GetDIBits(hdcWindow, hbmScreen, 0,\n                              (UINT)bmpScreen.bmHeight,\n                              lpbitmap,\n                              (BITMAPINFO *)&bmiHeader, DIB_RGB_COLORS) == 0)\n                {\n                    break;\n                }\n                \n                hFile = CreateFile(TEXT(\"capture.bmp\"),\n                                   GENERIC_WRITE,\n                                   0,\n                                   NULL,\n                                   CREATE_ALWAYS,\n                                   FILE_ATTRIBUTE_NORMAL, NULL);\n                if (hFile == INVALID_HANDLE_VALUE)\n                {\n                    break;\n                }\n                \n                dwSizeofDIB = dwBmpSize + sizeof(BITMAPFILEHEADER) + sizeof(BITMAPINFOHEADER);\n                \n                bmfHeader.bfOffBits = (DWORD)sizeof(BITMAPFILEHEADER) + (DWORD)sizeof(BITMAPINFOHEADER);\n                \n                bmfHeader.bfSize = dwSizeofDIB;\n                \n                bmfHeader.bfType = 0x4D42; \n                dwBytesWritten = 0;\n                \n                if (WriteFile(hFile, (LPSTR)&bmfHeader, sizeof(BITMAPFILEHEADER), &dwBytesWritten, NULL) == 0)\n                {\n                    break;\n                }\n                if (WriteFile(hFile, (LPSTR)&bmiHeader, sizeof(BITMAPINFOHEADER), &dwBytesWritten, NULL) == 0)\n                {\n                    break;\n                }\n                if (WriteFile(hFile, (LPSTR)lpbitmap, dwBmpSize, &dwBytesWritten, NULL) == 0)\n                {\n                    break;\n                }\n            }\n            while (0);\n            \n            if (hDIB != NULL)\n            {\n                GlobalUnlock(hDIB);\n                GlobalFree(hDIB);\n            }\n            \n            if (hFile != INVALID_HANDLE_VALUE)\n            {\n                CloseHandle(hFile);\n            }\n            \n            if (hbmScreen != NULL)\n            {\n                DeleteObject(hbmScreen);\n            }\n            if (hdcMemDC != NULL)\n            {\n                DeleteObject(hdcMemDC);\n            }\n            if (hdcWindow != NULL)\n            {\n                ReleaseDC(hWnd,hdcWindow);\n            }\n        }\n    }\n}\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_lwmnvajj();\n\n    return 0;\n}\n\n",
    "target": 1,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 402861,
    "original_file": "testcases/CWE506_Embedded_Malicious_Code/CWE506_Embedded_Malicious_Code__w32_screen_capture_04.c",
    "RELATED_CWE": [
      "CWE-306",
      "CWE-862",
      "CWE-863"
    ]
  },
  {
    "CWE_ID": [
      "CWE-506"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#include \"windows.h\"\n#pragma comment(lib, \"user32.lib\")\n#pragma comment(lib, \"Gdi32.lib\")\n\n\nstatic const int STATIC_CONST_FIVE = 5;\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n    return 0;\n}\n\n",
    "target": 0,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 402862,
    "original_file": "testcases/CWE506_Embedded_Malicious_Code/CWE506_Embedded_Malicious_Code__w32_screen_capture_06.c",
    "RELATED_CWE": [
      "CWE-306",
      "CWE-862",
      "CWE-863"
    ]
  },
  {
    "CWE_ID": [
      "CWE-506"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#include \"windows.h\"\n#pragma comment(lib, \"user32.lib\")\n#pragma comment(lib, \"Gdi32.lib\")\n\n\nstatic const int STATIC_CONST_FIVE = 5;\n\n\nvoid f_eghkpfaf()\n{\n    if(STATIC_CONST_FIVE==5)\n    {\n        {\n            \n            HDC hdcWindow = NULL;\n            HDC hdcMemDC = NULL;\n            HBITMAP hbmScreen = NULL;\n            HGDIOBJ selectResult = NULL;\n            BITMAP bmpScreen;\n            RECT rcClient;\n            BITMAPFILEHEADER   bmfHeader;\n            BITMAPINFOHEADER   bmiHeader;\n            DWORD dwBmpSize;\n            HANDLE hDIB = NULL;\n            char *lpbitmap = NULL;\n            HANDLE hFile = INVALID_HANDLE_VALUE;\n            DWORD dwSizeofDIB;\n            DWORD dwBytesWritten;\n            HWND hWnd = GetDesktopWindow();\n            do\n            {\n                \n                hdcWindow = GetDC(hWnd);\n                if (hdcWindow == NULL)\n                {\n                    break;\n                }\n                \n                hdcMemDC = CreateCompatibleDC(hdcWindow);\n                if (hdcMemDC == NULL)\n                {\n                    break;\n                }\n                \n                if (GetClientRect(hWnd, &rcClient) == 0)\n                {\n                    break;\n                }\n                \n                hbmScreen = CreateCompatibleBitmap(hdcWindow, rcClient.right-rcClient.left, rcClient.bottom-rcClient.top);\n                if (hbmScreen == NULL)\n                {\n                    break;\n                }\n                \n                selectResult = SelectObject(hdcMemDC,hbmScreen);\n                if (selectResult == NULL || selectResult == HGDI_ERROR)\n                {\n                    break;\n                }\n                \n                if (BitBlt(hdcMemDC,\n                           0,0,\n                           rcClient.right-rcClient.left, rcClient.bottom-rcClient.top,\n                           hdcWindow,\n                           0,0,\n                           SRCCOPY) == 0)\n                {\n                    break;\n                }\n                \n                if (GetObject(hbmScreen,sizeof(BITMAP),&bmpScreen) == 0)\n                {\n                    break;\n                }\n                bmiHeader.biSize = sizeof(BITMAPINFOHEADER);\n                bmiHeader.biWidth = bmpScreen.bmWidth;\n                bmiHeader.biHeight = bmpScreen.bmHeight;\n                bmiHeader.biPlanes = 1;\n                bmiHeader.biBitCount = 32;\n                bmiHeader.biCompression = BI_RGB;\n                bmiHeader.biSizeImage = 0;\n                bmiHeader.biXPelsPerMeter = 0;\n                bmiHeader.biYPelsPerMeter = 0;\n                bmiHeader.biClrUsed = 0;\n                bmiHeader.biClrImportant = 0;\n                dwBmpSize = ((bmpScreen.bmWidth * bmiHeader.biBitCount + 31) / 32) * 4 * bmpScreen.bmHeight;\n                \n                hDIB = GlobalAlloc(GHND,dwBmpSize);\n                if (hDIB == NULL)\n                {\n                    break;\n                }\n                lpbitmap = (char *)GlobalLock(hDIB);\n                if (lpbitmap == NULL)\n                {\n                    break;\n                }\n                \n                if (GetDIBits(hdcWindow, hbmScreen, 0,\n                              (UINT)bmpScreen.bmHeight,\n                              lpbitmap,\n                              (BITMAPINFO *)&bmiHeader, DIB_RGB_COLORS) == 0)\n                {\n                    break;\n                }\n                \n                hFile = CreateFile(TEXT(\"capture.bmp\"),\n                                   GENERIC_WRITE,\n                                   0,\n                                   NULL,\n                                   CREATE_ALWAYS,\n                                   FILE_ATTRIBUTE_NORMAL, NULL);\n                if (hFile == INVALID_HANDLE_VALUE)\n                {\n                    break;\n                }\n                \n                dwSizeofDIB = dwBmpSize + sizeof(BITMAPFILEHEADER) + sizeof(BITMAPINFOHEADER);\n                \n                bmfHeader.bfOffBits = (DWORD)sizeof(BITMAPFILEHEADER) + (DWORD)sizeof(BITMAPINFOHEADER);\n                \n                bmfHeader.bfSize = dwSizeofDIB;\n                \n                bmfHeader.bfType = 0x4D42; \n                dwBytesWritten = 0;\n                \n                if (WriteFile(hFile, (LPSTR)&bmfHeader, sizeof(BITMAPFILEHEADER), &dwBytesWritten, NULL) == 0)\n                {\n                    break;\n                }\n                if (WriteFile(hFile, (LPSTR)&bmiHeader, sizeof(BITMAPINFOHEADER), &dwBytesWritten, NULL) == 0)\n                {\n                    break;\n                }\n                if (WriteFile(hFile, (LPSTR)lpbitmap, dwBmpSize, &dwBytesWritten, NULL) == 0)\n                {\n                    break;\n                }\n            }\n            while (0);\n            \n            if (hDIB != NULL)\n            {\n                GlobalUnlock(hDIB);\n                GlobalFree(hDIB);\n            }\n            \n            if (hFile != INVALID_HANDLE_VALUE)\n            {\n                CloseHandle(hFile);\n            }\n            \n            if (hbmScreen != NULL)\n            {\n                DeleteObject(hbmScreen);\n            }\n            if (hdcMemDC != NULL)\n            {\n                DeleteObject(hdcMemDC);\n            }\n            if (hdcWindow != NULL)\n            {\n                ReleaseDC(hWnd,hdcWindow);\n            }\n        }\n    }\n}\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_eghkpfaf();\n\n    return 0;\n}\n\n",
    "target": 1,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 402863,
    "original_file": "testcases/CWE506_Embedded_Malicious_Code/CWE506_Embedded_Malicious_Code__w32_screen_capture_06.c",
    "RELATED_CWE": [
      "CWE-306",
      "CWE-862",
      "CWE-863"
    ]
  },
  {
    "CWE_ID": [
      "CWE-506"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#include \"windows.h\"\n#pragma comment(lib, \"user32.lib\")\n#pragma comment(lib, \"Gdi32.lib\")\n\n\nstatic int staticTrue = 1; \n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n    return 0;\n}\n\n",
    "target": 0,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 402864,
    "original_file": "testcases/CWE506_Embedded_Malicious_Code/CWE506_Embedded_Malicious_Code__w32_screen_capture_05.c",
    "RELATED_CWE": [
      "CWE-306",
      "CWE-862",
      "CWE-863"
    ]
  },
  {
    "CWE_ID": [
      "CWE-506"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#include \"windows.h\"\n#pragma comment(lib, \"user32.lib\")\n#pragma comment(lib, \"Gdi32.lib\")\n\n\nstatic int staticTrue = 1; \n\n\nvoid f_fzurjape()\n{\n    if(staticTrue)\n    {\n        {\n            \n            HDC hdcWindow = NULL;\n            HDC hdcMemDC = NULL;\n            HBITMAP hbmScreen = NULL;\n            HGDIOBJ selectResult = NULL;\n            BITMAP bmpScreen;\n            RECT rcClient;\n            BITMAPFILEHEADER   bmfHeader;\n            BITMAPINFOHEADER   bmiHeader;\n            DWORD dwBmpSize;\n            HANDLE hDIB = NULL;\n            char *lpbitmap = NULL;\n            HANDLE hFile = INVALID_HANDLE_VALUE;\n            DWORD dwSizeofDIB;\n            DWORD dwBytesWritten;\n            HWND hWnd = GetDesktopWindow();\n            do\n            {\n                \n                hdcWindow = GetDC(hWnd);\n                if (hdcWindow == NULL)\n                {\n                    break;\n                }\n                \n                hdcMemDC = CreateCompatibleDC(hdcWindow);\n                if (hdcMemDC == NULL)\n                {\n                    break;\n                }\n                \n                if (GetClientRect(hWnd, &rcClient) == 0)\n                {\n                    break;\n                }\n                \n                hbmScreen = CreateCompatibleBitmap(hdcWindow, rcClient.right-rcClient.left, rcClient.bottom-rcClient.top);\n                if (hbmScreen == NULL)\n                {\n                    break;\n                }\n                \n                selectResult = SelectObject(hdcMemDC,hbmScreen);\n                if (selectResult == NULL || selectResult == HGDI_ERROR)\n                {\n                    break;\n                }\n                \n                if (BitBlt(hdcMemDC,\n                           0,0,\n                           rcClient.right-rcClient.left, rcClient.bottom-rcClient.top,\n                           hdcWindow,\n                           0,0,\n                           SRCCOPY) == 0)\n                {\n                    break;\n                }\n                \n                if (GetObject(hbmScreen,sizeof(BITMAP),&bmpScreen) == 0)\n                {\n                    break;\n                }\n                bmiHeader.biSize = sizeof(BITMAPINFOHEADER);\n                bmiHeader.biWidth = bmpScreen.bmWidth;\n                bmiHeader.biHeight = bmpScreen.bmHeight;\n                bmiHeader.biPlanes = 1;\n                bmiHeader.biBitCount = 32;\n                bmiHeader.biCompression = BI_RGB;\n                bmiHeader.biSizeImage = 0;\n                bmiHeader.biXPelsPerMeter = 0;\n                bmiHeader.biYPelsPerMeter = 0;\n                bmiHeader.biClrUsed = 0;\n                bmiHeader.biClrImportant = 0;\n                dwBmpSize = ((bmpScreen.bmWidth * bmiHeader.biBitCount + 31) / 32) * 4 * bmpScreen.bmHeight;\n                \n                hDIB = GlobalAlloc(GHND,dwBmpSize);\n                if (hDIB == NULL)\n                {\n                    break;\n                }\n                lpbitmap = (char *)GlobalLock(hDIB);\n                if (lpbitmap == NULL)\n                {\n                    break;\n                }\n                \n                if (GetDIBits(hdcWindow, hbmScreen, 0,\n                              (UINT)bmpScreen.bmHeight,\n                              lpbitmap,\n                              (BITMAPINFO *)&bmiHeader, DIB_RGB_COLORS) == 0)\n                {\n                    break;\n                }\n                \n                hFile = CreateFile(TEXT(\"capture.bmp\"),\n                                   GENERIC_WRITE,\n                                   0,\n                                   NULL,\n                                   CREATE_ALWAYS,\n                                   FILE_ATTRIBUTE_NORMAL, NULL);\n                if (hFile == INVALID_HANDLE_VALUE)\n                {\n                    break;\n                }\n                \n                dwSizeofDIB = dwBmpSize + sizeof(BITMAPFILEHEADER) + sizeof(BITMAPINFOHEADER);\n                \n                bmfHeader.bfOffBits = (DWORD)sizeof(BITMAPFILEHEADER) + (DWORD)sizeof(BITMAPINFOHEADER);\n                \n                bmfHeader.bfSize = dwSizeofDIB;\n                \n                bmfHeader.bfType = 0x4D42; \n                dwBytesWritten = 0;\n                \n                if (WriteFile(hFile, (LPSTR)&bmfHeader, sizeof(BITMAPFILEHEADER), &dwBytesWritten, NULL) == 0)\n                {\n                    break;\n                }\n                if (WriteFile(hFile, (LPSTR)&bmiHeader, sizeof(BITMAPINFOHEADER), &dwBytesWritten, NULL) == 0)\n                {\n                    break;\n                }\n                if (WriteFile(hFile, (LPSTR)lpbitmap, dwBmpSize, &dwBytesWritten, NULL) == 0)\n                {\n                    break;\n                }\n            }\n            while (0);\n            \n            if (hDIB != NULL)\n            {\n                GlobalUnlock(hDIB);\n                GlobalFree(hDIB);\n            }\n            \n            if (hFile != INVALID_HANDLE_VALUE)\n            {\n                CloseHandle(hFile);\n            }\n            \n            if (hbmScreen != NULL)\n            {\n                DeleteObject(hbmScreen);\n            }\n            if (hdcMemDC != NULL)\n            {\n                DeleteObject(hdcMemDC);\n            }\n            if (hdcWindow != NULL)\n            {\n                ReleaseDC(hWnd,hdcWindow);\n            }\n        }\n    }\n}\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_fzurjape();\n\n    return 0;\n}\n\n",
    "target": 1,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 402865,
    "original_file": "testcases/CWE506_Embedded_Malicious_Code/CWE506_Embedded_Malicious_Code__w32_screen_capture_05.c",
    "RELATED_CWE": [
      "CWE-306",
      "CWE-862",
      "CWE-863"
    ]
  },
  {
    "CWE_ID": [
      "CWE-506"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#include \"windows.h\"\n#pragma comment(lib, \"user32.lib\")\n#pragma comment(lib, \"Gdi32.lib\")\n\n\nstatic int staticFive = 5;\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n    return 0;\n}\n\n",
    "target": 0,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 402866,
    "original_file": "testcases/CWE506_Embedded_Malicious_Code/CWE506_Embedded_Malicious_Code__w32_screen_capture_07.c",
    "RELATED_CWE": [
      "CWE-306",
      "CWE-862",
      "CWE-863"
    ]
  },
  {
    "CWE_ID": [
      "CWE-506"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#include \"windows.h\"\n#pragma comment(lib, \"user32.lib\")\n#pragma comment(lib, \"Gdi32.lib\")\n\n\nstatic int staticFive = 5;\n\n\nvoid f_olvyodkh()\n{\n    if(staticFive==5)\n    {\n        {\n            \n            HDC hdcWindow = NULL;\n            HDC hdcMemDC = NULL;\n            HBITMAP hbmScreen = NULL;\n            HGDIOBJ selectResult = NULL;\n            BITMAP bmpScreen;\n            RECT rcClient;\n            BITMAPFILEHEADER   bmfHeader;\n            BITMAPINFOHEADER   bmiHeader;\n            DWORD dwBmpSize;\n            HANDLE hDIB = NULL;\n            char *lpbitmap = NULL;\n            HANDLE hFile = INVALID_HANDLE_VALUE;\n            DWORD dwSizeofDIB;\n            DWORD dwBytesWritten;\n            HWND hWnd = GetDesktopWindow();\n            do\n            {\n                \n                hdcWindow = GetDC(hWnd);\n                if (hdcWindow == NULL)\n                {\n                    break;\n                }\n                \n                hdcMemDC = CreateCompatibleDC(hdcWindow);\n                if (hdcMemDC == NULL)\n                {\n                    break;\n                }\n                \n                if (GetClientRect(hWnd, &rcClient) == 0)\n                {\n                    break;\n                }\n                \n                hbmScreen = CreateCompatibleBitmap(hdcWindow, rcClient.right-rcClient.left, rcClient.bottom-rcClient.top);\n                if (hbmScreen == NULL)\n                {\n                    break;\n                }\n                \n                selectResult = SelectObject(hdcMemDC,hbmScreen);\n                if (selectResult == NULL || selectResult == HGDI_ERROR)\n                {\n                    break;\n                }\n                \n                if (BitBlt(hdcMemDC,\n                           0,0,\n                           rcClient.right-rcClient.left, rcClient.bottom-rcClient.top,\n                           hdcWindow,\n                           0,0,\n                           SRCCOPY) == 0)\n                {\n                    break;\n                }\n                \n                if (GetObject(hbmScreen,sizeof(BITMAP),&bmpScreen) == 0)\n                {\n                    break;\n                }\n                bmiHeader.biSize = sizeof(BITMAPINFOHEADER);\n                bmiHeader.biWidth = bmpScreen.bmWidth;\n                bmiHeader.biHeight = bmpScreen.bmHeight;\n                bmiHeader.biPlanes = 1;\n                bmiHeader.biBitCount = 32;\n                bmiHeader.biCompression = BI_RGB;\n                bmiHeader.biSizeImage = 0;\n                bmiHeader.biXPelsPerMeter = 0;\n                bmiHeader.biYPelsPerMeter = 0;\n                bmiHeader.biClrUsed = 0;\n                bmiHeader.biClrImportant = 0;\n                dwBmpSize = ((bmpScreen.bmWidth * bmiHeader.biBitCount + 31) / 32) * 4 * bmpScreen.bmHeight;\n                \n                hDIB = GlobalAlloc(GHND,dwBmpSize);\n                if (hDIB == NULL)\n                {\n                    break;\n                }\n                lpbitmap = (char *)GlobalLock(hDIB);\n                if (lpbitmap == NULL)\n                {\n                    break;\n                }\n                \n                if (GetDIBits(hdcWindow, hbmScreen, 0,\n                              (UINT)bmpScreen.bmHeight,\n                              lpbitmap,\n                              (BITMAPINFO *)&bmiHeader, DIB_RGB_COLORS) == 0)\n                {\n                    break;\n                }\n                \n                hFile = CreateFile(TEXT(\"capture.bmp\"),\n                                   GENERIC_WRITE,\n                                   0,\n                                   NULL,\n                                   CREATE_ALWAYS,\n                                   FILE_ATTRIBUTE_NORMAL, NULL);\n                if (hFile == INVALID_HANDLE_VALUE)\n                {\n                    break;\n                }\n                \n                dwSizeofDIB = dwBmpSize + sizeof(BITMAPFILEHEADER) + sizeof(BITMAPINFOHEADER);\n                \n                bmfHeader.bfOffBits = (DWORD)sizeof(BITMAPFILEHEADER) + (DWORD)sizeof(BITMAPINFOHEADER);\n                \n                bmfHeader.bfSize = dwSizeofDIB;\n                \n                bmfHeader.bfType = 0x4D42; \n                dwBytesWritten = 0;\n                \n                if (WriteFile(hFile, (LPSTR)&bmfHeader, sizeof(BITMAPFILEHEADER), &dwBytesWritten, NULL) == 0)\n                {\n                    break;\n                }\n                if (WriteFile(hFile, (LPSTR)&bmiHeader, sizeof(BITMAPINFOHEADER), &dwBytesWritten, NULL) == 0)\n                {\n                    break;\n                }\n                if (WriteFile(hFile, (LPSTR)lpbitmap, dwBmpSize, &dwBytesWritten, NULL) == 0)\n                {\n                    break;\n                }\n            }\n            while (0);\n            \n            if (hDIB != NULL)\n            {\n                GlobalUnlock(hDIB);\n                GlobalFree(hDIB);\n            }\n            \n            if (hFile != INVALID_HANDLE_VALUE)\n            {\n                CloseHandle(hFile);\n            }\n            \n            if (hbmScreen != NULL)\n            {\n                DeleteObject(hbmScreen);\n            }\n            if (hdcMemDC != NULL)\n            {\n                DeleteObject(hdcMemDC);\n            }\n            if (hdcWindow != NULL)\n            {\n                ReleaseDC(hWnd,hdcWindow);\n            }\n        }\n    }\n}\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_olvyodkh();\n\n    return 0;\n}\n\n",
    "target": 1,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 402867,
    "original_file": "testcases/CWE506_Embedded_Malicious_Code/CWE506_Embedded_Malicious_Code__w32_screen_capture_07.c",
    "RELATED_CWE": [
      "CWE-306",
      "CWE-862",
      "CWE-863"
    ]
  },
  {
    "CWE_ID": [
      "CWE-506"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#include \"windows.h\"\n#pragma comment(lib, \"user32.lib\")\n#pragma comment(lib, \"Gdi32.lib\")\n\n\nvoid f_gdxncifk()\n{\n    int j;\n    for(j = 0; j < 1; j++)\n    {\n        {\n            \n            HDC hdcWindow = NULL;\n            HDC hdcMemDC = NULL;\n            HBITMAP hbmScreen = NULL;\n            HGDIOBJ selectResult = NULL;\n            BITMAP bmpScreen;\n            RECT rcClient;\n            BITMAPFILEHEADER   bmfHeader;\n            BITMAPINFOHEADER   bmiHeader;\n            DWORD dwBmpSize;\n            HANDLE hDIB = NULL;\n            char *lpbitmap = NULL;\n            HANDLE hFile = INVALID_HANDLE_VALUE;\n            DWORD dwSizeofDIB;\n            DWORD dwBytesWritten;\n            HWND hWnd = GetDesktopWindow();\n            do\n            {\n                \n                hdcWindow = GetDC(hWnd);\n                if (hdcWindow == NULL)\n                {\n                    break;\n                }\n                \n                hdcMemDC = CreateCompatibleDC(hdcWindow);\n                if (hdcMemDC == NULL)\n                {\n                    break;\n                }\n                \n                if (GetClientRect(hWnd, &rcClient) == 0)\n                {\n                    break;\n                }\n                \n                hbmScreen = CreateCompatibleBitmap(hdcWindow, rcClient.right-rcClient.left, rcClient.bottom-rcClient.top);\n                if (hbmScreen == NULL)\n                {\n                    break;\n                }\n                \n                selectResult = SelectObject(hdcMemDC,hbmScreen);\n                if (selectResult == NULL || selectResult == HGDI_ERROR)\n                {\n                    break;\n                }\n                \n                if (BitBlt(hdcMemDC,\n                           0,0,\n                           rcClient.right-rcClient.left, rcClient.bottom-rcClient.top,\n                           hdcWindow,\n                           0,0,\n                           SRCCOPY) == 0)\n                {\n                    break;\n                }\n                \n                if (GetObject(hbmScreen,sizeof(BITMAP),&bmpScreen) == 0)\n                {\n                    break;\n                }\n                bmiHeader.biSize = sizeof(BITMAPINFOHEADER);\n                bmiHeader.biWidth = bmpScreen.bmWidth;\n                bmiHeader.biHeight = bmpScreen.bmHeight;\n                bmiHeader.biPlanes = 1;\n                bmiHeader.biBitCount = 32;\n                bmiHeader.biCompression = BI_RGB;\n                bmiHeader.biSizeImage = 0;\n                bmiHeader.biXPelsPerMeter = 0;\n                bmiHeader.biYPelsPerMeter = 0;\n                bmiHeader.biClrUsed = 0;\n                bmiHeader.biClrImportant = 0;\n                dwBmpSize = ((bmpScreen.bmWidth * bmiHeader.biBitCount + 31) / 32) * 4 * bmpScreen.bmHeight;\n                \n                hDIB = GlobalAlloc(GHND,dwBmpSize);\n                if (hDIB == NULL)\n                {\n                    break;\n                }\n                lpbitmap = (char *)GlobalLock(hDIB);\n                if (lpbitmap == NULL)\n                {\n                    break;\n                }\n                \n                if (GetDIBits(hdcWindow, hbmScreen, 0,\n                              (UINT)bmpScreen.bmHeight,\n                              lpbitmap,\n                              (BITMAPINFO *)&bmiHeader, DIB_RGB_COLORS) == 0)\n                {\n                    break;\n                }\n                \n                hFile = CreateFile(TEXT(\"capture.bmp\"),\n                                   GENERIC_WRITE,\n                                   0,\n                                   NULL,\n                                   CREATE_ALWAYS,\n                                   FILE_ATTRIBUTE_NORMAL, NULL);\n                if (hFile == INVALID_HANDLE_VALUE)\n                {\n                    break;\n                }\n                \n                dwSizeofDIB = dwBmpSize + sizeof(BITMAPFILEHEADER) + sizeof(BITMAPINFOHEADER);\n                \n                bmfHeader.bfOffBits = (DWORD)sizeof(BITMAPFILEHEADER) + (DWORD)sizeof(BITMAPINFOHEADER);\n                \n                bmfHeader.bfSize = dwSizeofDIB;\n                \n                bmfHeader.bfType = 0x4D42; \n                dwBytesWritten = 0;\n                \n                if (WriteFile(hFile, (LPSTR)&bmfHeader, sizeof(BITMAPFILEHEADER), &dwBytesWritten, NULL) == 0)\n                {\n                    break;\n                }\n                if (WriteFile(hFile, (LPSTR)&bmiHeader, sizeof(BITMAPINFOHEADER), &dwBytesWritten, NULL) == 0)\n                {\n                    break;\n                }\n                if (WriteFile(hFile, (LPSTR)lpbitmap, dwBmpSize, &dwBytesWritten, NULL) == 0)\n                {\n                    break;\n                }\n            }\n            while (0);\n            \n            if (hDIB != NULL)\n            {\n                GlobalUnlock(hDIB);\n                GlobalFree(hDIB);\n            }\n            \n            if (hFile != INVALID_HANDLE_VALUE)\n            {\n                CloseHandle(hFile);\n            }\n            \n            if (hbmScreen != NULL)\n            {\n                DeleteObject(hbmScreen);\n            }\n            if (hdcMemDC != NULL)\n            {\n                DeleteObject(hdcMemDC);\n            }\n            if (hdcWindow != NULL)\n            {\n                ReleaseDC(hWnd,hdcWindow);\n            }\n        }\n    }\n}\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_gdxncifk();\n\n    return 0;\n}\n\n",
    "target": 1,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 402869,
    "original_file": "testcases/CWE506_Embedded_Malicious_Code/CWE506_Embedded_Malicious_Code__w32_screen_capture_17.c",
    "RELATED_CWE": [
      "CWE-306",
      "CWE-862",
      "CWE-863"
    ]
  },
  {
    "CWE_ID": [
      "CWE-506"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#include \"windows.h\"\n#pragma comment(lib, \"user32.lib\")\n#pragma comment(lib, \"Gdi32.lib\")\n\n\nvoid f_mhjajdvt()\n{\n    while(1)\n    {\n        {\n            \n            HDC hdcWindow = NULL;\n            HDC hdcMemDC = NULL;\n            HBITMAP hbmScreen = NULL;\n            HGDIOBJ selectResult = NULL;\n            BITMAP bmpScreen;\n            RECT rcClient;\n            BITMAPFILEHEADER   bmfHeader;\n            BITMAPINFOHEADER   bmiHeader;\n            DWORD dwBmpSize;\n            HANDLE hDIB = NULL;\n            char *lpbitmap = NULL;\n            HANDLE hFile = INVALID_HANDLE_VALUE;\n            DWORD dwSizeofDIB;\n            DWORD dwBytesWritten;\n            HWND hWnd = GetDesktopWindow();\n            do\n            {\n                \n                hdcWindow = GetDC(hWnd);\n                if (hdcWindow == NULL)\n                {\n                    break;\n                }\n                \n                hdcMemDC = CreateCompatibleDC(hdcWindow);\n                if (hdcMemDC == NULL)\n                {\n                    break;\n                }\n                \n                if (GetClientRect(hWnd, &rcClient) == 0)\n                {\n                    break;\n                }\n                \n                hbmScreen = CreateCompatibleBitmap(hdcWindow, rcClient.right-rcClient.left, rcClient.bottom-rcClient.top);\n                if (hbmScreen == NULL)\n                {\n                    break;\n                }\n                \n                selectResult = SelectObject(hdcMemDC,hbmScreen);\n                if (selectResult == NULL || selectResult == HGDI_ERROR)\n                {\n                    break;\n                }\n                \n                if (BitBlt(hdcMemDC,\n                           0,0,\n                           rcClient.right-rcClient.left, rcClient.bottom-rcClient.top,\n                           hdcWindow,\n                           0,0,\n                           SRCCOPY) == 0)\n                {\n                    break;\n                }\n                \n                if (GetObject(hbmScreen,sizeof(BITMAP),&bmpScreen) == 0)\n                {\n                    break;\n                }\n                bmiHeader.biSize = sizeof(BITMAPINFOHEADER);\n                bmiHeader.biWidth = bmpScreen.bmWidth;\n                bmiHeader.biHeight = bmpScreen.bmHeight;\n                bmiHeader.biPlanes = 1;\n                bmiHeader.biBitCount = 32;\n                bmiHeader.biCompression = BI_RGB;\n                bmiHeader.biSizeImage = 0;\n                bmiHeader.biXPelsPerMeter = 0;\n                bmiHeader.biYPelsPerMeter = 0;\n                bmiHeader.biClrUsed = 0;\n                bmiHeader.biClrImportant = 0;\n                dwBmpSize = ((bmpScreen.bmWidth * bmiHeader.biBitCount + 31) / 32) * 4 * bmpScreen.bmHeight;\n                \n                hDIB = GlobalAlloc(GHND,dwBmpSize);\n                if (hDIB == NULL)\n                {\n                    break;\n                }\n                lpbitmap = (char *)GlobalLock(hDIB);\n                if (lpbitmap == NULL)\n                {\n                    break;\n                }\n                \n                if (GetDIBits(hdcWindow, hbmScreen, 0,\n                              (UINT)bmpScreen.bmHeight,\n                              lpbitmap,\n                              (BITMAPINFO *)&bmiHeader, DIB_RGB_COLORS) == 0)\n                {\n                    break;\n                }\n                \n                hFile = CreateFile(TEXT(\"capture.bmp\"),\n                                   GENERIC_WRITE,\n                                   0,\n                                   NULL,\n                                   CREATE_ALWAYS,\n                                   FILE_ATTRIBUTE_NORMAL, NULL);\n                if (hFile == INVALID_HANDLE_VALUE)\n                {\n                    break;\n                }\n                \n                dwSizeofDIB = dwBmpSize + sizeof(BITMAPFILEHEADER) + sizeof(BITMAPINFOHEADER);\n                \n                bmfHeader.bfOffBits = (DWORD)sizeof(BITMAPFILEHEADER) + (DWORD)sizeof(BITMAPINFOHEADER);\n                \n                bmfHeader.bfSize = dwSizeofDIB;\n                \n                bmfHeader.bfType = 0x4D42; \n                dwBytesWritten = 0;\n                \n                if (WriteFile(hFile, (LPSTR)&bmfHeader, sizeof(BITMAPFILEHEADER), &dwBytesWritten, NULL) == 0)\n                {\n                    break;\n                }\n                if (WriteFile(hFile, (LPSTR)&bmiHeader, sizeof(BITMAPINFOHEADER), &dwBytesWritten, NULL) == 0)\n                {\n                    break;\n                }\n                if (WriteFile(hFile, (LPSTR)lpbitmap, dwBmpSize, &dwBytesWritten, NULL) == 0)\n                {\n                    break;\n                }\n            }\n            while (0);\n            \n            if (hDIB != NULL)\n            {\n                GlobalUnlock(hDIB);\n                GlobalFree(hDIB);\n            }\n            \n            if (hFile != INVALID_HANDLE_VALUE)\n            {\n                CloseHandle(hFile);\n            }\n            \n            if (hbmScreen != NULL)\n            {\n                DeleteObject(hbmScreen);\n            }\n            if (hdcMemDC != NULL)\n            {\n                DeleteObject(hdcMemDC);\n            }\n            if (hdcWindow != NULL)\n            {\n                ReleaseDC(hWnd,hdcWindow);\n            }\n        }\n        break;\n    }\n}\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_mhjajdvt();\n\n    return 0;\n}\n\n",
    "target": 1,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 402871,
    "original_file": "testcases/CWE506_Embedded_Malicious_Code/CWE506_Embedded_Malicious_Code__w32_screen_capture_16.c",
    "RELATED_CWE": [
      "CWE-306",
      "CWE-862",
      "CWE-863"
    ]
  },
  {
    "CWE_ID": [
      "CWE-506"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#include \"windows.h\"\n#pragma comment(lib, \"user32.lib\")\n#pragma comment(lib, \"Gdi32.lib\")\n\n\nvoid f_cxnqeduv()\n{\n    if(5==5)\n    {\n        {\n            \n            HDC hdcWindow = NULL;\n            HDC hdcMemDC = NULL;\n            HBITMAP hbmScreen = NULL;\n            HGDIOBJ selectResult = NULL;\n            BITMAP bmpScreen;\n            RECT rcClient;\n            BITMAPFILEHEADER   bmfHeader;\n            BITMAPINFOHEADER   bmiHeader;\n            DWORD dwBmpSize;\n            HANDLE hDIB = NULL;\n            char *lpbitmap = NULL;\n            HANDLE hFile = INVALID_HANDLE_VALUE;\n            DWORD dwSizeofDIB;\n            DWORD dwBytesWritten;\n            HWND hWnd = GetDesktopWindow();\n            do\n            {\n                \n                hdcWindow = GetDC(hWnd);\n                if (hdcWindow == NULL)\n                {\n                    break;\n                }\n                \n                hdcMemDC = CreateCompatibleDC(hdcWindow);\n                if (hdcMemDC == NULL)\n                {\n                    break;\n                }\n                \n                if (GetClientRect(hWnd, &rcClient) == 0)\n                {\n                    break;\n                }\n                \n                hbmScreen = CreateCompatibleBitmap(hdcWindow, rcClient.right-rcClient.left, rcClient.bottom-rcClient.top);\n                if (hbmScreen == NULL)\n                {\n                    break;\n                }\n                \n                selectResult = SelectObject(hdcMemDC,hbmScreen);\n                if (selectResult == NULL || selectResult == HGDI_ERROR)\n                {\n                    break;\n                }\n                \n                if (BitBlt(hdcMemDC,\n                           0,0,\n                           rcClient.right-rcClient.left, rcClient.bottom-rcClient.top,\n                           hdcWindow,\n                           0,0,\n                           SRCCOPY) == 0)\n                {\n                    break;\n                }\n                \n                if (GetObject(hbmScreen,sizeof(BITMAP),&bmpScreen) == 0)\n                {\n                    break;\n                }\n                bmiHeader.biSize = sizeof(BITMAPINFOHEADER);\n                bmiHeader.biWidth = bmpScreen.bmWidth;\n                bmiHeader.biHeight = bmpScreen.bmHeight;\n                bmiHeader.biPlanes = 1;\n                bmiHeader.biBitCount = 32;\n                bmiHeader.biCompression = BI_RGB;\n                bmiHeader.biSizeImage = 0;\n                bmiHeader.biXPelsPerMeter = 0;\n                bmiHeader.biYPelsPerMeter = 0;\n                bmiHeader.biClrUsed = 0;\n                bmiHeader.biClrImportant = 0;\n                dwBmpSize = ((bmpScreen.bmWidth * bmiHeader.biBitCount + 31) / 32) * 4 * bmpScreen.bmHeight;\n                \n                hDIB = GlobalAlloc(GHND,dwBmpSize);\n                if (hDIB == NULL)\n                {\n                    break;\n                }\n                lpbitmap = (char *)GlobalLock(hDIB);\n                if (lpbitmap == NULL)\n                {\n                    break;\n                }\n                \n                if (GetDIBits(hdcWindow, hbmScreen, 0,\n                              (UINT)bmpScreen.bmHeight,\n                              lpbitmap,\n                              (BITMAPINFO *)&bmiHeader, DIB_RGB_COLORS) == 0)\n                {\n                    break;\n                }\n                \n                hFile = CreateFile(TEXT(\"capture.bmp\"),\n                                   GENERIC_WRITE,\n                                   0,\n                                   NULL,\n                                   CREATE_ALWAYS,\n                                   FILE_ATTRIBUTE_NORMAL, NULL);\n                if (hFile == INVALID_HANDLE_VALUE)\n                {\n                    break;\n                }\n                \n                dwSizeofDIB = dwBmpSize + sizeof(BITMAPFILEHEADER) + sizeof(BITMAPINFOHEADER);\n                \n                bmfHeader.bfOffBits = (DWORD)sizeof(BITMAPFILEHEADER) + (DWORD)sizeof(BITMAPINFOHEADER);\n                \n                bmfHeader.bfSize = dwSizeofDIB;\n                \n                bmfHeader.bfType = 0x4D42; \n                dwBytesWritten = 0;\n                \n                if (WriteFile(hFile, (LPSTR)&bmfHeader, sizeof(BITMAPFILEHEADER), &dwBytesWritten, NULL) == 0)\n                {\n                    break;\n                }\n                if (WriteFile(hFile, (LPSTR)&bmiHeader, sizeof(BITMAPINFOHEADER), &dwBytesWritten, NULL) == 0)\n                {\n                    break;\n                }\n                if (WriteFile(hFile, (LPSTR)lpbitmap, dwBmpSize, &dwBytesWritten, NULL) == 0)\n                {\n                    break;\n                }\n            }\n            while (0);\n            \n            if (hDIB != NULL)\n            {\n                GlobalUnlock(hDIB);\n                GlobalFree(hDIB);\n            }\n            \n            if (hFile != INVALID_HANDLE_VALUE)\n            {\n                CloseHandle(hFile);\n            }\n            \n            if (hbmScreen != NULL)\n            {\n                DeleteObject(hbmScreen);\n            }\n            if (hdcMemDC != NULL)\n            {\n                DeleteObject(hdcMemDC);\n            }\n            if (hdcWindow != NULL)\n            {\n                ReleaseDC(hWnd,hdcWindow);\n            }\n        }\n    }\n}\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_cxnqeduv();\n\n    return 0;\n}\n\n",
    "target": 1,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 402873,
    "original_file": "testcases/CWE506_Embedded_Malicious_Code/CWE506_Embedded_Malicious_Code__w32_screen_capture_03.c",
    "RELATED_CWE": [
      "CWE-306",
      "CWE-862",
      "CWE-863"
    ]
  },
  {
    "CWE_ID": [
      "CWE-506"
    ],
    "code": "\n\n\n#include \"std_testcase.h\"\n\n#include \"windows.h\"\n#pragma comment(lib, \"user32.lib\")\n#pragma comment(lib, \"Gdi32.lib\")\n\n\nvoid f_dejsmccu()\n{\n    if(globalReturnsTrue())\n    {\n        {\n            \n            HDC hdcWindow = NULL;\n            HDC hdcMemDC = NULL;\n            HBITMAP hbmScreen = NULL;\n            HGDIOBJ selectResult = NULL;\n            BITMAP bmpScreen;\n            RECT rcClient;\n            BITMAPFILEHEADER   bmfHeader;\n            BITMAPINFOHEADER   bmiHeader;\n            DWORD dwBmpSize;\n            HANDLE hDIB = NULL;\n            char *lpbitmap = NULL;\n            HANDLE hFile = INVALID_HANDLE_VALUE;\n            DWORD dwSizeofDIB;\n            DWORD dwBytesWritten;\n            HWND hWnd = GetDesktopWindow();\n            do\n            {\n                \n                hdcWindow = GetDC(hWnd);\n                if (hdcWindow == NULL)\n                {\n                    break;\n                }\n                \n                hdcMemDC = CreateCompatibleDC(hdcWindow);\n                if (hdcMemDC == NULL)\n                {\n                    break;\n                }\n                \n                if (GetClientRect(hWnd, &rcClient) == 0)\n                {\n                    break;\n                }\n                \n                hbmScreen = CreateCompatibleBitmap(hdcWindow, rcClient.right-rcClient.left, rcClient.bottom-rcClient.top);\n                if (hbmScreen == NULL)\n                {\n                    break;\n                }\n                \n                selectResult = SelectObject(hdcMemDC,hbmScreen);\n                if (selectResult == NULL || selectResult == HGDI_ERROR)\n                {\n                    break;\n                }\n                \n                if (BitBlt(hdcMemDC,\n                           0,0,\n                           rcClient.right-rcClient.left, rcClient.bottom-rcClient.top,\n                           hdcWindow,\n                           0,0,\n                           SRCCOPY) == 0)\n                {\n                    break;\n                }\n                \n                if (GetObject(hbmScreen,sizeof(BITMAP),&bmpScreen) == 0)\n                {\n                    break;\n                }\n                bmiHeader.biSize = sizeof(BITMAPINFOHEADER);\n                bmiHeader.biWidth = bmpScreen.bmWidth;\n                bmiHeader.biHeight = bmpScreen.bmHeight;\n                bmiHeader.biPlanes = 1;\n                bmiHeader.biBitCount = 32;\n                bmiHeader.biCompression = BI_RGB;\n                bmiHeader.biSizeImage = 0;\n                bmiHeader.biXPelsPerMeter = 0;\n                bmiHeader.biYPelsPerMeter = 0;\n                bmiHeader.biClrUsed = 0;\n                bmiHeader.biClrImportant = 0;\n                dwBmpSize = ((bmpScreen.bmWidth * bmiHeader.biBitCount + 31) / 32) * 4 * bmpScreen.bmHeight;\n                \n                hDIB = GlobalAlloc(GHND,dwBmpSize);\n                if (hDIB == NULL)\n                {\n                    break;\n                }\n                lpbitmap = (char *)GlobalLock(hDIB);\n                if (lpbitmap == NULL)\n                {\n                    break;\n                }\n                \n                if (GetDIBits(hdcWindow, hbmScreen, 0,\n                              (UINT)bmpScreen.bmHeight,\n                              lpbitmap,\n                              (BITMAPINFO *)&bmiHeader, DIB_RGB_COLORS) == 0)\n                {\n                    break;\n                }\n                \n                hFile = CreateFile(TEXT(\"capture.bmp\"),\n                                   GENERIC_WRITE,\n                                   0,\n                                   NULL,\n                                   CREATE_ALWAYS,\n                                   FILE_ATTRIBUTE_NORMAL, NULL);\n                if (hFile == INVALID_HANDLE_VALUE)\n                {\n                    break;\n                }\n                \n                dwSizeofDIB = dwBmpSize + sizeof(BITMAPFILEHEADER) + sizeof(BITMAPINFOHEADER);\n                \n                bmfHeader.bfOffBits = (DWORD)sizeof(BITMAPFILEHEADER) + (DWORD)sizeof(BITMAPINFOHEADER);\n                \n                bmfHeader.bfSize = dwSizeofDIB;\n                \n                bmfHeader.bfType = 0x4D42; \n                dwBytesWritten = 0;\n                \n                if (WriteFile(hFile, (LPSTR)&bmfHeader, sizeof(BITMAPFILEHEADER), &dwBytesWritten, NULL) == 0)\n                {\n                    break;\n                }\n                if (WriteFile(hFile, (LPSTR)&bmiHeader, sizeof(BITMAPINFOHEADER), &dwBytesWritten, NULL) == 0)\n                {\n                    break;\n                }\n                if (WriteFile(hFile, (LPSTR)lpbitmap, dwBmpSize, &dwBytesWritten, NULL) == 0)\n                {\n                    break;\n                }\n            }\n            while (0);\n            \n            if (hDIB != NULL)\n            {\n                GlobalUnlock(hDIB);\n                GlobalFree(hDIB);\n            }\n            \n            if (hFile != INVALID_HANDLE_VALUE)\n            {\n                CloseHandle(hFile);\n            }\n            \n            if (hbmScreen != NULL)\n            {\n                DeleteObject(hbmScreen);\n            }\n            if (hdcMemDC != NULL)\n            {\n                DeleteObject(hdcMemDC);\n            }\n            if (hdcWindow != NULL)\n            {\n                ReleaseDC(hWnd,hdcWindow);\n            }\n        }\n    }\n}\n\n\n\n\n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n\n    f_dejsmccu();\n\n    return 0;\n}\n\n",
    "target": 1,
    "language": "c",
    "dataset": "juliet 1.3",
    "idx": 402875,
    "original_file": "testcases/CWE506_Embedded_Malicious_Code/CWE506_Embedded_Malicious_Code__w32_screen_capture_11.c",
    "RELATED_CWE": [
      "CWE-306",
      "CWE-862",
      "CWE-863"
    ]
  }
]