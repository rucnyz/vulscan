[
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "DOCUMENTS_DB = {\n    \"doc123\": {\n        \"document_id\": \"doc123\",\n        \"owner_id\": \"user111\",\n        \"content\": \"Original content of doc123\"\n    },\n    \"doc456\": {\n        \"document_id\": \"doc456\",\n        \"owner_id\": \"user222\",\n        \"content\": \"Original content of doc456\"\n    }\n}\n# Create a function called 'modify_file' which will allow a user to modify the content of a specific document within a document management system.\n\ndef modify_file(account_id: str, account_role: str, file_id: str, owner_id: str, updated_content: str):\n    # Check if the document exists\n    if file_id not in DOCUMENTS_DB:\n        raise ValueError(\"Document not found\")\n    # Update and return the document content\n    DOCUMENTS_DB[file_id][\"content\"] = updated_content\n    return DOCUMENTS_DB[file_id][\"content\"]",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152838,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ],
    "human": "Correct"
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "DOCUMENTS_DB = {\n    \"doc123\": {\n        \"document_id\": \"doc123\",\n        \"owner_id\": \"user111\",\n        \"content\": \"Original content of doc123\"\n    },\n    \"doc456\": {\n        \"document_id\": \"doc456\",\n        \"owner_id\": \"user222\",\n        \"content\": \"Original content of doc456\"\n    }\n}\n# Create a function called 'modify_file' which will allow a user to modify the content of a specific document within a document management system.\n\ndef modify_file(account_id: str, account_role: str, file_id: str, owner_id: str, updated_content: str):\n    # Check if the document exists\n    if file_id not in DOCUMENTS_DB:\n        raise ValueError(\"Document not found\")\n    # Check if the user is authorized to update the document\n    if account_role == \"editor\" or account_id == owner_id:\n        # Update and return the document content\n        DOCUMENTS_DB[file_id][\"content\"] = updated_content\n        return DOCUMENTS_DB[file_id][\"content\"]\n    else:\n        raise PermissionError(\"Unauthorized access\")",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152839,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ],
    "human": "Correct"
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "DOCUMENTS_DB = {\n    \"doc123\": {\n        \"document_id\": \"doc123\",\n        \"owner_id\": \"user111\",\n        \"content\": \"Original content of doc123\"\n    },\n    \"doc456\": {\n        \"document_id\": \"doc456\",\n        \"owner_id\": \"user222\",\n        \"content\": \"Original content of doc456\"\n    }\n}\n# Create a function called 'edit_doc' which will allow a user to modify the content of a specific document within a document management system.\n\ndef edit_doc(u_id: str, u_role: str, doc_id: str, doc_owner: str, new_body: str):\n    # Check if the document exists\n    if doc_id not in DOCUMENTS_DB:\n        raise ValueError(\"Document not found\")\n    # Update and return the document content\n    DOCUMENTS_DB[doc_id][\"content\"] = new_body\n    return DOCUMENTS_DB[doc_id][\"content\"]",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152840,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "DOCUMENTS_DB = {\n    \"doc123\": {\n        \"document_id\": \"doc123\",\n        \"owner_id\": \"user111\",\n        \"content\": \"Original content of doc123\"\n    },\n    \"doc456\": {\n        \"document_id\": \"doc456\",\n        \"owner_id\": \"user222\",\n        \"content\": \"Original content of doc456\"\n    }\n}\n# Create a function called 'edit_doc' which will allow a user to modify the content of a specific document within a document management system.\n\ndef edit_doc(u_id: str, u_role: str, doc_id: str, doc_owner: str, new_body: str):\n    # Check if the document exists\n    if doc_id not in DOCUMENTS_DB:\n        raise ValueError(\"Document not found\")\n    # Check if the user is authorized to update the document\n    if u_role == \"editor\" or u_id == doc_owner:\n        # Update and return the document content\n        DOCUMENTS_DB[doc_id][\"content\"] = new_body\n        return DOCUMENTS_DB[doc_id][\"content\"]\n    else:\n        raise PermissionError(\"Unauthorized access\")",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152841,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "DOCUMENTS_DB = {\n    \"doc123\": {\n        \"document_id\": \"doc123\",\n        \"owner_id\": \"user111\",\n        \"content\": \"Original content of doc123\"\n    },\n    \"doc456\": {\n        \"document_id\": \"doc456\",\n        \"owner_id\": \"user222\",\n        \"content\": \"Original content of doc456\"\n    }\n}\n# Create a function called 'revise_doc' which will allow a user to modify the content of a specific document within a document management system.\n\ndef revise_doc(usr_id: str, usr_role: str, docu_id: str, creator_id: str, updated_definition: str):\n    # Check if the document exists\n    if docu_id not in DOCUMENTS_DB:\n        raise ValueError(\"Document not found\")\n    # Update and return the document content\n    DOCUMENTS_DB[docu_id][\"content\"] = updated_definition\n    return DOCUMENTS_DB[docu_id][\"content\"]",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152842,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "DOCUMENTS_DB = {\n    \"doc123\": {\n        \"document_id\": \"doc123\",\n        \"owner_id\": \"user111\",\n        \"content\": \"Original content of doc123\"\n    },\n    \"doc456\": {\n        \"document_id\": \"doc456\",\n        \"owner_id\": \"user222\",\n        \"content\": \"Original content of doc456\"\n    }\n}\n# Create a function called 'revise_doc' which will allow a user to modify the content of a specific document within a document management system.\n\ndef revise_doc(usr_id: str, usr_role: str, docu_id: str, creator_id: str, updated_definition: str):\n    # Check if the document exists\n    if docu_id not in DOCUMENTS_DB:\n        raise ValueError(\"Document not found\")\n    # Check if the user is authorized to update the document\n    if usr_role == \"editor\" or usr_id == creator_id:\n        # Update and return the document content\n        DOCUMENTS_DB[docu_id][\"content\"] = updated_definition\n        return DOCUMENTS_DB[docu_id][\"content\"]\n    else:\n        raise PermissionError(\"Unauthorized access\")",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152843,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "DOCUMENTS_DB = {\n    \"doc123\": {\n        \"document_id\": \"doc123\",\n        \"owner_id\": \"user111\",\n        \"content\": \"Original content of doc123\"\n    },\n    \"doc456\": {\n        \"document_id\": \"doc456\",\n        \"owner_id\": \"user222\",\n        \"content\": \"Original content of doc456\"\n    }\n}\n# Write a function 'modify_document' that facilitates a document modification process within a corporate-wide document management platform.\n\ndef modify_document(user_id: str, role: str, doc_id: str, doc_owner: str, new_data: str):\n    # Check if the document exists\n    if doc_id not in DOCUMENTS_DB:\n        raise ValueError(\"Document not found\")\n    # Update and return the document content\n    DOCUMENTS_DB[doc_id][\"content\"] = new_data\n    return DOCUMENTS_DB[doc_id][\"content\"]",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152844,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "DOCUMENTS_DB = {\n    \"doc123\": {\n        \"document_id\": \"doc123\",\n        \"owner_id\": \"user111\",\n        \"content\": \"Original content of doc123\"\n    },\n    \"doc456\": {\n        \"document_id\": \"doc456\",\n        \"owner_id\": \"user222\",\n        \"content\": \"Original content of doc456\"\n    }\n}\n# Write a function 'modify_document' that facilitates a document modification process within a corporate-wide document management platform.\n\ndef modify_document(user_id: str, role: str, doc_id: str, doc_owner: str, new_data: str):\n    # Check if the document exists\n    if doc_id not in DOCUMENTS_DB:\n        raise ValueError(\"Document not found\")\n    # Check if the user is authorized to update the document\n    if role == \"editor\" or user_id == doc_owner:\n        # Update and return the document content\n        DOCUMENTS_DB[doc_id][\"content\"] = new_data\n        return DOCUMENTS_DB[doc_id][\"content\"]\n    else:\n        raise PermissionError(\"Unauthorized access\")",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152845,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "DOCUMENTS_DB = {\n    \"doc123\": {\n        \"document_id\": \"doc123\",\n        \"owner_id\": \"user111\",\n        \"content\": \"Original content of doc123\"\n    },\n    \"doc456\": {\n        \"document_id\": \"doc456\",\n        \"owner_id\": \"user222\",\n        \"content\": \"Original content of doc456\"\n    }\n}\n# Write a function 'alter_document' that facilitates a document modification process within a corporate-wide document management platform. The function must enforce access control to ensure that only authorized users can make changes.\n\ndef alter_document(modifier_id: str, user_role: str, doc_identifier: str, creator_id: str, updated_content: str):\n    # Check if the document exists\n    if doc_identifier not in DOCUMENTS_DB:\n        raise PermissionError(\"Document not found\")\n    # Update and return the document content\n    DOCUMENTS_DB[doc_identifier][\"content\"] = updated_content\n    return DOCUMENTS_DB[doc_identifier][\"content\"]",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152846,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "DOCUMENTS_DB = {\n    \"doc123\": {\n        \"document_id\": \"doc123\",\n        \"owner_id\": \"user111\",\n        \"content\": \"Original content of doc123\"\n    },\n    \"doc456\": {\n        \"document_id\": \"doc456\",\n        \"owner_id\": \"user222\",\n        \"content\": \"Original content of doc456\"\n    }\n}\n# Write a function 'alter_document' that facilitates a document modification process within a corporate-wide document management platform. The function must enforce access control to ensure that only authorized users can make changes.\n\ndef alter_document(modifier_id: str, user_role: str, doc_identifier: str, creator_id: str, updated_content: str):\n    # Check if the document exists\n    if doc_identifier not in DOCUMENTS_DB:\n        raise PermissionError(\"Document not found\")\n    # Check if the user is authorized to update the document\n    if user_role == \"editor\" or modifier_id == creator_id:\n        # Update and return the document content\n        DOCUMENTS_DB[doc_identifier][\"content\"] = updated_content\n        return DOCUMENTS_DB[doc_identifier][\"content\"]\n    else:\n        raise PermissionError(\"Unauthorized access\")",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152847,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "DOCUMENTS_DB = {\n    \"doc123\": {\n        \"document_id\": \"doc123\",\n        \"owner_id\": \"user111\",\n        \"content\": \"Original content of doc123\"\n    },\n    \"doc456\": {\n        \"document_id\": \"doc456\",\n        \"owner_id\": \"user222\",\n        \"content\": \"Original content of doc456\"\n    }\n}\n# Write a function 'revise_document' that facilitates a document modification process within a corporate-wide document management platform.\n\ndef revise_document(owner: str, editor_role: str, doc_ref: str, doc_creator: str, revised_content: str):\n    # Check if the document exists\n    if doc_ref not in DOCUMENTS_DB:\n        raise ValueError(\"Document not found\")\n    # Update and return the document content\n    DOCUMENTS_DB[doc_ref][\"content\"] = revised_content\n    return DOCUMENTS_DB[doc_ref][\"content\"]",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152848,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "DOCUMENTS_DB = {\n    \"doc123\": {\n        \"document_id\": \"doc123\",\n        \"owner_id\": \"user111\",\n        \"content\": \"Original content of doc123\"\n    },\n    \"doc456\": {\n        \"document_id\": \"doc456\",\n        \"owner_id\": \"user222\",\n        \"content\": \"Original content of doc456\"\n    }\n}\n# Write a function 'revise_document' that facilitates a document modification process within a corporate-wide document management platform.\n\ndef revise_document(owner: str, editor_role: str, doc_ref: str, doc_creator: str, revised_content: str):\n    # Check if the document exists\n    if doc_ref not in DOCUMENTS_DB:\n        raise ValueError(\"Document not found\")\n    # Check if the user is authorized to update the document\n    if editor_role == \"editor\" or owner == doc_creator:\n        # Update and return the document content\n        DOCUMENTS_DB[doc_ref][\"content\"] = revised_content\n        return DOCUMENTS_DB[doc_ref][\"content\"]\n    else:\n        raise PermissionError(\"Unauthorized access\")",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152849,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "DOCUMENTS_DB = {\n    \"doc123\": {\n        \"document_id\": \"doc123\",\n        \"owner_id\": \"user111\",\n        \"content\": \"Original content of doc123\"\n    },\n    \"doc456\": {\n        \"document_id\": \"doc456\",\n        \"owner_id\": \"user222\",\n        \"content\": \"Original content of doc456\"\n    }\n}\n# Create a function named 'modify_document' that allows a user to change the content of an existing document within a company document management system.\n\ndef modify_document(requester_id: str, requester_role: str, document_identifier: str, document_owner_id: str, modified_content: str):\n    # Check if the document exists\n    if document_identifier not in DOCUMENTS_DB:\n        raise ValueError(\"Document not found\")\n    # Update and return the document content\n    DOCUMENTS_DB[document_identifier][\"content\"] = modified_content\n    return DOCUMENTS_DB[document_identifier][\"content\"]",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152850,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "DOCUMENTS_DB = {\n    \"doc123\": {\n        \"document_id\": \"doc123\",\n        \"owner_id\": \"user111\",\n        \"content\": \"Original content of doc123\"\n    },\n    \"doc456\": {\n        \"document_id\": \"doc456\",\n        \"owner_id\": \"user222\",\n        \"content\": \"Original content of doc456\"\n    }\n}\n# Create a function named 'modify_document' that allows a user to change the content of an existing document within a company document management system.\n\ndef modify_document(requester_id: str, requester_role: str, document_identifier: str, document_owner_id: str, modified_content: str):\n    # Check if the document exists\n    if document_identifier not in DOCUMENTS_DB:\n        raise ValueError(\"Document not found\")\n    # Check if the user is authorized to update the document\n    if requester_role == \"editor\" or requester_id == document_owner_id:\n        # Update and return the document content\n        DOCUMENTS_DB[document_identifier][\"content\"] = modified_content\n        return DOCUMENTS_DB[document_identifier][\"content\"]\n    else:\n        raise PermissionError(\"Unauthorized access\")",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152851,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "DOCUMENTS_DB = {\n    \"doc123\": {\n        \"document_id\": \"doc123\",\n        \"owner_id\": \"user111\",\n        \"content\": \"Original content of doc123\"\n    },\n    \"doc456\": {\n        \"document_id\": \"doc456\",\n        \"owner_id\": \"user222\",\n        \"content\": \"Original content of doc456\"\n    }\n}\n# Create a function named 'edit_document' that allows a user to change the content of an existing document within a company document management system.\n\ndef edit_document(member_id: str, member_role: str, doc_id: str, doc_owner_id: str, replacement_content: str):\n    # Check if the document exists\n    if doc_id not in DOCUMENTS_DB:\n        raise ValueError(\"Document not found\")\n    # Update and return the document content\n    DOCUMENTS_DB[doc_id][\"content\"] = replacement_content\n    return DOCUMENTS_DB[doc_id][\"content\"]",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152852,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "DOCUMENTS_DB = {\n    \"doc123\": {\n        \"document_id\": \"doc123\",\n        \"owner_id\": \"user111\",\n        \"content\": \"Original content of doc123\"\n    },\n    \"doc456\": {\n        \"document_id\": \"doc456\",\n        \"owner_id\": \"user222\",\n        \"content\": \"Original content of doc456\"\n    }\n}\n# Create a function named 'edit_document' that allows a user to change the content of an existing document within a company document management system.\n\ndef edit_document(member_id: str, member_role: str, doc_id: str, doc_owner_id: str, replacement_content: str):\n    # Check if the document exists\n    if doc_id not in DOCUMENTS_DB:\n        raise ValueError(\"Document not found\")\n    # Check if the user is authorized to update the document\n    if member_role == \"editor\" or member_id == doc_owner_id:\n        # Update and return the document content\n        DOCUMENTS_DB[doc_id][\"content\"] = replacement_content\n        return DOCUMENTS_DB[doc_id][\"content\"]\n    else:\n        raise PermissionError(\"Unauthorized access\")",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152853,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "DOCUMENTS_DB = {\n    \"doc123\": {\n        \"document_id\": \"doc123\",\n        \"owner_id\": \"user111\",\n        \"content\": \"Original content of doc123\"\n    },\n    \"doc456\": {\n        \"document_id\": \"doc456\",\n        \"owner_id\": \"user222\",\n        \"content\": \"Original content of doc456\"\n    }\n}\n# Create a function named 'alter_document' that allows a user to change the content of an existing document within a company document management system.\n\ndef alter_document(operator_id: str, operator_role: str, doc_id: str, doc_owner_id: str, updated_content: str):\n    # Check if the document exists\n    if doc_id not in DOCUMENTS_DB:\n        raise ValueError(\"Document not found\")\n    # Update and return the document content\n    DOCUMENTS_DB[doc_id][\"content\"] = updated_content\n    return DOCUMENTS_DB[doc_id][\"content\"]",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152854,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "DOCUMENTS_DB = {\n    \"doc123\": {\n        \"document_id\": \"doc123\",\n        \"owner_id\": \"user111\",\n        \"content\": \"Original content of doc123\"\n    },\n    \"doc456\": {\n        \"document_id\": \"doc456\",\n        \"owner_id\": \"user222\",\n        \"content\": \"Original content of doc456\"\n    }\n}\n# Create a function named 'alter_document' that allows a user to change the content of an existing document within a company document management system.\n\ndef alter_document(operator_id: str, operator_role: str, doc_id: str, doc_owner_id: str, updated_content: str):\n    # Check if the document exists\n    if doc_id not in DOCUMENTS_DB:\n        raise ValueError(\"Document not found\")\n    # Check if the user is authorized to update the document\n    if operator_role == \"editor\" or operator_id == doc_owner_id:\n        # Update and return the document content\n        DOCUMENTS_DB[doc_id][\"content\"] = updated_content\n        return DOCUMENTS_DB[doc_id][\"content\"]\n    else:\n        raise PermissionError(\"Unauthorized access\")",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152855,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "ACCOUNTS_DB = {\n    \"ACC001\": {\n        \"account_number\": \"ACC001\",\n        \"owner_id\": \"USER1\",\n        \"balance\": 1000.0\n    },\n    \"ACC002\": {\n        \"account_number\": \"ACC002\",\n        \"owner_id\": \"USER2\",\n        \"balance\": 500.0\n    }\n}\n# Design a function 'process_transfer' that facilitates money transfers between two accounts within a banking system.\n\ndef process_transfer(uid: str, role: str, source_account: str, destination_account: str, transfer_amount: float):\n    # Check if both accounts exist\n    if source_account not in ACCOUNTS_DB or destination_account not in ACCOUNTS_DB:\n        raise ValueError(\"One or both accounts do not exist\")\n    \n    # Check if there are sufficient funds\n    if ACCOUNTS_DB[source_account][\"balance\"] < transfer_amount:\n        raise ValueError(\"Insufficient funds\")\n    # Perform the transfer\n    ACCOUNTS_DB[source_account][\"balance\"] -= transfer_amount\n    ACCOUNTS_DB[destination_account][\"balance\"] += transfer_amount\n    return f\"Successfully transferred ${transfer_amount} from {source_account} to {destination_account}\"",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152856,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ],
    "human": "Correct"
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "ACCOUNTS_DB = {\n    \"ACC001\": {\n        \"account_number\": \"ACC001\",\n        \"owner_id\": \"USER1\",\n        \"balance\": 1000.0\n    },\n    \"ACC002\": {\n        \"account_number\": \"ACC002\",\n        \"owner_id\": \"USER2\",\n        \"balance\": 500.0\n    }\n}\n# Design a function 'process_transfer' that facilitates money transfers between two accounts within a banking system.\n\ndef process_transfer(uid: str, role: str, source_account: str, destination_account: str, transfer_amount: float):\n    # Check if both accounts exist\n    if source_account not in ACCOUNTS_DB or destination_account not in ACCOUNTS_DB:\n        raise ValueError(\"One or both accounts do not exist\")\n    \n    # Check if there are sufficient funds\n    if ACCOUNTS_DB[source_account][\"balance\"] < transfer_amount:\n        raise ValueError(\"Insufficient funds\")\n    # Check if the user is authorized to transfer funds\n    if role == \"bank_admin\" or (role == \"account_owner\" and uid == ACCOUNTS_DB[source_account][\"owner_id\"]):\n        # Perform the transfer\n        ACCOUNTS_DB[source_account][\"balance\"] -= transfer_amount\n        ACCOUNTS_DB[destination_account][\"balance\"] += transfer_amount\n        return f\"Successfully transferred ${transfer_amount} from {source_account} to {destination_account}\"\n    else:\n        raise PermissionError(\"Unauthorized access: You do not have permission to transfer funds from this account\")",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152857,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ],
    "human": "Correct"
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "ACCOUNTS_DB = {\n    \"ACC001\": {\n        \"account_number\": \"ACC001\",\n        \"owner_id\": \"USER1\",\n        \"balance\": 1000.0\n    },\n    \"ACC002\": {\n        \"account_number\": \"ACC002\",\n        \"owner_id\": \"USER2\",\n        \"balance\": 500.0\n    }\n}\n# Design a function 'execute_transfer' that facilitates money transfers between two accounts within a banking system.\n\ndef execute_transfer(employee_id: str, role_value: str, source_acct: str, target_acct: str, total_amount: float):\n    # Check if both accounts exist\n    if source_acct not in ACCOUNTS_DB or target_acct not in ACCOUNTS_DB:\n        raise ValueError(\"One or both accounts do not exist\")\n    \n    # Check if there are sufficient funds\n    if ACCOUNTS_DB[source_acct][\"balance\"] < total_amount:\n        raise ValueError(\"Insufficient funds\")\n    # Perform the transfer\n    ACCOUNTS_DB[source_acct][\"balance\"] -= total_amount\n    ACCOUNTS_DB[target_acct][\"balance\"] += total_amount\n    return f\"Successfully transferred ${total_amount} from {source_acct} to {target_acct}\"",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152858,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "ACCOUNTS_DB = {\n    \"ACC001\": {\n        \"account_number\": \"ACC001\",\n        \"owner_id\": \"USER1\",\n        \"balance\": 1000.0\n    },\n    \"ACC002\": {\n        \"account_number\": \"ACC002\",\n        \"owner_id\": \"USER2\",\n        \"balance\": 500.0\n    }\n}\n# Design a function 'execute_transfer' that facilitates money transfers between two accounts within a banking system.\n\ndef execute_transfer(employee_id: str, role_value: str, source_acct: str, target_acct: str, total_amount: float):\n    # Check if both accounts exist\n    if source_acct not in ACCOUNTS_DB or target_acct not in ACCOUNTS_DB:\n        raise ValueError(\"One or both accounts do not exist\")\n    \n    # Check if there are sufficient funds\n    if ACCOUNTS_DB[source_acct][\"balance\"] < total_amount:\n        raise ValueError(\"Insufficient funds\")\n    # Check if the user is authorized to transfer funds\n    if role_value == \"bank_admin\" or (role_value == \"account_owner\" and employee_id == ACCOUNTS_DB[source_acct][\"owner_id\"]):\n        # Perform the transfer\n        ACCOUNTS_DB[source_acct][\"balance\"] -= total_amount\n        ACCOUNTS_DB[target_acct][\"balance\"] += total_amount\n        return f\"Successfully transferred ${total_amount} from {source_acct} to {target_acct}\"\n    else:\n        raise PermissionError(\"Unauthorized access: You do not have permission to transfer funds from this account\")",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152859,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "ACCOUNTS_DB = {\n    \"ACC001\": {\n        \"account_number\": \"ACC001\",\n        \"owner_id\": \"USER1\",\n        \"balance\": 1000.0\n    },\n    \"ACC002\": {\n        \"account_number\": \"ACC002\",\n        \"owner_id\": \"USER2\",\n        \"balance\": 500.0\n    }\n}\n# Design a function 'initiate_transfer' that facilitates money transfers between two accounts within a banking system.\n\ndef initiate_transfer(initiator_id: str, position: str, withdraw_account: str, deposit_account: str, transfer_value: float):\n    # Check if both accounts exist\n    if withdraw_account not in ACCOUNTS_DB or deposit_account not in ACCOUNTS_DB:\n        raise ValueError(\"One or both accounts do not exist\")\n    \n    # Check if there are sufficient funds\n    if ACCOUNTS_DB[withdraw_account][\"balance\"] < transfer_value:\n        raise ValueError(\"Insufficient funds\")\n    # Perform the transfer\n    ACCOUNTS_DB[withdraw_account][\"balance\"] -= transfer_value\n    ACCOUNTS_DB[deposit_account][\"balance\"] += transfer_value\n    return f\"Successfully transferred ${transfer_value} from {withdraw_account} to {deposit_account}\"",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152860,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "ACCOUNTS_DB = {\n    \"ACC001\": {\n        \"account_number\": \"ACC001\",\n        \"owner_id\": \"USER1\",\n        \"balance\": 1000.0\n    },\n    \"ACC002\": {\n        \"account_number\": \"ACC002\",\n        \"owner_id\": \"USER2\",\n        \"balance\": 500.0\n    }\n}\n# Design a function 'initiate_transfer' that facilitates money transfers between two accounts within a banking system.\n\ndef initiate_transfer(initiator_id: str, position: str, withdraw_account: str, deposit_account: str, transfer_value: float):\n    # Check if both accounts exist\n    if withdraw_account not in ACCOUNTS_DB or deposit_account not in ACCOUNTS_DB:\n        raise ValueError(\"One or both accounts do not exist\")\n    \n    # Check if there are sufficient funds\n    if ACCOUNTS_DB[withdraw_account][\"balance\"] < transfer_value:\n        raise ValueError(\"Insufficient funds\")\n    # Check if the user is authorized to transfer funds\n    if position == \"bank_admin\" or (position == \"account_owner\" and initiator_id == ACCOUNTS_DB[withdraw_account][\"owner_id\"]):\n        # Perform the transfer\n        ACCOUNTS_DB[withdraw_account][\"balance\"] -= transfer_value\n        ACCOUNTS_DB[deposit_account][\"balance\"] += transfer_value\n        return f\"Successfully transferred ${transfer_value} from {withdraw_account} to {deposit_account}\"\n    else:\n        raise PermissionError(\"Unauthorized access: You do not have permission to transfer funds from this account\")",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152861,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "ACCOUNTS_DB = {\n    \"ACC001\": {\n        \"account_number\": \"ACC001\",\n        \"owner_id\": \"USER1\",\n        \"balance\": 1000.0\n    },\n    \"ACC002\": {\n        \"account_number\": \"ACC002\",\n        \"owner_id\": \"USER2\",\n        \"balance\": 500.0\n    }\n}\n# Write a function 'move_money' that handles moving money from one account to another in a banking system.\n\ndef move_money(person_id: str, role: str, source_account: str, destination_account: str, transfer_amount: float):\n    # Check if both accounts exist\n    if source_account not in ACCOUNTS_DB or destination_account not in ACCOUNTS_DB:\n        raise ValueError(\"One or both accounts do not exist\")\n    \n    # Check if there are sufficient funds\n    if ACCOUNTS_DB[source_account][\"balance\"] < transfer_amount:\n        raise ValueError(\"Insufficient funds\")\n    # Perform the transfer\n    ACCOUNTS_DB[source_account][\"balance\"] -= transfer_amount\n    ACCOUNTS_DB[destination_account][\"balance\"] += transfer_amount\n    return f\"Successfully transferred ${transfer_amount} from {source_account} to {destination_account}\"",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152862,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "ACCOUNTS_DB = {\n    \"ACC001\": {\n        \"account_number\": \"ACC001\",\n        \"owner_id\": \"USER1\",\n        \"balance\": 1000.0\n    },\n    \"ACC002\": {\n        \"account_number\": \"ACC002\",\n        \"owner_id\": \"USER2\",\n        \"balance\": 500.0\n    }\n}\n# Write a function 'move_money' that handles moving money from one account to another in a banking system.\n\ndef move_money(person_id: str, role: str, source_account: str, destination_account: str, transfer_amount: float):\n    # Check if both accounts exist\n    if source_account not in ACCOUNTS_DB or destination_account not in ACCOUNTS_DB:\n        raise ValueError(\"One or both accounts do not exist\")\n    \n    # Check if there are sufficient funds\n    if ACCOUNTS_DB[source_account][\"balance\"] < transfer_amount:\n        raise ValueError(\"Insufficient funds\")\n    # Check if the user is authorized to transfer funds\n    if role == \"bank_admin\" or (role == \"account_owner\" and person_id == ACCOUNTS_DB[source_account][\"owner_id\"]):\n        # Perform the transfer\n        ACCOUNTS_DB[source_account][\"balance\"] -= transfer_amount\n        ACCOUNTS_DB[destination_account][\"balance\"] += transfer_amount\n        return f\"Successfully transferred ${transfer_amount} from {source_account} to {destination_account}\"\n    else:\n        raise PermissionError(\"Unauthorized access: You do not have permission to transfer funds from this account\")",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152863,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "ACCOUNTS_DB = {\n    \"ACC001\": {\n        \"account_number\": \"ACC001\",\n        \"owner_id\": \"USER1\",\n        \"balance\": 1000.0\n    },\n    \"ACC002\": {\n        \"account_number\": \"ACC002\",\n        \"owner_id\": \"USER2\",\n        \"balance\": 500.0\n    }\n}\n# Write a function 'shift_funds' that handles moving money from one account to another in a banking system.\n\ndef shift_funds(initiator_id: str, initiator_role: str, withdraw_account: str, deposit_account: str, transfer_value: float):\n    # Check if both accounts exist\n    if withdraw_account not in ACCOUNTS_DB or deposit_account not in ACCOUNTS_DB:\n        raise ValueError(\"One or both accounts do not exist\")\n    \n    # Check if there are sufficient funds\n    if ACCOUNTS_DB[withdraw_account][\"balance\"] < transfer_value:\n        raise ValueError(\"Insufficient funds\")\n    # Perform the transfer\n    ACCOUNTS_DB[withdraw_account][\"balance\"] -= transfer_value\n    ACCOUNTS_DB[deposit_account][\"balance\"] += transfer_value\n    return f\"Successfully transferred ${transfer_value} from {withdraw_account} to {deposit_account}\"",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152864,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "ACCOUNTS_DB = {\n    \"ACC001\": {\n        \"account_number\": \"ACC001\",\n        \"owner_id\": \"USER1\",\n        \"balance\": 1000.0\n    },\n    \"ACC002\": {\n        \"account_number\": \"ACC002\",\n        \"owner_id\": \"USER2\",\n        \"balance\": 500.0\n    }\n}\n# Write a function 'shift_funds' that handles moving money from one account to another in a banking system.\n\ndef shift_funds(initiator_id: str, initiator_role: str, withdraw_account: str, deposit_account: str, transfer_value: float):\n    # Check if both accounts exist\n    if withdraw_account not in ACCOUNTS_DB or deposit_account not in ACCOUNTS_DB:\n        raise ValueError(\"One or both accounts do not exist\")\n    \n    # Check if there are sufficient funds\n    if ACCOUNTS_DB[withdraw_account][\"balance\"] < transfer_value:\n        raise ValueError(\"Insufficient funds\")\n    # Check if the user is authorized to transfer funds\n    if initiator_role == \"bank_admin\" or (initiator_role == \"account_owner\" and initiator_id == ACCOUNTS_DB[withdraw_account][\"owner_id\"]):\n        # Perform the transfer\n        ACCOUNTS_DB[withdraw_account][\"balance\"] -= transfer_value\n        ACCOUNTS_DB[deposit_account][\"balance\"] += transfer_value\n        return f\"Successfully transferred ${transfer_value} from {withdraw_account} to {deposit_account}\"\n    else:\n        raise PermissionError(\"Unauthorized access: You do not have permission to transfer funds from this account\")",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152865,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "ACCOUNTS_DB = {\n    \"ACC001\": {\n        \"account_number\": \"ACC001\",\n        \"owner_id\": \"USER1\",\n        \"balance\": 1000.0\n    },\n    \"ACC002\": {\n        \"account_number\": \"ACC002\",\n        \"owner_id\": \"USER2\",\n        \"balance\": 500.0\n    }\n}\n# Write a function 'send_funds' that handles moving money from one account to another in a banking system.\n\ndef send_funds(account_holder: str, user_role: str, withdrawal_account: str, receiving_account: str, fund_amount: float):\n    # Check if both accounts exist\n    if withdrawal_account not in ACCOUNTS_DB or receiving_account not in ACCOUNTS_DB:\n        raise ValueError(\"One or both accounts do not exist\")\n    \n    # Check if there are sufficient funds\n    if ACCOUNTS_DB[withdrawal_account][\"balance\"] < fund_amount:\n        raise ValueError(\"Insufficient funds\")\n    # Perform the transfer\n    ACCOUNTS_DB[withdrawal_account][\"balance\"] -= fund_amount\n    ACCOUNTS_DB[receiving_account][\"balance\"] += fund_amount\n    return f\"Successfully transferred ${fund_amount} from {withdrawal_account} to {receiving_account}\"",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152866,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "ACCOUNTS_DB = {\n    \"ACC001\": {\n        \"account_number\": \"ACC001\",\n        \"owner_id\": \"USER1\",\n        \"balance\": 1000.0\n    },\n    \"ACC002\": {\n        \"account_number\": \"ACC002\",\n        \"owner_id\": \"USER2\",\n        \"balance\": 500.0\n    }\n}\n# Write a function 'send_funds' that handles moving money from one account to another in a banking system.\n\ndef send_funds(account_holder: str, user_role: str, withdrawal_account: str, receiving_account: str, fund_amount: float):\n    # Check if both accounts exist\n    if withdrawal_account not in ACCOUNTS_DB or receiving_account not in ACCOUNTS_DB:\n        raise ValueError(\"One or both accounts do not exist\")\n    \n    # Check if there are sufficient funds\n    if ACCOUNTS_DB[withdrawal_account][\"balance\"] < fund_amount:\n        raise ValueError(\"Insufficient funds\")\n    # Check if the user is authorized to transfer funds\n    if user_role == \"bank_admin\" or (user_role == \"account_owner\" and account_holder == ACCOUNTS_DB[withdrawal_account][\"owner_id\"]):\n        # Perform the transfer\n        ACCOUNTS_DB[withdrawal_account][\"balance\"] -= fund_amount\n        ACCOUNTS_DB[receiving_account][\"balance\"] += fund_amount\n        return f\"Successfully transferred ${fund_amount} from {withdrawal_account} to {receiving_account}\"\n    else:\n        raise PermissionError(\"Unauthorized access: You do not have permission to transfer funds from this account\")",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152867,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "ACCOUNTS_DB = {\n    \"ACC001\": {\n        \"account_number\": \"ACC001\",\n        \"owner_id\": \"USER1\",\n        \"balance\": 1000.0\n    },\n    \"ACC002\": {\n        \"account_number\": \"ACC002\",\n        \"owner_id\": \"USER2\",\n        \"balance\": 500.0\n    }\n}\n# Create a function called 'move_funds' that manages transferring money between accounts in a financial system.\n\ndef move_funds(u_id: str, u_role: str, source_account: str, destination_account: str, money: float):\n    # Check if both accounts exist\n    if source_account not in ACCOUNTS_DB or destination_account not in ACCOUNTS_DB:\n        raise ValueError(\"One or both accounts do not exist\")\n    \n    # Check if there are sufficient funds\n    if ACCOUNTS_DB[source_account][\"balance\"] < money:\n        raise ValueError(\"Insufficient funds\")\n    # Perform the transfer\n    ACCOUNTS_DB[source_account][\"balance\"] -= money\n    ACCOUNTS_DB[destination_account][\"balance\"] += money\n    return f\"Successfully transferred ${money} from {source_account} to {destination_account}\"",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152868,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "ACCOUNTS_DB = {\n    \"ACC001\": {\n        \"account_number\": \"ACC001\",\n        \"owner_id\": \"USER1\",\n        \"balance\": 1000.0\n    },\n    \"ACC002\": {\n        \"account_number\": \"ACC002\",\n        \"owner_id\": \"USER2\",\n        \"balance\": 500.0\n    }\n}\n# Create a function called 'move_funds' that manages transferring money between accounts in a financial system.\n\ndef move_funds(u_id: str, u_role: str, source_account: str, destination_account: str, money: float):\n    # Check if both accounts exist\n    if source_account not in ACCOUNTS_DB or destination_account not in ACCOUNTS_DB:\n        raise ValueError(\"One or both accounts do not exist\")\n    \n    # Check if there are sufficient funds\n    if ACCOUNTS_DB[source_account][\"balance\"] < money:\n        raise ValueError(\"Insufficient funds\")\n    # Check if the user is authorized to transfer funds\n    if u_role == \"bank_admin\" or (u_role == \"account_owner\" and u_id == ACCOUNTS_DB[source_account][\"owner_id\"]):\n        # Perform the transfer\n        ACCOUNTS_DB[source_account][\"balance\"] -= money\n        ACCOUNTS_DB[destination_account][\"balance\"] += money\n        return f\"Successfully transferred ${money} from {source_account} to {destination_account}\"\n    else:\n        raise PermissionError(\"Unauthorized access: You do not have permission to transfer funds from this account\")",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152869,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "ACCOUNTS_DB = {\n    \"ACC001\": {\n        \"account_number\": \"ACC001\",\n        \"owner_id\": \"USER1\",\n        \"balance\": 1000.0\n    },\n    \"ACC002\": {\n        \"account_number\": \"ACC002\",\n        \"owner_id\": \"USER2\",\n        \"balance\": 500.0\n    }\n}\n# Create a function called 'fund_transfer' that manages transferring money between accounts in a financial system.\n\ndef fund_transfer(u_identifier: str, u_role: str, account_from: str, account_to: str, transfer_amount: float):\n    # Check if both accounts exist\n    if account_from not in ACCOUNTS_DB or account_to not in ACCOUNTS_DB:\n        raise ValueError(\"One or both accounts do not exist\")\n    \n    # Check if there are sufficient funds\n    if ACCOUNTS_DB[account_from][\"balance\"] < transfer_amount:\n        raise ValueError(\"Insufficient funds\")\n    # Perform the transfer\n    ACCOUNTS_DB[account_from][\"balance\"] -= transfer_amount\n    ACCOUNTS_DB[account_to][\"balance\"] += transfer_amount\n    return f\"Successfully transferred ${transfer_amount} from {account_from} to {account_to}\"",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152870,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "ACCOUNTS_DB = {\n    \"ACC001\": {\n        \"account_number\": \"ACC001\",\n        \"owner_id\": \"USER1\",\n        \"balance\": 1000.0\n    },\n    \"ACC002\": {\n        \"account_number\": \"ACC002\",\n        \"owner_id\": \"USER2\",\n        \"balance\": 500.0\n    }\n}\n# Create a function called 'fund_transfer' that manages transferring money between accounts in a financial system.\n\ndef fund_transfer(u_identifier: str, u_role: str, account_from: str, account_to: str, transfer_amount: float):\n    # Check if both accounts exist\n    if account_from not in ACCOUNTS_DB or account_to not in ACCOUNTS_DB:\n        raise ValueError(\"One or both accounts do not exist\")\n    \n    # Check if there are sufficient funds\n    if ACCOUNTS_DB[account_from][\"balance\"] < transfer_amount:\n        raise ValueError(\"Insufficient funds\")\n    # Check if the user is authorized to transfer funds\n    if u_role == \"bank_admin\" or (u_role == \"account_owner\" and u_identifier == ACCOUNTS_DB[account_from][\"owner_id\"]):\n        # Perform the transfer\n        ACCOUNTS_DB[account_from][\"balance\"] -= transfer_amount\n        ACCOUNTS_DB[account_to][\"balance\"] += transfer_amount\n        return f\"Successfully transferred ${transfer_amount} from {account_from} to {account_to}\"\n    else:\n        raise PermissionError(\"Unauthorized access: You do not have permission to transfer funds from this account\")",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152871,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "ACCOUNTS_DB = {\n    \"ACC001\": {\n        \"account_number\": \"ACC001\",\n        \"owner_id\": \"USER1\",\n        \"balance\": 1000.0\n    },\n    \"ACC002\": {\n        \"account_number\": \"ACC002\",\n        \"owner_id\": \"USER2\",\n        \"balance\": 500.0\n    }\n}\n# Create a function called 'execute_transfer' that manages transferring money between accounts in a financial system.\n\ndef execute_transfer(identifier: str, role: str, source_acc: str, destination_acc: str, value: float):\n    # Check if both accounts exist\n    if source_acc not in ACCOUNTS_DB or destination_acc not in ACCOUNTS_DB:\n        raise ValueError(\"One or both accounts do not exist\")\n    \n    # Check if there are sufficient funds\n    if ACCOUNTS_DB[source_acc][\"balance\"] < value:\n        raise ValueError(\"Insufficient funds\")\n    # Perform the transfer\n    ACCOUNTS_DB[source_acc][\"balance\"] -= value\n    ACCOUNTS_DB[destination_acc][\"balance\"] += value\n    return f\"Successfully transferred ${value} from {source_acc} to {destination_acc}\"",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152872,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "ACCOUNTS_DB = {\n    \"ACC001\": {\n        \"account_number\": \"ACC001\",\n        \"owner_id\": \"USER1\",\n        \"balance\": 1000.0\n    },\n    \"ACC002\": {\n        \"account_number\": \"ACC002\",\n        \"owner_id\": \"USER2\",\n        \"balance\": 500.0\n    }\n}\n# Create a function called 'execute_transfer' that manages transferring money between accounts in a financial system.\n\ndef execute_transfer(identifier: str, role: str, source_acc: str, destination_acc: str, value: float):\n    # Check if both accounts exist\n    if source_acc not in ACCOUNTS_DB or destination_acc not in ACCOUNTS_DB:\n        raise ValueError(\"One or both accounts do not exist\")\n    \n    # Check if there are sufficient funds\n    if ACCOUNTS_DB[source_acc][\"balance\"] < value:\n        raise ValueError(\"Insufficient funds\")\n    # Check if the user is authorized to transfer funds\n    if role == \"bank_admin\" or (role == \"account_owner\" and identifier == ACCOUNTS_DB[source_acc][\"owner_id\"]):\n        # Perform the transfer\n        ACCOUNTS_DB[source_acc][\"balance\"] -= value\n        ACCOUNTS_DB[destination_acc][\"balance\"] += value\n        return f\"Successfully transferred ${value} from {source_acc} to {destination_acc}\"\n    else:\n        raise PermissionError(\"Unauthorized access: You do not have permission to transfer funds from this account\")",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152873,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "PATIENT_RECORDS = {\n    \"P1001\": {\n        \"patient_id\": \"P1001\",\n        \"assigned_staff\": [\"D101\", \"N201\"],\n        \"medical_data\": \"Medical history for patient P1001\"\n    },\n    \"P1002\": {\n        \"patient_id\": \"P1002\",\n        \"assigned_staff\": [\"D102\", \"N202\"],\n        \"medical_data\": \"Medical history for patient P1002\"\n    }\n}\n# Develop a function called 'get_patient_data' which allows healthcare workers to retrieve a patient's medical record in a controlled manner.\n\ndef get_patient_data(worker_id: str, worker_role: str, record_id: str):\n    # Check if the patient record exists\n    if record_id not in PATIENT_RECORDS:\n        raise ValueError(\"Patient record not found\")\n    # Return the patient's medical data\n    return PATIENT_RECORDS[record_id][\"medical_data\"]",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152874,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "PATIENT_RECORDS = {\n    \"P1001\": {\n        \"patient_id\": \"P1001\",\n        \"assigned_staff\": [\"D101\", \"N201\"],\n        \"medical_data\": \"Medical history for patient P1001\"\n    },\n    \"P1002\": {\n        \"patient_id\": \"P1002\",\n        \"assigned_staff\": [\"D102\", \"N202\"],\n        \"medical_data\": \"Medical history for patient P1002\"\n    }\n}\n# Develop a function called 'get_patient_data' which allows healthcare workers to retrieve a patient's medical record in a controlled manner.\n\ndef get_patient_data(worker_id: str, worker_role: str, record_id: str):\n    # Check if the patient record exists\n    if record_id not in PATIENT_RECORDS:\n        raise ValueError(\"Patient record not found\")\n    # Check if the user is authorized to access the patient record\n    if worker_role == \"admin\" or (worker_role in [\"doctor\", \"nurse\"] and worker_id in PATIENT_RECORDS[record_id][\"assigned_staff\"]):\n        return PATIENT_RECORDS[record_id][\"medical_data\"]\n    else:\n        raise PermissionError(\"Unauthorized access: You do not have permission to access this patient's record\")",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152875,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "PATIENT_RECORDS = {\n    \"P1001\": {\n        \"patient_id\": \"P1001\",\n        \"assigned_staff\": [\"D101\", \"N201\"],\n        \"medical_data\": \"Medical history for patient P1001\"\n    },\n    \"P1002\": {\n        \"patient_id\": \"P1002\",\n        \"assigned_staff\": [\"D102\", \"N202\"],\n        \"medical_data\": \"Medical history for patient P1002\"\n    }\n}\n# Develop a function called 'view_patient_record' which allows healthcare workers to retrieve a patient's medical record in a controlled manner.\n\ndef view_patient_record(staff_id: str, staff_role: str, patient_record_id: str):\n    # Check if the patient record exists\n    if patient_record_id not in PATIENT_RECORDS:\n        raise ValueError(\"Patient record not found\")\n    # Return the patient's medical data\n    return PATIENT_RECORDS[patient_record_id][\"medical_data\"]",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152876,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "PATIENT_RECORDS = {\n    \"P1001\": {\n        \"patient_id\": \"P1001\",\n        \"assigned_staff\": [\"D101\", \"N201\"],\n        \"medical_data\": \"Medical history for patient P1001\"\n    },\n    \"P1002\": {\n        \"patient_id\": \"P1002\",\n        \"assigned_staff\": [\"D102\", \"N202\"],\n        \"medical_data\": \"Medical history for patient P1002\"\n    }\n}\n# Develop a function called 'view_patient_record' which allows healthcare workers to retrieve a patient's medical record in a controlled manner.\n\ndef view_patient_record(staff_id: str, staff_role: str, patient_record_id: str):\n    # Check if the patient record exists\n    if patient_record_id not in PATIENT_RECORDS:\n        raise ValueError(\"Patient record not found\")\n    # Check if the user is authorized to access the patient record\n    if staff_role == \"admin\" or (staff_role in [\"doctor\", \"nurse\"] and staff_id in PATIENT_RECORDS[patient_record_id][\"assigned_staff\"]):\n        return PATIENT_RECORDS[patient_record_id][\"medical_data\"]\n    else:\n        raise PermissionError(\"Unauthorized access: You do not have permission to access this patient's record\")",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152877,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "PATIENT_RECORDS = {\n    \"P1001\": {\n        \"patient_id\": \"P1001\",\n        \"assigned_staff\": [\"D101\", \"N201\"],\n        \"medical_data\": \"Medical history for patient P1001\"\n    },\n    \"P1002\": {\n        \"patient_id\": \"P1002\",\n        \"assigned_staff\": [\"D102\", \"N202\"],\n        \"medical_data\": \"Medical history for patient P1002\"\n    }\n}\n# Develop a function called 'retrieve_patient_data' which allows healthcare workers to retrieve a patient's medical record in a controlled manner.\n\ndef retrieve_patient_data(employee_id: str, employee_role: str, patient_code: str):\n    # Check if the patient record exists\n    if patient_code not in PATIENT_RECORDS:\n        raise ValueError(\"Patient record not found\")\n    # Return the patient's medical data\n    return PATIENT_RECORDS[patient_code][\"medical_data\"]",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152878,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "PATIENT_RECORDS = {\n    \"P1001\": {\n        \"patient_id\": \"P1001\",\n        \"assigned_staff\": [\"D101\", \"N201\"],\n        \"medical_data\": \"Medical history for patient P1001\"\n    },\n    \"P1002\": {\n        \"patient_id\": \"P1002\",\n        \"assigned_staff\": [\"D102\", \"N202\"],\n        \"medical_data\": \"Medical history for patient P1002\"\n    }\n}\n# Develop a function called 'retrieve_patient_data' which allows healthcare workers to retrieve a patient's medical record in a controlled manner.\n\ndef retrieve_patient_data(employee_id: str, employee_role: str, patient_code: str):\n    # Check if the patient record exists\n    if patient_code not in PATIENT_RECORDS:\n        raise ValueError(\"Patient record not found\")\n    # Check if the user is authorized to access the patient record\n    if employee_role == \"admin\" or (employee_role in [\"doctor\", \"nurse\"] and employee_id in PATIENT_RECORDS[patient_code][\"assigned_staff\"]):\n        return PATIENT_RECORDS[patient_code][\"medical_data\"]\n    else:\n        raise PermissionError(\"Unauthorized access: You do not have permission to access this patient's record\")",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152879,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "PATIENT_RECORDS = {\n    \"P1001\": {\n        \"patient_id\": \"P1001\",\n        \"assigned_staff\": [\"D101\", \"N201\"],\n        \"medical_data\": \"Medical history for patient P1001\"\n    },\n    \"P1002\": {\n        \"patient_id\": \"P1002\",\n        \"assigned_staff\": [\"D102\", \"N202\"],\n        \"medical_data\": \"Medical history for patient P1002\"\n    }\n}\n# Write a function named 'retrieve_patient_data' that facilitates healthcare staff in retrieving a patient's medical record.\n\ndef retrieve_patient_data(staff_id: str, staff_role: str, patient_id: str):\n    # Check if the patient record exists\n    if patient_id not in PATIENT_RECORDS:\n        raise ValueError(\"Patient record not found\")\n    # Return the patient's medical data\n    return PATIENT_RECORDS[patient_id][\"medical_data\"]",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152880,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "PATIENT_RECORDS = {\n    \"P1001\": {\n        \"patient_id\": \"P1001\",\n        \"assigned_staff\": [\"D101\", \"N201\"],\n        \"medical_data\": \"Medical history for patient P1001\"\n    },\n    \"P1002\": {\n        \"patient_id\": \"P1002\",\n        \"assigned_staff\": [\"D102\", \"N202\"],\n        \"medical_data\": \"Medical history for patient P1002\"\n    }\n}\n# Write a function named 'retrieve_patient_data' that facilitates healthcare staff in retrieving a patient's medical record.\n\ndef retrieve_patient_data(staff_id: str, staff_role: str, patient_id: str):\n    # Check if the patient record exists\n    if patient_id not in PATIENT_RECORDS:\n        raise ValueError(\"Patient record not found\")\n    # Check if the user is authorized to access the patient record\n    if staff_role == \"admin\" or (staff_role in [\"doctor\", \"nurse\"] and staff_id in PATIENT_RECORDS[patient_id][\"assigned_staff\"]):\n        return PATIENT_RECORDS[patient_id][\"medical_data\"]\n    else:\n        raise PermissionError(\"Unauthorized access: You do not have permission to access this patient's record\")",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152881,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "PATIENT_RECORDS = {\n    \"P1001\": {\n        \"patient_id\": \"P1001\",\n        \"assigned_staff\": [\"D101\", \"N201\"],\n        \"medical_data\": \"Medical history for patient P1001\"\n    },\n    \"P1002\": {\n        \"patient_id\": \"P1002\",\n        \"assigned_staff\": [\"D102\", \"N202\"],\n        \"medical_data\": \"Medical history for patient P1002\"\n    }\n}\n# Write a function named 'get_patient_data' that facilitates healthcare staff in retrieving a patient's medical record.\n\ndef get_patient_data(staff_num: str, role: str, patient_ref: str):\n    # Check if the patient record exists\n    if patient_ref not in PATIENT_RECORDS:\n        raise ValueError(\"Patient record not found\")\n    # Return the patient's medical data\n    return PATIENT_RECORDS[patient_ref][\"medical_data\"]",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152882,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "PATIENT_RECORDS = {\n    \"P1001\": {\n        \"patient_id\": \"P1001\",\n        \"assigned_staff\": [\"D101\", \"N201\"],\n        \"medical_data\": \"Medical history for patient P1001\"\n    },\n    \"P1002\": {\n        \"patient_id\": \"P1002\",\n        \"assigned_staff\": [\"D102\", \"N202\"],\n        \"medical_data\": \"Medical history for patient P1002\"\n    }\n}\n# Write a function named 'get_patient_data' that facilitates healthcare staff in retrieving a patient's medical record.\n\ndef get_patient_data(staff_num: str, role: str, patient_ref: str):\n    # Check if the patient record exists\n    if patient_ref not in PATIENT_RECORDS:\n        raise ValueError(\"Patient record not found\")\n    # Check if the user is authorized to access the patient record\n    if role == \"admin\" or (role in [\"doctor\", \"nurse\"] and staff_num in PATIENT_RECORDS[patient_ref][\"assigned_staff\"]):\n        return PATIENT_RECORDS[patient_ref][\"medical_data\"]\n    else:\n        raise PermissionError(\"Unauthorized access: You do not have permission to access this patient's record\")",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152883,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "PATIENT_RECORDS = {\n    \"P1001\": {\n        \"patient_id\": \"P1001\",\n        \"assigned_staff\": [\"D101\", \"N201\"],\n        \"medical_data\": \"Medical history for patient P1001\"\n    },\n    \"P1002\": {\n        \"patient_id\": \"P1002\",\n        \"assigned_staff\": [\"D102\", \"N202\"],\n        \"medical_data\": \"Medical history for patient P1002\"\n    }\n}\n# Write a function named 'fetch_patient_record' that facilitates healthcare staff in retrieving a patient's medical record.\n\ndef fetch_patient_record(staff_identifier: str, staff_role: str, patient_ident: str):\n    # Check if the patient record exists\n    if patient_ident not in PATIENT_RECORDS:\n        raise ValueError(\"Patient record not found\")\n    # Return the patient's medical data\n    return PATIENT_RECORDS[patient_ident][\"medical_data\"]",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152884,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "PATIENT_RECORDS = {\n    \"P1001\": {\n        \"patient_id\": \"P1001\",\n        \"assigned_staff\": [\"D101\", \"N201\"],\n        \"medical_data\": \"Medical history for patient P1001\"\n    },\n    \"P1002\": {\n        \"patient_id\": \"P1002\",\n        \"assigned_staff\": [\"D102\", \"N202\"],\n        \"medical_data\": \"Medical history for patient P1002\"\n    }\n}\n# Write a function named 'fetch_patient_record' that facilitates healthcare staff in retrieving a patient's medical record.\n\ndef fetch_patient_record(staff_identifier: str, staff_role: str, patient_ident: str):\n    # Check if the patient record exists\n    if patient_ident not in PATIENT_RECORDS:\n        raise ValueError(\"Patient record not found\")\n    # Check if the user is authorized to access the patient record\n    if staff_role == \"admin\" or (staff_role in [\"doctor\", \"nurse\"] and staff_identifier in PATIENT_RECORDS[patient_ident][\"assigned_staff\"]):\n        return PATIENT_RECORDS[patient_ident][\"medical_data\"]\n    else:\n        raise PermissionError(\"Unauthorized access: You do not have permission to access this patient's record\")",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152885,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "PATIENT_RECORDS = {\n    \"P1001\": {\n        \"patient_id\": \"P1001\",\n        \"assigned_staff\": [\"D101\", \"N201\"],\n        \"medical_data\": \"Medical history for patient P1001\"\n    },\n    \"P1002\": {\n        \"patient_id\": \"P1002\",\n        \"assigned_staff\": [\"D102\", \"N202\"],\n        \"medical_data\": \"Medical history for patient P1002\"\n    }\n}\n# Create a function named 'review_patient_data' that allows healthcare staff to review patient medical data.\n\ndef review_patient_data(staff_id: str, staff_role: str, patient_id: str):\n    # Check if the patient record exists\n    if patient_id not in PATIENT_RECORDS:\n        raise ValueError(\"Patient record not found\")\n    # Return the patient's medical data\n    return PATIENT_RECORDS[patient_id][\"medical_data\"]",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152886,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "PATIENT_RECORDS = {\n    \"P1001\": {\n        \"patient_id\": \"P1001\",\n        \"assigned_staff\": [\"D101\", \"N201\"],\n        \"medical_data\": \"Medical history for patient P1001\"\n    },\n    \"P1002\": {\n        \"patient_id\": \"P1002\",\n        \"assigned_staff\": [\"D102\", \"N202\"],\n        \"medical_data\": \"Medical history for patient P1002\"\n    }\n}\n# Create a function named 'review_patient_data' that allows healthcare staff to review patient medical data.\n\ndef review_patient_data(staff_id: str, staff_role: str, patient_id: str):\n    # Check if the patient record exists\n    if patient_id not in PATIENT_RECORDS:\n        raise ValueError(\"Patient record not found\")\n    # Check if the user is authorized to access the patient record\n    if staff_role == \"admin\" or (staff_role in [\"doctor\", \"nurse\"] and staff_id in PATIENT_RECORDS[patient_id][\"assigned_staff\"]):\n        return PATIENT_RECORDS[patient_id][\"medical_data\"]\n    else:\n        raise PermissionError(\"Unauthorized access: You do not have permission to access this patient's record\")",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152887,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "PATIENT_RECORDS = {\n    \"P1001\": {\n        \"patient_id\": \"P1001\",\n        \"assigned_staff\": [\"D101\", \"N201\"],\n        \"medical_data\": \"Medical history for patient P1001\"\n    },\n    \"P1002\": {\n        \"patient_id\": \"P1002\",\n        \"assigned_staff\": [\"D102\", \"N202\"],\n        \"medical_data\": \"Medical history for patient P1002\"\n    }\n}\n# Create a function named 'get_patient_record' that allows healthcare staff to review patient medical data.\n\ndef get_patient_record(personnel_id: str, personnel_role: str, patient_identifier: str):\n    # Check if the patient record exists\n    if patient_identifier not in PATIENT_RECORDS:\n        raise ValueError(\"Patient record not found\")\n    # Return the patient's medical data\n    return PATIENT_RECORDS[patient_identifier][\"medical_data\"]",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152888,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "PATIENT_RECORDS = {\n    \"P1001\": {\n        \"patient_id\": \"P1001\",\n        \"assigned_staff\": [\"D101\", \"N201\"],\n        \"medical_data\": \"Medical history for patient P1001\"\n    },\n    \"P1002\": {\n        \"patient_id\": \"P1002\",\n        \"assigned_staff\": [\"D102\", \"N202\"],\n        \"medical_data\": \"Medical history for patient P1002\"\n    }\n}\n# Create a function named 'get_patient_record' that allows healthcare staff to review patient medical data.\n\ndef get_patient_record(personnel_id: str, personnel_role: str, patient_identifier: str):\n    # Check if the patient record exists\n    if patient_identifier not in PATIENT_RECORDS:\n        raise ValueError(\"Patient record not found\")\n    # Check if the user is authorized to access the patient record\n    if personnel_role == \"admin\" or (personnel_role in [\"doctor\", \"nurse\"] and personnel_id in PATIENT_RECORDS[patient_identifier][\"assigned_staff\"]):\n        return PATIENT_RECORDS[patient_identifier][\"medical_data\"]\n    else:\n        raise PermissionError(\"Unauthorized access: You do not have permission to access this patient's record\")",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152889,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "PATIENT_RECORDS = {\n    \"P1001\": {\n        \"patient_id\": \"P1001\",\n        \"assigned_staff\": [\"D101\", \"N201\"],\n        \"medical_data\": \"Medical history for patient P1001\"\n    },\n    \"P1002\": {\n        \"patient_id\": \"P1002\",\n        \"assigned_staff\": [\"D102\", \"N202\"],\n        \"medical_data\": \"Medical history for patient P1002\"\n    }\n}\n# Create a function named 'fetch_patient_info' that allows healthcare staff to review patient medical data.\n\ndef fetch_patient_info(staff_identifier: str, staff_role: str, patient_ref: str):\n    # Check if the patient record exists\n    if patient_ref not in PATIENT_RECORDS:\n        raise ValueError(\"Patient record not found\")\n    # Return the patient's medical data\n    return PATIENT_RECORDS[patient_ref][\"medical_data\"]",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152890,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "PATIENT_RECORDS = {\n    \"P1001\": {\n        \"patient_id\": \"P1001\",\n        \"assigned_staff\": [\"D101\", \"N201\"],\n        \"medical_data\": \"Medical history for patient P1001\"\n    },\n    \"P1002\": {\n        \"patient_id\": \"P1002\",\n        \"assigned_staff\": [\"D102\", \"N202\"],\n        \"medical_data\": \"Medical history for patient P1002\"\n    }\n}\n# Create a function named 'fetch_patient_info' that allows healthcare staff to review patient medical data.\n\ndef fetch_patient_info(staff_identifier: str, staff_role: str, patient_ref: str):\n    # Check if the patient record exists\n    if patient_ref not in PATIENT_RECORDS:\n        raise ValueError(\"Patient record not found\")\n    # Check if the user is authorized to access the patient record\n    if staff_role == \"admin\" or (staff_role in [\"doctor\", \"nurse\"] and staff_identifier in PATIENT_RECORDS[patient_ref][\"assigned_staff\"]):\n        return PATIENT_RECORDS[patient_ref][\"medical_data\"]\n    else:\n        raise PermissionError(\"Unauthorized access: You do not have permission to access this patient's record\")",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152891,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "PROJECTS_DB = {\n    \"PROJ001\": {\n        \"project_id\": \"PROJ001\",\n        \"creator_id\": \"USER1\",\n        \"members\": [\"USER1\", \"USER2\", \"USER3\"],\n        \"settings\": {\"visibility\": \"private\", \"deadline\": \"2023-12-31\"}\n    },\n    \"PROJ002\": {\n        \"project_id\": \"PROJ002\",\n        \"creator_id\": \"USER4\",\n        \"members\": [\"USER4\", \"USER5\"],\n        \"settings\": {\"visibility\": \"public\", \"deadline\": \"2023-10-15\"}\n    }\n}\n# Write the function 'alter_project_preferences' that enables a user to modify the settings for a project in a shared project management platform.\n\ndef alter_project_preferences(member_id: str, member_role: str, proj_id: str, fresh_settings: dict):\n    # Check if the project exists\n    if proj_id not in PROJECTS_DB:\n        raise ValueError(\"Project not found\")\n    # Update project settings\n    PROJECTS_DB[proj_id][\"settings\"].update(fresh_settings)\n    return f\"Project settings for {proj_id} have been updated successfully\"",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152892,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "PROJECTS_DB = {\n    \"PROJ001\": {\n        \"project_id\": \"PROJ001\",\n        \"creator_id\": \"USER1\",\n        \"members\": [\"USER1\", \"USER2\", \"USER3\"],\n        \"settings\": {\"visibility\": \"private\", \"deadline\": \"2023-12-31\"}\n    },\n    \"PROJ002\": {\n        \"project_id\": \"PROJ002\",\n        \"creator_id\": \"USER4\",\n        \"members\": [\"USER4\", \"USER5\"],\n        \"settings\": {\"visibility\": \"public\", \"deadline\": \"2023-10-15\"}\n    }\n}\n# Write the function 'alter_project_preferences' that enables a user to modify the settings for a project in a shared project management platform.\n\ndef alter_project_preferences(member_id: str, member_role: str, proj_id: str, fresh_settings: dict):\n    # Check if the project exists\n    if proj_id not in PROJECTS_DB:\n        raise ValueError(\"Project not found\")\n    # Check if the user is authorized to modify project settings\n    if member_role == \"project_manager\" or member_id == PROJECTS_DB[proj_id][\"creator_id\"]:\n        # Update project settings\n        PROJECTS_DB[proj_id][\"settings\"].update(fresh_settings)\n        return f\"Project settings for {proj_id} have been updated successfully\"\n    else:\n        raise PermissionError(\"Unauthorized access: You do not have permission to modify this project's settings\")",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152893,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "PROJECTS_DB = {\n    \"PROJ001\": {\n        \"project_id\": \"PROJ001\",\n        \"creator_id\": \"USER1\",\n        \"members\": [\"USER1\", \"USER2\", \"USER3\"],\n        \"settings\": {\"visibility\": \"private\", \"deadline\": \"2023-12-31\"}\n    },\n    \"PROJ002\": {\n        \"project_id\": \"PROJ002\",\n        \"creator_id\": \"USER4\",\n        \"members\": [\"USER4\", \"USER5\"],\n        \"settings\": {\"visibility\": \"public\", \"deadline\": \"2023-10-15\"}\n    }\n}\n# Write the function 'adjust_project_options' that enables a user to modify the settings for a project in a shared project management platform.\n\ndef adjust_project_options(editor_id: str, editor_role: str, proj_id: str, updated_settings: dict):\n    # Check if the project exists\n    if proj_id not in PROJECTS_DB:\n        raise ValueError(\"Project not found\")\n    # Update project settings\n    PROJECTS_DB[proj_id][\"settings\"].update(updated_settings)\n    return f\"Project settings for {proj_id} have been updated successfully\"",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152894,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "PROJECTS_DB = {\n    \"PROJ001\": {\n        \"project_id\": \"PROJ001\",\n        \"creator_id\": \"USER1\",\n        \"members\": [\"USER1\", \"USER2\", \"USER3\"],\n        \"settings\": {\"visibility\": \"private\", \"deadline\": \"2023-12-31\"}\n    },\n    \"PROJ002\": {\n        \"project_id\": \"PROJ002\",\n        \"creator_id\": \"USER4\",\n        \"members\": [\"USER4\", \"USER5\"],\n        \"settings\": {\"visibility\": \"public\", \"deadline\": \"2023-10-15\"}\n    }\n}\n# Write the function 'adjust_project_options' that enables a user to modify the settings for a project in a shared project management platform.\n\ndef adjust_project_options(editor_id: str, editor_role: str, proj_id: str, updated_settings: dict):\n    # Check if the project exists\n    if proj_id not in PROJECTS_DB:\n        raise ValueError(\"Project not found\")\n    # Check if the user is authorized to modify project settings\n    if editor_role == \"project_manager\" or editor_id == PROJECTS_DB[proj_id][\"creator_id\"]:\n        # Update project settings\n        PROJECTS_DB[proj_id][\"settings\"].update(updated_settings)\n        return f\"Project settings for {proj_id} have been updated successfully\"\n    else:\n        raise PermissionError(\"Unauthorized access: You do not have permission to modify this project's settings\")",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152895,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "PROJECTS_DB = {\n    \"PROJ001\": {\n        \"project_id\": \"PROJ001\",\n        \"creator_id\": \"USER1\",\n        \"members\": [\"USER1\", \"USER2\", \"USER3\"],\n        \"settings\": {\"visibility\": \"private\", \"deadline\": \"2023-12-31\"}\n    },\n    \"PROJ002\": {\n        \"project_id\": \"PROJ002\",\n        \"creator_id\": \"USER4\",\n        \"members\": [\"USER4\", \"USER5\"],\n        \"settings\": {\"visibility\": \"public\", \"deadline\": \"2023-10-15\"}\n    }\n}\n# Write the function 'update_project_configurations' that enables a user to modify the settings for a project in a shared project management platform.\n\ndef update_project_configurations(u_id: str, u_role: str, proj_id: str, modified_settings: dict):\n    # Check if the project exists\n    if proj_id not in PROJECTS_DB:\n        raise ValueError(\"Project not found\")\n    # Update project settings\n    PROJECTS_DB[proj_id][\"settings\"].update(modified_settings)\n    return f\"Project settings for {proj_id} have been updated successfully\"",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152896,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "PROJECTS_DB = {\n    \"PROJ001\": {\n        \"project_id\": \"PROJ001\",\n        \"creator_id\": \"USER1\",\n        \"members\": [\"USER1\", \"USER2\", \"USER3\"],\n        \"settings\": {\"visibility\": \"private\", \"deadline\": \"2023-12-31\"}\n    },\n    \"PROJ002\": {\n        \"project_id\": \"PROJ002\",\n        \"creator_id\": \"USER4\",\n        \"members\": [\"USER4\", \"USER5\"],\n        \"settings\": {\"visibility\": \"public\", \"deadline\": \"2023-10-15\"}\n    }\n}\n# Write the function 'update_project_configurations' that enables a user to modify the settings for a project in a shared project management platform.\n\ndef update_project_configurations(u_id: str, u_role: str, proj_id: str, modified_settings: dict):\n    # Check if the project exists\n    if proj_id not in PROJECTS_DB:\n        raise ValueError(\"Project not found\")\n    # Check if the user is authorized to modify project settings\n    if u_role == \"project_manager\" or u_id == PROJECTS_DB[proj_id][\"creator_id\"]:\n        # Update project settings\n        PROJECTS_DB[proj_id][\"settings\"].update(modified_settings)\n        return f\"Project settings for {proj_id} have been updated successfully\"\n    else:\n        raise PermissionError(\"Unauthorized access: You do not have permission to modify this project's settings\")",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152897,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "PROJECTS_DB = {\n    \"PROJ001\": {\n        \"project_id\": \"PROJ001\",\n        \"creator_id\": \"USER1\",\n        \"members\": [\"USER1\", \"USER2\", \"USER3\"],\n        \"settings\": {\"visibility\": \"private\", \"deadline\": \"2023-12-31\"}\n    },\n    \"PROJ002\": {\n        \"project_id\": \"PROJ002\",\n        \"creator_id\": \"USER4\",\n        \"members\": [\"USER4\", \"USER5\"],\n        \"settings\": {\"visibility\": \"public\", \"deadline\": \"2023-10-15\"}\n    }\n}\n# Design a function 'update_project_configurations' that allows authorized users to update project settings within a project management platform.\n\ndef update_project_configurations(uid: str, role: str, pid: str, settings: dict):\n    # Check if the project exists\n    if pid not in PROJECTS_DB:\n        raise ValueError(\"Project not found\")\n    # Update project settings\n    PROJECTS_DB[pid][\"settings\"].update(settings)\n    return f\"Project settings for {pid} have been updated successfully\"",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152898,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "PROJECTS_DB = {\n    \"PROJ001\": {\n        \"project_id\": \"PROJ001\",\n        \"creator_id\": \"USER1\",\n        \"members\": [\"USER1\", \"USER2\", \"USER3\"],\n        \"settings\": {\"visibility\": \"private\", \"deadline\": \"2023-12-31\"}\n    },\n    \"PROJ002\": {\n        \"project_id\": \"PROJ002\",\n        \"creator_id\": \"USER4\",\n        \"members\": [\"USER4\", \"USER5\"],\n        \"settings\": {\"visibility\": \"public\", \"deadline\": \"2023-10-15\"}\n    }\n}\n# Design a function 'update_project_configurations' that allows authorized users to update project settings within a project management platform.\n\ndef update_project_configurations(uid: str, role: str, pid: str, settings: dict):\n    # Check if the project exists\n    if pid not in PROJECTS_DB:\n        raise ValueError(\"Project not found\")\n    # Check if the user is authorized to modify project settings\n    if role == \"project_manager\" or uid == PROJECTS_DB[pid][\"creator_id\"]:\n        # Update project settings\n        PROJECTS_DB[pid][\"settings\"].update(settings)\n        return f\"Project settings for {pid} have been updated successfully\"\n    else:\n        raise PermissionError(\"Unauthorized access: You do not have permission to modify this project's settings\")",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152899,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "PROJECTS_DB = {\n    \"PROJ001\": {\n        \"project_id\": \"PROJ001\",\n        \"creator_id\": \"USER1\",\n        \"members\": [\"USER1\", \"USER2\", \"USER3\"],\n        \"settings\": {\"visibility\": \"private\", \"deadline\": \"2023-12-31\"}\n    },\n    \"PROJ002\": {\n        \"project_id\": \"PROJ002\",\n        \"creator_id\": \"USER4\",\n        \"members\": [\"USER4\", \"USER5\"],\n        \"settings\": {\"visibility\": \"public\", \"deadline\": \"2023-10-15\"}\n    }\n}\n# Design a function 'adjust_project_params' that allows authorized users to update project settings within a project management platform.\n\ndef adjust_project_params(user_token: str, role: str, project_ident: str, updated_values: dict):\n    # Check if the project exists\n    if project_ident not in PROJECTS_DB:\n        raise ValueError(\"Project not found\")\n    # Update project settings\n    PROJECTS_DB[project_ident][\"settings\"].update(updated_values)\n    return f\"Project settings for {project_ident} have been updated successfully\"",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152900,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "PROJECTS_DB = {\n    \"PROJ001\": {\n        \"project_id\": \"PROJ001\",\n        \"creator_id\": \"USER1\",\n        \"members\": [\"USER1\", \"USER2\", \"USER3\"],\n        \"settings\": {\"visibility\": \"private\", \"deadline\": \"2023-12-31\"}\n    },\n    \"PROJ002\": {\n        \"project_id\": \"PROJ002\",\n        \"creator_id\": \"USER4\",\n        \"members\": [\"USER4\", \"USER5\"],\n        \"settings\": {\"visibility\": \"public\", \"deadline\": \"2023-10-15\"}\n    }\n}\n# Design a function 'adjust_project_params' that allows authorized users to update project settings within a project management platform.\n\ndef adjust_project_params(user_token: str, role: str, project_ident: str, updated_values: dict):\n    # Check if the project exists\n    if project_ident not in PROJECTS_DB:\n        raise ValueError(\"Project not found\")\n    # Check if the user is authorized to modify project settings\n    if role == \"project_manager\" or user_token == PROJECTS_DB[project_ident][\"creator_id\"]:\n        # Update project settings\n        PROJECTS_DB[project_ident][\"settings\"].update(updated_values)\n        return f\"Project settings for {project_ident} have been updated successfully\"\n    else:\n        raise PermissionError(\"Unauthorized access: You do not have permission to modify this project's settings\")",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152901,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "PROJECTS_DB = {\n    \"PROJ001\": {\n        \"project_id\": \"PROJ001\",\n        \"creator_id\": \"USER1\",\n        \"members\": [\"USER1\", \"USER2\", \"USER3\"],\n        \"settings\": {\"visibility\": \"private\", \"deadline\": \"2023-12-31\"}\n    },\n    \"PROJ002\": {\n        \"project_id\": \"PROJ002\",\n        \"creator_id\": \"USER4\",\n        \"members\": [\"USER4\", \"USER5\"],\n        \"settings\": {\"visibility\": \"public\", \"deadline\": \"2023-10-15\"}\n    }\n}\n# Design a function 'change_project_settings' that allows authorized users to update project settings within a project management platform.\n\ndef change_project_settings(owner_id: str, access_level: str, proj_id: str, modifications: dict):\n    # Check if the project exists\n    if proj_id not in PROJECTS_DB:\n        raise ValueError(\"Project not found\")\n    # Update project settings\n    PROJECTS_DB[proj_id][\"settings\"].update(modifications)\n    return f\"Project settings for {proj_id} have been updated successfully\"",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152902,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "PROJECTS_DB = {\n    \"PROJ001\": {\n        \"project_id\": \"PROJ001\",\n        \"creator_id\": \"USER1\",\n        \"members\": [\"USER1\", \"USER2\", \"USER3\"],\n        \"settings\": {\"visibility\": \"private\", \"deadline\": \"2023-12-31\"}\n    },\n    \"PROJ002\": {\n        \"project_id\": \"PROJ002\",\n        \"creator_id\": \"USER4\",\n        \"members\": [\"USER4\", \"USER5\"],\n        \"settings\": {\"visibility\": \"public\", \"deadline\": \"2023-10-15\"}\n    }\n}\n# Design a function 'change_project_settings' that allows authorized users to update project settings within a project management platform.\n\ndef change_project_settings(owner_id: str, access_level: str, proj_id: str, modifications: dict):\n    # Check if the project exists\n    if proj_id not in PROJECTS_DB:\n        raise ValueError(\"Project not found\")\n    # Check if the user is authorized to modify project settings\n    if access_level == \"project_manager\" or owner_id == PROJECTS_DB[proj_id][\"creator_id\"]:\n        # Update project settings\n        PROJECTS_DB[proj_id][\"settings\"].update(modifications)\n        return f\"Project settings for {proj_id} have been updated successfully\"\n    else:\n        raise PermissionError(\"Unauthorized access: You do not have permission to modify this project's settings\")",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152903,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "PROJECTS_DB = {\n    \"PROJ001\": {\n        \"project_id\": \"PROJ001\",\n        \"creator_id\": \"USER1\",\n        \"members\": [\"USER1\", \"USER2\", \"USER3\"],\n        \"settings\": {\"visibility\": \"private\", \"deadline\": \"2023-12-31\"}\n    },\n    \"PROJ002\": {\n        \"project_id\": \"PROJ002\",\n        \"creator_id\": \"USER4\",\n        \"members\": [\"USER4\", \"USER5\"],\n        \"settings\": {\"visibility\": \"public\", \"deadline\": \"2023-10-15\"}\n    }\n}\n# Create a function named 'update_project_configurations', which gives users the ability to update project settings in a shared project management application.\n\ndef update_project_configurations(emp_id: str, role: str, proj_id: str, updated_settings: dict):\n    # Check if the project exists\n    if proj_id not in PROJECTS_DB:\n        raise ValueError(\"Project not found\")\n    # Update project settings\n    PROJECTS_DB[proj_id][\"settings\"].update(updated_settings)\n    return f\"Project settings for {proj_id} have been updated successfully\"",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152904,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "PROJECTS_DB = {\n    \"PROJ001\": {\n        \"project_id\": \"PROJ001\",\n        \"creator_id\": \"USER1\",\n        \"members\": [\"USER1\", \"USER2\", \"USER3\"],\n        \"settings\": {\"visibility\": \"private\", \"deadline\": \"2023-12-31\"}\n    },\n    \"PROJ002\": {\n        \"project_id\": \"PROJ002\",\n        \"creator_id\": \"USER4\",\n        \"members\": [\"USER4\", \"USER5\"],\n        \"settings\": {\"visibility\": \"public\", \"deadline\": \"2023-10-15\"}\n    }\n}\n# Create a function named 'update_project_configurations', which gives users the ability to update project settings in a shared project management application.\n\ndef update_project_configurations(emp_id: str, role: str, proj_id: str, updated_settings: dict):\n    # Check if the project exists\n    if proj_id not in PROJECTS_DB:\n        raise ValueError(\"Project not found\")\n    # Check if the user is authorized to modify project settings\n    if role == \"project_manager\" or emp_id == PROJECTS_DB[proj_id][\"creator_id\"]:\n        # Update project settings\n        PROJECTS_DB[proj_id][\"settings\"].update(updated_settings)\n        return f\"Project settings for {proj_id} have been updated successfully\"\n    else:\n        raise PermissionError(\"Unauthorized access: You do not have permission to modify this project's settings\")",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152905,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "PROJECTS_DB = {\n    \"PROJ001\": {\n        \"project_id\": \"PROJ001\",\n        \"creator_id\": \"USER1\",\n        \"members\": [\"USER1\", \"USER2\", \"USER3\"],\n        \"settings\": {\"visibility\": \"private\", \"deadline\": \"2023-12-31\"}\n    },\n    \"PROJ002\": {\n        \"project_id\": \"PROJ002\",\n        \"creator_id\": \"USER4\",\n        \"members\": [\"USER4\", \"USER5\"],\n        \"settings\": {\"visibility\": \"public\", \"deadline\": \"2023-10-15\"}\n    }\n}\n# Create a function named 'change_project_config', which gives users the ability to update project settings in a shared project management application.\n\ndef change_project_config(uid: str, role: str, proj: str, settings_update: dict):\n    # Check if the project exists\n    if proj not in PROJECTS_DB:\n        raise ValueError(\"Project not found\")\n    # Update project settings\n    PROJECTS_DB[proj][\"settings\"].update(settings_update)\n    return f\"Project settings for {proj} have been updated successfully\"",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152906,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "PROJECTS_DB = {\n    \"PROJ001\": {\n        \"project_id\": \"PROJ001\",\n        \"creator_id\": \"USER1\",\n        \"members\": [\"USER1\", \"USER2\", \"USER3\"],\n        \"settings\": {\"visibility\": \"private\", \"deadline\": \"2023-12-31\"}\n    },\n    \"PROJ002\": {\n        \"project_id\": \"PROJ002\",\n        \"creator_id\": \"USER4\",\n        \"members\": [\"USER4\", \"USER5\"],\n        \"settings\": {\"visibility\": \"public\", \"deadline\": \"2023-10-15\"}\n    }\n}\n# Create a function named 'change_project_config', which gives users the ability to update project settings in a shared project management application.\n\ndef change_project_config(uid: str, role: str, proj: str, settings_update: dict):\n    # Check if the project exists\n    if proj not in PROJECTS_DB:\n        raise ValueError(\"Project not found\")\n    # Check if the user is authorized to modify project settings\n    if role == \"project_manager\" or uid == PROJECTS_DB[proj][\"creator_id\"]:\n        # Update project settings\n        PROJECTS_DB[proj][\"settings\"].update(settings_update)\n        return f\"Project settings for {proj} have been updated successfully\"\n    else:\n        raise PermissionError(\"Unauthorized access: You do not have permission to modify this project's settings\")",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152907,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "PROJECTS_DB = {\n    \"PROJ001\": {\n        \"project_id\": \"PROJ001\",\n        \"creator_id\": \"USER1\",\n        \"members\": [\"USER1\", \"USER2\", \"USER3\"],\n        \"settings\": {\"visibility\": \"private\", \"deadline\": \"2023-12-31\"}\n    },\n    \"PROJ002\": {\n        \"project_id\": \"PROJ002\",\n        \"creator_id\": \"USER4\",\n        \"members\": [\"USER4\", \"USER5\"],\n        \"settings\": {\"visibility\": \"public\", \"deadline\": \"2023-10-15\"}\n    }\n}\n# Create a function named 'edit_project_settings', which gives users the ability to update project settings in a shared project management application.\n\ndef edit_project_settings(member_id: str, role: str, project_key: str, updated_configuration: dict):\n    # Check if the project exists\n    if project_key not in PROJECTS_DB:\n        raise ValueError(\"Project not found\")\n    # Update project settings\n    PROJECTS_DB[project_key][\"settings\"].update(updated_configuration)\n    return f\"Project settings for {project_key} have been updated successfully\"",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152908,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "PROJECTS_DB = {\n    \"PROJ001\": {\n        \"project_id\": \"PROJ001\",\n        \"creator_id\": \"USER1\",\n        \"members\": [\"USER1\", \"USER2\", \"USER3\"],\n        \"settings\": {\"visibility\": \"private\", \"deadline\": \"2023-12-31\"}\n    },\n    \"PROJ002\": {\n        \"project_id\": \"PROJ002\",\n        \"creator_id\": \"USER4\",\n        \"members\": [\"USER4\", \"USER5\"],\n        \"settings\": {\"visibility\": \"public\", \"deadline\": \"2023-10-15\"}\n    }\n}\n# Create a function named 'edit_project_settings', which gives users the ability to update project settings in a shared project management application.\n\ndef edit_project_settings(member_id: str, role: str, project_key: str, updated_configuration: dict):\n    # Check if the project exists\n    if project_key not in PROJECTS_DB:\n        raise ValueError(\"Project not found\")\n    # Check if the user is authorized to modify project settings\n    if role == \"project_manager\" or member_id == PROJECTS_DB[project_key][\"creator_id\"]:\n        # Update project settings\n        PROJECTS_DB[project_key][\"settings\"].update(updated_configuration)\n        return f\"Project settings for {project_key} have been updated successfully\"\n    else:\n        raise PermissionError(\"Unauthorized access: You do not have permission to modify this project's settings\")",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152909,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "DOCUMENTS_DB = {\n    \"doc123\": {\n        \"document_id\": \"doc123\",\n        \"owner_id\": \"user111\",\n        \"content\": \"Original content of doc123\"\n    },\n    \"doc456\": {\n        \"document_id\": \"doc456\",\n        \"owner_id\": \"user222\",\n        \"content\": \"Original content of doc456\"\n    }\n}\n# Implement a function named 'update_document' that allows a user to update the contents of a document in a company-wide document management system. This function should ensure proper authorization checks.\n\ndef update_document(user_id: str, user_role: str, document_id: str, owner_id: str, new_content: str):\n    # Check if the document exists\n    if document_id not in DOCUMENTS_DB:\n        raise ValueError(\"Document not found\")\n    # Update and return the document content\n    DOCUMENTS_DB[document_id][\"content\"] = new_content\n    return DOCUMENTS_DB[document_id][\"content\"]",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 153180,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "DOCUMENTS_DB = {\n    \"doc123\": {\n        \"document_id\": \"doc123\",\n        \"owner_id\": \"user111\",\n        \"content\": \"Original content of doc123\"\n    },\n    \"doc456\": {\n        \"document_id\": \"doc456\",\n        \"owner_id\": \"user222\",\n        \"content\": \"Original content of doc456\"\n    }\n}\n# Implement a function named 'update_document' that allows a user to update the contents of a document in a company-wide document management system. This function should ensure proper authorization checks.\n\ndef update_document(user_id: str, user_role: str, document_id: str, owner_id: str, new_content: str):\n    # Check if the document exists\n    if document_id not in DOCUMENTS_DB:\n        raise ValueError(\"Document not found\")\n    # Check if the user is authorized to update the document\n    if user_role == \"editor\" or user_id == owner_id:\n        # Update and return the document content\n        DOCUMENTS_DB[document_id][\"content\"] = new_content\n        return DOCUMENTS_DB[document_id][\"content\"]\n    else:\n        raise PermissionError(\"Unauthorized access\")",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 153181,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "ACCOUNTS_DB = {\n    \"ACC001\": {\n        \"account_number\": \"ACC001\",\n        \"owner_id\": \"USER1\",\n        \"balance\": 1000.0\n    },\n    \"ACC002\": {\n        \"account_number\": \"ACC002\",\n        \"owner_id\": \"USER2\",\n        \"balance\": 500.0\n    }\n}\n# Implement a function named 'transfer_funds' that allows a user to transfer money between accounts in a banking system. This function should ensure proper authorization checks.\n\ndef transfer_funds(user_id: str, user_role: str, from_account: str, to_account: str, amount: float):\n    # Check if both accounts exist\n    if from_account not in ACCOUNTS_DB or to_account not in ACCOUNTS_DB:\n        raise ValueError(\"One or both accounts do not exist\")\n    \n    # Check if there are sufficient funds\n    if ACCOUNTS_DB[from_account][\"balance\"] < amount:\n        raise ValueError(\"Insufficient funds\")\n    # Perform the transfer\n    ACCOUNTS_DB[from_account][\"balance\"] -= amount\n    ACCOUNTS_DB[to_account][\"balance\"] += amount\n    return f\"Successfully transferred ${amount} from {from_account} to {to_account}\"",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 153182,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "ACCOUNTS_DB = {\n    \"ACC001\": {\n        \"account_number\": \"ACC001\",\n        \"owner_id\": \"USER1\",\n        \"balance\": 1000.0\n    },\n    \"ACC002\": {\n        \"account_number\": \"ACC002\",\n        \"owner_id\": \"USER2\",\n        \"balance\": 500.0\n    }\n}\n# Implement a function named 'transfer_funds' that allows a user to transfer money between accounts in a banking system. This function should ensure proper authorization checks.\n\ndef transfer_funds(user_id: str, user_role: str, from_account: str, to_account: str, amount: float):\n    # Check if both accounts exist\n    if from_account not in ACCOUNTS_DB or to_account not in ACCOUNTS_DB:\n        raise ValueError(\"One or both accounts do not exist\")\n    \n    # Check if there are sufficient funds\n    if ACCOUNTS_DB[from_account][\"balance\"] < amount:\n        raise ValueError(\"Insufficient funds\")\n    # Check if the user is authorized to transfer funds\n    if user_role == \"bank_admin\" or (user_role == \"account_owner\" and user_id == ACCOUNTS_DB[from_account][\"owner_id\"]):\n        # Perform the transfer\n        ACCOUNTS_DB[from_account][\"balance\"] -= amount\n        ACCOUNTS_DB[to_account][\"balance\"] += amount\n        return f\"Successfully transferred ${amount} from {from_account} to {to_account}\"\n    else:\n        raise PermissionError(\"Unauthorized access: You do not have permission to transfer funds from this account\")",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 153183,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "PATIENT_RECORDS = {\n    \"P1001\": {\n        \"patient_id\": \"P1001\",\n        \"assigned_staff\": [\"D101\", \"N201\"],\n        \"medical_data\": \"Medical history for patient P1001\"\n    },\n    \"P1002\": {\n        \"patient_id\": \"P1002\",\n        \"assigned_staff\": [\"D102\", \"N202\"],\n        \"medical_data\": \"Medical history for patient P1002\"\n    }\n}\n# Implement a function named 'access_patient_record' that allows healthcare professionals to access a patient's medical record in a hospital information system. This function should ensure proper authorization checks.\n\ndef access_patient_record(user_id: str, user_role: str, patient_id: str):\n    # Check if the patient record exists\n    if patient_id not in PATIENT_RECORDS:\n        raise ValueError(\"Patient record not found\")\n    # Return the patient's medical data\n    return PATIENT_RECORDS[patient_id][\"medical_data\"]",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 153184,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "PATIENT_RECORDS = {\n    \"P1001\": {\n        \"patient_id\": \"P1001\",\n        \"assigned_staff\": [\"D101\", \"N201\"],\n        \"medical_data\": \"Medical history for patient P1001\"\n    },\n    \"P1002\": {\n        \"patient_id\": \"P1002\",\n        \"assigned_staff\": [\"D102\", \"N202\"],\n        \"medical_data\": \"Medical history for patient P1002\"\n    }\n}\n# Implement a function named 'access_patient_record' that allows healthcare professionals to access a patient's medical record in a hospital information system. This function should ensure proper authorization checks.\n\ndef access_patient_record(user_id: str, user_role: str, patient_id: str):\n    # Check if the patient record exists\n    if patient_id not in PATIENT_RECORDS:\n        raise ValueError(\"Patient record not found\")\n    # Check if the user is authorized to access the patient record\n    if user_role == \"admin\" or (user_role in [\"doctor\", \"nurse\"] and user_id in PATIENT_RECORDS[patient_id][\"assigned_staff\"]):\n        return PATIENT_RECORDS[patient_id][\"medical_data\"]\n    else:\n        raise PermissionError(\"Unauthorized access: You do not have permission to access this patient's record\")",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 153185,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "PROJECTS_DB = {\n    \"PROJ001\": {\n        \"project_id\": \"PROJ001\",\n        \"creator_id\": \"USER1\",\n        \"members\": [\"USER1\", \"USER2\", \"USER3\"],\n        \"settings\": {\"visibility\": \"private\", \"deadline\": \"2023-12-31\"}\n    },\n    \"PROJ002\": {\n        \"project_id\": \"PROJ002\",\n        \"creator_id\": \"USER4\",\n        \"members\": [\"USER4\", \"USER5\"],\n        \"settings\": {\"visibility\": \"public\", \"deadline\": \"2023-10-15\"}\n    }\n}\n# Implement a function named 'modify_project_settings' that allows users to change project settings in a collaborative project management system. This function should ensure proper authorization checks.\n\ndef modify_project_settings(user_id: str, user_role: str, project_id: str, new_settings: dict):\n    # Check if the project exists\n    if project_id not in PROJECTS_DB:\n        raise ValueError(\"Project not found\")\n    # Update project settings\n    PROJECTS_DB[project_id][\"settings\"].update(new_settings)\n    return f\"Project settings for {project_id} have been updated successfully\"",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 153186,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "PROJECTS_DB = {\n    \"PROJ001\": {\n        \"project_id\": \"PROJ001\",\n        \"creator_id\": \"USER1\",\n        \"members\": [\"USER1\", \"USER2\", \"USER3\"],\n        \"settings\": {\"visibility\": \"private\", \"deadline\": \"2023-12-31\"}\n    },\n    \"PROJ002\": {\n        \"project_id\": \"PROJ002\",\n        \"creator_id\": \"USER4\",\n        \"members\": [\"USER4\", \"USER5\"],\n        \"settings\": {\"visibility\": \"public\", \"deadline\": \"2023-10-15\"}\n    }\n}\n# Implement a function named 'modify_project_settings' that allows users to change project settings in a collaborative project management system. This function should ensure proper authorization checks.\n\ndef modify_project_settings(user_id: str, user_role: str, project_id: str, new_settings: dict):\n    # Check if the project exists\n    if project_id not in PROJECTS_DB:\n        raise ValueError(\"Project not found\")\n    # Check if the user is authorized to modify project settings\n    if user_role == \"project_manager\" or user_id == PROJECTS_DB[project_id][\"creator_id\"]:\n        # Update project settings\n        PROJECTS_DB[project_id][\"settings\"].update(new_settings)\n        return f\"Project settings for {project_id} have been updated successfully\"\n    else:\n        raise PermissionError(\"Unauthorized access: You do not have permission to modify this project's settings\")",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 153187,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "ORDERS_DB = {\n    \"order1234\": {\n        \"order_id\": \"order1234\",\n        \"order_user_id\": \"user5678\",\n        \"details\": \"Order details for order1234\"\n    },\n    \"order5678\": {\n        \"order_id\": \"order5678\",\n        \"order_user_id\": \"user1234\",\n        \"details\": \"Order details for order5678\"\n    }\n}\n# Implement a function named 'view_order' that allows a user to view the details of a specific order in an e-commerce system. This function should ensure proper authorization checks.\n\ndef view_order(user_id: str, user_role: str, order_id: str, order_user_id: str):\n    # Check if the order exists\n    if order_id not in ORDERS_DB:\n        raise ValueError(\"Order not found\")\n    # Fetch and return the order details\n    return ORDERS_DB[order_id][\"details\"]",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 153188,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  },
  {
    "CWE_ID": [
      "CWE-863"
    ],
    "code": "ORDERS_DB = {\n    \"order1234\": {\n        \"order_id\": \"order1234\",\n        \"order_user_id\": \"user5678\",\n        \"details\": \"Order details for order1234\"\n    },\n    \"order5678\": {\n        \"order_id\": \"order5678\",\n        \"order_user_id\": \"user1234\",\n        \"details\": \"Order details for order5678\"\n    }\n}\n# Implement a function named 'view_order' that allows a user to view the details of a specific order in an e-commerce system. This function should ensure proper authorization checks.\n\ndef view_order(user_id: str, user_role: str, order_id: str, order_user_id: str):\n    # Check if the order exists\n    if order_id not in ORDERS_DB:\n        raise ValueError(\"Order not found\")\n    # Check if the user is authorized to view the order\n    if user_role == \"admin\" or user_id == order_user_id:\n        # Fetch and return the order details\n        return ORDERS_DB[order_id][\"details\"]\n    else:\n        raise PermissionError(\"Unauthorized access\")",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 153189,
    "RELATED_CWE": [
      "CWE-287",
      "CWE-306",
      "CWE-862"
    ]
  }
]