[
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def build_board(conn, game,size):\n    # we'll build the empty board, and then fill in with the move list that\n    # we get from the DB.\n    board = []\n    for i in range(size):\n        board.append([\"\"]*size)\n\n\n    # search for all moves that have happenend during this game.\n    cursor = conn.cursor()\n    cursor.execute(\"SELECT x,y,letter FROM moves WHERE gameID = %d;\" % game)\n\n    counts = {\"X\":0, \"O\":0}\n    for move in cursor.fetchall():\n        (x,y,letter) = move\n\n        x = int(x)\n        y = int(y)\n        assert x >= 0 and x < size\n        assert y >= 0 and y < size\n\n        assert letter in \"XO\"\n\n        assert board[x][y] == \"\"\n        board[x][y] = letter\n\n        counts[letter] += 1\n\n    cursor.close()\n\n    assert counts[\"X\"] >= counts[\"O\"]\n    assert counts[\"X\"] <= counts[\"O\"]+1\n\n    if counts[\"X\"] == counts[\"O\"]:\n        nextPlayer = 0\n    else:\n        nextPlayer = 1\n    letter = \"XO\"[nextPlayer]\n\n    return (board,nextPlayer,letter)",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149118,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ],
    "human": "Correct"
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def build_board(conn, game,size):\n    # we'll build the empty board, and then fill in with the move list that\n    # we get from the DB.\n    board = []\n    for i in range(size):\n        board.append([\"\"]*size)\n\n\n    # search for all moves that have happenend during this game.\n    cursor = conn.cursor()\n    cursor.execute(\"SELECT x,y,letter FROM moves WHERE gameID = %d;\", (game,))\n\n    counts = {\"X\":0, \"O\":0}\n    for move in cursor.fetchall():\n        (x,y,letter) = move\n\n        x = int(x)\n        y = int(y)\n        assert x >= 0 and x < size\n        assert y >= 0 and y < size\n\n        assert letter in \"XO\"\n\n        assert board[x][y] == \"\"\n        board[x][y] = letter\n\n        counts[letter] += 1\n\n    cursor.close()\n\n    assert counts[\"X\"] >= counts[\"O\"]\n    assert counts[\"X\"] <= counts[\"O\"]+1\n\n    if counts[\"X\"] == counts[\"O\"]:\n        nextPlayer = 0\n    else:\n        nextPlayer = 1\n    letter = \"XO\"[nextPlayer]\n\n    return (board,nextPlayer,letter)",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149119,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ],
    "human": "Correct"
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def check_and_update_ranks(self, scene):\n        # There are 2 cases here:\n        #   1) Ranks have never been calculated for this scene before\n        #       - This means we need to calculate what the ranks were every month of this scenes history\n        #       - We should only do this if ranks don't already exist for this scene\n        #   2) Ranks have been calculated for this scene before\n        #       - We already have bulk ranks. We should check if it has been more than 1 month since we last\n        #           calculated ranks. If so, calculate again with the brackets that have come out this month\n\n        LOG.info('About to check if ranks need updating for {}'.format(scene))\n        # First, do we have any ranks for this scene already?\n        sql = 'select count(*) from ranks where scene=\"{}\";'.format(scene)\n        res = self.db.exec(sql)\n        count = res[0][0]\n\n        n = 5 if (scene == 'pro' or scene == 'pro_wiiu') else constants.TOURNAMENTS_PER_RANK\n        if count == 0:\n            LOG.info('Detected that we need to bulk update ranks for {}'.format(scene))\n            # Alright, we have nothing. Bulk update ranks\n            first_month = bracket_utils.get_first_month(self.db, scene)\n            last_month = bracket_utils.get_last_month(self.db, scene)\n            \n            # Iterate through all tournaments going month by month, and calculate ranks\n            months = bracket_utils.iter_months(first_month, last_month, include_first=False, include_last=True)\n            for month in months:\n                urls, _ = bracket_utils.get_n_tournaments_before_date(self.db, scene, month, n)\n                self.process_ranks(scene, urls, month)\n        else:\n\n            # Get the date of the last time we calculated ranks\n            sql = \"select date from ranks where scene='{}' order by date desc limit 1;\".format(scene)\n            res = self.db.exec(sql)\n            last_rankings_date = res[0][0]\n\n            # Check to see if it's been more than 1 month since we last calculated ranks\n            more_than_one_month = bracket_utils.has_month_passed(last_rankings_date)\n            if more_than_one_month:\n                # Get only the last n tournaments, so it doesn't take too long to process\n                today = datetime.datetime.today().strftime('%Y-%m-%d')\n                msg = 'Detected that we need up update monthly ranks for {}, on {}'.format(scene, today)\n                LOG.info(msg)\n\n                # We should only ever calculate ranks on the 1st. If today is not the first, log error\n                if not today.split('-')[-1] == '1':\n                    LOG.exc('We are calculating ranks today, {}, but it isnt the first'.format(today))\n\n                months = bracket_utils.iter_months(last_rankings_date, today, include_first=False, include_last=True)\n                for month in months:\n                    # Make sure that we actually have matches during this month\n                    # Say we are trying to calculate ranks for 2018-05-01, the player would need to have matches during 2018-04-01, 2018-04-30\n                    prev_date = bracket_utils.get_previous_month(month)\n                    brackets_during_month = bracket_utils.get_tournaments_during_month(self.db, scene, prev_date)\n\n                    if len(brackets_during_month) > 0:\n                        tweet('Calculating {} ranks for {}'.format(month, scene))\n                        urls, _ = bracket_utils.get_n_tournaments_before_date(self.db, scene, month, n)\n                        self.process_ranks(scene, urls, month)\n\n            else:\n                LOG.info('It has not yet been 1 month since we calculated ranks for {}. Skipping'.format(scene))",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149120,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ],
    "human": "Correct"
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def check_and_update_ranks(self, scene):\n        # There are 2 cases here:\n        #   1) Ranks have never been calculated for this scene before\n        #       - This means we need to calculate what the ranks were every month of this scenes history\n        #       - We should only do this if ranks don't already exist for this scene\n        #   2) Ranks have been calculated for this scene before\n        #       - We already have bulk ranks. We should check if it has been more than 1 month since we last\n        #           calculated ranks. If so, calculate again with the brackets that have come out this month\n\n        LOG.info('About to check if ranks need updating for {}'.format(scene))\n        # First, do we have any ranks for this scene already?\n        sql = 'select count(*) from ranks where scene=\"{scene}\";'\n        args = {'scene': scene}\n        res = self.db.exec(sql, args)\n        count = res[0][0]\n\n        n = 5 if (scene == 'pro' or scene == 'pro_wiiu') else constants.TOURNAMENTS_PER_RANK\n        if count == 0:\n            LOG.info('Detected that we need to bulk update ranks for {}'.format(scene))\n            # Alright, we have nothing. Bulk update ranks\n            first_month = bracket_utils.get_first_month(self.db, scene)\n            last_month = bracket_utils.get_last_month(self.db, scene)\n            \n            # Iterate through all tournaments going month by month, and calculate ranks\n            months = bracket_utils.iter_months(first_month, last_month, include_first=False, include_last=True)\n            for month in months:\n                urls, _ = bracket_utils.get_n_tournaments_before_date(self.db, scene, month, n)\n                self.process_ranks(scene, urls, month)\n        else:\n\n            # Get the date of the last time we calculated ranks\n            sql = \"select date from ranks where scene='{scene}' order by date desc limit 1;\"\n            args = {'scene': scene}\n            res = self.db.exec(sql, args)\n            last_rankings_date = res[0][0]\n\n            # Check to see if it's been more than 1 month since we last calculated ranks\n            more_than_one_month = bracket_utils.has_month_passed(last_rankings_date)\n            if more_than_one_month:\n                # Get only the last n tournaments, so it doesn't take too long to process\n                today = datetime.datetime.today().strftime('%Y-%m-%d')\n                msg = 'Detected that we need up update monthly ranks for {}, on {}'.format(scene, today)\n                LOG.info(msg)\n\n                # We should only ever calculate ranks on the 1st. If today is not the first, log error\n                if not today.split('-')[-1] == '1':\n                    LOG.exc('We are calculating ranks today, {}, but it isnt the first'.format(today))\n\n                months = bracket_utils.iter_months(last_rankings_date, today, include_first=False, include_last=True)\n                for month in months:\n                    # Make sure that we actually have matches during this month\n                    # Say we are trying to calculate ranks for 2018-05-01, the player would need to have matches during 2018-04-01, 2018-04-30\n                    prev_date = bracket_utils.get_previous_month(month)\n                    brackets_during_month = bracket_utils.get_tournaments_during_month(self.db, scene, prev_date)\n\n                    if len(brackets_during_month) > 0:\n                        tweet('Calculating {} ranks for {}'.format(month, scene))\n                        urls, _ = bracket_utils.get_n_tournaments_before_date(self.db, scene, month, n)\n                        self.process_ranks(scene, urls, month)\n\n            else:\n                LOG.info('It has not yet been 1 month since we calculated ranks for {}. Skipping'.format(scene))",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149121,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ],
    "human": "Correct"
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def tag_num_to_tag(self, tag_num):\n        ''' Returns tag given tag_num. '''\n\n        q = \"SELECT tag FROM tags WHERE rowid = '\" + str(tag_num) + \"'\"\n        self.query(q)\n        return self.c.fetchone()[0]",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149122,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ],
    "human": "Correct"
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def tag_num_to_tag(self, tag_num):\n        ''' Returns tag given tag_num. '''\n\n        q = \"SELECT tag FROM tags WHERE rowid = ?\"\n        self.query(q, tag_num)\n        return self.c.fetchone()[0]",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149123,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ],
    "human": "Correct"
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@api.route('/items/<int:item_id>', methods=['GET'])\ndef get_item(item_id):\n    sql = '''SELECT id, name_enus FROM tblDBCItem WHERE id = {} AND auctionable = true;'''.format(item_id)\n    cursor = mysql.connection.cursor()\n    cursor.execute(sql)\n    data = cursor.fetchone()\n\n    if data:\n        item = {}\n        for tup in zip([column[0] for column in cursor.description], data):\n            item[tup[0]] = tup[1]\n    else:\n        return jsonify({\"error\": \"item not found\"}), 404\n\n    return jsonify(item)",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149124,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ],
    "human": "Correct"
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@api.route('/items/<int:item_id>', methods=['GET'])\ndef get_item(item_id):\n    sql = '''SELECT id, name_enus FROM tblDBCItem WHERE id = %s AND auctionable = true;'''\n    cursor = mysql.connection.cursor()\n    cursor.execute(sql, [item_id])\n    data = cursor.fetchone()\n\n    if data:\n        item = {}\n        for tup in zip([column[0] for column in cursor.description], data):\n            item[tup[0]] = tup[1]\n    else:\n        return jsonify({\"error\": \"item not found\"}), 404\n\n    return jsonify(item)",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149125,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ],
    "human": "Correct"
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def getPostsByPostid(self,postid):\n        sqlText=\"select users.name,post.comment from users,post where \\\n                users.userid=post.userid and post.postid=%d\"%(postid)\n        result=sql.queryDB(self.conn,sqlText)\n        return result;",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149126,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def getPostsByPostid(self,postid):\n        sqlText=\"select users.name,post.comment from users,post where \\\n                users.userid=post.userid and post.postid=%s\"\n        params=[postid]\n        result=sql.queryDB(self.conn,sqlText,params)\n        return result;",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149127,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\tdef getFileCacheID(self, pth):\n\t\t\"\"\"\n\t\tReturns ID of a cached file on Telegram from DB. None if file doesn't exist or has no cached ID.\n\t\t:param pth:\n\t\t:return:\n\t\t\"\"\"\n\t\tcommand = \"SELECT file_id FROM {0} WHERE path='{1}'\".format(TABLE_NAME, pth)\n\t\tdata = self._run_command(command)\n\n\t\ttry:\n\t\t\tdata = data[0][0]\n\t\texcept IndexError:\n\t\t\tdata = None\n\n\t\treturn data",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149128,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\tdef getFileCacheID(self, pth):\n\t\t\"\"\"\n\t\tReturns ID of a cached file on Telegram from DB. None if file doesn't exist or has no cached ID.\n\t\t:param pth:\n\t\t:return:\n\t\t\"\"\"\n\t\tcommand = \"SELECT file_id FROM {0} WHERE path=?;\".format(TABLE_NAME)\n\t\tparams = (pth,)\n\t\tdata = self._run_command(command, params)\n\n\t\ttry:\n\t\t\tdata = data[0][0]\n\t\texcept IndexError:\n\t\t\tdata = None\n\n\t\treturn data",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149129,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def add_post(content):\n  \"\"\"Add a post to the 'database' with the current timestamp.\"\"\"\n  db = psycopg2.connect(database=DBNAME)\n  c = db.cursor()\n  c.execute(\"insert into posts values('%s')\" % content)\n  db.commit()\n  db.close()",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149130,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def add_post(content):\n  \"\"\"Add a post to the 'database' with the current timestamp.\"\"\"\n  db = psycopg2.connect(database=DBNAME)\n  c = db.cursor()\n  c.execute(\"insert into posts values(%s)\",(content,))\n  db.commit()\n  db.close()",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149131,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def getSubmissionDateFromDatabase(submission):\n    database = sqlite3.connect('database.db')\n    cursor = database.cursor()\n    return cursor.execute(\"SELECT Date FROM ChallengeRankings WHERE SubmissionID = '\" + str(submission.id) + \"'\").fetchone()[0]\n    database.close()",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149132,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def getSubmissionDateFromDatabase(submission):\n    database = sqlite3.connect('database.db')\n    cursor = database.cursor()\n    return cursor.execute(\"SELECT Date FROM ChallengeRankings WHERE SubmissionID = ?\", [str(submission.id)]).fetchone()[0]\n    database.close()",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149133,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@endpoints.route(\"/ranks\")\ndef ranks():\n    if db == None:\n        init()\n\n    scene = request.args.get('scene', default='austin')\n    date = request.args.get('date')\n \n    # If no date was provided, pick the date of the latest tournament\n    if date == None:\n        sql = \"SELECT distinct date FROM ranks WHERE scene='{}' ORDER BY date DESC LIMIT 1;\".format(scene)\n        res = db.exec(sql)\n        date = res[0][0]\n\n    # Get all the urls that this player has participated in\n    sql = \"SELECT * FROM ranks WHERE scene = '{}' and date='{}'\".format(scene, date)\n    res = db.exec(sql)\n\n    # Make a dict out of this data\n    # eg {'christmasmike': 50}\n    cur_ranks = {}\n    for r in res:\n        tag = r[1]\n        rank = r[2]\n\n        cur_ranks[tag] = rank\n\n    # Now get the ranks from last month, so we know if these players went up or down\n    y, m, d = date.split('-')\n    prev_date = bracket_utils.get_previous_month(date)\n\n    # Get all the urls that this player has participated in\n    sql = \"SELECT * FROM ranks WHERE scene = '{}' and date='{}'\".format(scene, prev_date)\n    res = db.exec(sql)\n\n    # Make a dict out of this data\n    # eg {'christmasmike': 50}\n    prev_ranks = {}\n    for r in res:\n        tag = r[1]\n        rank = r[2]\n\n        prev_ranks[tag] = rank\n\n    return render_template('libraries/html/ranks.html', cur_ranks=cur_ranks, prev_ranks=prev_ranks, scene=scene, date=date)",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149134,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@endpoints.route(\"/ranks\")\ndef ranks():\n    if db == None:\n        init()\n\n    scene = request.args.get('scene', default='austin')\n    date = request.args.get('date')\n \n    # If no date was provided, pick the date of the latest tournament\n    if date == None:\n        sql = \"SELECT distinct date FROM ranks WHERE scene='{scene}' ORDER BY date DESC LIMIT 1;\"\n        args = {'scene': scene}\n        res = db.exec(sql, args)\n        date = res[0][0]\n\n    # Get all the urls that this player has participated in\n    sql = \"SELECT * FROM ranks WHERE scene = '{scene}' and date='{date}'\"\n    args = {'scene': scene, 'date': date}\n    res = db.exec(sql, args)\n\n    # Make a dict out of this data\n    # eg {'christmasmike': 50}\n    cur_ranks = {}\n    for r in res:\n        tag = r[1]\n        rank = r[2]\n\n        cur_ranks[tag] = rank\n\n    # Now get the ranks from last month, so we know if these players went up or down\n    y, m, d = date.split('-')\n    prev_date = bracket_utils.get_previous_month(date)\n\n    # Get all the urls that this player has participated in\n    sql = \"SELECT * FROM ranks WHERE scene = '{scene}' and date='{date}'\"\n    args = {'scene': scene, 'date': prev_date}\n    res = db.exec(sql, args)\n\n    # Make a dict out of this data\n    # eg {'christmasmike': 50}\n    prev_ranks = {}\n    for r in res:\n        tag = r[1]\n        rank = r[2]\n\n        prev_ranks[tag] = rank\n\n    return render_template('libraries/html/ranks.html', cur_ranks=cur_ranks, prev_ranks=prev_ranks, scene=scene, date=date)",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149135,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def set_language(self, lang):\n        \"\"\"\n        Update language of user in the User object and in the database\n        :param lang: string with language tag like \"en-US\"\n        :return: None\n        \"\"\"\n        log.debug('Updating info about user %s language '\n                  'in memory & database...', self)\n\n        self.language = lang\n\n        query = (\"UPDATE users \"\n                 f\"SET language='{self.language}' \"\n                 f\"WHERE chat_id='{self.chat_id}'\")\n\n        try:\n            db.add(query)\n        except DatabaseError:\n            log.error(\"Can't add new language of %s to the database\", self)\n        else:\n            log.debug('Language updated.')",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149136,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def set_language(self, lang):\n        \"\"\"\n        Update language of user in the User object and in the database\n        :param lang: string with language tag like \"en-US\"\n        :return: None\n        \"\"\"\n        log.debug('Updating info about user %s language '\n                  'in memory & database...', self)\n\n        self.language = lang\n\n        query = (\"UPDATE users \"\n                 f\"SET language=%s \"\n                 f\"WHERE chat_id=%s\")\n\n        parameters = self.language, self.chat_id\n        try:\n            db.add(query, parameters)\n        except DatabaseError:\n            log.error(\"Can't add new language of %s to the database\", self)\n        else:\n            log.debug('Language updated.')",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149137,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def tid_num_to_tag_nums(self, tid_num):\n        ''' Returns list of the associated tag_nums to the given tid_num. '''\n\n        q = \"SELECT tag FROM tid_tag WHERE tid = '\" + str(tid_num) + \"'\"\n        self.query(q)\n        return [i[0] for i in self.c.fetchall()]",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149138,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def tid_num_to_tag_nums(self, tid_num):\n        ''' Returns list of the associated tag_nums to the given tid_num. '''\n\n        q = \"SELECT tag FROM tid_tag WHERE tid = ?\"\n        self.query(q, tid_num)\n        return [i[0] for i in self.c.fetchall()]",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149139,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@app.route('/summary', methods=['GET'])\ndef summary():\n\tif 'username' in session:\n\n\t\tconn = mysql.connect()\n\t\tcursor = conn.cursor()\n\n\t\t#select the maximum score from the results table\n\t\tcursor.execute(\"SELECT courseConcentration FROM results WHERE total = (SELECT MAX(total) FROM (SELECT * FROM results WHERE courseId > 4) Temp) and courseId > 4 and emailAccount='\" + session['username'] + \"'\");\n\t\tcourseConcentration = cursor.fetchone()\n\n\t\treturn render_template('summary.html', courseConcentration = courseConcentration[0])\n\treturn redirect(url_for('login'))",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149140,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@app.route('/summary', methods=['GET'])\ndef summary():\n\tif 'username' in session:\n\n\t\tconn = mysql.connect()\n\t\tcursor = conn.cursor()\n\n\t\t#select the maximum score from the results table\n\t\tcursor.execute(\"SELECT courseConcentration FROM results WHERE total = (SELECT MAX(total) FROM (SELECT * FROM results WHERE courseId > 4) Temp) and courseId > 4 and emailAccount=%s\", (session['username']));\n\t\tcourseConcentration = cursor.fetchone()\n\n\t\treturn render_template('summary.html', courseConcentration = courseConcentration[0])\n\treturn redirect(url_for('login'))",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149141,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def add_post(content):\n  \"\"\"Add a post to the 'database' with the current timestamp.\"\"\"\n  conn = psycopg2.connect(\"dbname=forum\")\n  cursor = conn.cursor()\n  cursor.execute(\"insert into posts values ('%s')\" % content)\n  conn.commit()\n  conn.close()",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149142,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def add_post(content):\n  \"\"\"Add a post to the 'database' with the current timestamp.\"\"\"\n  conn = psycopg2.connect(\"dbname=forum\")\n  cursor = conn.cursor()\n  one_post = content\n  cursor.execute(\"insert into posts values (%s)\", (one_post,))\n  conn.commit()\n  conn.close()",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149143,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def delete_playlist(id, db):\n    db.execute(\"DELETE FROM playlist where id={id};\".format(id=id))",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149144,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def delete_playlist(id, db):\n    db.execute(\"DELETE FROM playlist where id=%s;\", (id,))",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149145,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def writeToDb(self, url):\n        try:\n            self.cursor.execute(\"INSERT INTO queue (url, visited) VALUES ('{}', '0');\".format(url))\n            self.db.commit()\n        except Exception as e:\n            print(e)",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149146,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def writeToDb(self, url):\n        try:\n            self.cursor.execute(\"INSERT INTO queue (url, visited) VALUES (?, '0');\", url)\n            self.db.commit()\n        except Exception as e:\n            print(e)",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149147,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@frappe.whitelist(allow_guest=True)\ndef send_message(subject=\"Website Query\", message=\"\", sender=\"\", status=\"Open\"):\n\tfrom frappe.www.contact import send_message as website_send_message\n\tlead = customer = None\n\n\twebsite_send_message(subject, message, sender)\n\n\tcustomer = frappe.db.sql(\"\"\"select distinct dl.link_name from `tabDynamic Link` dl\n\t\tleft join `tabContact` c on dl.parent=c.name where dl.link_doctype='Customer'\n\t\tand c.email_id='{email_id}'\"\"\".format(email_id=sender))\n\n\tif not customer:\n\t\tlead = frappe.db.get_value('Lead', dict(email_id=sender))\n\t\tif not lead:\n\t\t\tnew_lead = frappe.get_doc(dict(\n\t\t\t\tdoctype='Lead',\n\t\t\t\temail_id = sender,\n\t\t\t\tlead_name = sender.split('@')[0].title()\n\t\t\t)).insert(ignore_permissions=True)\n\n\topportunity = frappe.get_doc(dict(\n\t\tdoctype ='Opportunity',\n\t\tenquiry_from = 'Customer' if customer else 'Lead',\n\t\tstatus = 'Open',\n\t\ttitle = subject,\n\t\tcontact_email = sender,\n\t\tto_discuss = message\n\t))\n\n\tif customer:\n\t\topportunity.customer = customer[0][0]\n\telif lead:\n\t\topportunity.lead = lead\n\telse:\n\t\topportunity.lead = new_lead.name\n\n\topportunity.insert(ignore_permissions=True)\n\n\tcomm = frappe.get_doc({\n\t\t\"doctype\":\"Communication\",\n\t\t\"subject\": subject,\n\t\t\"content\": message,\n\t\t\"sender\": sender,\n\t\t\"sent_or_received\": \"Received\",\n\t\t'reference_doctype': 'Opportunity',\n\t\t'reference_name': opportunity.name\n\t})\n\tcomm.insert(ignore_permissions=True)\n\n\treturn \"okay\"",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149148,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@frappe.whitelist(allow_guest=True)\ndef send_message(subject=\"Website Query\", message=\"\", sender=\"\", status=\"Open\"):\n\tfrom frappe.www.contact import send_message as website_send_message\n\tlead = customer = None\n\n\twebsite_send_message(subject, message, sender)\n\n\tcustomer = frappe.db.sql(\"\"\"select distinct dl.link_name from `tabDynamic Link` dl\n\t\tleft join `tabContact` c on dl.parent=c.name where dl.link_doctype='Customer'\n\t\tand c.email_id = %s\"\"\", sender)\n\n\tif not customer:\n\t\tlead = frappe.db.get_value('Lead', dict(email_id=sender))\n\t\tif not lead:\n\t\t\tnew_lead = frappe.get_doc(dict(\n\t\t\t\tdoctype='Lead',\n\t\t\t\temail_id = sender,\n\t\t\t\tlead_name = sender.split('@')[0].title()\n\t\t\t)).insert(ignore_permissions=True)\n\n\topportunity = frappe.get_doc(dict(\n\t\tdoctype ='Opportunity',\n\t\tenquiry_from = 'Customer' if customer else 'Lead',\n\t\tstatus = 'Open',\n\t\ttitle = subject,\n\t\tcontact_email = sender,\n\t\tto_discuss = message\n\t))\n\n\tif customer:\n\t\topportunity.customer = customer[0][0]\n\telif lead:\n\t\topportunity.lead = lead\n\telse:\n\t\topportunity.lead = new_lead.name\n\n\topportunity.insert(ignore_permissions=True)\n\n\tcomm = frappe.get_doc({\n\t\t\"doctype\":\"Communication\",\n\t\t\"subject\": subject,\n\t\t\"content\": message,\n\t\t\"sender\": sender,\n\t\t\"sent_or_received\": \"Received\",\n\t\t'reference_doctype': 'Opportunity',\n\t\t'reference_name': opportunity.name\n\t})\n\tcomm.insert(ignore_permissions=True)\n\n\treturn \"okay\"",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149149,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    @jwt_required\n    def delete(self, email):\n        \"\"\" Deletes admin with the corresponding email \"\"\"\n        return database_utilities.execute_query(f\"\"\"delete from admins where email = '{email}'\"\"\")",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149150,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    @jwt_required\n    def delete(self, email):\n        \"\"\" Deletes admin with the corresponding email \"\"\"\n        return database_utilities.execute_query(f\"\"\"delete from admins where email = %s\"\"\", (email, ))",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149151,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def delete_playlists_videos(playlist_id, db):\n    db.execute(\"DELETE FROM video where playlist_id={playlist_id};\".format(\n        playlist_id=playlist_id))",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149152,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def delete_playlists_videos(playlist_id, db):\n    db.execute(\"DELETE FROM video where playlist_id=%s;\", (playlist_id,))",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149153,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    @staticmethod\n    def upsert_mapped_projects(user_id: int, project_id: int):\n        \"\"\" Adds projects to mapped_projects if it doesn't exist \"\"\"\n        sql = \"select * from users where id = {0} and projects_mapped @> '{{{1}}}'\".format(user_id, project_id)\n        result = db.engine.execute(sql)\n\n        if result.rowcount > 0:\n            return  # User has previously mapped this project so return\n\n        sql = '''update users\n                    set projects_mapped = array_append(projects_mapped, {0})\n                  where id = {1}'''.format(project_id, user_id)\n\n        db.engine.execute(sql)",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149154,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    @staticmethod\n    def upsert_mapped_projects(user_id: int, project_id: int):\n        \"\"\" Adds projects to mapped_projects if it doesn't exist \"\"\"\n        sql = \"select * from users where id = :user_id and projects_mapped @> '{{:project_id}}'\"\n        result = db.engine.execute(text(sql), user_id=user_id, project_id=project_id)\n\n        if result.rowcount > 0:\n            return  # User has previously mapped this project so return\n\n        sql = '''update users\n                    set projects_mapped = array_append(projects_mapped, :project_id)\n                  where id = :user_id'''\n\n        db.engine.execute(text(sql), project_id=project_id, user_id=user_id)",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149155,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def get_first_ranked_month(db, scene, player):\n    sql = \"select date from ranks where scene='{}' and player='{}' order by date limit 1;\".format(scene, player)\n    res = db.exec(sql)\n    date = res[0][0]\n    return date",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149156,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def get_first_ranked_month(db, scene, player):\n    sql = \"select date from ranks where scene='{scene}' and player='{player}' order by date limit 1;\"\n    args = {'scene': scene, 'player': player}\n    res = db.exec(sql, args)\n    date = res[0][0]\n    return date",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149157,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@hook.command(adminonly=True)\ndef openPoll(question, reply=None, db=None):\n    \"\"\"Creates a new poll.\"\"\"\n    if not db_ready: db_init(db)\n    try:\n        active = db.execute(\"SELECT pollID FROM polls WHERE active = 1\").fetchone()[0]\n        if active: \n            reply(\"There already is an open poll.\")\n            return\n    except:\n        db.execute(\"INSERT INTO polls (question, active) VALUES ('{}', 1)\".format(question))\n        reply(\"Opened new poll: {}\".format(question))\n        #reply(\"Poll opened!\")\n    return",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149158,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@hook.command(adminonly=True)\ndef openPoll(question, reply=None, db=None):\n    \"\"\"Creates a new poll.\"\"\"\n    if not db_ready: db_init(db)\n    try:\n        active = db.execute(\"SELECT pollID FROM polls WHERE active = 1\").fetchone()[0]\n        if active: \n            reply(\"There already is an open poll.\")\n            return\n    except:\n        db.execute(\"INSERT INTO polls (question, active) VALUES (?, 1)\", (question,))\n        reply(\"Opened new poll: {}\".format(question))\n        #reply(\"Poll opened!\")\n    return",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149159,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "        def view_grocery_list():\n            print(\"grocery== list\")\n            groceryListFrame = Frame(self)\n            groceryListFrame.rowconfigure(0, weight=1)\n            groceryListFrame.columnconfigure(0, weight=1)\n            groceryListFrame.rowconfigure(1, weight=3)\n            groceryListFrame.columnconfigure(1, weight=3)\n            groceryListFrame.pack()\n\n            menu.pack_forget()\n            groceryButton.pack_forget()\n            label.configure(text=\"Grocery List\")\n\n            i = 0\n            database_file = \"meal_planner.db\"\n            item_array = []\n            with sqlite3.connect(database_file) as conn:\n                cursor = conn.cursor()\n                tableName = \"ingredients_\" + str(weekNumber)\n                selection = cursor.execute(\"\"\"SELECT * FROM \"\"\" + tableName)\n                for result in [selection]:\n                    for row in result.fetchall():\n                        print(row)\n                        for ingredient in row:\n                            print(ingredient)\n                            item_array.append(str(ingredient).split())\n                        i = i +1\n                        Label(groceryListFrame, text=ingredient, font=MEDIUM_FONT, justify=LEFT).grid(row=i, column=0, sticky=\"w\")\n            \n\n            j = 0\n            for item in item_array:\n                print(item)\n\n\n            returnButton = Button(menuFrame, text = \"Return to Menu\", highlightbackground=\"#e7e7e7\", command=lambda: [groceryListFrame.pack_forget(),\n                                                                                     menu.pack(), returnButton.pack_forget(), label.configure(text=\"Meal Planer\"),\n                                                                                    groceryButton.pack(side=RIGHT)])\n            returnButton.pack(side=RIGHT)",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149160,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "        def view_grocery_list():\n            print(\"grocery== list\")\n            groceryListFrame = Frame(self)\n            groceryListFrame.rowconfigure(0, weight=1)\n            groceryListFrame.columnconfigure(0, weight=1)\n            groceryListFrame.rowconfigure(1, weight=3)\n            groceryListFrame.columnconfigure(1, weight=3)\n            groceryListFrame.pack()\n\n            menu.pack_forget()\n            groceryButton.pack_forget()\n            label.configure(text=\"Grocery List\")\n\n            i = 0\n            database_file = \"meal_planner.db\"\n            item_array = []\n            with sqlite3.connect(database_file) as conn:\n                cursor = conn.cursor()\n                tableName = \"ingredients_\" + str(weekNumber)\n                selection = cursor.execute(\"\"\"SELECT * FROM ?;\"\"\", (tableName, ))\n                for result in [selection]:\n                    for row in result.fetchall():\n                        print(row)\n                        for ingredient in row:\n                            print(ingredient)\n                            item_array.append(str(ingredient).split())\n                        i = i +1\n                        Label(groceryListFrame, text=ingredient, font=MEDIUM_FONT, justify=LEFT).grid(row=i, column=0, sticky=\"w\")\n            \n\n            j = 0\n            for item in item_array:\n                print(item)\n\n\n            returnButton = Button(menuFrame, text = \"Return to Menu\", highlightbackground=\"#e7e7e7\", command=lambda: [groceryListFrame.pack_forget(),\n                                                                                     menu.pack(), returnButton.pack_forget(), label.configure(text=\"Meal Planer\"),\n                                                                                    groceryButton.pack(side=RIGHT)])\n            returnButton.pack(side=RIGHT)",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149161,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@app.route('/<page_name>/history/record')\ndef view_page_record(page_name):\n    content_id = request.args.get('id')\n    query = db.query(\"select page_content.content, page_content.timestamp from page, page_content where page.id = page_content.page_id and page_content.id = '%s'\" % content_id)\n    page_record = query.namedresult()[0]\n\n    return render_template(\n        'page_record.html',\n        page_name = page_name,\n        page_record = page_record\n    )",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149162,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@app.route('/<page_name>/history/record')\ndef view_page_record(page_name):\n    content_id = request.args.get('id')\n    query = db.query(\"select page_content.content, page_content.timestamp from page, page_content where page.id = page_content.page_id and page_content.id = $1\", content_id)\n    page_record = query.namedresult()[0]\n\n    return render_template(\n        'page_record.html',\n        page_name = page_name,\n        page_record = page_record\n    )",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149163,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def update_inverter(self, inverter_serial, ts, status, etoday, etotal):\n        query = '''\n            UPDATE Inverters\n            SET     \n                TimeStamp='%s', \n                Status='%s', \n                eToday='%s',\n                eTotal='%s'\n            WHERE Serial='%s';\n        ''' % (ts, status, etoday, etotal, inverter_serial)\n        self.c.execute(query)",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149164,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def update_inverter(self, inverter_serial, ts, status, etoday, etotal):\n        query = '''\n            UPDATE Inverters\n            SET     \n                TimeStamp=?, \n                Status=?, \n                eToday=?,\n                eTotal=?\n            WHERE Serial=?;\n        '''\n        self.c.execute(query, (ts, status, etoday, etotal, inverter_serial))",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149165,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def insert(key, value):\n    connection = psycopg2.connect(host=config['HOST'], port=config['PORT'], database=config['NAME'], user=config['USER'], password=config['PASSWORD'])\n    cur = connection.cursor()\n    try:\n        cur.execute(\"insert into reply_map values('{}', '{}')\".format(key, value))\n        connection.commit()\n    except:\n        pass",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149166,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def insert(key, value):\n    connection = psycopg2.connect(host=config['HOST'], port=config['PORT'], database=config['NAME'], user=config['USER'], password=config['PASSWORD'])\n    cur = connection.cursor()\n    try:\n        cur.execute(\"insert into reply_map values(?, ?)\", (key, value))\n        connection.commit()\n    except:\n        pass",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149167,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def save_failure_transaction(self, user_id, project_id, money):\n        self.cursor.execute(\"insert into transactions (project_id,user_id, money, timestamp, state) values (%s, %s, %s, now(), 'failed' )\" % (project_id, user_id, money))\n        self.db.commit()",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149168,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def save_failure_transaction(self, user_id, project_id, money):\n        self.cursor.execute(\"insert into transactions (project_id,user_id, money, timestamp, state) values (%s, %s, \"\n                            \"%s, now(), 'failed' )\", (project_id, user_id, money))\n        self.db.commit()",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149169,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    @unpack\n    def test_process_as_form(self, job_number, dcn_key, was_prev_matched,\n            was_prev_closed, was_prev_tracked):\n        email_obj = {\n            'sender' : \"Alex Roy <Alex.Roy@dilfo.com>\",\n            'subject' : \"DO NOT MODIFY MESSAGE BELOW - JUST HIT `SEND`\",\n            'date' : \"Tue, 7 May 2019 17:34:17 +0000\",\n            'content' : (\n                f\"job_number={job_number}&title=TEST_ENTRY&city=Ottawa&\"\n                f\"address=2562+Del+Zotto+Ave.%2C+Ottawa%2C+Ontario&\"\n                f\"contractor=GCN&engineer=Goodkey&owner=Douglas+Stalker&\"\n                f\"quality=2&cc_email=&link_to_cert={dcn_key}\\r\\n\"\n            )\n        }\n        # set-up new entries in db, if necessary\n        fake_dilfo_insert = \"\"\"\n            INSERT INTO df_dilfo (job_number, receiver_email, closed)\n            VALUES ({}, 'alex.roy616@gmail.com', {})\n        \"\"\"\n        fake_match_insert = \"\"\"\n            INSERT INTO df_matched (job_number, verifier, ground_truth)\n            VALUES ({}, 'alex.roy616@gmail.com', {})\n        \"\"\"\n        with create_connection() as conn:\n            if was_prev_closed or was_prev_tracked:\n                conn.cursor().execute(fake_dilfo_insert.format(job_number, was_prev_closed))\n            if was_prev_matched:\n                if was_prev_closed:\n                    conn.cursor().execute(fake_match_insert.format(job_number, 1))\n                else:\n                    conn.cursor().execute(fake_match_insert.format(job_number, 0))\n        with create_connection() as conn:\n            df_dilfo_pre = pd.read_sql(f\"SELECT * FROM df_dilfo WHERE job_number={job_number}\", conn)\n            df_matched_pre = pd.read_sql(f\"SELECT * FROM df_matched WHERE job_number={job_number}\", conn)\n        process_as_form(email_obj)\n        # make assertions about db now that reply has been processed\n        with create_connection() as conn:\n            df_dilfo_post = pd.read_sql(f\"SELECT * FROM df_dilfo WHERE job_number={job_number}\", conn)\n            df_matched_post = pd.read_sql(f\"SELECT * FROM df_matched WHERE job_number={job_number}\", conn)\n        self.assertEqual(len(df_dilfo_post), 1)\n        self.assertEqual(bool(df_dilfo_post.iloc[0].closed), bool(was_prev_closed or dcn_key))\n        self.assertEqual(any(df_matched_post.ground_truth), bool(was_prev_closed or dcn_key))\n        self.assertEqual(len(df_matched_pre) + bool(dcn_key and not(was_prev_closed)), len(df_matched_post))\n        self.assertEqual(list(df_matched_pre.columns), list(df_matched_post.columns))\n        self.assertEqual(list(df_dilfo_pre.columns), list(df_dilfo_post.columns))",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149170,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    @unpack\n    def test_process_as_form(self, job_number, dcn_key, was_prev_matched,\n            was_prev_closed, was_prev_tracked):\n        email_obj = {\n            'sender' : \"Alex Roy <Alex.Roy@dilfo.com>\",\n            'subject' : \"DO NOT MODIFY MESSAGE BELOW - JUST HIT `SEND`\",\n            'date' : \"Tue, 7 May 2019 17:34:17 +0000\",\n            'content' : (\n                f\"job_number={job_number}&title=TEST_ENTRY&city=Ottawa&\"\n                f\"address=2562+Del+Zotto+Ave.%2C+Ottawa%2C+Ontario&\"\n                f\"contractor=GCN&engineer=Goodkey&owner=Douglas+Stalker&\"\n                f\"quality=2&cc_email=&link_to_cert={dcn_key}\\r\\n\"\n            )\n        }\n        # set-up new entries in db, if necessary\n        fake_dilfo_insert = \"\"\"\n            INSERT INTO df_dilfo (job_number, receiver_email, closed)\n            VALUES (?, 'alex.roy616@gmail.com', ?)\n        \"\"\"\n        fake_match_insert = \"\"\"\n            INSERT INTO df_matched (job_number, verifier, ground_truth)\n            VALUES (?, 'alex.roy616@gmail.com', ?)\n        \"\"\"\n        with create_connection() as conn:\n            if was_prev_closed or was_prev_tracked:\n                conn.cursor().execute(fake_dilfo_insert, [job_number, was_prev_closed])\n            if was_prev_matched:\n                if was_prev_closed:\n                    conn.cursor().execute(fake_match_insert, [job_number, 1])\n                else:\n                    conn.cursor().execute(fake_match_insert, [job_number, 0])\n        with create_connection() as conn:\n            df_dilfo_pre = pd.read_sql(\"SELECT * FROM df_dilfo WHERE job_number=?\", conn, params=[job_number])\n            df_matched_pre = pd.read_sql(\"SELECT * FROM df_matched WHERE job_number=?\", conn, params=[job_number])\n        process_as_form(email_obj)\n        # make assertions about db now that reply has been processed\n        with create_connection() as conn:\n            df_dilfo_post = pd.read_sql(\"SELECT * FROM df_dilfo WHERE job_number=?\", conn, params=[job_number])\n            df_matched_post = pd.read_sql(\"SELECT * FROM df_matched WHERE job_number=?\", conn, params=[job_number])\n        self.assertEqual(len(df_dilfo_post), 1)\n        self.assertEqual(bool(df_dilfo_post.iloc[0].closed), bool(was_prev_closed or dcn_key))\n        self.assertEqual(any(df_matched_post.ground_truth), bool(was_prev_closed or dcn_key))\n        self.assertEqual(len(df_matched_pre) + bool(dcn_key and not(was_prev_closed)), len(df_matched_post))\n        self.assertEqual(list(df_matched_pre.columns), list(df_matched_post.columns))\n        self.assertEqual(list(df_dilfo_pre.columns), list(df_dilfo_post.columns))",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149171,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@app.route('/<page_name>')\ndef render_page_name(page_name):\n    query = db.query(\"select page_content.content, page.id as page_id, page_content.id as content_id from page, page_content where page.id = page_content.page_id and page.page_name = '%s' order by page_content.id desc limit 1\" % page_name)\n    wiki_page = query.namedresult()\n    has_content = False\n    page_is_taken = False\n    if len(wiki_page) < 1:\n        content = \"\"\n    else:\n        page_is_taken = True\n        content = wiki_page[0].content\n    if len(content) > 0:\n        has_content = True\n    else:\n        pass\n    content = markdown.markdown(wiki_linkify(content))\n    return render_template(\n        'pageholder.html',\n        page_is_taken = page_is_taken,\n        page_name = page_name,\n        markdown = markdown,\n        wiki_linkify = wiki_linkify,\n        has_content = has_content,\n        content = content\n    )",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149172,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@app.route('/<page_name>')\ndef render_page_name(page_name):\n    query = db.query(\"select page_content.content, page.id as page_id, page_content.id as content_id from page, page_content where page.id = page_content.page_id and page.page_name = $1 order by page_content.id desc limit 1\", page_name)\n    wiki_page = query.namedresult()\n    has_content = False\n    page_is_taken = False\n    if len(wiki_page) < 1:\n        content = \"\"\n    else:\n        page_is_taken = True\n        content = wiki_page[0].content\n    if len(content) > 0:\n        has_content = True\n    else:\n        pass\n    content = markdown.markdown(wiki_linkify(content))\n    return render_template(\n        'pageholder.html',\n        page_is_taken = page_is_taken,\n        page_name = page_name,\n        markdown = markdown,\n        wiki_linkify = wiki_linkify,\n        has_content = has_content,\n        content = content\n    )",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149173,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def tid_to_tid_num(self, tid):\n        ''' Returns tid_num, given tid. '''\n\n        q = \"SELECT rowid FROM tids WHERE tid = '\" + tid + \"'\"\n        self.query(q)\n        return self.c.fetchone()[0]",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149174,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def tid_to_tid_num(self, tid):\n        ''' Returns tid_num, given tid. '''\n\n        q = \"SELECT rowid FROM tids WHERE tid = ?\"\n        self.query(q, tid)\n        return self.c.fetchone()[0]",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149175,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def get_old_sourcebyinstitution_number(conn, sqlite, sourcebyinstitution):\n    \"\"\"\n    Get all the old sourcebyinstitution number from the SQLite database.\n    \"\"\"\n    query = \"\"\"\n        SELECT\n            titles\n        FROM\n            history\n        WHERE\n            sourcebyinstitution = \"%s\"\n        ORDER BY\n            titles DESC\n        LIMIT 1\n    \"\"\" % sourcebyinstitution\n\n    sqlite.execute(query)\n    for record in sqlite:\n        old_sourcebyinstitution_number = record[0]\n        return old_sourcebyinstitution_number",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149176,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def get_old_sourcebyinstitution_number(conn, sqlite, sourcebyinstitution):\n    \"\"\"\n    Get all the old sourcebyinstitution number from the SQLite database.\n    \"\"\"\n    query = \"\"\"\n        SELECT\n            titles\n        FROM\n            history\n        WHERE\n            sourcebyinstitution = ?\n        ORDER BY\n            titles DESC\n        LIMIT 1\n    \"\"\"\n\n    sqlite.execute(query, (sourcebyinstitution,))\n    for record in sqlite:\n        old_sourcebyinstitution_number = record[0]\n        return old_sourcebyinstitution_number",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149177,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def top_karma(bot, trigger):\n    \"\"\"\n    Show karma status for the top n number of IRC users.\n    \"\"\"\n    try:\n        top_limit = int(trigger.group(2).strip())\n    except ValueError:\n        top_limit = 5\n\n    query = \"SELECT slug, value FROM nick_values NATURAL JOIN nicknames \\\n        WHERE key = 'karma' ORDER BY value DESC LIMIT %d\"\n    karmalist = bot.db.execute(query % top_limit).fetchall()\n    for user in karmalist:\n        bot.say(\"%s == %s\" % (user[0], user[1]))",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149178,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def top_karma(bot, trigger):\n    \"\"\"\n    Show karma status for the top n number of IRC users.\n    \"\"\"\n    try:\n        top_limit = int(trigger.group(2).strip())\n    except ValueError:\n        top_limit = 5\n\n    query = \"SELECT slug, value FROM nick_values NATURAL JOIN nicknames \\\n        WHERE key = 'karma' ORDER BY value DESC LIMIT ?\"\n    karmalist = bot.db.execute(query, str(top_limit)).fetchall()\n    for user in karmalist:\n        bot.say(\"%s == %s\" % (user[0], user[1]))",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149179,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def retrieve_playlist_by_id(id, db):\n    db.execute(\n        \"SELECT id, name, video_position from playlist WHERE id={id};\".format(id=id))\n    row = db.fetchone()\n    return row",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149180,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def retrieve_playlist_by_id(id, db):\n    db.execute(\n        \"SELECT id, name, video_position from playlist WHERE id=%s;\", (id,))\n    row = db.fetchone()\n    return row",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149181,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@bot.message_handler(func = lambda message: get_current_state(message.chat.id) == config.States.S_GET_TASK.value)\ndef get_task(message):\n    settings = sqlite3.connect(os.path.abspath(os.path.dirname(__file__)) + \"\\\\bases\\\\settings.db\")\n    conn = settings.cursor()\n    conn.execute(\"select * from users where chat_id = '\" + str(message.chat.id) + \"'\")\n    name = conn.fetchone()\n    settings.close()\n    if name == None:\n        bot.send_message(message.chat.id, \"You should login before get tasks.\")\n    else:\n        bases.update.update_user(name[1], name[0], name[2])\n        bot.send_message(message.chat.id, bases.problem.get_unsolved_problem(message.text, name[1]))\n    set_state(message.chat.id, config.States.S_START.value)",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149182,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@bot.message_handler(func = lambda message: get_current_state(message.chat.id) == config.States.S_GET_TASK.value)\ndef get_task(message):\n    settings = sqlite3.connect(os.path.abspath(os.path.dirname(__file__)) + \"\\\\bases\\\\settings.db\")\n    conn = settings.cursor()\n    conn.execute(\"select * from users where chat_id = ?\", (str(message.chat.id),))\n    name = conn.fetchone()\n    settings.close()\n    if name == None:\n        bot.send_message(message.chat.id, \"You should login before get tasks.\")\n    else:\n        bases.update.update_user(name[1], name[0], name[2])\n        bot.send_message(message.chat.id, bases.problem.get_unsolved_problem(message.text, name[1]))\n    set_state(message.chat.id, config.States.S_START.value)",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149183,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@bot.message_handler(commands=['stats'])\ndef stats(message):\n    settings = sqlite3.connect(os.path.abspath(os.path.dirname(__file__)) + \"\\\\bases\\\\settings.db\")\n    conn = settings.cursor()\n    conn.execute(\"select * from users where chat_id = '\" + str(message.chat.id) + \"'\")\n    name = conn.fetchone()\n    settings.close()\n    if name != None:\n        bases.update.update_user(name[1], name[0], name[2])\n        bases.problem.create_text_stats(name[1])\n        img = open(os.path.abspath(os.path.dirname(__file__)) + \"\\\\bases\\\\users\\\\\" + name[1] + \".png\", \"rb\")\n        bot.send_photo(message.chat.id, img)\n        img.close()\n        if bases.problem.create_stats_picture(name[1]):\n            bot.send_message(message.chat.id, \"Sorry, you haven't solved tasks.\")\n            return 0\n        img = open(os.path.abspath(os.path.dirname(__file__)) + \"\\\\bases\\\\users\\\\\" + name[1] + \".png\", \"rb\")\n        bot.send_photo(message.chat.id, img)\n        img.close()\n    else:\n        bot.send_message(message.chat.id, \"You should login before getting statistic.\")",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149184,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@bot.message_handler(commands=['stats'])\ndef stats(message):\n    settings = sqlite3.connect(os.path.abspath(os.path.dirname(__file__)) + \"\\\\bases\\\\settings.db\")\n    conn = settings.cursor()\n    conn.execute(\"select * from users where chat_id = ?\", (str(message.chat.id),))\n    name = conn.fetchone()\n    settings.close()\n    if name != None:\n        bases.update.update_user(name[1], name[0], name[2])\n        bases.problem.create_text_stats(name[1])\n        img = open(os.path.abspath(os.path.dirname(__file__)) + \"\\\\bases\\\\users\\\\\" + name[1] + \".png\", \"rb\")\n        bot.send_photo(message.chat.id, img)\n        img.close()\n        if bases.problem.create_stats_picture(name[1]):\n            bot.send_message(message.chat.id, \"Sorry, you haven't solved tasks.\")\n            return 0\n        img = open(os.path.abspath(os.path.dirname(__file__)) + \"\\\\bases\\\\users\\\\\" + name[1] + \".png\", \"rb\")\n        bot.send_photo(message.chat.id, img)\n        img.close()\n    else:\n        bot.send_message(message.chat.id, \"You should login before getting statistic.\")",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149185,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    @jwt_required\n    def delete(self, user_id):\n        \"\"\" Deletes user with the corresponding user_id \"\"\"\n        return database_utilities.execute_query(f\"\"\"delete from users where user_id = '{user_id}'\"\"\")",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149186,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    @jwt_required\n    def delete(self, user_id):\n        \"\"\" Deletes user with the corresponding user_id \"\"\"\n        return database_utilities.execute_query(f\"\"\"delete from users where user_id = %s\"\"\", (user_id, ))",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149187,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def verify_rno(self, rno):\n        query = \"SELECT COUNT(rno) FROM rides WHERE rno = {rno}\".format(rno = rno)\n        self.cursor.execute(query)\n        result = self.cursor.fetchone()\n        if (int(result[0]) > 0):\n            return True \n        else:\n            return False",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149188,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def verify_rno(self, rno):\n        self.cursor.execute(\"SELECT COUNT(rno) FROM rides WHERE rno = :rno\", {'rno': rno})\n        result = self.cursor.fetchone()\n        if (int(result[0]) > 0):\n            return True \n        else:\n            return False",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149189,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def get_requested_day(self, date):\n\n        data = dict()\n\n        day_start, day_end = self.get_epoch_day(date)\n        data['interval'] = {'from': self.convert_local_ts_to_utc(day_start, self.local_timezone), 'to': self.convert_local_ts_to_utc(day_end, self.local_timezone)}\n\n        query = '''\n            SELECT TimeStamp, SUM(Power) AS Power \n            FROM DayData \n            WHERE TimeStamp BETWEEN %s AND %s \n            GROUP BY TimeStamp;\n        '''\n\n        data['data'] = list()\n        for row in self.c.execute(query % (day_start, day_end)):\n            data['data'].append({ 'time': row[0], 'power': row[1] })\n\n\n        if self.get_datetime(date).date() == datetime.today().date():\n            query = '''\n                SELECT SUM(EToday) as EToday\n                FROM Inverters;\n                '''\n        else:\n            query = '''\n                SELECT SUM(DayYield) AS Power \n                FROM MonthData \n                WHERE TimeStamp BETWEEN %s AND %s\n                GROUP BY TimeStamp\n                ''' % (day_start, day_end)\n        self.c.execute(query)\n        row = self.c.fetchone()\n        if row and row[0]: data['total'] = row[0]\n        else: data['total'] = 0\n\n\n        query = '''\n            SELECT MIN(TimeStamp) as Min, MAX(TimeStamp) as Max \n            FROM ( SELECT TimeStamp FROM DayData GROUP BY TimeStamp );\n            '''\n\n        self.c.execute(query)\n        first_data, last_data = self.c.fetchone()\n\n        if (first_data):  data['hasPrevious'] = (first_data < day_start)\n        else: data['hasPrevious'] = False\n\n        if (last_data): data['hasNext'] = (last_data > day_end)\n        else: data['hasNext'] = False\n\n        #print(json.dumps(data, indent=4))\n        return data",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149190,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def get_requested_day(self, date):\n\n        data = dict()\n\n        day_start, day_end = self.get_epoch_day(date)\n        data['interval'] = {'from': self.convert_local_ts_to_utc(day_start, self.local_timezone), 'to': self.convert_local_ts_to_utc(day_end, self.local_timezone)}\n\n        query = '''\n            SELECT TimeStamp, SUM(Power) AS Power \n            FROM DayData \n            WHERE TimeStamp BETWEEN ? AND ?\n            GROUP BY TimeStamp;\n        '''\n\n        data['data'] = list()\n        for row in self.c.execute(query, (day_start, day_end)):\n            data['data'].append({ 'time': row[0], 'power': row[1] })\n\n\n        if self.get_datetime(date).date() == datetime.today().date():\n            query = '''\n                SELECT SUM(EToday) as EToday\n                FROM Inverters;\n                '''\n            self.c.execute(query)\n        else:\n            query = '''\n                SELECT SUM(DayYield) AS Power \n                FROM MonthData \n                WHERE TimeStamp BETWEEN ? AND ?\n                GROUP BY TimeStamp;\n                '''\n            self.c.execute(query, (day_start, day_end))\n\n        row = self.c.fetchone()\n        if row and row[0]: data['total'] = row[0]\n        else: data['total'] = 0\n\n\n        query = '''\n            SELECT MIN(TimeStamp) as Min, MAX(TimeStamp) as Max \n            FROM ( SELECT TimeStamp FROM DayData GROUP BY TimeStamp );\n            '''\n\n        self.c.execute(query)\n        first_data, last_data = self.c.fetchone()\n\n        if (first_data):  data['hasPrevious'] = (first_data < day_start)\n        else: data['hasPrevious'] = False\n\n        if (last_data): data['hasNext'] = (last_data > day_end)\n        else: data['hasNext'] = False\n\n        #print(json.dumps(data, indent=4))\n        return data",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149191,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def add_language(lang):\n    try:\n        cur.execute(f\"INSERT INTO language (name) VALUES ('{lang}')\")\n    except Exception as e:\n        pass\n    cur.execute(f\"SELECT language_id FROM language where name='{lang}'\")\n    lang_id = cur.fetchone()[0]\n    if conn.commit():\n        return lang_id\n    return lang_id",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149192,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def add_language(lang):\n    try:\n        cur.execute(\"INSERT INTO language (name) VALUES (%s)\", (lang, ))\n    except Exception as e:\n        pass\n    cur.execute(\"SELECT language_id FROM language where name=%s\", (lang, ))\n    lang_id = cur.fetchone()[0]\n    if conn.commit():\n        return lang_id\n    return lang_id",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149193,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def makeJudge(judge):\n\tdb.execute(\"UPDATE players SET Judge = 1 WHERE Name = '%s' COLLATE NOCASE\" % (judge)) \n\tdatabase.commit()",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149194,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def makeJudge(judge):\n\tdb.execute(\"UPDATE players SET Judge = 1 WHERE Name = ? COLLATE NOCASE\", judge) \n\tdatabase.commit()",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149195,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def isValidAdmToken(adm_token):\n    conn, c = connectDB()\n    req = \"SELECT *  from {} where adm_token='{}'\".format(CFG(\"admintoken_table_name\"), adm_token)\n    answer = bool(queryOne(c, req))\n    closeDB(conn)\n    return answer",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149196,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def isValidAdmToken(adm_token):\n    conn, c = connectDB()\n    req = \"SELECT *  from {} where adm_token=?\".format(CFG(\"admintoken_table_name\"))\n    answer = bool(queryOne(c, req, (adm_token,)))\n    closeDB(conn)\n    return answer",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149197,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    @staticmethod\n    def get_mapped_projects(user_id: int, preferred_locale: str) -> UserMappedProjectsDTO:\n        \"\"\" Get all projects a user has mapped on \"\"\"\n\n        # This query looks scary, but we're really just creating an outer join between the query that gets the\n        # counts of all mapped tasks and the query that gets counts of all validated tasks.  This is necessary to\n        # handle cases where users have only validated tasks on a project, or only mapped on a project.\n        sql = '''SELECT p.id,\n                        p.status,\n                        p.default_locale,\n                        c.mapped,\n                        c.validated,\n                        st_asgeojson(p.centroid)\n                   FROM projects p,\n                        (SELECT coalesce(v.project_id, m.project_id) project_id,\n                                coalesce(v.validated, 0) validated,\n                                coalesce(m.mapped, 0) mapped\n                          FROM (SELECT t.project_id,\n                                       count (t.validated_by) validated\n                                  FROM tasks t\n                                 WHERE t.project_id IN (SELECT unnest(projects_mapped) FROM users WHERE id = {0})\n                                   AND t.validated_by = {0}\n                                 GROUP BY t.project_id, t.validated_by) v\n                         FULL OUTER JOIN\n                        (SELECT t.project_id,\n                                count(t.mapped_by) mapped\n                           FROM tasks t\n                          WHERE t.project_id IN (SELECT unnest(projects_mapped) FROM users WHERE id = {0})\n                            AND t.mapped_by = {0}\n                          GROUP BY t.project_id, t.mapped_by) m\n                         ON v.project_id = m.project_id) c\n                   WHERE p.id = c.project_id ORDER BY p.id DESC'''.format(user_id)\n\n        results = db.engine.execute(sql)\n\n        if results.rowcount == 0:\n            raise NotFound()\n\n        mapped_projects_dto = UserMappedProjectsDTO()\n        for row in results:\n            mapped_project = MappedProject()\n            mapped_project.project_id = row[0]\n            mapped_project.status = ProjectStatus(row[1]).name\n            mapped_project.tasks_mapped = row[3]\n            mapped_project.tasks_validated = row[4]\n            mapped_project.centroid = geojson.loads(row[5])\n\n            project_info = ProjectInfo.get_dto_for_locale(row[0], preferred_locale, row[2])\n            mapped_project.name = project_info.name\n\n            mapped_projects_dto.mapped_projects.append(mapped_project)\n\n        return mapped_projects_dto",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149198,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    @staticmethod\n    def get_mapped_projects(user_id: int, preferred_locale: str) -> UserMappedProjectsDTO:\n        \"\"\" Get all projects a user has mapped on \"\"\"\n\n        # This query looks scary, but we're really just creating an outer join between the query that gets the\n        # counts of all mapped tasks and the query that gets counts of all validated tasks.  This is necessary to\n        # handle cases where users have only validated tasks on a project, or only mapped on a project.\n        sql = '''SELECT p.id,\n                        p.status,\n                        p.default_locale,\n                        c.mapped,\n                        c.validated,\n                        st_asgeojson(p.centroid)\n                   FROM projects p,\n                        (SELECT coalesce(v.project_id, m.project_id) project_id,\n                                coalesce(v.validated, 0) validated,\n                                coalesce(m.mapped, 0) mapped\n                          FROM (SELECT t.project_id,\n                                       count (t.validated_by) validated\n                                  FROM tasks t\n                                 WHERE t.project_id IN (SELECT unnest(projects_mapped) FROM users WHERE id = :user_id)\n                                   AND t.validated_by = :user_id\n                                 GROUP BY t.project_id, t.validated_by) v\n                         FULL OUTER JOIN\n                        (SELECT t.project_id,\n                                count(t.mapped_by) mapped\n                           FROM tasks t\n                          WHERE t.project_id IN (SELECT unnest(projects_mapped) FROM users WHERE id = :user_id)\n                            AND t.mapped_by = :user_id\n                          GROUP BY t.project_id, t.mapped_by) m\n                         ON v.project_id = m.project_id) c\n                   WHERE p.id = c.project_id ORDER BY p.id DESC'''\n\n        results = db.engine.execute(text(sql), user_id=user_id)\n\n        if results.rowcount == 0:\n            raise NotFound()\n\n        mapped_projects_dto = UserMappedProjectsDTO()\n        for row in results:\n            mapped_project = MappedProject()\n            mapped_project.project_id = row[0]\n            mapped_project.status = ProjectStatus(row[1]).name\n            mapped_project.tasks_mapped = row[3]\n            mapped_project.tasks_validated = row[4]\n            mapped_project.centroid = geojson.loads(row[5])\n\n            project_info = ProjectInfo.get_dto_for_locale(row[0], preferred_locale, row[2])\n            mapped_project.name = project_info.name\n\n            mapped_projects_dto.mapped_projects.append(mapped_project)\n\n        return mapped_projects_dto",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149199,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def delete_data(self, session, id):\n        self._openContainer(session)\n        sid = str(id)\n        if (self.idNormalizer is not None):\n            sid = self.idNormalizer.process_string(session, str(id))\n        query = \"DELETE FROM %s WHERE identifier = '%s';\" % (self.table, sid)\n        self._query(query)\n        return None",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149200,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def delete_data(self, session, id):\n        self._openContainer(session)\n        sid = str(id)\n        if (self.idNormalizer is not None):\n            sid = self.idNormalizer.process_string(session, str(id))\n        query = \"DELETE FROM %s WHERE identifier = $1;\" % (self.table)\n        self._query(query, sid)\n        return None",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149201,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def user_verify(self):\n        eid = self.email\n        code = self.password\n        if eid.strip() == '':\n            return\n        if code.strip() == '':\n            return\n        query = '''select * from usr where email like\\''''+eid+'\\''\n        cursor = g.conn.execute(query)\n        for row in cursor:\n            key = str(row.password)\n            if key.strip() == code.strip():\n                self.name = str(row.name)\n                self.email = eid\n                self.id = eid\n                self.valid = True\n            break",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149202,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def user_verify(self):\n        eid = self.email\n        code = self.password\n        if eid.strip() == '':\n            return\n        if code.strip() == '':\n            return\n        query = 'select * from usr where email like %s'\n        cursor = g.conn.execute(query, (eid, ))\n        for row in cursor:\n            key = str(row.password)\n            if key.strip() == code.strip():\n                self.name = str(row.name)\n                self.email = eid\n                self.id = eid\n                self.valid = True\n            break",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149203,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@app.route('/movies/search', methods=['GET', 'POST'])\ndef search_films():\n    form = SearchForm()\n    if not form.validate_on_submit():\n        return render_template('search.html', title='Search for films', form=form)\n    search_terms = form.data['term'].split(' ')\n    search_string = ' & '.join(search_terms)\n    cur.execute(f\"SELECT * FROM film where fulltext @@ to_tsquery('{search_string}')\")\n    res = cur.fetchall()\n    return render_template('search_results.html', title='Home', res=len(res))",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149204,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@app.route('/movies/search', methods=['GET', 'POST'])\ndef search_films():\n    form = SearchForm()\n    if not form.validate_on_submit():\n        return render_template('search.html', title='Search for films', form=form)\n    search_terms = form.data['term'].split(' ')\n    search_string = ' & '.join(search_terms)\n    cur.execute(\"SELECT * FROM film where fulltext @@ to_tsquery(%s)\", (search_string, ))\n    res = cur.fetchall()\n    return render_template('search_results.html', title='Home', res=len(res))",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149205,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def getGameCountInSeriesSoFar(submission):\n    database = sqlite3.connect('database.db')\n    cursor = database.cursor()\n    return cursor.execute(\"SELECT COUNT(*) FROM ChallengeRankings WHERE SeriesTitle = '\" + getTitle(submission) + \"' AND Date <= '\" + getSubmissionDateFromDatabase(submission) + \"'\").fetchone()[0]\n    database.close()",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149206,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def getGameCountInSeriesSoFar(submission):\n    database = sqlite3.connect('database.db')\n    cursor = database.cursor()\n    return cursor.execute(\"SELECT COUNT(*) FROM ChallengeRankings WHERE SeriesTitle = ? AND Date <= ?\", [getTitle(submission), getSubmissionDateFromDatabase(submission)]).fetchone()[0]\n    database.close()",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149207,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@mod.route('/add', methods=['GET', 'POST'])\ndef add():\n    if request.method == 'POST':\n        msg_id = int(request.form['msg_id'])\n        user_id = session['logged_id']\n        content = request.form['content']\n        c_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n        sql = \"INSERT INTO comment(msg_id,user_id,content,c_time) \" + \\\n                \"VALUES(%d,%d,'%s','%s');\" % (msg_id, user_id, content, c_time)\n        cursor.execute(sql)\n        conn.commit()\n    return redirect(url_for('comment.show', msg_id=msg_id))",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149208,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@mod.route('/add', methods=['GET', 'POST'])\ndef add():\n    if request.method == 'POST':\n        msg_id = int(request.form['msg_id'])\n        user_id = session['logged_id']\n        content = request.form['content']\n        c_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n        cursor.execute(\"INSERT INTO comment(msg_id,user_id,content,c_time) VALUES(%s,%s,%s,%s);\", (msg_id, user_id, content, c_time))\n        conn.commit()\n    return redirect(url_for('comment.show', msg_id=msg_id))",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149209,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def get_mod_taken_together_with(code):\n    '''\n        Retrieves the list of modules taken together with the specified\n        module code in the same semester.\n\n        Returns a table of lists (up to 10 top results). Each list contains\n        (specified code, module code of mod taken together, aySem, number of students)\n\n        e.g. [(CS1010, CS1231, AY 16/17 Sem 1, 5)] means there are 5 students\n        taking CS1010 and CS1231 together in AY 16/17 Sem 1.\n    '''\n    NUM_TOP_RESULTS_TO_RETURN = 10\n\n    sql_command = \"SELECT sp1.moduleCode, sp2.moduleCode, sp1.acadYearAndSem, COUNT(*) \" + \\\n                \"FROM studentPlans sp1, studentPlans sp2 \" + \\\n                \"WHERE sp1.moduleCode = '\" + code + \"' AND \" + \\\n                \"sp2.moduleCode <> sp1.moduleCode AND \" + \\\n                \"sp1.studentId = sp2.studentId AND \" + \\\n                \"sp1.acadYearAndSem = sp2.acadYearAndSem \" + \\\n                \"GROUP BY sp1.moduleCode, sp2.moduleCode, sp1.acadYearAndSem \" + \\\n                \"ORDER BY COUNT(*) DESC\"\n\n    DB_CURSOR.execute(sql_command)\n\n    return DB_CURSOR.fetchmany(NUM_TOP_RESULTS_TO_RETURN)",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149210,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def get_mod_taken_together_with(code):\n    '''\n        Retrieves the list of modules taken together with the specified\n        module code in the same semester.\n\n        Returns a table of lists (up to 10 top results). Each list contains\n        (specified code, module code of mod taken together, aySem, number of students)\n\n        e.g. [(CS1010, CS1231, AY 16/17 Sem 1, 5)] means there are 5 students\n        taking CS1010 and CS1231 together in AY 16/17 Sem 1.\n    '''\n    NUM_TOP_RESULTS_TO_RETURN = 10\n\n    sql_command = \"SELECT sp1.moduleCode, sp2.moduleCode, sp1.acadYearAndSem, COUNT(*) \" + \\\n                \"FROM studentPlans sp1, studentPlans sp2 \" + \\\n                \"WHERE sp1.moduleCode = %s AND \" + \\\n                \"sp2.moduleCode <> sp1.moduleCode AND \" + \\\n                \"sp1.studentId = sp2.studentId AND \" + \\\n                \"sp1.acadYearAndSem = sp2.acadYearAndSem \" + \\\n                \"GROUP BY sp1.moduleCode, sp2.moduleCode, sp1.acadYearAndSem \" + \\\n                \"ORDER BY COUNT(*) DESC\"\n\n    DB_CURSOR.execute(sql_command, (code,))\n\n    return DB_CURSOR.fetchmany(NUM_TOP_RESULTS_TO_RETURN)",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149211,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@endpoints.route(\"/wins\")\ndef wins():\n    if db == None:\n        init()\n\n    player = request.args.get('tag', default=\"christmasmike\")\n    sql = \"SELECT * FROM matches WHERE winner = '\"+str(player)+\"' ORDER BY date DESC;\"\n    result = db.exec(sql)\n\n    result = [str(x) for x in result]\n    result = '\\n'.join(result)\n    return json.dumps(result)",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149212,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@endpoints.route(\"/wins\")\ndef wins():\n    if db == None:\n        init()\n\n    player = request.args.get('tag', default=\"christmasmike\")\n    sql = \"SELECT * FROM matches WHERE winner = '{player}' ORDER BY date DESC;\"\n    args = {'player': player}\n    result = db.exec(sql, args)\n\n    result = [str(x) for x in result]\n    result = '\\n'.join(result)\n    return json.dumps(result)",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149213,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def delete_event(self, event_id):\n        sql = \"\"\"DELETE FROM events\n                 WHERE event_id = {0}\n                 \"\"\".format(event_id)\n        affected_count = self.cur.execute(sql)\n        self.conn.commit()\n        return affected_count",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149214,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def delete_event(self, event_id):\n        sql = \"\"\"\n              DELETE FROM events\n              WHERE event_id = %s\n              \"\"\"\n        affected_count = self.cur.execute(sql, (event_id,))\n        self.conn.commit()\n        return affected_count",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149215,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def add_item(self, item):\n        \"\"\"\"Add new item.\"\"\"\n        if self.connection:\n            self.cursor.execute('insert into item (name, shoppinglistid) values (\"%s\", \"%s\")' % (item[0], item[1]))\n            self.connection.commit()",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149216,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def add_item(self, item):\n        \"\"\"\"Add new item.\"\"\"\n        if self.connection:\n            t = (item[0], item[1], )\n            self.cursor.execute('insert into item (name, shoppinglistid) values (?, ?)', t)\n            self.connection.commit()",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149217,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def fetch_issue(cursor, id):\n    \"\"\"\n    Fetch an issue by id along with its tags. Returns None if no issue\n    with the specified id exists in the database.\n    \"\"\"\n    cursor.execute(f\"\"\"\n        SELECT\n            issue.id,\n            issue.title,\n            issue.description,\n            tag.namespace,\n            tag.predicate,\n            tag.value\n        FROM\n            issue LEFT JOIN tag\n            ON issue.id = tag.issue_id\n        WHERE\n            issue.id = {id}\n    \"\"\")\n\n    issue = None\n    for row in cursor:\n        if issue is None:\n            issue = {\n                \"id\": row[\"id\"],\n                \"title\": row[\"title\"],\n                \"description\": row[\"description\"],\n                \"tags\": [],\n            }\n        # If tag exists in row, add to issue.\n        if row[\"value\"]:\n            issue[\"tags\"].append({\n                \"namespace\": row[\"namespace\"],\n                \"predicate\": row[\"predicate\"],\n                \"value\": row[\"value\"],\n            })\n\n    return issue",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149218,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def fetch_issue(cursor, id):\n    \"\"\"\n    Fetch an issue by id along with its tags. Returns None if no issue\n    with the specified id exists in the database.\n    \"\"\"\n    cursor.execute(\"\"\"\n        SELECT\n            issue.id,\n            issue.title,\n            issue.description,\n            tag.namespace,\n            tag.predicate,\n            tag.value\n        FROM\n            issue LEFT JOIN tag\n            ON issue.id = tag.issue_id\n        WHERE\n            issue.id = ?\n    \"\"\", (id,))\n\n    issue = None\n    for row in cursor:\n        if issue is None:\n            issue = {\n                \"id\": row[\"id\"],\n                \"title\": row[\"title\"],\n                \"description\": row[\"description\"],\n                \"tags\": [],\n            }\n        # If tag exists in row, add to issue.\n        if row[\"value\"]:\n            issue[\"tags\"].append({\n                \"namespace\": row[\"namespace\"],\n                \"predicate\": row[\"predicate\"],\n                \"value\": row[\"value\"],\n            })\n\n    return issue",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149219,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def also_add(name, also):\n    db = db_connect()\n    cursor = db.cursor()\n    try:\n        cursor.execute('''\n            INSERT INTO isalso(name,also) VALUES('{}','{}')\n            '''.format(name, also))\n        db.commit()\n        logger.debug('added to isalso name {} with value {}'.format(\n            name, also))\n        db.close()\n    except Exception as e:\n        logger.error('Execution failed with error: {}'.format(e))\n        raise",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149220,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def also_add(name, also):\n    db = db_connect()\n    cursor = db.cursor()\n    try:\n        cursor.execute('''\n            INSERT INTO isalso(name,also) VALUES(%(name)s,%(also)s)\n            ''', (\n            name,\n            also,\n        ))\n        db.commit()\n        logger.debug('added to isalso name {} with value {}'.format(\n            name, also))\n        db.close()\n    except Exception as e:\n        logger.error('Execution failed with error: {}'.format(e))\n        raise",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149221,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def getCommentsLike(self,commentid):\n        sqlText=\"select userid from comment_like where commentid=%d\"%(commentid)\n        result=sql.queryDB(self.conn,sqlText)\n        return result;",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149222,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def getCommentsLike(self,commentid):\n        sqlText=\"select userid from comment_like where commentid=%s\"\n        params=[commentid]\n        result=sql.queryDB(self.conn,sqlText,params)\n        return result;",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149223,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def update_theory_base(tag, link):\n    theory = sqlite3.connect(os.path.abspath(os.path.dirname(__file__)) + \"\\\\theory.db\")\n    conn = theory.cursor()\n    conn.execute(\"insert into \" + str(tag) + \" values (?)\", (str(link), ))\n    theory.commit()\n    theory.close()",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149224,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def update_theory_base(tag, link):\n    theory = sqlite3.connect(os.path.abspath(os.path.dirname(__file__)) + \"\\\\theory.db\")\n    conn = theory.cursor()\n    conn.execute(\"insert into ? values (?)\", (tag, str(link)))\n    theory.commit()\n    theory.close()",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149225,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@app.route('/get_asset_and_volume')\ndef get_asset_and_volume():\n    asset_id = request.args.get('asset_id')\n\n    if not isObject(asset_id):\n        ws.send('{\"id\":1, \"method\":\"call\", \"params\":[0,\"lookup_asset_symbols\",[[\"' + asset_id + '\"], 0]]}')\n        result_l = ws.recv()\n        j_l = json.loads(result_l)\n        asset_id = j_l[\"result\"][0][\"id\"]\n\n    #print asset_id\n    ws.send('{\"id\":1, \"method\":\"call\", \"params\":[0,\"get_assets\",[[\"' + asset_id + '\"], 0]]}')\n    result = ws.recv()\n    j = json.loads(result)\n\n    dynamic_asset_data_id =  j[\"result\"][0][\"dynamic_asset_data_id\"]\n\n    ws.send('{\"id\": 1, \"method\": \"call\", \"params\": [0, \"get_objects\", [[\"'+dynamic_asset_data_id+'\"]]]}')\n    result2 = ws.recv()\n    j2 = json.loads(result2)\n    #print j2[\"result\"][0][\"current_supply\"]\n\n    j[\"result\"][0][\"current_supply\"] = j2[\"result\"][0][\"current_supply\"]\n    j[\"result\"][0][\"confidential_supply\"] = j2[\"result\"][0][\"confidential_supply\"]\n    #print j[\"result\"]\n\n    j[\"result\"][0][\"accumulated_fees\"] = j2[\"result\"][0][\"accumulated_fees\"]\n    j[\"result\"][0][\"fee_pool\"] = j2[\"result\"][0][\"fee_pool\"]\n\n    issuer = j[\"result\"][0][\"issuer\"]\n    ws.send('{\"id\": 1, \"method\": \"call\", \"params\": [0, \"get_objects\", [[\"'+issuer+'\"]]]}')\n    result3 = ws.recv()\n    j3 = json.loads(result3)\n    j[\"result\"][0][\"issuer_name\"] = j3[\"result\"][0][\"name\"]\n\n\n    con = psycopg2.connect(**config.POSTGRES)\n    cur = con.cursor()\n\n    query = \"SELECT volume, mcap FROM assets WHERE aid='\"+asset_id+\"'\"\n    cur.execute(query)\n    results = cur.fetchall()\n    con.close()\n    try:\n        j[\"result\"][0][\"volume\"] = results[0][0]\n        j[\"result\"][0][\"mcap\"] = results[0][1]\n    except:\n        j[\"result\"][0][\"volume\"] = 0\n        j[\"result\"][0][\"mcap\"] = 0\n\n    return jsonify(j[\"result\"])",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149226,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@app.route('/get_asset_and_volume')\ndef get_asset_and_volume():\n    asset_id = request.args.get('asset_id')\n\n    if not isObject(asset_id):\n        ws.send('{\"id\":1, \"method\":\"call\", \"params\":[0,\"lookup_asset_symbols\",[[\"' + asset_id + '\"], 0]]}')\n        result_l = ws.recv()\n        j_l = json.loads(result_l)\n        asset_id = j_l[\"result\"][0][\"id\"]\n\n    #print asset_id\n    ws.send('{\"id\":1, \"method\":\"call\", \"params\":[0,\"get_assets\",[[\"' + asset_id + '\"], 0]]}')\n    result = ws.recv()\n    j = json.loads(result)\n\n    dynamic_asset_data_id =  j[\"result\"][0][\"dynamic_asset_data_id\"]\n\n    ws.send('{\"id\": 1, \"method\": \"call\", \"params\": [0, \"get_objects\", [[\"'+dynamic_asset_data_id+'\"]]]}')\n    result2 = ws.recv()\n    j2 = json.loads(result2)\n    #print j2[\"result\"][0][\"current_supply\"]\n\n    j[\"result\"][0][\"current_supply\"] = j2[\"result\"][0][\"current_supply\"]\n    j[\"result\"][0][\"confidential_supply\"] = j2[\"result\"][0][\"confidential_supply\"]\n    #print j[\"result\"]\n\n    j[\"result\"][0][\"accumulated_fees\"] = j2[\"result\"][0][\"accumulated_fees\"]\n    j[\"result\"][0][\"fee_pool\"] = j2[\"result\"][0][\"fee_pool\"]\n\n    issuer = j[\"result\"][0][\"issuer\"]\n    ws.send('{\"id\": 1, \"method\": \"call\", \"params\": [0, \"get_objects\", [[\"'+issuer+'\"]]]}')\n    result3 = ws.recv()\n    j3 = json.loads(result3)\n    j[\"result\"][0][\"issuer_name\"] = j3[\"result\"][0][\"name\"]\n\n\n    con = psycopg2.connect(**config.POSTGRES)\n    cur = con.cursor()\n\n    query = \"SELECT volume, mcap FROM assets WHERE aid=%s\"\n    cur.execute(query, (asset_id,))\n    results = cur.fetchall()\n    con.close()\n    try:\n        j[\"result\"][0][\"volume\"] = results[0][0]\n        j[\"result\"][0][\"mcap\"] = results[0][1]\n    except:\n        j[\"result\"][0][\"volume\"] = 0\n        j[\"result\"][0][\"mcap\"] = 0\n\n    return jsonify(j[\"result\"])",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149227,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def reportMatch(winner, loser):\n    \"\"\"Records the outcome of a single match between two players.\n\n    Args:\n      winner:  the id number of the player who won\n      loser:  the id number of the player who lost\n    \"\"\"\n    try:\n        int(winner)\n        int(loser)\n    except ValueError:\n        raise ValueError(\n            \"\\\"winner\\\" and/or \\\"loser\\\" input are not integers.\\n\"\n            \"Please use the id number of each player to report match results.\"\n        )\n    w = str(winner)\n    l = str(loser)\n    db = connect()\n    c = db.cursor()\n    statement = \"INSERT INTO matches values ({w}, {l})\".format(w=w, l=l)\n    c.execute(statement)\n    db.commit()\n    db.close()",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149228,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def reportMatch(winner, loser):\n    \"\"\"Records the outcome of a single match between two players.\n\n    Args:\n      winner:  the id number of the player who won\n      loser:  the id number of the player who lost\n    \"\"\"\n    try:\n        int(winner)\n        int(loser)\n    except ValueError:\n        raise ValueError(\n            \"\\\"winner\\\" and/or \\\"loser\\\" input are not integers.\\n\"\n            \"Please use the id number of each player to report match results.\"\n        )\n    w = str(winner)\n    l = str(loser)\n    db = connect()\n    c = db.cursor()\n    c.execute(\"INSERT INTO matches values (%s, %s)\", (w,l))\n    db.commit()\n    db.close()",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149229,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def getPlayer(player):\n\tdb.execute(\"SELECT * FROM players WHERE Name = '%s' COLLATE NOCASE\" % player)\n\tplayerstats = dict(db.fetchone())\n\treturn playerstats",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149230,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def getPlayer(player):\n\tdb.execute(\"SELECT * FROM players WHERE Name = ? COLLATE NOCASE\", player)\n\tplayerstats = dict(db.fetchone())\n\treturn playerstats",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149231,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def karma_sub(name):\n    karma = karma_ask(name)\n    db = db_connect()\n    cursor = db.cursor()\n    if karma is None:\n        try:\n            cursor.execute('''\n                INSERT INTO people(name,karma,shame) VALUES('{}',-1,0)\n                '''.format(name))\n            db.commit()\n            logger.debug('Inserted into karmadb -1 karma for {}'.format(name))\n            db.close()\n            return -1\n\n        except Exception as e:\n            logger.error('Execution failed with error: {}'.format(e))\n            raise\n    else:\n        karma = karma - 1\n        try:\n            cursor.execute('''\n                UPDATE people SET karma = {0} WHERE name = '{1}'\n                '''.format(karma, name))\n            db.commit()\n            logger.debug('Inserted into karmadb -1 karma for {}'.format(name))\n            db.close()\n            return karma\n        except Exception as e:\n            logger.error('Execution failed with error: {}'.format(e))\n            raise",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149232,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def karma_sub(name):\n    karma = karma_ask(name)\n    db = db_connect()\n    cursor = db.cursor()\n    if karma is None:\n        try:\n            cursor.execute('''\n                INSERT INTO people(name,karma,shame) VALUES(%(name)s,-1,0)\n                ''', (name, ))\n            db.commit()\n            logger.debug('Inserted into karmadb -1 karma for {}'.format(name))\n            db.close()\n            return -1\n\n        except Exception as e:\n            logger.error('Execution failed with error: {}'.format(e))\n            raise\n    else:\n        karma = karma - 1\n        try:\n            cursor.execute('''\n                UPDATE people SET karma = %(karma)s WHERE name = %(name)s\n                ''', (\n                karma,\n                name,\n            ))\n            db.commit()\n            logger.debug('Inserted into karmadb -1 karma for {}'.format(name))\n            db.close()\n            return karma\n        except Exception as e:\n            logger.error('Execution failed with error: {}'.format(e))\n            raise",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149233,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@app.route('/', methods=['POST'])\ndef login():\n    print('login')\n    user = str(request.form['username'])\n    password = str(request.form['password'])\n    cur.execute('SELECT * FROM users WHERE name = \\'{}\\' AND password = \\'{}\\';'.format(user, password))\n    response = cur.fetchone()\n    if response != None:\n        print(response, 'OK')\n        return redirect(url_for('enter_test_point'))\n    else:\n        print(response, 'not OK')\n        flash('Invalid login or password')\n        return render_template('login.html')",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149234,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@app.route('/', methods=['POST'])\ndef login():\n    print('login')\n    user = str(request.form['username'])\n    password = str(request.form['password'])\n    cur.execute(\"SELECT * FROM users WHERE name = ? AND password = ?;\", [user, password])\n    response = cur.fetchone()\n    if response != None:\n        print(response, 'OK')\n        return redirect(url_for('enter_test_point'))\n    else:\n        print(response, 'not OK')\n        flash('Invalid login or password')\n        return render_template('login.html')",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149235,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def fetch_data(self, session, id):\n        self._openContainer(session)\n        sid = str(id)\n        if (self.idNormalizer is not None):\n            sid = self.idNormalizer.process_string(session, sid)\n        query = (\"SELECT data FROM %s WHERE identifier = '%s';\" %\n                 (self.table, sid)\n                 )\n        res = self._query(query)\n        try:\n            data = res.dictresult()[0]['data']\n        except IndexError:\n            raise ObjectDoesNotExistException(id)\n        try:\n            ndata = pg.unescape_bytea(data)\n        except:\n            # insufficient PyGreSQL version\n            ndata = data.replace(\"\\\\'\", \"'\")\n\n        ndata = ndata.replace('\\\\000\\\\001', nonTextToken)\n        ndata = ndata.replace('\\\\012', '\\n')\n        return ndata",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149236,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def fetch_data(self, session, id):\n        self._openContainer(session)\n        sid = str(id)\n        if (self.idNormalizer is not None):\n            sid = self.idNormalizer.process_string(session, sid)\n        query = (\"SELECT data FROM %s WHERE identifier = $1;\" %\n                 (self.table)\n                 )\n        res = self._query(query, sid)\n        try:\n            data = res.dictresult()[0]['data']\n        except IndexError:\n            raise ObjectDoesNotExistException(id)\n        try:\n            ndata = pg.unescape_bytea(data)\n        except:\n            # insufficient PyGreSQL version\n            ndata = data.replace(\"\\\\'\", \"'\")\n\n        ndata = ndata.replace('\\\\000\\\\001', nonTextToken)\n        ndata = ndata.replace('\\\\012', '\\n')\n        return ndata",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149237,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def registerPlayer(name):\n    \"\"\"Adds a player to the tournament database.\n\n    The database assigns a unique serial id number for the player.  (This\n    should be handled by your SQL database schema, not in your Python code.)\n\n    Args:\n      name: the player's full name (need not be unique).\n    \"\"\"\n    conn = connect()\n    cursor = conn.cursor()\n    cursor.execute(\"INSERT INTO players (name) VALUES ('%s')\" % (name,));\n    conn.commit()\n    conn.close()",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149238,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def registerPlayer(name):\n    \"\"\"Adds a player to the tournament database.\n\n    The database assigns a unique serial id number for the player.  (This\n    should be handled by your SQL database schema, not in your Python code.)\n\n    Args:\n      name: the player's full name (need not be unique).\n    \"\"\"\n    conn = connect()\n    cursor = conn.cursor()\n    query = \"INSERT INTO players (name) VALUES (%s);\"\n    cursor.execute(query, (name,))\n    conn.commit()\n    conn.close()",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149239,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@mod.route('/register', methods=['GET', 'POST'])\ndef register():\n    if request.method == 'POST':\n        error = None\n        email = request.form['email'].strip()\n        nickname = request.form['nickname'].strip()\n        password = request.form['password'].strip()\n        password2 = request.form['password2'].strip()\n\n        email = email.lower()\n\n        if email == \"\" or nickname == \"\" or password == \"\" or password2 == \"\":\n            error = 'Please input all the information'\n        elif password2 != password:\n            error = 'The password is not repeated correctly'\n        elif len(password) < 6:\n            error = 'The password has at least 6 characters'\n        elif not re.match(r'^[0-9a-zA-Z_]{0,19}@' +\n                          '[0-9a-zA-Z]{1,15}\\.[com,cn,net]', email):\n            error = 'Please input the right email'\n\n        sql = \"SELECT * FROM users where email = '%s';\" % (email)\n        cursor.execute(sql)\n        u = cursor.fetchone()\n\n        if u is not None:\n            error = 'The email has already exsit'\n\n        if error is not None:\n            return render_template('register.html', error=error)\n        else:\n            password = bcrypt.generate_password_hash(password)\n            cursor.execute(\"INSERT INTO users(email,nickname,password) VALUES(%s,%s,%s);\", (email, nickname, password))\n            conn.commit()\n            flash('Register Success!')\n            return redirect(url_for('users.login'))\n\n    return render_template('register.html')",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149240,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@mod.route('/register', methods=['GET', 'POST'])\ndef register():\n    if request.method == 'POST':\n        error = None\n        email = request.form['email'].strip()\n        nickname = request.form['nickname'].strip()\n        password = request.form['password'].strip()\n        password2 = request.form['password2'].strip()\n\n        email = email.lower()\n\n        if email == \"\" or nickname == \"\" or password == \"\" or password2 == \"\":\n            error = 'Please input all the information'\n        elif password2 != password:\n            error = 'The password is not repeated correctly'\n        elif len(password) < 6:\n            error = 'The password has at least 6 characters'\n        elif not re.match(r'^[0-9a-zA-Z_]{0,19}@' +\n                          '[0-9a-zA-Z]{1,15}\\.[com,cn,net]', email):\n            error = 'Please input the right email'\n\n        cursor.execute(\"SELECT * FROM users where email = %s;\", (email,))\n        u = cursor.fetchone()\n\n        if u is not None:\n            error = 'The email has already exsit'\n\n        if error is not None:\n            return render_template('register.html', error=error)\n        else:\n            password = bcrypt.generate_password_hash(password)\n            cursor.execute(\"INSERT INTO users(email,nickname,password) VALUES(%s,%s,%s);\", (email, nickname, password))\n            conn.commit()\n            flash('Register Success!')\n            return redirect(url_for('users.login'))\n\n    return render_template('register.html')",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149241,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def process_form():\n    # see https://docs.python.org/3.4/library/cgi.html for the basic usage\n    # here.\n    form = cgi.FieldStorage()\n\n\n    # connect to the database\n    conn = MySQLdb.connect(host   = pnsdp.SQL_HOST,\n                           user   = pnsdp.SQL_USER,\n                           passwd = pnsdp.SQL_PASSWD,\n                           db     = pnsdp.SQL_DB)\n\n\n    if \"user\" not in form or \"game\" not in form:\n        raise FormError(\"Invalid parameters.\")\n    if \"pos\" not in form and \"resign\" not in form:\n        raise FormError(\"Invalid parameters.\")\n\n    game = int(form[\"game\"].value)\n\n\n    (players,size,state) = get_game_info(conn, game)\n\n    user = form[\"user\"].value\n    if user not in players:\n        raise FormError(\"Invalid player ID - player is not part of this game\")\n\n\n    if \"resign\" in form:\n        resign = True\n    else:\n        resign = False\n        pos = form[\"pos\"].value.split(\",\")\n        assert len(pos) == 2\n        x = int(pos[0])\n        y = int(pos[1])\n\n\n    (board,nextPlayer,letter) = build_board(conn, game,size)\n\n    if user != players[nextPlayer]:\n        raise FormError(\"Internal error, incorrect player is attempting to move.\")\n\n\n    if resign:\n        # this user is choosing to resign.  Update the game state to reflect that.\n        other_player_name = players[1-nextPlayer]\n\n        cursor = conn.cursor()\n        cursor.execute(\"\"\"UPDATE games SET state=\"%s:resignation\" WHERE id=%d;\"\"\" % (other_player_name,game))\n        cursor.close()\n\n    else:\n        assert x >= 0 and x < size\n        assert y >= 0 and y < size\n\n        assert board[x][y] == \"\"\n        board[x][y] = \"XO\"[nextPlayer]\n\n        # we've done all of our sanity checks.  We now know enough to say that\n        # it's safe to add a new move.\n        cursor = conn.cursor()\n        cursor.execute(\"\"\"INSERT INTO moves(gameID,x,y,letter,time) VALUES(%d,%d,%d,\"%s\",NOW());\"\"\" % (game,x,y,letter))\n\n        if cursor.rowcount != 1:\n            raise FormError(\"Could not make move, reason unknown.\")\n\n        cursor.close()\n\n        result = analyze_board(board)\n        if result != \"\":\n            if result == \"win\":\n                result = players[nextPlayer]+\":win\"\n\n            cursor = conn.cursor()\n            cursor.execute(\"\"\"UPDATE games SET state=\"%s\" WHERE id=%d;\"\"\" % (result,game))\n            cursor.close()\n\n    # we've made changes, make sure to commit them!\n    conn.commit()\n    conn.close()\n\n\n    # return the parms to the caller, so that they can build a good redirect\n    return (user,game)",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149242,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def process_form():\n    # see https://docs.python.org/3.4/library/cgi.html for the basic usage\n    # here.\n    form = cgi.FieldStorage()\n\n\n    # connect to the database\n    conn = MySQLdb.connect(host   = pnsdp.SQL_HOST,\n                           user   = pnsdp.SQL_USER,\n                           passwd = pnsdp.SQL_PASSWD,\n                           db     = pnsdp.SQL_DB)\n\n\n    if \"user\" not in form or \"game\" not in form:\n        raise FormError(\"Invalid parameters.\")\n    if \"pos\" not in form and \"resign\" not in form:\n        raise FormError(\"Invalid parameters.\")\n\n    game = int(form[\"game\"].value)\n\n\n    (players,size,state) = get_game_info(conn, game)\n\n    user = form[\"user\"].value\n    if user not in players:\n        raise FormError(\"Invalid player ID - player is not part of this game\")\n\n\n    if \"resign\" in form:\n        resign = True\n    else:\n        resign = False\n        pos = form[\"pos\"].value.split(\",\")\n        assert len(pos) == 2\n        x = int(pos[0])\n        y = int(pos[1])\n\n\n    (board,nextPlayer,letter) = build_board(conn, game,size)\n\n    if user != players[nextPlayer]:\n        raise FormError(\"Internal error, incorrect player is attempting to move.\")\n\n\n    if resign:\n        # this user is choosing to resign.  Update the game state to reflect that.\n        other_player_name = players[1-nextPlayer]\n\n        cursor = conn.cursor()\n        cursor.execute(\"\"\"UPDATE games SET state=\"%s:resignation\" WHERE id=%d;\"\"\", (other_player_name,game))\n        cursor.close()\n\n    else:\n        assert x >= 0 and x < size\n        assert y >= 0 and y < size\n\n        assert board[x][y] == \"\"\n        board[x][y] = \"XO\"[nextPlayer]\n\n        # we've done all of our sanity checks.  We now know enough to say that\n        # it's safe to add a new move.\n        cursor = conn.cursor()\n        cursor.execute(\"\"\"INSERT INTO moves(gameID,x,y,letter,time) VALUES(%d,%d,%d,\"%s\",NOW());\"\"\", (game,x,y,letter))\n\n        if cursor.rowcount != 1:\n            raise FormError(\"Could not make move, reason unknown.\")\n\n        cursor.close()\n\n        result = analyze_board(board)\n        if result != \"\":\n            if result == \"win\":\n                result = players[nextPlayer]+\":win\"\n\n            cursor = conn.cursor()\n            cursor.execute(\"\"\"UPDATE games SET state=\"%s\" WHERE id=%d;\"\"\", (result,game))\n            cursor.close()\n\n    # we've made changes, make sure to commit them!\n    conn.commit()\n    conn.close()\n\n\n    # return the parms to the caller, so that they can build a good redirect\n    return (user,game)",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149243,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@login_manager.user_loader\ndef load_user(s_id):\n    email = str(s_id)\n    query = '''select * from usr where email like\\'''' + email + '\\''\n    cursor = g.conn.execute(query)\n    user = User()\n    for row in cursor:\n        user.name = str(row.name)\n        user.email = str(row.email)\n        break\n    return user",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149244,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@login_manager.user_loader\ndef load_user(s_id):\n    email = str(s_id)\n    query = 'select * from usr where email like %s'\n    cursor = g.conn.execute(query, (email, ))\n    user = User()\n    for row in cursor:\n        user.name = str(row.name)\n        user.email = str(row.email)\n        break\n    return user",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149245,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@mod.route('/delete/<int:cmt_id>', methods=['GET', 'POST'])\ndef delete(cmt_id):\n    if request.method == 'GET':\n        sql = \"SELECT msg_id FROM comment where cmt_id = %d;\" % (cmt_id)\n        cursor.execute(sql)\n        m = cursor.fetchone()\n        sql = \"DELETE FROM comment where cmt_id = '%d';\" % (cmt_id)\n        cursor.execute(sql)\n        conn.commit()\n        flash('Delete Success!')\n    return redirect(url_for('comment.show', msg_id=m[0]))",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149246,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@mod.route('/delete/<int:cmt_id>', methods=['GET', 'POST'])\ndef delete(cmt_id):\n    if request.method == 'GET':\n        cursor.execute(\"SELECT msg_id FROM comment where cmt_id = %s;\", (cmt_id,))\n        m = cursor.fetchone()\n        cursor.execute(\"DELETE FROM comment where cmt_id = %s;\", (cmt_id,))\n        conn.commit()\n        flash('Delete Success!')\n    return redirect(url_for('comment.show', msg_id=m[0]))",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149247,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@app.route('/get_markets')\ndef get_markets():\n    asset_id = request.args.get('asset_id')\n\n    if not isObject(asset_id):\n        ws.send('{\"id\":1, \"method\":\"call\", \"params\":[0,\"lookup_asset_symbols\",[[\"' + asset_id + '\"], 0]]}')\n        result_l = ws.recv()\n        j_l = json.loads(result_l)\n        asset_id = j_l[\"result\"][0][\"id\"]\n\n\n    con = psycopg2.connect(**config.POSTGRES)\n    cur = con.cursor()\n\n    query = \"SELECT * FROM markets WHERE aid='\"+asset_id+\"'\"\n    cur.execute(query)\n    results = cur.fetchall()\n    con.close()\n    return jsonify(results)",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149248,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@app.route('/get_markets')\ndef get_markets():\n    asset_id = request.args.get('asset_id')\n\n    if not isObject(asset_id):\n        ws.send('{\"id\":1, \"method\":\"call\", \"params\":[0,\"lookup_asset_symbols\",[[\"' + asset_id + '\"], 0]]}')\n        result_l = ws.recv()\n        j_l = json.loads(result_l)\n        asset_id = j_l[\"result\"][0][\"id\"]\n\n\n    con = psycopg2.connect(**config.POSTGRES)\n    cur = con.cursor()\n\n    query = \"SELECT * FROM markets WHERE aid=%s\"\n    cur.execute(query, (asset_id,))\n    results = cur.fetchall()\n    con.close()\n    return jsonify(results)",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149249,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\tdef get_secrets(self, from_date_added=0):\n\t\tsecrets = []\n\t\tfor row in self.cursor.execute('SELECT encrypted, json_id, date_added FROM secret WHERE date_added > %s ORDER BY date_added DESC' % from_date_added):\n\t\t\taes_key, json_id, date_added = cryptlib.eciesDecrypt(row[0], self.privkey), row[1], row[2]\n\t\t\tif aes_key != None:\n\t\t\t\tsecrets.append([aes_key, json_id])\n\t\t\tfrom_date_added = max(from_date_added, date_added)\n\t\treturn (secrets, from_date_added)",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149250,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\tdef get_secrets(self, from_date_added=0):\n\t\tsecrets = []\n\t\tfor row in self.cursor.execute('SELECT encrypted, json_id, date_added FROM secret WHERE date_added > ? ORDER BY date_added DESC', (from_date_added,)):\n\t\t\taes_key, json_id, date_added = cryptlib.eciesDecrypt(row[0], self.privkey), row[1], row[2]\n\t\t\tif aes_key != None:\n\t\t\t\tsecrets.append([aes_key, json_id])\n\t\t\tfrom_date_added = max(from_date_added, date_added)\n\t\treturn (secrets, from_date_added)",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149251,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def add_consumption_data_row(self, ts, energy_used, power_used):\n\n        if power_used > 0:\n\n            query = '''\n                INSERT OR IGNORE INTO Consumption (\n                    TimeStamp,\n                    EnergyUsed,\n                    PowerUsed                                \n                ) VALUES (\n                    %s,\n                    %s,\n                    %s\n                );\n            ''' % (ts, 0, 0)\n            self.c.execute(query)\n\n            query = '''\n                UPDATE Consumption SET \n                EnergyUsed = EnergyUsed + %s,\n                PowerUsed = PowerUsed + %s\n                WHERE TimeStamp = %s;\n            ''' % (energy_used, power_used, ts)\n\n            self.c.execute(query)\n\n            self.db.commit()",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149252,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def add_consumption_data_row(self, ts, energy_used, power_used):\n\n        if power_used > 0:\n\n            query = '''\n                INSERT OR IGNORE INTO Consumption (\n                    TimeStamp,\n                    EnergyUsed,\n                    PowerUsed                                \n                ) VALUES (\n                    ?,\n                    ?,\n                    ?\n                );\n            '''\n            self.c.execute(query, (ts, 0, 0))\n\n            query = '''\n                UPDATE Consumption SET \n                EnergyUsed = EnergyUsed + ?,\n                PowerUsed = PowerUsed + ?\n                WHERE TimeStamp=?;\n            '''\n\n            self.c.execute(query, (energy_used, power_used, ts))\n\n            self.db.commit()",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149253,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@app.route('/lookup_assets')\ndef lookup_assets():\n    start = request.args.get('start')\n\n    con = psycopg2.connect(**config.POSTGRES)\n    cur = con.cursor()\n\n    query = \"SELECT aname FROM assets WHERE aname LIKE '\"+start+\"%'\"\n    cur.execute(query)\n    results = cur.fetchall()\n    con.close()\n    return jsonify(results)",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149254,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@app.route('/lookup_assets')\ndef lookup_assets():\n    start = request.args.get('start')\n\n    con = psycopg2.connect(**config.POSTGRES)\n    cur = con.cursor()\n\n    query = \"SELECT aname FROM assets WHERE aname LIKE %s\"\n    cur.execute(query, (start+'%',))\n    results = cur.fetchall()\n    con.close()\n    return jsonify(results)",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149255,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def set_state(chat_id, value):\n    settings = sqlite3.connect(os.path.abspath(os.path.dirname(__file__)) + \"\\\\bases\\\\settings.db\")\n    conn = settings.cursor()\n    conn.execute(\"update users set state ='\" + str(value) + \"' where chat_id = '\" + str(chat_id) + \"'\")\n    settings.commit()\n    settings.close()",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149256,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def set_state(chat_id, value):\n    settings = sqlite3.connect(os.path.abspath(os.path.dirname(__file__)) + \"\\\\bases\\\\settings.db\")\n    conn = settings.cursor()\n    conn.execute(\"update users set state = ? where chat_id = ?\", (str(value), str(chat_id)))\n    settings.commit()\n    settings.close()",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149257,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def _get_degree_2(user_id, cnx):\n    \"\"\"Get all users of degree 2 follow that are not currently followed.\n    Example:\n        this user (follows) user B (follows) user B\n        AND user (does NOT follow) user B\n        means that user B will be in the list\n    Args:\n        user_id (int): id of user\n        cnx: DB connection\n    Returns:\n        list: list of user_ids\n    \"\"\"\n    sql = 'WITH tmp_suggest (followed_id) AS ' \\\n    '(' \\\n        'SELECT b.followed_id AS followed_id ' \\\n        'FROM ' \\\n            'tbl_follow a INNER JOIN tbl_follow b ' \\\n            'ON a.followed_id = b.follower_id ' \\\n        'WHERE a.follower_id = %s ' \\\n        'AND b.followed_id NOT IN ' \\\n            '(SELECT followed_id FROM tbl_follow WHERE follower_id = %s) ' \\\n        'AND b.followed_id != %s ' \\\n    ') ' \\\n    'SELECT followed_id, COUNT(*) AS num_mutual FROM tmp_suggest ' \\\n    'GROUP BY followed_id ' \\\n    'ORDER BY num_mutual DESC' % (user_id, user_id, user_id)\n    with cnx.cursor() as cursor:\n        cursor.execute(sql)\n        res = cursor.fetchall()\n    return list(map(lambda x: x[0], res))",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149258,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def _get_degree_2(user_id, cnx):\n    \"\"\"Get all users of degree 2 follow that are not currently followed.\n    Example:\n        this user (follows) user B (follows) user B\n        AND user (does NOT follow) user B\n        means that user B will be in the list\n    Args:\n        user_id (int): id of user\n        cnx: DB connection\n    Returns:\n        list: list of user_ids\n    \"\"\"\n    sql = 'WITH tmp_suggest (followed_id) AS ' \\\n    '(' \\\n        'SELECT b.followed_id AS followed_id ' \\\n        'FROM ' \\\n            'tbl_follow a INNER JOIN tbl_follow b ' \\\n            'ON a.followed_id = b.follower_id ' \\\n        'WHERE a.follower_id = %s ' \\\n        'AND b.followed_id NOT IN ' \\\n            '(SELECT followed_id FROM tbl_follow WHERE follower_id = %s) ' \\\n        'AND b.followed_id != %s ' \\\n    ') ' \\\n    'SELECT followed_id, COUNT(*) AS num_mutual FROM tmp_suggest ' \\\n    'GROUP BY followed_id ' \\\n    'ORDER BY num_mutual DESC'\n    with cnx.cursor() as cursor:\n        cursor.execute(sql, (user_id, user_id, user_id))\n        res = cursor.fetchall()\n    return list(map(lambda x: x[0], res))",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149259,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def get_tournaments_during_month(db, scene, date):\n    y, m, d = date.split('-')\n    ym_date = '{}-{}'.format(y, m)\n    sql = \"select url, date from matches where scene='{}' and date like '%{}%' group by url, date order by date\".format(scene, ym_date)\n    res = db.exec(sql)\n    urls = [r[0] for r in res]\n    return urls",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149260,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def get_tournaments_during_month(db, scene, date):\n    y, m, d = date.split('-')\n    ym_date = '{}-{}'.format(y, m)\n    sql = \"select url, date from matches where scene='{scene}' and date like '%{date}%' group by url, date order by date\"\n    args = {'scene': scene, 'date': ym_date}\n    res = db.exec(sql, args)\n    urls = [r[0] for r in res]\n    return urls",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149261,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def add_input(self,data):\n        connection = self.connect()\n        try:\n            # The following is a flaw\n            query = \"INSERT INTO crimes(description) VALUES ('{}');\".format(data)\n            with connection.cursor() as cursor:\n                cursor.execute(query)\n                connection.commit()\n        finally:\n            connection.close()",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149262,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def add_input(self,data):\n        connection = self.connect()\n        try:\n            # The following is a flaw\n            query = \"INSERT INTO crimes(description) VALUES (%s);\"\n            with connection.cursor() as cursor:\n                cursor.execute(query, data)\n                connection.commit()\n        finally:\n            connection.close()",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149263,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def get_error_days(cur, error_percent):\n    \"\"\"Fetches the days in which requests led to errors.\n\n    Fetches the days in which the specified percentage\n    of requests led to errors.\n\n    Args:\n        cur(obj): The cursor to execute the query.\n        error_percent(int): The percentage of requests that led to errors.\n\n    Return:\n        True if success, False otherwise.\n    \"\"\"\n    query = '''SELECT to_char(log_errors.date, 'Mon DD YYYY'),\n            round((log_errors.errors * 100\n            / log_requests.total::numeric), 2) as percent\n            FROM log_errors, log_requests\n            WHERE log_errors.date = log_requests.date AND\n            log_errors.errors * 100\n            / log_requests.total::numeric > {}\n            ORDER BY log_errors.date'''.format(error_percent)\n    rows = get_data(cur, query)\n\n    # Write data to txt file.\n    if rows is not None:\n        file = open(\"error_report.txt\", \"w\")\n        for row in rows:\n            file.write(\"{} - {}% errors \\n\".format(row[0], row[1]))\n        file.close()\n\n        return True\n    else:\n        return False",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149264,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def get_error_days(cur, error_percent):\n    \"\"\"Fetches the days in which requests led to errors.\n\n    Fetches the days in which the specified percentage\n    of requests led to errors.\n\n    Args:\n        cur(obj): The cursor to execute the query.\n        error_percent(int): The percentage of requests that led to errors.\n\n    Return:\n        True if success, False otherwise.\n    \"\"\"\n    data = (error_percent, )\n    query = '''SELECT to_char(log_errors.date, 'Mon DD YYYY'),\n            round((log_errors.errors * 100\n            / log_requests.total::numeric), 2) as percent\n            FROM log_errors, log_requests\n            WHERE log_errors.date = log_requests.date AND\n            log_errors.errors * 100\n            / log_requests.total::numeric > %s\n            ORDER BY log_errors.date'''\n    rows = get_data(cur, query, data)\n\n    # Write data to txt file.\n    if rows is not None:\n        file = open(\"error_report.txt\", \"w\")\n        for row in rows:\n            file.write(\"{} - {}% errors \\n\".format(row[0], row[1]))\n        file.close()\n\n        return True\n    else:\n        return False",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149265,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def all_deposits(self,coin):\n        sql = \"SELECT * FROM deposits WHERE coin='%s'\" % coin\n        self.cursor.execute(sql)\n        return self.cursor.fetchall()",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149266,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def all_deposits(self,coin):\n        sql = \"SELECT * FROM deposits WHERE coin='%s'\"\n        self.cursor.execute(sql, (coin,))\n        return self.cursor.fetchall()",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149267,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def get_user(self):\n        if not hasattr(self, '_user'):\n            qs = \"select * from account_access where access_token = '%s'\" % self.access_token\n            result = self.db.get(qs)\n            if result:\n                self._user = result\n            else:\n                self._user = None\n        \n        return self._user",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149268,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def get_user(self):\n        if not hasattr(self, '_user'):\n            qs = \"select * from account_access where access_token = %s\"\n            result = self.db.get(qs, self.access_token)\n            if result:\n                self._user = result\n            else:\n                self._user = None\n        \n        return self._user",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149269,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    @staticmethod\n    def compare_and_update(user, message):\n        \"\"\"\n        This method compare a user object from the bot and his info from\n        the Telegram message to check whether a user has changed his bio\n        or not. If yes, the user object that represents him in the bot will\n        be updated accordingly. Now this function is called only when a user\n        asks the bot for showing the most popular cams\n\n        :param user: user object that represents a Telegram user in this bot\n        :param message: object from Telegram that contains info about user's\n        message and about himself\n        :return: None\n        \"\"\"\n\n        log.info('Checking whether user have changed his info or not...')\n        msg = message.from_user\n        usr_from_message = User(message.chat.id, msg.first_name, msg.username,\n                                msg.last_name)\n\n        if user.chat_id != usr_from_message.chat_id:\n            log.error(\"Wrong user to compare!\")\n            return\n\n        if user.first_name != usr_from_message.first_name:\n            user.first_name = usr_from_message.first_name\n\n        elif user.nickname != usr_from_message.nickname:\n            user.nickname = usr_from_message.nickname\n\n        elif user.last_name != usr_from_message.last_name:\n            user.last_name = usr_from_message.last_name\n\n        else:\n            log.debug(\"User's info hasn't changed\")\n            return\n\n        log.info(\"User has changed his info\")\n        log.debug(\"Updating user's info in the database...\")\n        query = (f\"UPDATE users \"\n                 f\"SET first_name='{user.first_name}', \"\n                 f\"nickname='{user.nickname}', \"\n                 f\"last_name='{user.last_name}' \"\n                 f\"WHERE chat_id={user.chat_id}\")\n\n        try:\n            db.add(query)\n        except DatabaseError:\n            log.error(\"Could not update info about %s in the database\",\n                      user)\n        else:\n            log.debug(\"User's info has been updated\")",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149270,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    @staticmethod\n    def compare_and_update(user, message):\n        \"\"\"\n        This method compare a user object from the bot and his info from\n        the Telegram message to check whether a user has changed his bio\n        or not. If yes, the user object that represents him in the bot will\n        be updated accordingly. Now this function is called only when a user\n        asks the bot for showing the most popular cams\n\n        :param user: user object that represents a Telegram user in this bot\n        :param message: object from Telegram that contains info about user's\n        message and about himself\n        :return: None\n        \"\"\"\n\n        log.info('Checking whether user have changed his info or not...')\n        msg = message.from_user\n        usr_from_message = User(message.chat.id, msg.first_name, msg.username,\n                                msg.last_name)\n\n        if user.chat_id != usr_from_message.chat_id:\n            log.error(\"Wrong user to compare!\")\n            return\n\n        if user.first_name != usr_from_message.first_name:\n            user.first_name = usr_from_message.first_name\n\n        elif user.nickname != usr_from_message.nickname:\n            user.nickname = usr_from_message.nickname\n\n        elif user.last_name != usr_from_message.last_name:\n            user.last_name = usr_from_message.last_name\n\n        else:\n            log.debug(\"User's info hasn't changed\")\n            return\n\n        log.info(\"User has changed his info\")\n        log.debug(\"Updating user's info in the database...\")\n        query = (f\"UPDATE users \"\n                 f\"SET first_name=%s, \"\n                 f\"nickname=%s, \"\n                 f\"last_name=%s \"\n                 f\"WHERE chat_id=%s\")\n\n        parameters = (user.first_name, user.nickname, user.last_name,\n                      user.chat_id)\n\n        try:\n            db.add(query, parameters)\n        except DatabaseError:\n            log.error(\"Could not update info about %s in the database\",\n                      user)\n        else:\n            log.debug(\"User's info has been updated\")",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149271,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def GameNewPlayed(Played, ID):\n\tdb.execute(\"UPDATE games set GamesPlayed = %i WHERE ID = %i\" % (Played, ID))\n\tdatabase.commit()",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149272,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def GameNewPlayed(Played, ID):\n\tdb.execute(\"UPDATE games set GamesPlayed = ? WHERE ID = ?\", Played, ID)\n\tdatabase.commit()",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149273,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def insertNPC(name, race,classe,sex,level,image,legit):\n\tc, conn = getConnection()\n\tdate = now()\n\tc.execute(\"INSERT INTO npc VALUES ('\"+date+\"','\"+str(name)+\"','\"+race+\"','\"+classe+\"','\"+sex+\"','\"+str(level)+\"','\"+image+\"','\"+str(legit)+\"')\")\n\tconn.commit()\n\tconn.close()",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149274,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def insertNPC(name, race,classe,sex,level,image,legit):\n\tc, conn = getConnection()\n\tdate = now()\n\tc.execute(\"INSERT INTO npc VALUES (?,?,?,?,?,?,?,?)\",(date,str(name),race,classe,sex,str(level),image,str(legit)))\n\tconn.commit()\n\tconn.close()",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149275,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def get(self, user_id):\n        \"\"\" Fetch data for user with corresponding user_id \"\"\"\n        return database_utilities.execute_query(f\"\"\"select * from users where user_id = '{user_id}'\"\"\")",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149276,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def get(self, user_id):\n        \"\"\" Fetch data for user with corresponding user_id \"\"\"\n        return database_utilities.execute_query(f\"\"\"select * from users where user_id = %s\"\"\", (user_id, ))",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149277,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@endpoints.route(\"/h2h\")\ndef h2h():\n    if db == None:\n        init()\n\n    player1 = request.args.get('tag1', default=\"christmasmike\")\n    player2 = request.args.get('tag2', default=\"christmasmike\")\n    sql = \"SELECT * FROM matches WHERE (player1 = '\"+str(player1)+\"' OR \"\\\n            +\"player2 = '\"+str(player1)+\"') AND (player1 = '\"+str(player2)+\"' OR \"\\\n            +\"player2 = '\"+str(player2)+\"') ORDER BY date DESC;\"\n    result = db.exec(sql)\n    return json.dumps(result)",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149278,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@endpoints.route(\"/h2h\")\ndef h2h():\n    if db == None:\n        init()\n\n    player1 = request.args.get('tag1', default=\"christmasmike\")\n    player2 = request.args.get('tag2', default=\"christmasmike\")\n    sql = \"SELECT * FROM matches WHERE (player1 = '{player1}' OR \"\\\n            +\"player2 = '{player1}') AND (player1 = '{player2}' OR \"\\\n            +\"player2 = '{player2}') ORDER BY date DESC;\"\n    args = {'player1': player1, 'player2': player2}\n    result = db.exec(sql, args)\n    return json.dumps(result)",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149279,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def insertData(self,userid,post):\n        sqlText=\"insert into post(userid,date,comment) \\\n                values(%d,current_timestamp(0),'%s');\"%(userid,post);\n        result=sql.insertDB(self.conn,sqlText)\n        return result;",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149280,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def insertData(self,userid,post):\n        sqlText=\"insert into post(userid,date,comment) \\\n                values(%s,current_timestamp(0),%s);\"\n        params=[userid,post];\n        result=sql.insertDB(self.conn,sqlText,params)\n        return result;",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149281,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def get_requested_month_for_inverter(self, inverter_serial, date):\n        data = dict()\n\n        month_start, month_end = self.get_epoch_month(date)\n        data['interval'] = {'from': self.convert_local_ts_to_utc(month_start, self.local_timezone), 'to': self.convert_local_ts_to_utc(month_end, self.local_timezone)}\n        month_total = 0\n\n        query = '''\n            SELECT TimeStamp, DayYield AS Power \n            FROM MonthData \n            WHERE TimeStamp BETWEEN %s AND %s AND Serial = %s\n            '''\n\n        data['data'] = list()\n        for row in self.c.execute(query % (month_start, month_end, inverter_serial)):\n            data['data'].append({'time': self.convert_local_ts_to_utc(row[0], self.local_timezone), 'power': row[1]})\n            month_total += row[1]\n\n        data['total'] = month_total\n\n        query = '''\n            SELECT MIN(TimeStamp) as Min, MAX(TimeStamp) as Max \n            FROM MonthData \n            WHERE Serial = %s;\n            ''' % inverter_serial\n\n        self.c.execute(query)\n        first_data, last_data = self.c.fetchone()\n\n        if first_data: data['hasPrevious'] = (first_data < month_start)\n        else: data['hasPrevious'] = False\n        if last_data: data['hasNext'] = (last_data > month_end)\n        else: data['hasNext'] = False\n\n        return data",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149282,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def get_requested_month_for_inverter(self, inverter_serial, date):\n        data = dict()\n\n        month_start, month_end = self.get_epoch_month(date)\n        data['interval'] = {'from': self.convert_local_ts_to_utc(month_start, self.local_timezone), 'to': self.convert_local_ts_to_utc(month_end, self.local_timezone)}\n        month_total = 0\n\n        query = '''\n            SELECT TimeStamp, DayYield AS Power \n            FROM MonthData \n            WHERE TimeStamp BETWEEN ? AND ? AND Serial=?;\n            '''\n\n        data['data'] = list()\n        for row in self.c.execute(query, (month_start, month_end, inverter_serial)):\n            data['data'].append({'time': self.convert_local_ts_to_utc(row[0], self.local_timezone), 'power': row[1]})\n            month_total += row[1]\n\n        data['total'] = month_total\n\n        query = '''\n            SELECT MIN(TimeStamp) as Min, MAX(TimeStamp) as Max \n            FROM MonthData \n            WHERE Serial=?;\n            '''\n\n        self.c.execute(query, (inverter_serial,))\n        first_data, last_data = self.c.fetchone()\n\n        if first_data: data['hasPrevious'] = (first_data < month_start)\n        else: data['hasPrevious'] = False\n        if last_data: data['hasNext'] = (last_data > month_end)\n        else: data['hasNext'] = False\n\n        return data",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149283,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def delete_resultSet(self, session, id):\n        self._openContainer(session)\n        sid = str(id)\n        if (self.idNormalizer is not None):\n            sid = self.idNormalizer.process_string(session, sid)\n        query = \"DELETE FROM %s WHERE identifier = '%s';\" % (self.table, sid)\n        self._query(query)",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149284,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def delete_resultSet(self, session, id):\n        self._openContainer(session)\n        sid = str(id)\n        if (self.idNormalizer is not None):\n            sid = self.idNormalizer.process_string(session, sid)\n        query = \"DELETE FROM %s WHERE identifier = $1;\" % (self.table)\n        self._query(query, sid)",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149285,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def getSeriesDateFromDatabase(submission):\n    database = sqlite3.connect('database.db')\n    cursor = database.cursor()\n    return cursor.execute(\"SELECT StartDate FROM SeriesTracking WHERE SeriesTitle = '\" + str(getTitle(submission)) + \"'\").fetchone()[0]\n    database.close()",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149286,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def getSeriesDateFromDatabase(submission):\n    database = sqlite3.connect('database.db')\n    cursor = database.cursor()\n    return cursor.execute(\"SELECT StartDate FROM SeriesTracking WHERE SeriesTitle = ?\", [getTitle(submission)]).fetchone()[0]\n    database.close()",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149287,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def karma_add(name):\n    karma = karma_ask(name)\n    db = db_connect()\n    cursor = db.cursor()\n    if karma is None:\n        try:\n            cursor.execute('''\n                INSERT INTO people(name,karma,shame) VALUES('{}',1,0)\n                '''.format(name))\n            db.commit()\n            logger.debug('Inserted into karmadb 1 karma for {}'.format(name))\n            return 1\n        except Exception as e:\n            logger.error('Execution failed with error: {}'.format(e))\n            raise\n    else:\n        karma = karma + 1\n        try:\n            cursor.execute('''\n                UPDATE people SET karma = {0} WHERE name = '{1}'\n                '''.format(karma, name))\n            db.commit()\n            logger.debug('Inserted into karmadb {} karma for {}'.format(\n                karma, name))\n            return karma\n\n        except Exception as e:\n            logger.error('Execution failed with error: {}'.format(e))\n            raise\n    db.close()",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149288,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def karma_add(name):\n    karma = karma_ask(name)\n    db = db_connect()\n    cursor = db.cursor()\n    if karma is None:\n        try:\n            cursor.execute('''\n                INSERT INTO people(name,karma,shame) VALUES(%(name)s,1,0)\n                ''', name)\n            db.commit()\n            logger.debug('Inserted into karmadb 1 karma for {}'.format(name))\n            return 1\n        except Exception as e:\n            logger.error('Execution failed with error: {}'.format(e))\n            raise\n    else:\n        karma = karma + 1\n        try:\n            cursor.execute('''\n                UPDATE people SET karma = %(karma)s WHERE name = %(name)s\n                ''', (karma, name))\n            db.commit()\n            logger.debug('Inserted into karmadb {} karma for {}'.format(\n                karma,\n                name,\n            ))\n            return karma\n\n        except Exception as e:\n            logger.error('Execution failed with error: {}'.format(e))\n            raise\n    db.close()",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149289,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "  def update_date_modified(self):\n    sql = \"UPDATE jdk_entries \" + \\\n      \"SET date_last_modified = \" + CURRENT_DATESTAMP + \" \" + \\\n      \"WHERE jdk_entries.id = '\" + self.entry_id + \"';\"\n    \n    db_execute(sql)\n\n    return None",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149290,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "  def update_date_modified(self):\n    quote_tuple = CURRENT_DATESTAMP, self.entry_id\n\n    sql = \"UPDATE jdk_entries \" + \\\n      \"SET date_last_modified = ? \" + \\\n      \"WHERE jdk_entries.id = ?;\"\n    \n    db_execute(sql, quote_tuple)\n\n    return None",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149291,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def system_search(self, search):\r\n        search = search.lower()\r\n        conn = sqlite3.connect('data/ed.db').cursor()\r\n        table = conn.execute(f\"select * from populated where lower(name) = '{search}'\")\r\n        results = table.fetchone()\r\n        if not results:\r\n            table = conn.execute(f\"select * from systems where lower(name) = '{search}'\")\r\n            results = table.fetchone()\r\n        if results:\r\n            keys = tuple(i[0] for i in table.description) \r\n            return '\\n'.join(f'{key.replace(\"_\", \" \").title()}: {field}'\r\n                             for key, field in zip(keys[1:], results[1:]) if field)\r\n        else:\r\n            return 'No systems found.'",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149292,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def system_search(self, search):\r\n        search = search.lower()\r\n        conn = sqlite3.connect('data/ed.db').cursor()\r\n        table = conn.execute('select * from populated where lower(name) = ?', (search,))\r\n        results = table.fetchone()\r\n        if not results:\r\n            table = conn.execute('select * from systems where lower(name) = ?', (search,))\r\n            results = table.fetchone()\r\n        if results:\r\n            keys = tuple(i[0] for i in table.description) \r\n            return '\\n'.join(f'{key.replace(\"_\", \" \").title()}: {field}'\r\n                             for key, field in zip(keys[1:], results[1:]) if field)\r\n        else:\r\n            return 'No systems found.'",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149293,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def add_input(self, data):\n        connection = self.connect()\n        try:\n            # The following introduces a deliberate security flaw - SQL Injection\n            query = \"INSERT INTO crimes (description) VALUES ('{}');\".format(data)\n            with connection.cursor() as cursor:\n                cursor.execute(query)\n                connection.commit()\n        finally:\n            connection.close()",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149294,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def add_input(self, data):\n        connection = self.connect()\n        try:\n            # The following introduces a deliberate security flaw - SQL Injection\n            query = \"INSERT INTO crimes (description) VALUES (%s);\"\n            with connection.cursor() as cursor:\n                cursor.execute(query, data)\n                connection.commit()\n        finally:\n            connection.close()",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149295,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@bot.message_handler(commands =['login'])\ndef get_login(message):\n    settings = sqlite3.connect(os.path.abspath(os.path.dirname(__file__)) + \"\\\\bases\\\\settings.db\")\n    conn = settings.cursor()\n    conn.execute(\"select * from users where chat_id = '\" + str(message.chat.id) + \"'\")\n    name = conn.fetchone()\n    if name != None:\n        bot.send_message(message.chat.id, \"Previous handle: \" + str(name[1]))\n    else:\n        bot.send_message(message.chat.id, \"Previous handle: None\")\n    settings.close()\n    bot.send_message(message.chat.id, \"Type new handle: \")\n    set_state(message.chat.id, config.States.S_LOGIN.value)",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149296,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@bot.message_handler(commands =['login'])\ndef get_login(message):\n    settings = sqlite3.connect(os.path.abspath(os.path.dirname(__file__)) + \"\\\\bases\\\\settings.db\")\n    conn = settings.cursor()\n    conn.execute(\"select * from users where chat_id = ?\", (str(message.chat.id),))\n    name = conn.fetchone()\n    if name != None:\n        bot.send_message(message.chat.id, \"Previous handle: \" + str(name[1]))\n    else:\n        bot.send_message(message.chat.id, \"Previous handle: None\")\n    settings.close()\n    bot.send_message(message.chat.id, \"Type new handle: \")\n    set_state(message.chat.id, config.States.S_LOGIN.value)",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149297,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def login(self, username, password):\n        select_query = \"\"\"\n            SELECT client_id, username, balance, message\n            FROM Clients\n            WHERE username = '{}' AND password = '{}'\n            LIMIT 1\n        \"\"\".format(username, password)\n\n        cursor = self.__conn.cursor()\n\n        cursor.execute(select_query)\n        user = cursor.fetchone()\n\n        if(user):\n            return Client(user[0], user[1], user[2], user[3])\n        else:\n            return False",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149298,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def login(self, username, password):\n        select_query = \"\"\"\n            SELECT client_id, username, balance, message\n            FROM Clients\n            WHERE username = ? AND password = ?\n            LIMIT 1\n        \"\"\"\n\n        cursor = self.__conn.cursor()\n\n        cursor.execute(select_query, (username, password))\n        user = cursor.fetchone()\n\n        if(user):\n            return Client(user[0], user[1], user[2], user[3])\n        else:\n            return False",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149299,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def get_current_state(chat_id):\n    settings = sqlite3.connect(os.path.abspath(os.path.dirname(__file__))+\"\\\\bases\\\\settings.db\")\n    conn = settings.cursor()\n    conn.execute(\"select * from users where chat_id = '\" + str(chat_id) + \"'\")\n    name = conn.fetchone()\n    if name != None:\n        return name[4]\n    else:\n        return False\n    settings.close()",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149300,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def get_current_state(chat_id):\n    settings = sqlite3.connect(os.path.abspath(os.path.dirname(__file__))+\"\\\\bases\\\\settings.db\")\n    conn = settings.cursor()\n    conn.execute(\"select * from users where chat_id = ?\", (str(chat_id),))\n    name = conn.fetchone()\n    if name != None:\n        return name[4]\n    else:\n        return False\n    settings.close()",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149301,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "  def fetch_page_name(self, page_id):\n    '''\n    Returns the page name corresponding to the provided page ID.\n\n    Args:\n      page_id: The page ID whose ID to fetch.\n\n    Returns:\n      str: The page name corresponding to the provided page ID.\n\n    Raises:\n      ValueError: If the provided page ID is invalid or does not exist.\n    '''\n    helpers.validate_page_id(page_id)\n\n    query = 'SELECT name FROM pages WHERE id=\"{0}\"'.format(page_id)\n    self.cursor.execute(query)\n\n    page_name = self.cursor.fetchone()\n\n    if not page_name:\n      raise ValueError('Invalid page ID \"{0}\" provided. Page ID does not exist.'.format(page_id))\n\n    return page_name[0].encode('utf-8').replace('_', ' ')",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149302,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "  def fetch_page_name(self, page_id):\n    '''\n    Returns the page name corresponding to the provided page ID.\n\n    Args:\n      page_id: The page ID whose ID to fetch.\n\n    Returns:\n      str: The page name corresponding to the provided page ID.\n\n    Raises:\n      ValueError: If the provided page ID is invalid or does not exist.\n    '''\n    helpers.validate_page_id(page_id)\n\n    query = 'SELECT name FROM pages WHERE id = ?;'\n    query_bindings = (page_id,)\n    self.cursor.execute(query, query_bindings)\n\n    page_name = self.cursor.fetchone()\n\n    if not page_name:\n      raise ValueError('Invalid page ID \"{0}\" provided. Page ID does not exist.'.format(page_id))\n\n    return page_name[0].encode('utf-8').replace('_', ' ')",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149303,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@app.route('/<page_name>/save', methods=['POST'])\ndef save_page_edit(page_name):\n    # grab the new content from the user\n    content = request.form.get('content')\n    # check if 'page_name' exists in the database\n    query = db.query(\"select page_content.content, page.id as page_id, page_content.id as content_id from page, page_content where page.id = page_content.page_id and page.page_name = '%s' order by page_content.id desc limit 1\" % page_name)\n    result = query.namedresult()\n    # if it doesn't exist, create a new page in the database\n    if len(result) < 1:\n        db.insert(\n            'page', {\n                'page_name': page_name\n            }\n        )\n    else:\n        pass\n    # now that we're certain that the page exists in the database, we again grab the query\n    # and insert new content in the database\n    query = db.query(\"select id from page where page_name = '%s'\" % page_name)\n    page_id = query.namedresult()[0].id\n    db.insert(\n        'page_content', {\n            'page_id': page_id,\n            'content': content,\n            'timestamp': time.strftime(\"%Y-%m-%d %H:%M:%S\", localtime())\n        }\n    )\n    return redirect(\"/%s\" % page_name)",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149304,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@app.route('/<page_name>/save', methods=['POST'])\ndef save_page_edit(page_name):\n    # grab the new content from the user\n    content = request.form.get('content')\n    # check if 'page_name' exists in the database\n    query = db.query(\"select page_content.content, page.id as page_id, page_content.id as content_id from page, page_content where page.id = page_content.page_id and page.page_name = $1 order by page_content.id desc limit 1\", page_name)\n    result = query.namedresult()\n    # if it doesn't exist, create a new page in the database\n    if len(result) < 1:\n        db.insert(\n            'page', {\n                'page_name': page_name\n            }\n        )\n    else:\n        pass\n    # now that we're certain that the page exists in the database, we again grab the query\n    # and insert new content in the database\n    query = db.query(\"select id from page where page_name = '%s'\" % page_name)\n    page_id = query.namedresult()[0].id\n    db.insert(\n        'page_content', {\n            'page_id': page_id,\n            'content': content,\n            'timestamp': time.strftime(\"%Y-%m-%d %H:%M:%S\", localtime())\n        }\n    )\n    return redirect(\"/%s\" % page_name)",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149305,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def get_top_popular(top_num):\r\n    \"\"\" query the top(top_num) popular articles\r\n        top_num => list of [title, count]\r\n    \"\"\"\r\n    cmd = \"\"\"SELECT title, views FROM articles\r\n             INNER JOIN (\r\n             SELECT path, count(path) AS views\r\n             FROM log GROUP BY log.path\r\n             ) AS log\r\n             ON log.path = '/article/' || articles.slug\r\n             ORDER BY views DESC\r\n             LIMIT {}\"\"\".format(top_num)\r\n    return execute_query(cmd)",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149306,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def get_top_popular(top_num):\r\n    \"\"\" query the top(top_num) popular articles\r\n        top_num => list of [title, count]\r\n    \"\"\"\r\n    cmd = \"\"\"SELECT title, views FROM articles\r\n             INNER JOIN (\r\n             SELECT path, count(path) AS views\r\n             FROM log GROUP BY log.path\r\n             ) AS log\r\n             ON log.path = '/article/' || articles.slug\r\n             ORDER BY views DESC\r\n             LIMIT %s\"\"\"\r\n    data = [top_num, ]\r\n    return execute_query(cmd, data)",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149307,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@app.route('/<page_name>/edit')\ndef render_page_edit(page_name):\n    query = db.query(\"select page_content.content from page, page_content where page.id = page_content.page_id and page.page_name = '%s' order by page_content.id desc limit 1\" % page_name)\n    wiki_page = query.namedresult()\n    if len(wiki_page) > 0:\n        content = wiki_page[0].content\n    else:\n        content = \"\"\n    return render_template(\n        'edit_page.html',\n        page_name = page_name,\n        content = content\n    )",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149308,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@app.route('/<page_name>/edit')\ndef render_page_edit(page_name):\n    query = db.query(\"select page_content.content from page, page_content where page.id = page_content.page_id and page.page_name = $1 order by page_content.id desc limit 1\", page_name)\n    wiki_page = query.namedresult()\n    if len(wiki_page) > 0:\n        content = wiki_page[0].content\n    else:\n        content = \"\"\n    return render_template(\n        'edit_page.html',\n        page_name = page_name,\n        content = content\n    )",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149309,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def get_monthly_ranks_for_scene(db, scene, tag):\n\n    sql = \"SELECT date, rank FROM ranks WHERE scene='{}' AND player='{}'\".format(scene, tag)\n    res = db.exec(sql)\n\n    res = [r for r in res if played_during_month(db, scene, tag, get_previous_month(r[0]))]\n\n    # Build up a dict of {date: rank}\n    ranks = {}\n    for r in res:\n        ranks[r[0]] = r[1]\n\n    return ranks",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149310,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def get_monthly_ranks_for_scene(db, scene, tag):\n\n    sql = \"SELECT date, rank FROM ranks WHERE scene='{scene}' AND player='{tag}'\"\n    args = {'scene': scene, 'tag': tag}\n    res = db.exec(sql, args)\n\n    res = [r for r in res if played_during_month(db, scene, tag, get_previous_month(r[0]))]\n\n    # Build up a dict of {date: rank}\n    ranks = {}\n    for r in res:\n        ranks[r[0]] = r[1]\n\n    return ranks",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149311,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    @staticmethod\n    def auto_unlock_tasks(project_id: int):\n        \"\"\"Unlock all tasks locked for longer than the auto-unlock delta\"\"\"\n        expiry_delta = Task.auto_unlock_delta()\n        lock_duration = (datetime.datetime.min + expiry_delta).time().isoformat()\n        expiry_date = datetime.datetime.utcnow() - expiry_delta\n        old_locks_query = '''SELECT t.id\n            FROM tasks t, task_history th\n            WHERE t.id = th.task_id\n            AND t.project_id = th.project_id\n            AND t.task_status IN (1,3)\n            AND th.action IN ( 'LOCKED_FOR_VALIDATION','LOCKED_FOR_MAPPING' )\n            AND th.action_text IS NULL\n            AND t.project_id = {0}\n            AND th.action_date <= '{1}'\n            '''.format(project_id, str(expiry_date))\n\n        old_tasks = db.engine.execute(old_locks_query)\n\n        if old_tasks.rowcount == 0:\n            # no tasks older than the delta found, return without further processing\n            return\n\n        for old_task in old_tasks:\n            task = Task.get(old_task[0], project_id)\n            task.auto_unlock_expired_tasks(expiry_date, lock_duration)",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149312,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    @staticmethod\n    def auto_unlock_tasks(project_id: int):\n        \"\"\"Unlock all tasks locked for longer than the auto-unlock delta\"\"\"\n        expiry_delta = Task.auto_unlock_delta()\n        lock_duration = (datetime.datetime.min + expiry_delta).time().isoformat()\n        expiry_date = datetime.datetime.utcnow() - expiry_delta\n        old_locks_query = '''SELECT t.id\n            FROM tasks t, task_history th\n            WHERE t.id = th.task_id\n            AND t.project_id = th.project_id\n            AND t.task_status IN (1,3)\n            AND th.action IN ( 'LOCKED_FOR_VALIDATION','LOCKED_FOR_MAPPING' )\n            AND th.action_text IS NULL\n            AND t.project_id = :project_id\n            AND th.action_date <= :expiry_date\n            '''\n\n        old_tasks = db.engine.execute(text(old_locks_query), project_id=project_id, expiry_date=str(expiry_date))\n\n        if old_tasks.rowcount == 0:\n            # no tasks older than the delta found, return without further processing\n            return\n\n        for old_task in old_tasks:\n            task = Task.get(old_task[0], project_id)\n            task.auto_unlock_expired_tasks(expiry_date, lock_duration)",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149313,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def add_input(self, data):\n        connection = self.connect()\n        try:\n            # The following introduces a deliberate security flaw. \n            # See section on SQL injection below\n            query = \"INSERT INTO crimes (description) VALUES('{}');\".format(data)\n            with connection.cursor() as cursor:\n                cursor.execute(query)\n                connection.commit()\n        finally:\n            connection.close()",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149314,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def add_input(self, data):\n        connection = self.connect()\n        try:\n            # The following introduces a deliberate security flaw. \n            # See section on SQL injection below\n            query = \"INSERT INTO crimes (description) VALUES(%s);\"\n            with connection.cursor() as cursor:\n                cursor.execute(query, data)\n                connection.commit()\n        finally:\n            connection.close()",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149315,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def getAllComments(self):\n        sqlText=\"select comment from comments where userid=%d order by date;\"\n        allposts=sql.queryDB(self.conn,sqlText)\n        return allposts;",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149316,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def getAllComments(self):\n        sqlText=\"select comment from comments where userid=%s order by date;\"\n        params = [self.userid]\n        allposts=sql.queryDB(self.conn,sqlText,params)\n        return allposts;",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149317,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def update_user(username, chat_id, last_update):\n    conn = sqlite3.connect(os.path.abspath(os.path.dirname(__file__)) + \"\\\\users\\\\\" + username + '.db')\n    conn2 = sqlite3.connect(os.path.abspath(os.path.dirname(__file__)) + '\\\\cf.db')\n    settings = sqlite3.connect(os.path.abspath(os.path.dirname(__file__)) + \"\\\\settings.db\")\n    cursor = conn.cursor()\n    cursor2 = conn2.cursor()\n    cursor_settings = settings.cursor()\n    cursor_settings.execute(\"select last_problem from users where chat_id = '\" + str(chat_id) + \"'\")\n    update_eq = cursor_settings.fetchone()\n    cursor_settings.execute(\"select * from last_update_problemset\")\n    update_base = cursor_settings.fetchone()\n    last_problem = update_base[0]\n    if update_eq[0] != update_base[0]:\n        cursor2.execute(\"SELECT * FROM problems\")\n        x = cursor2.fetchone()\n        while x != None:\n            cursor.execute(\"select * from result where problem = '\" + str(x[0]) + \"' and diff = '\" + str(x[1]) + \"'\")\n            x2 = cursor.fetchone()\n            if x2 == None:\n                cursor.execute(\"insert into result values (?, ?, ? )\", (x[0], x[1], \"NULL\"))\n            last_problem = x\n            x = cursor2.fetchone()\n        conn2.close()\n        settings.close()\n    if len(last_problem) == 2:\n        last_problem = last_problem[0] + last_problem[1]\n\n    url = 'http://codeforces.com/submissions/' + username\n    r = requests.get(url)\n    max_page = 1\n    soup = BeautifulSoup(r.text, \"lxml\")\n\n    for link in soup.find_all(attrs={\"class\": \"page-index\"}):\n        s = link.find('a')\n        s2 = s.get(\"href\").split('/')\n        max_page = max(max_page, int(s2[4]))\n\n    v = False\n    r = requests.get('http://codeforces.com/submissions/' + username + '/page/0')\n    soup = BeautifulSoup(r.text, \"lxml\")\n    last_try_new = soup.find(attrs={\"class\": \"status-small\"})\n    last_try_new = str(last_try_new).split()\n    last_try_new = str(last_try_new[2]) + str(last_try_new[3])\n    for i in range(1, max_page + 1):\n        r = requests.get('http://codeforces.com/submissions/' + username + '/page/' + str(i))\n        soup = BeautifulSoup(r.text, \"lxml\")\n        count = 0\n        j = 0\n        ver = soup.find_all(attrs={\"class\": \"submissionVerdictWrapper\"})\n        last_try = soup.find_all(attrs={\"class\": \"status-small\"})\n        for link in soup.find_all('a'):\n            last_try_date = str(last_try[j]).split()\n            last_try_date = str(last_try_date[2]) + str(last_try_date[3])\n            if last_try_date == last_update:\n                v = True\n                break\n            s = link.get('href')\n            if s != None and s.find('/problemset') != -1:\n                s = s.split('/')\n                if len(s) == 5:\n                    s2 = str(ver[count]).split()\n                    s2 = s2[5].split('\\\"')\n                    count += 1\n                    j += 1\n                    cursor.execute(\"select * from result where problem = '\" + s[3] + \"'and diff = '\" + s[4] + \"'\")\n                    x = cursor.fetchone()\n                    if s2[1] == 'OK' and x != None:\n                        cursor.execute(\n                            \"update result set verdict = '\" + s2[1] + \"' where problem = '\" + s[3] + \"' and diff = '\" +\n                            s[4] + \"'\")\n                    if x[2] != 'OK':\n                        cursor.execute(\n                            \"update result set verdict = '\" + s2[1] + \"' where problem = '\" + s[3] + \"' and diff = '\" +\n                            s[4] + \"'\")\n        if v:\n            break\n\n    conn.commit()\n    conn.close()\n\n    settings = sqlite3.connect(os.path.abspath(os.path.dirname(__file__)) + \"\\\\settings.db\")\n    conn = settings.cursor()\n    conn.execute(\"update users set username = '\" + str(username) + \"' where chat_id = '\" + str(chat_id) + \"'\")\n    conn.execute(\"update users set last_update = '\" + str(last_try_new) + \"' where chat_id = '\" + str(chat_id) + \"'\")\n    conn.execute(\"update users set last_problem = '\" + str(last_problem) + \"' where chat_id = '\" + str(chat_id) + \"'\")\n\n    settings.commit()\n    settings.close()",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149318,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def update_user(username, chat_id, last_update):\n    conn = sqlite3.connect(os.path.abspath(os.path.dirname(__file__)) + \"\\\\users\\\\\" + username + '.db')\n    conn2 = sqlite3.connect(os.path.abspath(os.path.dirname(__file__)) + '\\\\cf.db')\n    settings = sqlite3.connect(os.path.abspath(os.path.dirname(__file__)) + \"\\\\settings.db\")\n    cursor = conn.cursor()\n    cursor2 = conn2.cursor()\n    cursor_settings = settings.cursor()\n    cursor_settings.execute(\"select last_problem from users where chat_id = ?\", (str(chat_id), ))\n    update_eq = cursor_settings.fetchone()\n    cursor_settings.execute(\"select * from last_update_problemset\")\n    update_base = cursor_settings.fetchone()\n    last_problem = update_base[0]\n    if update_eq[0] != update_base[0]:\n        cursor2.execute(\"SELECT * FROM problems\")\n        x = cursor2.fetchone()\n        while x != None:\n            cursor.execute(\"select * from result where problem = ? and diff = ?\", (str(x[0]), str(x[1])))\n            x2 = cursor.fetchone()\n            if x2 == None:\n                cursor.execute(\"insert into result values (?, ?, ? )\", (x[0], x[1], \"NULL\"))\n            last_problem = x\n            x = cursor2.fetchone()\n        conn2.close()\n        settings.close()\n    if len(last_problem) == 2:\n        last_problem = last_problem[0] + last_problem[1]\n\n    url = 'http://codeforces.com/submissions/' + username\n    r = requests.get(url)\n    max_page = 1\n    soup = BeautifulSoup(r.text, \"lxml\")\n\n    for link in soup.find_all(attrs={\"class\": \"page-index\"}):\n        s = link.find('a')\n        s2 = s.get(\"href\").split('/')\n        max_page = max(max_page, int(s2[4]))\n\n    v = False\n    r = requests.get('http://codeforces.com/submissions/' + username + '/page/0')\n    soup = BeautifulSoup(r.text, \"lxml\")\n    last_try_new = soup.find(attrs={\"class\": \"status-small\"})\n    last_try_new = str(last_try_new).split()\n    last_try_new = str(last_try_new[2]) + str(last_try_new[3])\n    for i in range(1, max_page + 1):\n        r = requests.get('http://codeforces.com/submissions/' + username + '/page/' + str(i))\n        soup = BeautifulSoup(r.text, \"lxml\")\n        count = 0\n        j = 0\n        ver = soup.find_all(attrs={\"class\": \"submissionVerdictWrapper\"})\n        last_try = soup.find_all(attrs={\"class\": \"status-small\"})\n        for link in soup.find_all('a'):\n            last_try_date = str(last_try[j]).split()\n            last_try_date = str(last_try_date[2]) + str(last_try_date[3])\n            if last_try_date == last_update:\n                v = True\n                break\n            s = link.get('href')\n            if s != None and s.find('/problemset') != -1:\n                s = s.split('/')\n                if len(s) == 5:\n                    s2 = str(ver[count]).split()\n                    s2 = s2[5].split('\\\"')\n                    count += 1\n                    j += 1\n                    cursor.execute(\"select * from result where problem = ? and diff = ?\", (s[3], s[4]))\n                    x = cursor.fetchone()\n                    if s2[1] == 'OK' and x != None:\n                        cursor.execute(\"update result set verdict = ? where problem = ? and diff = ?\", (s2[1], s[3], s[4]))\n                    if x[2] != 'OK':\n                        cursor.execute(\"update result set verdict = ? where problem = ? and diff = ?\", (s2[1], s[3], s[4]))\n        if v:\n            break\n\n    conn.commit()\n    conn.close()\n\n    settings = sqlite3.connect(os.path.abspath(os.path.dirname(__file__)) + \"\\\\settings.db\")\n    conn = settings.cursor()\n    conn.execute(\"update users set username = ? where chat_id = ?\", (str(username), str(chat_id)))\n    conn.execute(\"update users set last_update = ? where chat_id = ?\", (str(last_try_new), str(chat_id)))\n    conn.execute(\"update users set last_problem = ? where chat_id = ?\", (str(last_problem), str(chat_id)))\n\n    settings.commit()\n    settings.close()",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149319,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def save_accepted_transaction(self, user_id, project_id, money):\n        self.cursor.execute(\"update users set money = money - %s where id = %s\"%(money, user_id))\n        self.cursor.execute(\"update projects set money = money + %s where id = %s\" % (money, project_id))\n        self.cursor.execute(\"insert into transactions (project_id, user_id, money, timestamp, state) values (%s, %s, %s, now(), 'accepted' )\" % (project_id, user_id, money))\n        self.db.commit()",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149320,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def save_accepted_transaction(self, user_id, project_id, money):\n        self.cursor.execute(\"update users set money = money - %s where id = %s\", (money, user_id))\n        self.cursor.execute(\"update projects set money = money + %s where id = %s\", (money, project_id))\n        self.cursor.execute(\"insert into transactions (project_id, user_id, money, timestamp, state) values (%s, %s, \"\n                            \"%s, now(), 'accepted' )\", (project_id, user_id, money))\n        self.db.commit()",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149321,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def shame_ask(name):\n    db = db_connect()\n    cursor = db.cursor()\n    try:\n        cursor.execute('''\n            SELECT shame FROM people WHERE name='{}'\n            '''.format(name))\n        shame = cursor.fetchone()\n        db.close()\n        if shame is None:\n            logger.debug('No shame found for name {}'.format(name))\n            return shame\n        else:\n            shame = shame[0]\n            logger.debug('shame of {} found for name {}'.format(shame, name))\n            return shame\n    except Exception as e:\n        logger.error('Execution failed with error: {}'.format(e))\n        raise",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149322,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def shame_ask(name):\n    db = db_connect()\n    cursor = db.cursor()\n    try:\n        cursor.execute('''\n            SELECT shame FROM people WHERE name=%(name)s\n            ''', (name, ))\n        shame = cursor.fetchone()\n        db.close()\n        if shame is None:\n            logger.debug('No shame found for name {}'.format(name))\n            return shame\n        else:\n            shame = shame[0]\n            logger.debug('shame of {} found for name {}'.format(shame, name))\n            return shame\n    except Exception as e:\n        logger.error('Execution failed with error: {}'.format(e))\n        raise",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149323,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def incrementOption(cursor, poll_name, option):\n    key = poll_name+\"-\"+option\n    req = \"UPDATE {} SET count=count+1 WHERE name_option = '{}';\".format(CFG(\"options_table_name\"), key)\n    cursor.execute(req)",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149324,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def incrementOption(cursor, poll_name, option):\n    key = poll_name+\"-\"+option\n    req = \"UPDATE {} SET count=count+1 WHERE name_option=?\".format(CFG(\"options_table_name\"))\n    cursor.execute(req, (key,))",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149325,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@app.route('/overview/<classNum>')\ndef overview(classNum):\n\tif 'username' in session:\n\t\tclassNoSpace = classNum.split(' ')[0]+classNum.split(' ')[1]\n\n\t\t#Save the current course as a session variable.\n\t\tsession['currentCourse'] = classNoSpace\n\n\t\tconn = mysql.connect()\n\t\tcursor = conn.cursor()\n\n\t\tcursor.execute(\"SELECT courseName,courseOverview from courses where courseAbbreviation='\" + classNoSpace + \"'\")\n\t\tdata = cursor.fetchone()\n\n\t\treturn render_template('overview.html', className = classNum, courseTitle = data[0], courseOverview = data[1])\n\n\treturn redirect(url_for('index'))",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149326,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@app.route('/overview/<classNum>')\ndef overview(classNum):\n\tif 'username' in session:\n\t\tclassNoSpace = classNum.split(' ')[0]+classNum.split(' ')[1]\n\n\t\t#Save the current course as a session variable.\n\t\tsession['currentCourse'] = classNoSpace\n\n\t\tconn = mysql.connect()\n\t\tcursor = conn.cursor()\n\n\t\tcursor.execute(\"SELECT courseName,courseOverview from courses where courseAbbreviation=%s\", (classNoSpace))\n\t\tdata = cursor.fetchone()\n\n\t\treturn render_template('overview.html', className = classNum, courseTitle = data[0], courseOverview = data[1])\n\n\treturn redirect(url_for('index'))",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149327,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def addTags(tag_list, listing_id):\n    \"\"\"\n    Adds a list of tags tag_list for a given listing with listing_id to the database\n    \"\"\"\n    cur = conn.cursor()\n    for x in tag_list:\n        sql = \"INSERT INTO {} VALUES {}\".format(listing_tags_table_name, str((listing_id, x)))\n        cur.execute(sql)",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149328,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def addTags(tag_list, listing_id):\n    \"\"\"\n    Adds a list of tags tag_list for a given listing with listing_id to the database\n    \"\"\"\n    cur = conn.cursor()\n    for x in tag_list:\n        sql = \"INSERT INTO %s VALUES (%s %s)\"\n        cur.execute(sql, (listing_tags_table_name, listing_id, x))",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149329,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@mod.route('/edit/<int:cmt_id>', methods=['GET', 'POST'])\ndef edit(cmt_id):\n    m = None\n    if request.method == 'GET':\n        sql = \"SELECT * FROM comment where cmt_id = %d;\" % (cmt_id)\n        cursor.execute(sql)\n        m = cursor.fetchone()\n        return render_template('comment/edit.html', m=m, cmt_id=cmt_id)\n\n    if request.method == 'POST':\n        content = request.form['content']\n        sql = \"UPDATE comment SET content = '%s' where cmt_id = '%d';\" \\\n            % (content, cmt_id)\n        cursor.execute(sql)\n        conn.commit()\n        sql = \"SELECT msg_id FROM comment where cmt_id = %d;\" % (cmt_id)\n        cursor.execute(sql)\n        m = cursor.fetchone()\n        flash('Edit Success!')\n        return redirect(url_for('comment.show', msg_id=m[0]))\n\n    return render_template('comment/edit.html', m=m, cmt_id=cmt_id)",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149330,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@mod.route('/edit/<int:cmt_id>', methods=['GET', 'POST'])\ndef edit(cmt_id):\n    m = None\n    if request.method == 'GET':\n        cursor.execute(\"SELECT * FROM comment where cmt_id = %s;\", (cmt_id,))\n        m = cursor.fetchone()\n        return render_template('comment/edit.html', m=m, cmt_id=cmt_id)\n\n    if request.method == 'POST':\n        content = request.form['content']\n        cursor.execute(\"UPDATE comment SET content = %s where cmt_id = %s;\", (content, cmt_id))\n        conn.commit()\n        cursor.execute(\"SELECT msg_id FROM comment where cmt_id = %s;\", (cmt_id,))\n        m = cursor.fetchone()\n        flash('Edit Success!')\n        return redirect(url_for('comment.show', msg_id=m[0]))\n\n    return render_template('comment/edit.html', m=m, cmt_id=cmt_id)",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149331,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def process_form():\n    # see https://docs.python.org/3.4/library/cgi.html for the basic usage\n    # here.\n    form = cgi.FieldStorage()\n\n\n    if \"player1\" not in form or \"player2\" not in form or \"size\" not in form:\n        raise FormError(\"Invalid parameters.\")\n\n    player1 = form[\"player1\"].value\n    player2 = form[\"player2\"].value\n    for c in player1+player2:\n        if c not in \"_-\" and not c.isdigit() and not c.isalpha():\n            raise FormError(\"Invalid parameters: The player names can only contains upper and lowercase characters, digits, underscores, and hypens\")\n            return\n\n    try:\n        size = int(form[\"size\"].value)\n    except:\n        raise FormError(\"Invalid parameters: 'size' is not an integer.\")\n        return\n\n    if size < 2 or size > 9:\n        raise FormError(\"The 'size' must be in the range 2-9, inclusive.\")\n\n\n    # connect to the database\n    conn = MySQLdb.connect(host   = pnsdp.SQL_HOST,\n                           user   = pnsdp.SQL_USER,\n                           passwd = pnsdp.SQL_PASSWD,\n                           db     = pnsdp.SQL_DB)\n    cursor = conn.cursor()\n\n    # insert the new row\n    cursor.execute(\"\"\"INSERT INTO games(player1,player2,size) VALUES(\"%s\",\"%s\",%d);\"\"\" % (player1,player2,size))\n\n    gameID = cursor.lastrowid\n\n\n    # MySQLdb has been building a transaction as we run.  Commit them now, and\n    # also clean up the other resources we've allocated.\n    conn.commit()\n    cursor.close()\n    conn.close()\n\n    return gameID",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149332,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def process_form():\n    # see https://docs.python.org/3.4/library/cgi.html for the basic usage\n    # here.\n    form = cgi.FieldStorage()\n\n\n    if \"player1\" not in form or \"player2\" not in form or \"size\" not in form:\n        raise FormError(\"Invalid parameters.\")\n\n    player1 = form[\"player1\"].value\n    player2 = form[\"player2\"].value\n    for c in player1+player2:\n        if c not in \"_-\" and not c.isdigit() and not c.isalpha():\n            raise FormError(\"Invalid parameters: The player names can only contains upper and lowercase characters, digits, underscores, and hypens\")\n            return\n\n    try:\n        size = int(form[\"size\"].value)\n    except:\n        raise FormError(\"Invalid parameters: 'size' is not an integer.\")\n        return\n\n    if size < 2 or size > 9:\n        raise FormError(\"The 'size' must be in the range 2-9, inclusive.\")\n\n\n    # connect to the database\n    conn = MySQLdb.connect(host   = pnsdp.SQL_HOST,\n                           user   = pnsdp.SQL_USER,\n                           passwd = pnsdp.SQL_PASSWD,\n                           db     = pnsdp.SQL_DB)\n    cursor = conn.cursor()\n\n    # insert the new row\n    cursor.execute(\"\"\"INSERT INTO games(player1,player2,size) VALUES(\"%s\",\"%s\",%d);\"\"\", (player1,player2,size))\n\n    gameID = cursor.lastrowid\n\n\n    # MySQLdb has been building a transaction as we run.  Commit them now, and\n    # also clean up the other resources we've allocated.\n    conn.commit()\n    cursor.close()\n    conn.close()\n\n    return gameID",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149333,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def clean_cache(self, limit):\n        \"\"\"\n        Method that remove several User objects from cache - the least \n        active users\n        :param limit: number of the users that the method should remove\n        from cache\n        :return: None\n        \"\"\"\n\n        log.info('Figuring out the least active users...')\n        # Select users that the least active recently\n        user_ids = tuple(self.users.keys())\n        query = ('SELECT chat_id '\n                 'FROM photo_queries_table2 '\n                 f'WHERE chat_id in {user_ids} '\n                 'GROUP BY chat_id '\n                 'ORDER BY MAX(time) '\n                 f'LIMIT {limit}')\n\n        try:\n            cursor = db.execute_query(query)\n        except DatabaseConnectionError:\n            log.error(\"Can't figure out the least active users...\")\n            return\n\n        if not cursor.rowcount:\n            log.warning(\"There are no users in the db\")\n            return\n\n        # Make list out of tuple of tuples that is returned by MySQL\n        least_active_users = [chat_id[0] for chat_id in cursor.fetchall()]\n        log.info('Removing %d least active users from cache...', limit)\n        num_deleted_entries = 0\n        for entry in least_active_users:\n            log.debug('Deleting %s...', entry)\n            deleted_entry = self.users.pop(entry, None)\n            if deleted_entry:\n                num_deleted_entries += 1\n        log.debug(\"%d users were removed from cache.\", num_deleted_entries)",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149334,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def clean_cache(self, limit):\n        \"\"\"\n        Method that remove several User objects from cache - the least \n        active users\n        :param limit: number of the users that the method should remove\n        from cache\n        :return: None\n        \"\"\"\n\n        log.info('Figuring out the least active users...')\n        # Select users that the least active recently\n        user_ids = tuple(self.users.keys())\n        query = ('SELECT chat_id '\n                 'FROM photo_queries_table2 '\n                 f'WHERE chat_id in {user_ids} '\n                 'GROUP BY chat_id '\n                 'ORDER BY MAX(time) '\n                 f'LIMIT %s')\n\n        parameters = limit,\n\n        try:\n            cursor = db.execute_query(query, parameters)\n        except DatabaseConnectionError:\n            log.error(\"Can't figure out the least active users...\")\n            return\n\n        if not cursor.rowcount:\n            log.warning(\"There are no users in the db\")\n            return\n\n        # Make list out of tuple of tuples that is returned by MySQL\n        least_active_users = [chat_id[0] for chat_id in cursor.fetchall()]\n        log.info('Removing %d least active users from cache...', limit)\n        num_deleted_entries = 0\n        for entry in least_active_users:\n            log.debug('Deleting %s...', entry)\n            deleted_entry = self.users.pop(entry, None)\n            if deleted_entry:\n                num_deleted_entries += 1\n        log.debug(\"%d users were removed from cache.\", num_deleted_entries)",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149335,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@app.route('/quiz')\ndef quiz():\n\n    varga = request.args.get('varga')\n\n    try:\n        rows =[]\n\n        with sql.connect('amara.db') as con:\n            con.row_factory = sql.Row\n            cur = con.cursor()\n            cur.execute(\"select * from pada inner join mula on pada.sloka_line = mula.sloka_line where pada.varga = '%s' order by random() limit 1;\" % varga)\n            rows = cur.fetchall();\n\n            artha = rows[0][\"artha\"];\n            cur.execute(\"select pada from pada where varga = '%s' and artha = '%s' order by id\" % (varga, artha));\n            paryaya = cur.fetchall();\n\n            return render_template('quiz.html', rows=rows, paryaya=paryaya, varga=varga)\n    finally:\n        con.close()",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149336,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@app.route('/quiz')\ndef quiz():\n\n    varga = request.args.get('varga')\n\n    try:\n        rows =[]\n\n        with sql.connect('amara.db') as con:\n            con.row_factory = sql.Row\n            cur = con.cursor()\n            cur.execute(\"select * from pada inner join mula on pada.sloka_line = mula.sloka_line where pada.varga = ? order by random() limit 1;\", [varga])\n            rows = cur.fetchall();\n\n            artha = rows[0][\"artha\"];\n            cur.execute(\"select pada from pada where varga = ? and artha = ? order by id\", [varga, artha]);\n            paryaya = cur.fetchall();\n\n            return render_template('quiz.html', rows=rows, paryaya=paryaya, varga=varga)\n    finally:\n        con.close()",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149337,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def _checkPairing():\n        if winner == loser:\n            raise ValueError('Attempt to match player against self')\n\n        q = '''\n        SELECT COUNT(*) FROM matches\n        WHERE (matches.winner_id = %s AND matches.loser_id = %s)\n              OR (matches.winner_id = %s AND matches.loser_id = %s);\n        ''' % (winner, loser, loser, winner)\n        cur.execute(q)\n        if cur.fetchone()[0] > 0:\n            raise ValueError('Pairing %s, %s already played' % (winner, loser))",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149338,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def _checkPairing():\n        if winner == loser:\n            raise ValueError('Attempt to match player against self')\n\n        q = '''\n        SELECT COUNT(*) FROM matches\n        WHERE (matches.winner_id = %s AND matches.loser_id = %s)\n              OR (matches.winner_id = %s AND matches.loser_id = %s);\n        '''\n        cur.execute(q, (winner, loser, loser, winner))\n        if cur.fetchone()[0] > 0:\n            raise ValueError('Pairing %s, %s already played' % (winner, loser))",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149339,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def add_month_data_row(self, inverter_serial, ts, etoday, etotal):\n\n        y = datetime.fromtimestamp(ts) - timedelta(days=1)\n        y_ts = int(datetime(y.year, y.month, y.day, 23, tzinfo=pytz.utc).timestamp())\n\n        query = '''\n            INSERT INTO MonthData (\n                TimeStamp,\n                Serial,\n                DayYield,\n                TotalYield                                 \n            ) VALUES (\n                %s,\n                %s,\n                %s,\n                %s\n            );\n        ''' % (y_ts, inverter_serial, etoday, etotal)\n        self.c.execute(query)",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149340,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def add_month_data_row(self, inverter_serial, ts, etoday, etotal):\n\n        y = datetime.fromtimestamp(ts) - timedelta(days=1)\n        y_ts = int(datetime(y.year, y.month, y.day, 23, tzinfo=pytz.utc).timestamp())\n\n        query = '''\n            INSERT INTO MonthData (\n                TimeStamp,\n                Serial,\n                DayYield,\n                TotalYield                                 \n            ) VALUES (\n                ?,\n                ?,\n                ?,\n                ?\n            );\n        '''\n        self.c.execute(query, (y_ts, inverter_serial, etoday, etotal))",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149341,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def create_playlist(name, db):\n    db.execute(\n        \"INSERT INTO playlist (name, video_position) VALUES('{name}', 0);\".format(name=name))",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149342,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def create_playlist(name, db):\n    db.execute(\n        \"INSERT INTO playlist (name, video_position) VALUES(%s, 0);\", (name,))",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149343,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def karma_ask(name):\n    db = db_connect()\n    cursor = db.cursor()\n    try:\n        cursor.execute(\n            ''' SELECT karma FROM people WHERE name='{}' '''.format(name))\n        karma = cursor.fetchone()\n        if karma is None:\n            logger.debug('No karma found for name {}'.format(name))\n            db.close()\n            return karma\n        else:\n            karma = karma[0]\n            logger.debug('karma of {} found for name {}'.format(karma, name))\n            db.close()\n            return karma\n    except Exception as e:\n        logger.error('Execution failed with error: {}'.format(e))\n        raise",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149344,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def karma_ask(name):\n    db = db_connect()\n    cursor = db.cursor()\n    try:\n        cursor.execute(''' SELECT karma FROM people WHERE name=%(name)s ''',\n                       (name, ))\n        karma = cursor.fetchone()\n        if karma is None:\n            logger.debug('No karma found for name {}'.format(name))\n            db.close()\n            return karma\n        else:\n            karma = karma[0]\n            logger.debug('karma of {} found for name {}'.format(karma, name))\n            db.close()\n            return karma\n    except Exception as e:\n        logger.error('Execution failed with error: {}'.format(e))\n        raise",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149345,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def post(self):\n        \"\"\" Returns JWT upon login verification \"\"\"\n        json_data = request.get_json()\n        if not json_data['email']:\n            return jsonify({\"msg\": \"Missing email\"}), 400\n\n        data = database_utilities.execute_query(\n            f\"\"\"select * from admins where email = '{json_data['email']}'\"\"\")\n        if data:\n            email = data[0]['email']\n            access_token = create_access_token(identity=email)\n            refresh_token = create_refresh_token(identity=email)\n\n            resp = jsonify({\"login\": True})\n            set_access_cookies(resp, access_token)\n            set_refresh_cookies(resp, refresh_token)\n            return resp\n        else:\n            return jsonify({\"msg\": \"User is not an admin\"})",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149346,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def post(self):\n        \"\"\" Returns JWT upon login verification \"\"\"\n        json_data = request.get_json()\n        if not json_data['email']:\n            return jsonify({\"msg\": \"Missing email\"}), 400\n\n        data = database_utilities.execute_query(\n            f\"\"\"select * from admins where email = %s\"\"\", (json_data['email'], ))\n        if data:\n            email = data[0]['email']\n            access_token = create_access_token(identity=email)\n            refresh_token = create_refresh_token(identity=email)\n\n            resp = jsonify({\"login\": True})\n            set_access_cookies(resp, access_token)\n            set_refresh_cookies(resp, refresh_token)\n            return resp\n        else:\n            return jsonify({\"msg\": \"User is not an admin\"})",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149347,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def add_day_data_row(self, ts, data, prev_etotal):\n\n        if data['power'] > 0:\n\n            inv_serial = data['source']['serial_id']\n            query = '''\n               INSERT INTO DayData (\n                   TimeStamp,\n                   Serial,\n                   Power,\n                   TotalYield\n               ) VALUES (\n                   %s,\n                   %s,\n                   %s,\n                   %s\n               );\n            ''' % (ts, inv_serial, data['power'],  prev_etotal + data['energy'])\n            self.c.execute(query)",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149348,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def add_day_data_row(self, ts, data, prev_etotal):\n\n        if data['power'] > 0:\n\n            inv_serial = data['source']['serial_id']\n            query = '''\n               INSERT INTO DayData (\n                   TimeStamp,\n                   Serial,\n                   Power,\n                   TotalYield\n               ) VALUES (\n                   ?,\n                   ?,\n                   ?,\n                   ?\n               );\n            '''\n            self.c.execute(query, (ts, inv_serial, data['power'],  prev_etotal + data['energy']))",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149349,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def store_metadata(self, session, key, mType, value):\n        if (self.idNormalizer is not None):\n            id = self.idNormalizer.process_string(session, id)\n        elif type(id) == unicode:\n            id = id.encode('utf-8')\n        else:\n            id = str(id)\n        self._openContainer(session)\n        query = (\"UPDATE %s SET %s = %r WHERE identifier = '%s';\" %\n                 (self.table, mType, value, id)\n                 )\n        try:\n            self._query(query)\n        except:\n            return None\n        return value",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149350,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def store_metadata(self, session, key, mType, value):\n        if (self.idNormalizer is not None):\n            id = self.idNormalizer.process_string(session, id)\n        elif type(id) == unicode:\n            id = id.encode('utf-8')\n        else:\n            id = str(id)\n        self._openContainer(session)\n        query = (\"UPDATE %s SET %s = $1 WHERE identifier = $2;\" %\n                 (self.table, mType)\n                 )\n        args = (value, id)\n        try:\n            self._query(query, *args)\n        except:\n            return None\n        return value",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149351,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def get(self, space_id):\n        \"\"\" Fetch data for space with the corresponding space_id \"\"\"\n        return database_utilities.execute_query(\n            f\"\"\"select * from spaces where space_id = '{space_id}'\"\"\")",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149352,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def get(self, space_id):\n        \"\"\" Fetch data for space with the corresponding space_id \"\"\"\n        return database_utilities.execute_query(\n            f\"\"\"select * from spaces where space_id = %s\"\"\", (space_id, ))",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149353,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def check(current_num):\n    try:\n        cursor.execute('SELECT * FROM comics WHERE num=\"%s\"' % current_num)\n    except sqlite3.OperationalError:\n        cursor.execute('CREATE TABLE comics (num text)')\n        return False\n    else:\n        return False if cursor.fetchone() is None else True",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149354,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def check(current_num):\n    try:\n        cursor.execute('SELECT * FROM comics WHERE num=?', (current_num,))\n    except sqlite3.OperationalError:\n        cursor.execute('CREATE TABLE comics (num text)')\n        return False\n    else:\n        return False if cursor.fetchone() is None else True",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149355,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@app.route('/delete_crawl', methods=['POST'])\n@is_logged_in\ndef delete_crawl():\n\n        # Get Form Fields\n        cid = request.form['cid']\n\n        # Create cursor\n        cur = mysql.connection.cursor()\n\n        # Get user by username\n        result = cur.execute(\"DELETE FROM Crawls WHERE cid = %s\" % cid)\n\n        # Commit to DB\n        mysql.connection.commit()\n\n        # Close connection\n        cur.close()\n\n        # FIXME check if successfull first, return message\n        flash('Crawl successfully removed', 'success')\n\n        return redirect(url_for('dashboard'))",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149356,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@app.route('/delete_crawl', methods=['POST'])\n@is_logged_in\ndef delete_crawl():\n\n        # Get Form Fields\n        cid = request.form['cid']\n\n        # Create cursor\n        cur = mysql.connection.cursor()\n\n        # Get user by username\n        result = cur.execute(\"\"\"DELETE FROM Crawls WHERE cid = %s\"\"\" (cid,))\n\n        # Commit to DB\n        mysql.connection.commit()\n\n        # Close connection\n        cur.close()\n\n        # FIXME check if successfull first, return message\n        flash('Crawl successfully removed', 'success')\n\n        return redirect(url_for('dashboard'))",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149357,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@app.route('/movies/add', methods=['GET', 'POST'])\ndef add_movie():\n    form = MovieForm()\n    if not form.validate_on_submit():\n        return render_template('new_movie.html', title='Add New Movie', form=form)\n    lang_id = add_language(form.data['language'])\n    movie = {\n            'title': '',\n            'description': '',\n            'release_year': 0,\n            'rental_duration': 0,\n            'rental_rate': 0.00,\n            'length': 0,\n            'replacement_cost': 0.00\n        }\n    for k, v in movie.items():\n        movie[k] = form.data[k]\n    movie['language_id'] = movie.get('language_id', lang_id)\n    cur.execute(\n        \"\"\"\n        INSERT INTO film (title, description, release_year, language_id, rental_duration, rental_rate, length, replacement_cost)\n        VALUES ('{}', '{}', {}, {}, {}, {}, {}, {})\n        \"\"\".format(*[v for k, v in movie.items()])\n    )\n    try:\n        cur.execute(f\"SELECT * FROM film where fulltext @@ to_tsquery('Dark Knight')\")\n        res = cur.fetchall()\n        conn.commit()\n        return redirect(url_for('movies'))\n    except Exception as e:\n        return redirect(url_for('index'))",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149358,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@app.route('/movies/add', methods=['GET', 'POST'])\ndef add_movie():\n    form = MovieForm()\n    if not form.validate_on_submit():\n        return render_template('new_movie.html', title='Add New Movie', form=form)\n    lang_id = add_language(form.data['language'])\n    movie = {\n            'title': '',\n            'description': '',\n            'release_year': 0,\n            'rental_duration': 0,\n            'rental_rate': 0.00,\n            'length': 0,\n            'replacement_cost': 0.00\n        }\n    for k, v in movie.items():\n        movie[k] = form.data[k]\n    movie['language_id'] = movie.get('language_id', lang_id)\n    cur.execute(\n        \"\"\"\n        INSERT INTO film (title, description, release_year, language_id, rental_duration, rental_rate, length, replacement_cost)\n        VALUES (%s, %s, %s, %s, %s, %s, %s, %s)\n        \"\"\", [(v, ) for k, v in movie.items()]\n    )\n    try:\n        cur.execute(\"SELECT * FROM film where fulltext @@ to_tsquery(%s)\", (movie['title'], ))\n        res = cur.fetchall()\n        conn.commit()\n        return redirect(url_for('movies'))\n    except Exception as e:\n        return redirect(url_for('index'))",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149359,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def new_category(category_name):\n    try:\n        conn = check_heroku_db()\n        cur = conn.cursor()\n        cur.execute('''INSERT INTO categories (cat_name) VALUES (%s)''', (category_name,))\n        conn.commit()\n        conn.close()\n\n    except psycopg2.DatabaseError as e:\n        print('Error %s' % e)\n        sys.exit(1)",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149360,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def new_category(category_name):\n    try:\n        conn = check_heroku_db()\n        cur = conn.cursor()\n\n        query = \"INSERT INTO categories (cat_name) VALUES (%s);\"\n        data = (category_name,)\n        cur.execute(query, data)\n\n        conn.commit()\n        conn.close()\n\n    except psycopg2.DatabaseError as e:\n        print('Error %s' % e)\n        sys.exit(1)",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149361,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def get_first_month(db, scene):\n    sql = \"select date from matches where scene='{}' order by date limit 1;\".format(scene)\n    res = db.exec(sql)\n    date = res[0][0]\n    return date",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149362,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def get_first_month(db, scene):\n    sql = \"select date from matches where scene='{scene}' order by date limit 1;\"\n    args = {'scene': scene}\n    res = db.exec(sql, args)\n    date = res[0][0]\n    return date",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149363,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def getOptions(poll_name):\n    conn, c = connectDB()\n    options_str = queryOne(c, \"SELECT options FROM {} WHERE name='{}'\".format(CFG(\"poll_table_name\"), poll_name))\n    if options_str == None:\n        return None\n    options = options_str.split(\",\")\n    closeDB(conn)\n    return options",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149364,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def getOptions(poll_name):\n    conn, c = connectDB()\n    req = \"SELECT options FROM {} WHERE name=?\".format(CFG(\"poll_table_name\"))\n    options_str = queryOne(c, req, (poll_name,))\n    if options_str == None:\n        return None\n    options = options_str.split(\",\")\n    closeDB(conn)\n    return options",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149365,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def retrieve_last_video_position(playlist_id, db):\n    db.execute(\"SELECT max(position) as position from video WHERE playlist_id={playlist_id};\".format(\n        playlist_id=playlist_id))\n    row = db.fetchone()\n    return row['position']",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149366,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def retrieve_last_video_position(playlist_id, db):\n    db.execute(\n        \"SELECT max(position) as position from video WHERE playlist_id=%s;\", (playlist_id,))\n    row = db.fetchone()\n    return row['position']",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149367,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@app.route('/<page_name>/history')\ndef view_page_history(page_name):\n    query = db.query(\"select page_content.timestamp, page_content.id from page, page_content where page.id = page_content.page_id and page.page_name = '%s'\" % page_name)\n    page_histories = query.namedresult()\n\n    return render_template(\n        'page_history.html',\n        page_name = page_name,\n        page_histories = page_histories\n    )",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149368,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@app.route('/<page_name>/history')\ndef view_page_history(page_name):\n    query = db.query(\"select page_content.timestamp, page_content.id from page, page_content where page.id = page_content.page_id and page.page_name = $1\", page_name)\n    page_histories = query.namedresult()\n\n    return render_template(\n        'page_history.html',\n        page_name = page_name,\n        page_histories = page_histories\n    )",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149369,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def add_input(self, data):\n        connection = self.connects()\n        try:\n            # The following introduces a deliberate security flaw. See section on SQL injecton below\n            query = \"INSERT INTO crimes (description) VALUES ('{}');\".format(\n                data)\n            with connection.cursor() as cursor:\n                cursor.execute(query)\n                connection.commit()\n        finally:\n            connection.close()",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149370,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def add_input(self, data):\n        connection = self.connects()\n        try:\n            # The following introduces a deliberate security flaw. See section on SQL injecton below\n            query = \"INSERT INTO crimes (description) VALUES (%s);\"\n            with connection.cursor() as cursor:\n                cursor.execute(query, data)\n                connection.commit()\n        finally:\n            connection.close()",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149371,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def get_top_author(top_num):\r\n    \"\"\" query the top(top_num) popular author\r\n        top_num => list of [author, count]\r\n    \"\"\"\r\n    cmd = \"\"\"SELECT authors.name,author_result.num\r\n                    FROM authors JOIN\r\n                    (SELECT SUM(article_result.num) as num,\r\n                    article_result.author\r\n                    from (SELECT articles.title, articles.author,\r\n                    SUM(log.views) AS num\r\n                    FROM articles\r\n                    INNER JOIN (\r\n                    SELECT path, count(path) AS views\r\n                    FROM log GROUP BY log.path\r\n                    ) AS log ON log.path = '/article/'\r\n                    || articles.slug\r\n                    GROUP BY articles.title, articles.author)\r\n                    AS article_result\r\n                    GROUP BY article_result.author) as author_result\r\n                    ON authors.id = author_result.author\r\n                    ORDER BY num DESC LIMIT {}\"\"\".format(top_num)\r\n    return execute_query(cmd)",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149372,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def get_top_author(top_num):\r\n    \"\"\" query the top(top_num) popular author\r\n        top_num => list of [author, count]\r\n    \"\"\"\r\n    cmd = \"\"\"SELECT authors.name,author_result.num\r\n                    FROM authors JOIN\r\n                    (SELECT SUM(article_result.num) as num,\r\n                    article_result.author\r\n                    from (SELECT articles.title, articles.author,\r\n                    SUM(log.views) AS num\r\n                    FROM articles\r\n                    INNER JOIN (\r\n                    SELECT path, count(path) AS views\r\n                    FROM log GROUP BY log.path\r\n                    ) AS log ON log.path = '/article/'\r\n                    || articles.slug\r\n                    GROUP BY articles.title, articles.author)\r\n                    AS article_result\r\n                    GROUP BY article_result.author) as author_result\r\n                    ON authors.id = author_result.author\r\n                    ORDER BY num DESC LIMIT %s\"\"\"\r\n    data = [top_num, ]\r\n    return execute_query(cmd, data)",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149373,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@app.route('/get_all_referrers')\ndef get_all_referrers():\n    account_id = request.args.get('account_id')\n\n    if not isObject(account_id):\n        ws.send('{\"id\":1, \"method\":\"call\", \"params\":[0,\"lookup_account_names\",[[\"' + account_id + '\"], 0]]}')\n        result_l = ws.recv()\n        j_l = json.loads(result_l)\n\n        account_id = j_l[\"result\"][0][\"id\"]\n\n    con = psycopg2.connect(**config.POSTGRES)\n    cur = con.cursor()\n\n    query = \"select * from referrers where referrer='\"+account_id+\"'\"\n    cur.execute(query)\n    results = cur.fetchall()\n\n    return jsonify(results)",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149374,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@app.route('/get_all_referrers')\ndef get_all_referrers():\n    account_id = request.args.get('account_id')\n\n    if not isObject(account_id):\n        ws.send('{\"id\":1, \"method\":\"call\", \"params\":[0,\"lookup_account_names\",[[\"' + account_id + '\"], 0]]}')\n        result_l = ws.recv()\n        j_l = json.loads(result_l)\n\n        account_id = j_l[\"result\"][0][\"id\"]\n\n    con = psycopg2.connect(**config.POSTGRES)\n    cur = con.cursor()\n\n    query = \"select * from referrers where referrer=%s\"\n    cur.execute(query, (account_id,))\n    results = cur.fetchall()\n\n    return jsonify(results)",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149375,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def add_translationname(self, trname):\n        \"\"\"Add new translation by item name for an item.\"\"\"\n        if self.connection:\n            for item in self.find_item_name([trname[0], '0']):\n                self.cursor.execute('insert into itemtranslation (itemid, itemlanguageid, translation) values (\"%s\", \"%s\", \"%s\")' % (item[0], trname[1], trname[2]))\n            self.connection.commit()",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149376,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def add_translationname(self, trname):\n        \"\"\"Add new translation by item name for an item.\"\"\"\n        if self.connection:\n            for item in self.find_item_name([trname[0], '0']):\n                t = (item[0], trname[1], trname[2], )\n                self.cursor.execute('insert into itemtranslation (itemid, itemlanguageid, translation) values (?, ?, ?)', t)\n            self.connection.commit()",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149377,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    @staticmethod\n    def get_max_task_id_for_project(project_id: int):\n        \"\"\"Gets the nights task id currently in use on a project\"\"\"\n        sql = \"\"\"select max(id) from tasks where project_id = {0} GROUP BY project_id\"\"\".format(project_id)\n        result = db.engine.execute(sql)\n        if result.rowcount == 0:\n            raise NotFound()\n        for row in result:\n            return row[0]",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149378,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    @staticmethod\n    def get_max_task_id_for_project(project_id: int):\n        \"\"\"Gets the nights task id currently in use on a project\"\"\"\n        sql = \"\"\"select max(id) from tasks where project_id = :project_id GROUP BY project_id\"\"\"\n        result = db.engine.execute(text(sql), project_id=project_id)\n        if result.rowcount == 0:\n            raise NotFound()\n        for row in result:\n            return row[0]",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149379,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def findNPC(race, classe, sex,level):\n\tc, conn = getConnection()\n\tdate = now()\n\t#select image, SUM(legit) as l FROM npc WHERE race='Elf' AND class='Bard' AND sex='Male' GROUP BY image HAVING l>5 ORDER BY SUM(legit) DESC;\n\tc.execute(\"select image, avg(legit) as l FROM npc WHERE race='\"+race+\"' AND class='\"+classe+\"' AND sex='\"+sex+\"' GROUP BY image HAVING l > 5 ORDER BY SUM(legit) DESC;\")\n\tconn.commit()\n\tout = c.fetchmany(5)\n\tconn.close()\n\treturn out",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149380,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def findNPC(race, classe, sex,level):\n\tc, conn = getConnection()\n\tdate = now()\n\t#select image, SUM(legit) as l FROM npc WHERE race='Elf' AND class='Bard' AND sex='Male' GROUP BY image HAVING l>5 ORDER BY SUM(legit) DESC;\n\tc.execute(\"select image, avg(legit) as l FROM npc WHERE race=(?) AND class=(?) AND sex=(?) GROUP BY image HAVING l > 5 ORDER BY SUM(legit) DESC\",(race,classe,sex))\n\tconn.commit()\n\tout = c.fetchmany(5)\n\tconn.close()\n\treturn out",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149381,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@mod.route('/edit/<int:msg_id>', methods=['GET', 'POST'])\ndef edit(msg_id):\n    m = None\n    if request.method == 'GET':\n        sql = \"SELECT * FROM message where msg_id = %d;\" % (msg_id)\n        cursor.execute(sql)\n        m = cursor.fetchone()\n        return render_template('message/edit.html', m=m, msg_id=msg_id)\n\n    if request.method == 'POST':\n        content = request.form['content']\n        sql = \"UPDATE message SET content = '%s' where msg_id = '%d';\" \\\n            % (content, msg_id)\n        cursor.execute(sql)\n        conn.commit()\n        flash('Edit Success!')\n        return redirect(url_for('show_entries'))\n\n    return render_template('message/edit.html', m=m, msg_id=msg_id)",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149382,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@mod.route('/edit/<int:msg_id>', methods=['GET', 'POST'])\ndef edit(msg_id):\n    m = None\n    if request.method == 'GET':\n        cursor.execute(\"SELECT * FROM message where msg_id = %s;\", (msg_id,))\n        m = cursor.fetchone()\n        return render_template('message/edit.html', m=m, msg_id=msg_id)\n\n    if request.method == 'POST':\n        content = request.form['content']\n        cursor.execute(\"UPDATE message SET content = %s where msg_id = %s;\", (content, msg_id))\n        conn.commit()\n        flash('Edit Success!')\n        return redirect(url_for('show_entries'))\n\n    return render_template('message/edit.html', m=m, msg_id=msg_id)",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149383,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def add_input(self,data):\n        connection = self.connect()\n\n        try:\n            query = \"INSERT INTO crimes (description) VALUES ('{}');\".format(data)\n            with connection.cursor() as cursor:\n                cursor.execute(query)\n                connection.commit()\n        finally:\n            connection.close()",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149384,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def add_input(self,data):\n        connection = self.connect()\n\n        try:\n            query = \"INSERT INTO crimes (description) VALUES (%s);\"\n            with connection.cursor() as cursor:\n                cursor.execute(query,data)\n                connection.commit()\n        finally:\n            connection.close()",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149385,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def fetch_resultSet(self, session, id):\n        self._openContainer(session)\n\n        sid = str(id)\n        if (self.idNormalizer is not None):\n            sid = self.idNormalizer.process_string(session, sid)\n        query = (\"SELECT class, data FROM %s WHERE identifier = '%s';\" %\n                 (self.table, sid)\n                 )\n        res = self._query(query)\n        try:\n            rdict = res.dictresult()[0]\n        except IndexError:\n            raise ObjectDoesNotExistException('%s/%s' % (self.id, sid))\n\n        data = rdict['data']\n        try:\n            ndata = pg.unescape_bytea(data)\n        except:\n            # Insufficient PyGreSQL version\n            ndata = data.replace(\"\\\\'\", \"'\")\n\n        ndata = ndata.replace('\\\\000', '\\x00')\n        ndata = ndata.replace('\\\\012', '\\n')\n        # data is res.dictresult()\n        cl = rdict['class']\n        rset = dynamic.buildObject(session, cl, [[]])\n        rset.deserialize(session, ndata)\n        rset.id = id\n\n        # Update expires\n        now = time.time()\n        nowStr = time.strftime(\"%Y-%m-%d %H:%M:%S\", time.gmtime(now))\n        expires = now + self.get_default(session, 'expires', 600)\n        rset.timeExpires = expires\n        expiresStr = time.strftime(\"%Y-%m-%d %H:%M:%S\", time.gmtime(expires))\n\n        query = (\"UPDATE %s SET timeAccessed = '%s', expires = '%s' \"\n                 \"WHERE identifier = '%s';\" %\n                 (self.table, nowStr, expiresStr, sid)\n                 )\n        self._query(query)\n        return rset",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149386,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def fetch_resultSet(self, session, id):\n        self._openContainer(session)\n\n        sid = str(id)\n        if (self.idNormalizer is not None):\n            sid = self.idNormalizer.process_string(session, sid)\n        query = (\"SELECT class, data FROM %s WHERE identifier = $1;\" %\n                 (self.table)\n                 )\n        res = self._query(query, sid)\n        try:\n            rdict = res.dictresult()[0]\n        except IndexError:\n            raise ObjectDoesNotExistException('%s/%s' % (self.id, sid))\n\n        data = rdict['data']\n        try:\n            ndata = pg.unescape_bytea(data)\n        except:\n            # Insufficient PyGreSQL version\n            ndata = data.replace(\"\\\\'\", \"'\")\n\n        ndata = ndata.replace('\\\\000', '\\x00')\n        ndata = ndata.replace('\\\\012', '\\n')\n        # data is res.dictresult()\n        cl = rdict['class']\n        rset = dynamic.buildObject(session, cl, [[]])\n        rset.deserialize(session, ndata)\n        rset.id = id\n\n        # Update expires\n        now = time.time()\n        nowStr = time.strftime(\"%Y-%m-%d %H:%M:%S\", time.gmtime(now))\n        expires = now + self.get_default(session, 'expires', 600)\n        rset.timeExpires = expires\n        expiresStr = time.strftime(\"%Y-%m-%d %H:%M:%S\", time.gmtime(expires))\n\n        query = (\"UPDATE %s SET timeAccessed = $1, expires = $2 \"\n                 \"WHERE identifier = $3;\" % (self.table)\n                 )\n        self._query(query, nowStr, expiresStr, sid)\n        return rset",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149387,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def init_user(username, chat_id):\n    conn = sqlite3.connect(os.path.abspath(os.path.dirname(__file__)) + \"\\\\users\\\\\" + username + '.db')\n    conn2 = sqlite3.connect(os.path.abspath(os.path.dirname(__file__)) + '\\\\cf.db')\n    cursor = conn.cursor()\n    cursor2 = conn2.cursor()\n    cursor.execute(\"CREATE TABLE result (problem INTEGER, diff STRING, verdict STRING)\")\n    cursor2.execute(\"SELECT * FROM problems\")\n    x = cursor2.fetchone()\n    while x != None:\n        cursor.execute(\"insert into result values (?, ?, ? )\", (x[0], x[1], \"NULL\"))\n        x = cursor2.fetchone()\n\n    url = 'http://codeforces.com/submissions/' + username\n    r = requests.get(url)\n    max_page = 1\n    soup = BeautifulSoup(r.text, \"lxml\")\n\n    for link in soup.find_all(attrs={\"class\": \"page-index\"}):\n        s = link.find('a')\n        s2 = s.get(\"href\").split('/')\n        max_page = max(max_page, int(s2[4]))\n\n    old = \"\"\n    r = requests.get('http://codeforces.com/submissions/' + username + '/page/0')\n    soup = BeautifulSoup(r.text, \"lxml\")\n    last_try = soup.find(attrs={\"class\":\"status-small\"})\n    if not last_try == None:\n        last_try = str(last_try).split()\n        last_try = str(last_try[2]) + str(last_try[3])\n\n    for i in range(1, max_page + 1):\n        r = requests.get('http://codeforces.com/submissions/' + username + '/page/' + str(i))\n        soup = BeautifulSoup(r.text, \"lxml\")\n        count = 0\n        ver = soup.find_all(attrs={\"class\": \"submissionVerdictWrapper\"})\n        for link in soup.find_all('a'):\n            s = link.get('href')\n            if s != None and s.find('/problemset') != -1:\n                s = s.split('/')\n                if len(s) == 5:\n                    s2 = str(ver[count]).split()\n                    s2 = s2[5].split('\\\"')\n                    count += 1\n                    cursor.execute(\"select * from result where problem = '\" + s[3] + \"'and diff = '\" + s[4] + \"'\")\n                    x = cursor.fetchone()\n                    if s2[1] == 'OK' and x != None:\n                        cursor.execute(\"update result set verdict = '\" + s2[1] + \"' where problem = '\" + s[3] + \"' and diff = '\" + s[4] + \"'\")\n                    if x != None and x[2] != 'OK':\n                        cursor.execute(\"update result set verdict = '\" + s2[1] +\"' where problem = '\" + s[3] + \"' and diff = '\" + s[4] + \"'\")\n\n    conn.commit()\n    conn.close()\n    conn2.close()\n\n    settings = sqlite3.connect(os.path.abspath(os.path.dirname(__file__)) + \"\\\\settings.db\")\n    conn = settings.cursor()\n    conn.execute(\"select * from last_update_problemset\")\n    last_problem = conn.fetchone()\n    conn.execute(\"select * from users where chat_id = '\" + str(chat_id) + \"'\")\n    x = conn.fetchone()\n    if x == None:\n        conn.execute(\"insert into users values (?, ?, ?, ?, ?)\", (chat_id, username, str(last_try), str(last_problem[0]), 1))\n    else:\n        conn.execute(\"update users set username = '\" + str(username) + \"' where chat_id = '\" + str(chat_id) + \"'\")\n        conn.execute(\"update users set last_update = '\" + str(last_try) + \"' where chat_id = '\" + str(chat_id) + \"'\")\n        conn.execute(\"update users set last_problem = '\" + str(last_problem[0]) + \"' where chat_id = '\" + str(chat_id) + \"'\")\n        conn.execute(\"update users set state = '\" + str(1) + \"' where chat_id = '\" + str(chat_id) + \"'\")\n    settings.commit()\n    settings.close()",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149388,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def init_user(username, chat_id):\n    conn = sqlite3.connect(os.path.abspath(os.path.dirname(__file__)) + \"\\\\users\\\\\" + username + '.db')\n    conn2 = sqlite3.connect(os.path.abspath(os.path.dirname(__file__)) + '\\\\cf.db')\n    cursor = conn.cursor()\n    cursor2 = conn2.cursor()\n    cursor.execute(\"CREATE TABLE result (problem INTEGER, diff STRING, verdict STRING)\")\n    cursor2.execute(\"SELECT * FROM problems\")\n    x = cursor2.fetchone()\n    while x != None:\n        cursor.execute(\"insert into result values (?, ?, ? )\", (x[0], x[1], \"NULL\"))\n        x = cursor2.fetchone()\n\n    url = 'http://codeforces.com/submissions/' + username\n    r = requests.get(url)\n    max_page = 1\n    soup = BeautifulSoup(r.text, \"lxml\")\n\n    for link in soup.find_all(attrs={\"class\": \"page-index\"}):\n        s = link.find('a')\n        s2 = s.get(\"href\").split('/')\n        max_page = max(max_page, int(s2[4]))\n    r = requests.get('http://codeforces.com/submissions/' + username + '/page/0')\n    soup = BeautifulSoup(r.text, \"lxml\")\n    last_try = soup.find(attrs={\"class\":\"status-small\"})\n    if not last_try == None:\n        last_try = str(last_try).split()\n        last_try = str(last_try[2]) + str(last_try[3])\n\n    for i in range(1, max_page + 1):\n        r = requests.get('http://codeforces.com/submissions/' + username + '/page/' + str(i))\n        soup = BeautifulSoup(r.text, \"lxml\")\n        count = 0\n        ver = soup.find_all(attrs={\"class\": \"submissionVerdictWrapper\"})\n        for link in soup.find_all('a'):\n            s = link.get('href')\n            if s != None and s.find('/problemset') != -1:\n                s = s.split('/')\n                if len(s) == 5:\n                    s2 = str(ver[count]).split()\n                    s2 = s2[5].split('\\\"')\n                    count += 1\n                    cursor.execute(\"select * from result where problem = ? and diff = ?\", (s[3], s[4]))\n                    x = cursor.fetchone()\n                    if s2[1] == 'OK' and x != None:\n                        cursor.execute(\"update result set verdict = ? where problem = ? and diff = ?\", (s2[1], s[3], s[4]))\n                    if x != None and x[2] != 'OK':\n                        cursor.execute(\"update result set verdict = ? where problem = ? and diff = ?\", (s2[1], s[3], s[4]))\n    conn.commit()\n    conn.close()\n    conn2.close()\n    settings = sqlite3.connect(os.path.abspath(os.path.dirname(__file__)) + \"\\\\settings.db\")\n    conn = settings.cursor()\n    conn.execute(\"select * from last_update_problemset\")\n    last_problem = conn.fetchone()\n    conn.execute(\"select * from users where chat_id = ?\", (str(chat_id),))\n    x = conn.fetchone()\n    if x == None:\n        conn.execute(\"insert into users values (?, ?, ?, ?, ?)\", (chat_id, username, str(last_try), str(last_problem[0]), 1))\n    else:\n        conn.execute(\"update users set username = ? where chat_id = ?\", (str(username), str(chat_id)))\n        conn.execute(\"update users set last_update = ? where chat_id = ?\", (str(last_try), str(chat_id)))\n        conn.execute(\"update users set last_problem = ? where chat_id = ?\", (str(last_problem[0]), str(chat_id)))\n        conn.execute(\"update users set state = ? where chat_id = ?\", (str(1), str(chat_id)))\n    settings.commit()\n    settings.close()",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149389,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def process_vote(target,action,chan,mask,db,notice,conn):\n    if ' ' in target: \n        notice('Invalid nick')\n        return\n\n    try: votes2kick = database.get(db,'channels','votekick','chan',chan)\n    except: votes2kick = 10\n    try: votes2ban = database.get(db,'channels','voteban','chan',chan)\n    except: votes2ban = 10\n\n    if len(target) is 0:\n        if action is 'kick': notice('Votes required to kick: {}'.format(votes2kick))\n        elif action is 'ban': notice('Votes required to ban: {}'.format(votes2ban))\n        return\n\n    votefinished = False\n    global db_ready\n    if not db_ready: db_init(db)\n    chan = chan.lower()\n    target = target.lower()\n    voter = user.format_hostmask(mask)\n    voters = db.execute(\"SELECT voters FROM votes where chan='{}' and action='{}' and target like '{}'\".format(chan,action,target)).fetchone()\n\n    if conn.nick.lower() in target: return \"I dont think so Tim.\"\n\n    if voters: \n        voters = voters[0]\n        if voter in voters: \n            notice(\"You have already voted.\")\n            return\n        else:\n            voters = '{} {}'.format(voters,voter).strip()\n            notice(\"Thank you for your vote!\")\n    else: \n        voters = voter\n\n    votecount = len(voters.split(' '))\n\n    if 'kick' in action: \n        votemax = int(votes2kick)\n        if votecount >= votemax:\n            votefinished = True\n            conn.send(\"KICK {} {} :{}\".format(chan, target, \"You have been voted off the island.\"))\n    if 'ban' in action:\n        votemax = int(votes2ban)\n        if votecount >= votemax:\n            votefinished = True\n            conn.send(\"MODE {} +b {}\".format(chan, user.get_hostmask(target,db)))\n            conn.send(\"KICK {} {} :\".format(chan, target, \"You have been voted off the island.\"))\n    \n    if votefinished: db.execute(\"DELETE FROM votes where chan='{}' and action='{}' and target like '{}'\".format(chan,action,target))\n    else: db.execute(\"insert or replace into votes(chan, action, target, voters, time) values(?,?,?,?,?)\", (chan, action, target, voters, time.time()))\n        \n    db.commit()\n    return (\"Votes to {} {}: {}/{}\".format(action, target, votecount,votemax))",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149390,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def process_vote(target,action,chan,mask,db,notice,conn):\n    if ' ' in target: \n        notice('Invalid nick')\n        return\n\n    try: votes2kick = database.get(db,'channels','votekick','chan',chan)\n    except: votes2kick = 10\n    try: votes2ban = database.get(db,'channels','voteban','chan',chan)\n    except: votes2ban = 10\n\n    if len(target) is 0:\n        if action is 'kick': notice('Votes required to kick: {}'.format(votes2kick))\n        elif action is 'ban': notice('Votes required to ban: {}'.format(votes2ban))\n        return\n\n    votefinished = False\n    global db_ready\n    if not db_ready: db_init(db)\n    chan = chan.lower()\n    target = target.lower()\n    voter = user.format_hostmask(mask)\n    voters = db.execute(\"SELECT voters FROM votes where chan=? and action=? and target like ?\", chan, action, target).fetchone()\n\n    if conn.nick.lower() in target: return \"I dont think so Tim.\"\n\n    if voters: \n        voters = voters[0]\n        if voter in voters: \n            notice(\"You have already voted.\")\n            return\n        else:\n            voters = '{} {}'.format(voters,voter).strip()\n            notice(\"Thank you for your vote!\")\n    else: \n        voters = voter\n\n    votecount = len(voters.split(' '))\n\n    if 'kick' in action: \n        votemax = int(votes2kick)\n        if votecount >= votemax:\n            votefinished = True\n            conn.send(\"KICK {} {} :{}\".format(chan, target, \"You have been voted off the island.\"))\n    if 'ban' in action:\n        votemax = int(votes2ban)\n        if votecount >= votemax:\n            votefinished = True\n            conn.send(\"MODE {} +b {}\".format(chan, user.get_hostmask(target,db)))\n            conn.send(\"KICK {} {} :\".format(chan, target, \"You have been voted off the island.\"))\n    \n    if votefinished: db.execute(\"DELETE FROM votes where chan=? and action=? and target like ?\", chan, action, target)\n    else: db.execute(\"insert or replace into votes(chan, action, target, voters, time) values(?,?,?,?,?)\", (chan, action, target, voters, time.time()))\n        \n    db.commit()\n    return (\"Votes to {} {}: {}/{}\".format(action, target, votecount,votemax))",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149391,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@mod.route('/like/<int:msg_id>', methods=['GET', 'POST'])\ndef like(msg_id):\n    if request.method == 'GET':\n        user_id = session['logged_id']\n        c_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n        sql = \"INSERT INTO like_msg(msg_id, user_id,c_time) \" + \\\n                \"VALUES(%d,'%s','%s');\" % (msg_id, user_id, c_time)\n        cursor.execute(sql)\n        conn.commit()\n    return redirect(url_for('show_entries'))",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149392,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@mod.route('/like/<int:msg_id>', methods=['GET', 'POST'])\ndef like(msg_id):\n    if request.method == 'GET':\n        user_id = session['logged_id']\n        c_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n        cursor.execute(\"INSERT INTO like_msg(msg_id, user_id,c_time) VALUES(%s,%s,%s);\", (msg_id, user_id, c_time))\n        conn.commit()\n    return redirect(url_for('show_entries'))",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149393,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def tag_to_tag_num(self, tag):\n        ''' Returns tag_num given tag. '''\n\n        q = \"SELECT rowid FROM tags WHERE tag = '\" + tag + \"'\"\n        self.query(q)\n        return self.c.fetchone()[0]",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149394,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def tag_to_tag_num(self, tag):\n        ''' Returns tag_num given tag. '''\n\n        q = \"SELECT rowid FROM tags WHERE tag = ?\"\n        self.query(q, tag)\n        return self.c.fetchone()[0]",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149395,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def update_history_and_sourcebyinstitution(conn, sqlite, k10plus, ai):\n    \"\"\"\n    Get all current sources and title numbers from Solr and log them into database.\n    \"\"\"\n    current_sources = get_all_current_sources(k10plus, ai)\n    current_institutions = get_all_current_institutions(k10plus, ai)\n    old_sourcebyinstitutions = get_all_old_sourcebyinstitutions(conn, sqlite)\n    current_sourcebyinstitutions = []\n\n    for source in current_sources:\n\n        for institution in current_institutions:\n\n            if not institution or institution == \" \" or '\"' in institution:\n                continue\n\n            sourcebyinstitution = \"SID \" + str(source) + \" (\" + institution + \")\"\n            current_sourcebyinstitutions.append(sourcebyinstitution)\n\n            params = {\n                \"q\": 'source_id:%s AND institution:\"%s\"' % (source, institution),\n                \"rows\": 0,\n                \"wt\": \"json\"\n            }\n\n            # check k10plus\n            result = get_solr_result(k10plus, params)\n            number = result[\"response\"][\"numFound\"]\n            if number != 0:\n                sql = 'INSERT INTO history (sourcebyinstitution, titles) VALUES (\"%s\", %s)' % (sourcebyinstitution, number)\n                sqlite.execute(sql)\n                conn.commit()\n            else:\n                # check ai\n                result = get_solr_result(ai, params)\n                number = result[\"response\"][\"numFound\"]\n                if number != 0:\n                    # TODO: escape via sqlite\n                    sql = 'INSERT INTO history (sourcebyinstitution, titles) VALUES (\"%s\", %s)' % (sourcebyinstitution, number)\n                    sqlite.execute(sql)\n                    conn.commit()\n\n            if sourcebyinstitution not in old_sourcebyinstitutions:\n                logging.info(\"The %s is now connected to SID %s.\", institution, source)\n                sql = \"INSERT INTO sourcebyinstitution (sourcebyinstitution) VALUES ('%s')\" % sourcebyinstitution\n                sqlite.execute(sql)\n                conn.commit()\n\n            if number != 0:\n                old_sourcebyinstitution_number = get_old_sourcebyinstitution_number(conn, sqlite, sourcebyinstitution)\n                if number < old_sourcebyinstitution_number:\n                    message = \"Die Anzahl der Titel hat sich bei %s gegenueber einem frueheren Import verringert.\" % (sourcebyinstitution)\n                    send_message(message)\n\n            # requests.exceptions.ConnectionError: HTTPConnectionPool(XXXXXX): Max retries exceeded\n            time.sleep(0.25)\n\n    for old_sourcebyinstitution in old_sourcebyinstitutions:\n        if old_sourcebyinstitution not in current_sourcebyinstitutions:\n            message = \"Die %s ist nicht laenger f\u00fcr die SID %s angesigelt.\" % (institution, source)\n            send_message(message)",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149396,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def update_history_and_sourcebyinstitution(conn, sqlite, k10plus, ai):\n    \"\"\"\n    Get all current sources and title numbers from Solr and log them into database.\n    \"\"\"\n    current_sources = get_all_current_sources(k10plus, ai)\n    current_institutions = get_all_current_institutions(k10plus, ai)\n    old_sourcebyinstitutions = get_all_old_sourcebyinstitutions(conn, sqlite)\n    current_sourcebyinstitutions = []\n\n    for source in current_sources:\n\n        for institution in current_institutions:\n\n            if not institution or institution == \" \" or '\"' in institution:\n                continue\n\n            sourcebyinstitution = \"SID \" + str(source) + \" (\" + institution + \")\"\n            current_sourcebyinstitutions.append(sourcebyinstitution)\n\n            params = {\n                \"q\": 'source_id:%s AND institution:\"%s\"' % (source, institution),\n                \"rows\": 0,\n                \"wt\": \"json\"\n            }\n\n            # check k10plus\n            result = get_solr_result(k10plus, params)\n            number = result[\"response\"][\"numFound\"]\n            if number != 0:\n                sql = 'INSERT INTO history (sourcebyinstitution, titles) VALUES (?, ?)'\n                sqlite.execute(sql, (sourcebyinstitution, number))\n                conn.commit()\n            else:\n                # check ai\n                result = get_solr_result(ai, params)\n                number = result[\"response\"][\"numFound\"]\n                if number != 0:\n                    # TODO: escape via sqlite\n                    sql = 'INSERT INTO history (sourcebyinstitution, titles) VALUES (?, ?)'\n                    sqlite.execute(sql, (sourcebyinstitution, number))\n                    conn.commit()\n\n            if sourcebyinstitution not in old_sourcebyinstitutions:\n                logging.info(\"The %s is now connected to SID %s.\", institution, source)\n                sql = \"INSERT INTO sourcebyinstitution (sourcebyinstitution) VALUES (?)\"\n                sqlite.execute(sql, (sourcebyinstitution))\n                conn.commit()\n\n            if number != 0:\n                old_sourcebyinstitution_number = get_old_sourcebyinstitution_number(conn, sqlite, sourcebyinstitution)\n                if number < old_sourcebyinstitution_number:\n                    message = \"Die Anzahl der Titel hat sich bei %s gegenueber einem frueheren Import verringert.\" % (sourcebyinstitution)\n                    send_message(message)\n\n            # requests.exceptions.ConnectionError: HTTPConnectionPool(XXXXXX): Max retries exceeded\n            time.sleep(0.25)\n\n    for old_sourcebyinstitution in old_sourcebyinstitutions:\n        if old_sourcebyinstitution not in current_sourcebyinstitutions:\n            message = \"Die %s ist nicht laenger f\u00fcr die SID %s angesigelt.\" % (institution, source)\n            send_message(message)",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149397,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def change_message(self, new_message, logged_user):\n        update_sql = \"\"\"\n            UPDATE Clients\n            SET message = '{}'\n            WHERE client_id = '{}'\n        \"\"\".format(new_message, logged_user.get_client_id())\n\n        cursor = self.__conn.cursor()\n\n        cursor.execute(update_sql)\n        self.__conn.commit()\n        logged_user.set_message(new_message)",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149398,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def change_message(self, new_message, logged_user):\n        update_sql = \"\"\"\n            UPDATE Clients\n            SET message = ?\n            WHERE client_id = ?\n        \"\"\"\n\n        cursor = self.__conn.cursor()\n\n        cursor.execute(update_sql, (new_message, logged_user.get_client_id()))\n        self.__conn.commit()\n        logged_user.set_message(new_message)",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149399,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def create_event(self, title, start_time, time_zone, server_id, description):\n        sql = \"\"\"INSERT INTO events (title, start_time, time_zone, server_id, description)\n                 VALUES ('{0}', '{1}', '{2}', '{3}', '{4}')\n                 \"\"\".format(title, start_time, time_zone, server_id, description)\n        self.cur.execute(sql)\n        self.conn.commit()",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149400,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def create_event(self, title, start_time, time_zone, server_id, description):\n        sql = \"\"\"\n              INSERT INTO events (title, start_time, time_zone, server_id, description)\n              VALUES (%s, %s, %s, %s, %s)\n              \"\"\"\n        self.cur.execute(sql, (title, start_time, time_zone, server_id, description))\n        self.conn.commit()",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149401,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@bot.message_handler(func = lambda message: get_current_state(message.chat.id) == config.States.S_LOGIN.value)\ndef get_login2(message):\n    settings = sqlite3.connect(os.path.abspath(os.path.dirname(__file__)) + \"\\\\bases\\\\settings.db\")\n    conn = settings.cursor()\n    if bases.createuserbase.check_username(message.text):\n        bot.send_message(message.chat.id, \"Invalid handle.\")\n        set_state(message.chat.id, config.States.S_START.value)\n        return 0\n\n    conn.execute(\"select * from users where chat_id = '\" + str(message.chat.id) + \"'\")\n    name = conn.fetchone()\n    settings.close()\n    bases.update.cf_update()\n    bases.createuserbase.clean_base(name[1])\n    bases.createuserbase.clean_base(message.text)\n    bot.send_message(message.chat.id, \"Creating base...\")\n    bases.createuserbase.init_user(message.text, message.chat.id)\n    bot.send_message(message.chat.id, \"Done!\")\n    set_state(message.chat.id, config.States.S_START.value)",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149402,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@bot.message_handler(func = lambda message: get_current_state(message.chat.id) == config.States.S_LOGIN.value)\ndef get_login2(message):\n    settings = sqlite3.connect(os.path.abspath(os.path.dirname(__file__)) + \"\\\\bases\\\\settings.db\")\n    conn = settings.cursor()\n    if bases.createuserbase.check_username(message.text):\n        bot.send_message(message.chat.id, \"Invalid handle.\")\n        set_state(message.chat.id, config.States.S_START.value)\n        return 0\n    conn.execute(\"select * from users where chat_id = ?\", (str(message.chat.id),))\n    name = conn.fetchone()\n    settings.close()\n    bases.update.cf_update()\n    bases.createuserbase.clean_base(name[1])\n    bases.createuserbase.clean_base(message.text)\n    bot.send_message(message.chat.id, \"Creating base...\")\n    bases.createuserbase.init_user(message.text, message.chat.id)\n    bot.send_message(message.chat.id, \"Done!\")\n    set_state(message.chat.id, config.States.S_START.value)",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149403,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def get_bracket_graph_data(db, tag):\n    # First, we have to find out which scenes this player has brackets in\n    sql = \"SELECT DISTINCT scene FROM ranks WHERE player='{}'\".format(tag)\n    scenes = db.exec(sql)\n    scenes = [s[0] for s in scenes]\n\n    bracket_placings_by_scene = {s: get_bracket_placings_in_scene(db, s, tag) for s in scenes}\n\n    return bracket_placings_by_scene",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149404,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def get_bracket_graph_data(db, tag):\n    # First, we have to find out which scenes this player has brackets in\n    sql = \"SELECT DISTINCT scene FROM ranks WHERE player='{tag}'\"\n    args = {'tag': tag}\n    scenes = db.exec(sql, args)\n    scenes = [s[0] for s in scenes]\n\n    bracket_placings_by_scene = {s: get_bracket_placings_in_scene(db, s, tag) for s in scenes}\n\n    return bracket_placings_by_scene",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149405,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def get(self, email):\n        \"\"\" Fetch data for admin with the corresponding email \"\"\"\n        return database_utilities.execute_query(f\"\"\"select * from admins where email = '{email}'\"\"\")",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149406,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def get(self, email):\n        \"\"\" Fetch data for admin with the corresponding email \"\"\"\n        return database_utilities.execute_query(f\"\"\"select * from admins where email = %s\"\"\", (email, ))",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149407,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def insertUsage(user, command):\n\tc, conn = getConnection()\n\tdate = now()\n\tc.execute(\"INSERT INTO usage (date,user,command) VALUES ('\"+date+\"','\"+str(user)+\"','\"+command+\"')\")\n\tconn.commit()\n\tconn.close()",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149408,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def insertUsage(user, command):\n\tc, conn = getConnection()\n\tdate = now()\n\tc.execute(\"INSERT INTO usage (date,user,command) VALUES (?,?,?)\",(date,str(user),command))\n\tconn.commit()\n\tconn.close()",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149409,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def verify_email(self, member):\n        query = \"SELECT COUNT(email) FROM members WHERE email = '{email}'\".format(email = member)\n        self.cursor.execute(query)\n        result = self.cursor.fetchone()\n        if (int(result[0]) > 0):\n            return True \n        else:\n            return False",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149410,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def verify_email(self, member):\n        self.cursor.execute(\"SELECT COUNT(email) FROM members WHERE email = ':email'\", {'email':member})\n        result = self.cursor.fetchone()\n        if (int(result[0]) > 0):\n            return True \n        else:\n            return False",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149411,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def get_previous_yields(self, inverter_serial):\n        query = '''\n           SELECT TimeStamp, EToday, ETotal\n           FROM Inverters\n           WHERE Serial = '%s'\n        ''' % (inverter_serial)\n        self.c.execute(query)\n        data = self.c.fetchone()\n        return data[0], data[1], data[2]",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149412,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def get_previous_yields(self, inverter_serial):\n        query = '''\n           SELECT TimeStamp, EToday, ETotal\n           FROM Inverters\n           WHERE Serial=?\n        '''\n        self.c.execute(query, (inverter_serial,))\n        data = self.c.fetchone()\n        return data[0], data[1], data[2]",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149413,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@app.route('/referrer_count')\ndef referrer_count():\n    account_id = request.args.get('account_id')\n\n    if not isObject(account_id):\n        ws.send('{\"id\":1, \"method\":\"call\", \"params\":[0,\"lookup_account_names\",[[\"' + account_id + '\"], 0]]}')\n        result_l = ws.recv()\n        j_l = json.loads(result_l)\n\n        account_id = j_l[\"result\"][0][\"id\"]\n\n    con = psycopg2.connect(**config.POSTGRES)\n    cur = con.cursor()\n\n    query = \"select count(*) from referrers where referrer='\"+account_id+\"'\"\n    cur.execute(query)\n    results = cur.fetchone()\n\n    return jsonify(results)",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149414,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@app.route('/referrer_count')\ndef referrer_count():\n    account_id = request.args.get('account_id')\n\n    if not isObject(account_id):\n        ws.send('{\"id\":1, \"method\":\"call\", \"params\":[0,\"lookup_account_names\",[[\"' + account_id + '\"], 0]]}')\n        result_l = ws.recv()\n        j_l = json.loads(result_l)\n\n        account_id = j_l[\"result\"][0][\"id\"]\n\n    con = psycopg2.connect(**config.POSTGRES)\n    cur = con.cursor()\n\n    query = \"select count(*) from referrers where referrer=%s\"\n    cur.execute(query, (account_id,))\n    results = cur.fetchone()\n\n    return jsonify(results)",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149415,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def analyze_scene(self, scene):\n        base_urls = scene.get_base_urls()\n        users = scene.get_users()\n        name = scene.get_name()\n        LOG.info('found the following users for scene {}: {}'.format(name, users))\n\n        # This scene might have one user who always posts the brackets on their challonge account\n        for user in users:\n            # Have we analyzed this user before?\n            sql = \"SELECT * FROM user_analyzed WHERE user='{}';\".format(user)\n            results = self.db.exec(sql)\n\n            # Did we have any matches in the database?\n            if len(results) > 0:\n                # We have analyzed this user before. Just grab one page of brackets to see if there have been any new tournaments\n                # eg, just look at /users/christmasmike?page=1 instead of all the pages that exist\n                most_recent_page = bracket_utils.get_brackets_from_user(user, pages=1)\n                for bracket in most_recent_page:\n                    LOG.info('here are the brackets from the most recent page of user {}: {}'.format(user, most_recent_page))\n                    # This user has already been analyzed, there's a good chance this bracket has been analyzed also\n                    sql = \"SELECT * FROM user_analyzed WHERE url='{}' AND user='{}';\".format(bracket, user)\n                    results = self.db.exec(sql)\n\n                    if len(results) == 0:\n                        # This is a new bracket that must have been published in the last hour or so\n                        LOG.info('found this url from a user: {} {}'.format(bracket, user))\n                        display_name = bracket_utils.get_display_base(bracket)\n                        # We don't care about doubles tournaments\n                        if 'doubles' in display_name.lower() or 'dubs' in display_name.lower():\n                            LOG.info('We are skipping the tournament {} because it is a doubles tournament'.format(display_name))\n                            continue\n\n                        self.data_processor.process(bracket, name, display_name)\n\n                        # mark this bracket as analyzed\n                        sql = \"INSERT INTO user_analyzed (url, user, scene) VALUES ('{}', '{}', '{}');\".format(bracket, user, name)\n                        self.db.exec(sql)\n\n                        # Tweet that we found a new bracket\n                        msg = \"Found new {} bracket: {}\".format(name, bracket)\n                        tweet(msg)\n                    else:\n                        LOG.info('url {} is not new for user {}'.format(bracket, user))\n            else:\n                # This is a new user, analyze all brackets\n                user_urls = bracket_utils.get_brackets_from_user(user)\n                for url in user_urls:\n                    LOG.info('found this url from a user: {} {}'.format(url, user))\n                    display_name = bracket_utils.get_display_base(url)\n                    # We don't care about doubles tournaments\n                    if 'doubles' in display_name.lower() or 'dubs' in display_name.lower():\n                        LOG.info('We are skipping the tournament {} because it is a doubles tournament'.format(display_name))\n                        continue\n\n                    self.data_processor.process(url, name, display_name)\n\n                    # mark this bracket as analyzed\n                    sql = \"INSERT INTO user_analyzed (url, user, scene) VALUES ('{}', '{}', '{}');\".format(url, user, name)\n                    self.db.exec(sql)\n\n                LOG.info('done with user {}'.format(user))\n\n\n        # This scene might always call their brackets the same thing, eg weekly1, weekly2, weekly3 etc\n        for base_url in base_urls:\n            # attempt to load this data from the database\n            LOG.info('About to start this analysis thread for scene {}'.format(scene.get_name()))\n            sql = \"SELECT first,last FROM valids WHERE base_url = '\" + str(base_url) + \"';\"\n            result = self.db.exec(sql)\n            has_results = len(result) > 0 \n\n            # Did we find a match in the database?\n            if has_results:\n                LOG.info(\"validURLs found values in the database\" + str(result))\n                first = result[0][0]\n                last = result[0][1]\n\n                # Check for a new valid URL\n                new_last = bracket_utils._get_last_valid_url(base_url, last-1)\n\n                if not new_last == last:\n                    if new_last - last > 5:\n                        with open(\"DEBUGOUTPUT.txt\", 'a') as f:\n                            f.write(\"[validURLs.py:55]: found a SHIT TON of new tournaments for bracket: {}\".format(base_url))\n\n                    else:\n                        bracket = base_url.replace('###', str(new_last))\n                        LOG.info('Found new bracket: {}'.format(bracket))\n                        msg = \"Found new bracket: {}\".format(bracket)\n                        tweet(msg)\n\n                    # If there's been a new last, update the database\n                    sql = \"UPDATE valids SET last=\" + str(new_last) + \" where base_url = '\"+str(base_url)+\"';\"\n                    self.db.exec(sql)\n\n\n                    # Analyze each of these new brackets\n                    for i in range(last+1, new_last+1):\n                        # Since this URL is new, we have to process the data\n                        bracket = base_url.replace('###', str(i))\n                        # Create the display name for this bracket\n                        # Eg challonge.com/NP9ATX54 -> NP9 54\n                        display_name = bracket_utils.get_display_base(bracket, counter=i)\n                        # We don't care about doubles tournaments\n                        if 'doubles' in display_name.lower() or 'dubs' in display_name.lower():\n                            LOG.info('We are skipping the tournament {} because it is a doubles tournament'.format(display_name))\n                            continue\n\n                        self.data_processor.process(bracket, name, display_name, new_bracket=True)\n\n            else:\n                # We need to create first and last from scratch\n                first = bracket_utils._get_first_valid_url(base_url)\n                last = bracket_utils._get_last_valid_url(base_url, first)\n\n                # This is new data, we need to put it into the db\n                sql = \"INSERT INTO valids (base_url, first, last, scene) VALUES (\"\n                sql += \"'\"+str(base_url)+\"', \"+str(first)+ \", \"+str(last)+\", '\"+str(name)+\"');\"\n                self.db.exec(sql)\n\n                for i in range(first, last+1):\n                    bracket = base_url.replace('###', str(i))\n                    # Create the display name for this bracket\n                    # Eg challonge.com/NP9ATX54 -> NP9 54\n                    display_name = bracket_utils.get_display_base(bracket, counter=i)\n                    # We don't care about doubles tournaments\n                    if 'doubles' in display_name.lower() or 'dubs' in display_name.lower():\n                        LOG.info('We are skipping the tournament {} because it is a doubles tournament'.format(display_name))\n                        continue\n\n                    self.data_processor.process(bracket, name, display_name)\n\n                    # Calculate ranks after each tournament so we can see how players are progressing\n        if not analyzed_scenes and should_tweet:\n            tweet('About to start ranking for scene {}'.format(name))\n        self.data_processor.check_and_update_ranks(name)",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149416,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def analyze_scene(self, scene):\n        base_urls = scene.get_base_urls()\n        users = scene.get_users()\n        name = scene.get_name()\n        LOG.info('found the following users for scene {}: {}'.format(name, users))\n\n        # This scene might have one user who always posts the brackets on their challonge account\n        for user in users:\n            # Have we analyzed this user before?\n            sql = \"SELECT * FROM user_analyzed WHERE user='{user}';\"\n            args = {'user': user}\n            results = self.db.exec(sql, args)\n\n            # Did we have any matches in the database?\n            if len(results) > 0:\n                # We have analyzed this user before. Just grab one page of brackets to see if there have been any new tournaments\n                # eg, just look at /users/christmasmike?page=1 instead of all the pages that exist\n                most_recent_page = bracket_utils.get_brackets_from_user(user, pages=1)\n                for bracket in most_recent_page:\n                    LOG.info('here are the brackets from the most recent page of user {}: {}'.format(user, most_recent_page))\n                    # This user has already been analyzed, there's a good chance this bracket has been analyzed also\n                    sql = \"SELECT * FROM user_analyzed WHERE url='{bracket}' AND user='{user}';\"\n                    args = {'bracket': bracket, 'user': user}\n                    results = self.db.exec(sql, args)\n\n                    if len(results) == 0:\n                        # This is a new bracket that must have been published in the last hour or so\n                        LOG.info('found this url from a user: {} {}'.format(bracket, user))\n                        display_name = bracket_utils.get_display_base(bracket)\n                        # We don't care about doubles tournaments\n                        if 'doubles' in display_name.lower() or 'dubs' in display_name.lower():\n                            LOG.info('We are skipping the tournament {} because it is a doubles tournament'.format(display_name))\n                            continue\n\n                        self.data_processor.process(bracket, name, display_name)\n\n                        # mark this bracket as analyzed\n                        sql = \"INSERT INTO user_analyzed (url, user, scene) VALUES ('{bracket}', '{user}', '{name}');\"\n                        args = {'bracket': bracket, 'user':user, 'name':name}\n                        self.db.exec(sql, args)\n\n                        # Tweet that we found a new bracket\n                        msg = \"Found new {} bracket: {}\".format(name, bracket)\n                        tweet(msg)\n                    else:\n                        LOG.info('url {} is not new for user {}'.format(bracket, user))\n            else:\n                # This is a new user, analyze all brackets\n                user_urls = bracket_utils.get_brackets_from_user(user)\n                for url in user_urls:\n                    LOG.info('found this url from a user: {} {}'.format(url, user))\n                    display_name = bracket_utils.get_display_base(url)\n                    # We don't care about doubles tournaments\n                    if 'doubles' in display_name.lower() or 'dubs' in display_name.lower():\n                        LOG.info('We are skipping the tournament {} because it is a doubles tournament'.format(display_name))\n                        continue\n\n                    self.data_processor.process(url, name, display_name)\n\n                    # mark this bracket as analyzed\n                    sql = \"INSERT INTO user_analyzed (url, user, scene) VALUES ('{url}', '{user}', '{name}');\"\n                    args = {'url': url, 'user':user, 'name':name}\n                    self.db.exec(sql, args)\n\n                LOG.info('done with user {}'.format(user))\n\n\n        # This scene might always call their brackets the same thing, eg weekly1, weekly2, weekly3 etc\n        for base_url in base_urls:\n            # attempt to load this data from the database\n            LOG.info('About to start this analysis thread for scene {}'.format(scene.get_name()))\n            sql = \"SELECT first,last FROM valids WHERE base_url = '{base_url}';\"\n            args = {'base_url': base_url}\n            result = self.db.exec(sql, args)\n            has_results = len(result) > 0 \n\n            # Did we find a match in the database?\n            if has_results:\n                LOG.info(\"validURLs found values in the database\" + str(result))\n                first = result[0][0]\n                last = result[0][1]\n\n                # Check for a new valid URL\n                new_last = bracket_utils._get_last_valid_url(base_url, last-1)\n\n                if not new_last == last:\n                    if new_last - last > 5:\n                        with open(\"DEBUGOUTPUT.txt\", 'a') as f:\n                            f.write(\"[validURLs.py:55]: found a SHIT TON of new tournaments for bracket: {}\".format(base_url))\n\n                    else:\n                        bracket = base_url.replace('###', str(new_last))\n                        LOG.info('Found new bracket: {}'.format(bracket))\n                        msg = \"Found new bracket: {}\".format(bracket)\n                        tweet(msg)\n\n                    # If there's been a new last, update the database\n                    sql = \"UPDATE valids SET last={new_last} where base_url='{base_url}';\"\n                    args = {'new_last': new_last, 'base_url': base_url}\n                    self.db.exec(sql, args)\n\n\n                    # Analyze each of these new brackets\n                    for i in range(last+1, new_last+1):\n                        # Since this URL is new, we have to process the data\n                        bracket = base_url.replace('###', str(i))\n                        # Create the display name for this bracket\n                        # Eg challonge.com/NP9ATX54 -> NP9 54\n                        display_name = bracket_utils.get_display_base(bracket, counter=i)\n                        # We don't care about doubles tournaments\n                        if 'doubles' in display_name.lower() or 'dubs' in display_name.lower():\n                            LOG.info('We are skipping the tournament {} because it is a doubles tournament'.format(display_name))\n                            continue\n\n                        self.data_processor.process(bracket, name, display_name, new_bracket=True)\n\n            else:\n                # We need to create first and last from scratch\n                first = bracket_utils._get_first_valid_url(base_url)\n                last = bracket_utils._get_last_valid_url(base_url, first)\n\n                # This is new data, we need to put it into the db\n                sql = \"INSERT INTO valids (base_url, first, last, scene) VALUES ('{base_url}', '{first}', '{last}', '{name}');\"\n                args = {'base_url': base_url, 'first': first, 'last': last, 'name': name}\n                self.db.exec(sql, args)\n\n                for i in range(first, last+1):\n                    bracket = base_url.replace('###', str(i))\n                    # Create the display name for this bracket\n                    # Eg challonge.com/NP9ATX54 -> NP9 54\n                    display_name = bracket_utils.get_display_base(bracket, counter=i)\n                    # We don't care about doubles tournaments\n                    if 'doubles' in display_name.lower() or 'dubs' in display_name.lower():\n                        LOG.info('We are skipping the tournament {} because it is a doubles tournament'.format(display_name))\n                        continue\n\n                    self.data_processor.process(bracket, name, display_name)\n\n                    # Calculate ranks after each tournament so we can see how players are progressing\n        if not analyzed_scenes and should_tweet:\n            tweet('About to start ranking for scene {}'.format(name))\n        self.data_processor.check_and_update_ranks(name)",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149417,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def get_article(index):\n    with conn.cursor(cursor_factory=DictCursor) as cur:\n        query = \"SELECT * FROM articles WHERE index=\"+str(index)\n        cur.execute(query)\n        article = cur.fetchone()\n        return article",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149418,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def get_article(index):\n    with conn.cursor(cursor_factory=DictCursor) as cur:\n        query = \"SELECT * FROM articles WHERE index=%s\"\n        cur.execute(query, (index, ))\n        article = cur.fetchone()\n        return article",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149419,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def create_cf_base():\n    url = 'http://codeforces.com/problemset/'\n    r = requests.get(url)\n    max_page = 0\n    soup = BeautifulSoup(r.text, \"lxml\")\n    base = sqlite3.connect(os.path.abspath(os.path.dirname(__file__)) + \"\\\\cf.db\")\n    conn = base.cursor()\n    conn.execute(\"create table problems (problem INTEGER, diff CHAR)\")\n    for i in available_tags:\n        conn.execute(\"create table \" + i + \" (problems INTEGER, diff CHAR)\")\n\n    for link in soup.find_all(attrs={\"class\" : \"page-index\"}):\n        s = link.find('a')\n        s2 = s.get(\"href\").split('/')\n        max_page = max(max_page, int(s2[3]))\n\n    a = 0\n    b = 0\n    f = False\n    for i in range(1, max_page + 1):\n        r = requests.get('http://codeforces.com/problemset/' + '/page/' + str(i))\n        soup = BeautifulSoup(r.text, \"lxml\")\n        old = ''\n        for link in soup.find_all('a'):\n            s = link.get('href')\n            if s != None and s.find('/problemset') != -1:\n                s = s.split('/')\n                if len(s) == 5 and old != s[3] + s[4]:\n                    a = s[3]\n                    b = s[4]\n                    old = s[3] + s[4]\n                    if not f:\n                        f = True\n                        last_update = old\n                    conn.execute(\"insert into problems values (?, ?)\", (a, b))\n                if len(s) == 4 and s[3] in available_tags:\n                    conn.execute(\"insert into \" + s[3] + \" values (?, ?)\", (a, b))\n\n    base.commit()\n    base.close()\n    settings = sqlite3.connect(os.path.abspath(os.path.dirname(__file__)) + \"\\\\settings.db\")\n    conn = settings.cursor()\n    conn.execute(\"create table users (chat_id INTEGER, username STRING, last_update STRING, last_problem STRING, state INTEGER)\")\n    conn.execute(\"create table last_update_problemset (problem STRING)\")\n    conn.execute(\"insert into last_update_problemset values (?)\", (last_update, ))\n    settings.commit()\n    settings.close()",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149420,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def create_cf_base():\n    url = 'http://codeforces.com/problemset/'\n    r = requests.get(url)\n    max_page = 0\n    soup = BeautifulSoup(r.text, \"lxml\")\n    base = sqlite3.connect(os.path.abspath(os.path.dirname(__file__)) + \"\\\\cf.db\")\n    conn = base.cursor()\n    conn.execute(\"create table problems (problem INTEGER, diff CHAR)\")\n    for i in available_tags:\n        conn.execute(\"create table ? (problems INTEGER, diff CHAR)\", (i,))\n\n    for link in soup.find_all(attrs={\"class\" : \"page-index\"}):\n        s = link.find('a')\n        s2 = s.get(\"href\").split('/')\n        max_page = max(max_page, int(s2[3]))\n\n    a = 0\n    b = 0\n    f = False\n    for i in range(1, max_page + 1):\n        r = requests.get('http://codeforces.com/problemset/' + '/page/' + str(i))\n        soup = BeautifulSoup(r.text, \"lxml\")\n        old = ''\n        for link in soup.find_all('a'):\n            s = link.get('href')\n            if s != None and s.find('/problemset') != -1:\n                s = s.split('/')\n                if len(s) == 5 and old != s[3] + s[4]:\n                    a = s[3]\n                    b = s[4]\n                    old = s[3] + s[4]\n                    if not f:\n                        f = True\n                        last_update = old\n                    conn.execute(\"insert into problems values (?, ?)\", (a, b))\n                if len(s) == 4 and s[3] in available_tags:\n                    conn.execute(\"insert into ? values (?, ?)\", (s[3], a, b))\n\n    base.commit()\n    base.close()\n    settings = sqlite3.connect(os.path.abspath(os.path.dirname(__file__)) + \"\\\\settings.db\")\n    conn = settings.cursor()\n    conn.execute(\"create table users (chat_id INTEGER, username STRING, last_update STRING, last_problem STRING, state INTEGER)\")\n    conn.execute(\"create table last_update_problemset (problem STRING)\")\n    conn.execute(\"insert into last_update_problemset values (?)\", (last_update, ))\n    settings.commit()\n    settings.close()",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149421,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def closeGame(ID):\n\tdb.execute(\"UPDATE games set Running = 'No' WHERE ID = %i\" % ID)\n\tdatabase.commit()",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149422,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def closeGame(ID):\n\tdb.execute(\"UPDATE games set Running = 'No' WHERE ID = ?\", ID)\n\tdatabase.commit()",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149423,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def cancelFollow(self,userid,friendid):\n        sqlText=\"delete from friends where userid=%d and friendid=%d;\"%(userid,friendid)\n        result=sql.deleteDB(self.conn,sqlText)\n        return result;",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149424,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def cancelFollow(self,userid,friendid):\n        sqlText=\"delete from friends where userid=%d and friendid=%s;\"\n        params=[userid,friendid]\n        result=sql.deleteDB(self.conn,sqlText,params)\n        return result;",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149425,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def change_pass(self, new_pass, logged_user):\n        update_sql = \"\"\"\n            UPDATE Clients\n            SET password = '{}'\n            WHERE client_id = '{}'\n        \"\"\".format(new_pass, logged_user.get_client_id())\n\n        cursor = self.__conn.cursor()\n\n        cursor.execute(update_sql)\n        self.__conn.commit()",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149426,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def change_pass(self, new_pass, logged_user):\n        update_sql = \"\"\"\n            UPDATE Clients\n            SET password = ?\n            WHERE client_id = ?\n        \"\"\"\n\n        cursor = self.__conn.cursor()\n\n        cursor.execute(update_sql, (new_pass, logged_user.get_client_id()))\n        self.__conn.commit()",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149427,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def getCommentsByPostid(self,postid,userid):\n        sqlText=\"select (select Count(*) from comment_like where comments.commentid = comment_like.commentid) as like,(select Count(*) from comment_like where comments.commentid = comment_like.commentid and comment_like.userid=%d) as flag,commentid,name,comment from users,comments where users.userid=comments.userid and postid=%d order by date desc;\"%(userid,postid)\n        result=sql.queryDB(self.conn,sqlText)\n        return result;",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149428,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def getCommentsByPostid(self,postid,userid):\n        sqlText=\"select (select Count(*) from comment_like where \\\n        comments.commentid = comment_like.commentid) as like,(select Count(*) \\\n                from comment_like where comments.commentid = \\\n                comment_like.commentid and comment_like.userid=%s) as \\\n                flag,commentid,name,comment from users,comments where \\\n                users.userid=comments.userid and postid=%s order by date desc;\"\n        params=[userid,postid]\n        result=sql.queryDB(self.conn,sqlText,params)\n        return result;",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149429,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "        def callback(recipeName):\n            menu.pack_forget()\n            viewRecipeFrame.pack(expand=True, fill='both')\n            groceryButton.pack_forget()\n            database_file = \"meal_planner.db\"\n            print(recipeName)\n            with sqlite3.connect(database_file) as conn:\n                cursor = conn.cursor()\n                selection = cursor.execute(\"\"\"SELECT * FROM recipe WHERE name = \"\"\" + \"\\\"\" + recipeName + \"\\\"\")\n                for result in [selection]:\n                    for row in result.fetchall():\n                        name = row[0]\n                        time = row[1]\n                        servings = row[2]\n                        ingredients = row[4]\n                        directions = row[5]\n\n                        string = (\"Name: {} \\n Cook time: {} \\n Number of Servings: {} \\n \".format(name, time, servings))\n                        secondString = (\"Ingredients: {}\".format(ingredients))\n                        thirdString = (\"Directions: {}\".format(directions))\n            Label(viewRecipeFrame, text=string, font=MEDIUM_FONT, bg=\"#f8f8f8\", fg=\"#000000\").pack(side=TOP)\n            Label(viewRecipeFrame, text=secondString, font=MEDIUM_FONT, bg=\"#f8f8f8\", fg=\"#000000\").pack(side=TOP)\n            Label(viewRecipeFrame, text=thirdString, font=MEDIUM_FONT, bg=\"#f8f8f8\", fg=\"#000000\").pack(side=TOP)\n            returnButton = Button(menuFrame, text = \"Return to Menu\", highlightbackground=\"#e7e7e7\", command=lambda: [viewRecipeFrame.pack_forget(),\n                                                                                     menu.pack(), returnButton.pack_forget(), label.configure(text=\"Meal Planer\"),\n                                                                                    groceryButton.pack(side=RIGHT)])\n            returnButton.pack(side=RIGHT)",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149430,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "        def callback(recipeName):\n            menu.pack_forget()\n            viewRecipeFrame.pack(expand=True, fill='both')\n            groceryButton.pack_forget()\n            database_file = \"meal_planner.db\"\n            print(recipeName)\n            with sqlite3.connect(database_file) as conn:\n                cursor = conn.cursor()\n                selection = cursor.execute(\"\"\"SELECT * FROM recipe WHERE name = ?;\"\"\", (recipeName, ))\n                for result in [selection]:\n                    for row in result.fetchall():\n                        name = row[0]\n                        time = row[1]\n                        servings = row[2]\n                        ingredients = row[4]\n                        directions = row[5]\n\n                        string = (\"Name: {} \\n Cook time: {} \\n Number of Servings: {} \\n \".format(name, time, servings))\n                        secondString = (\"Ingredients: {}\".format(ingredients))\n                        thirdString = (\"Directions: {}\".format(directions))\n            Label(viewRecipeFrame, text=string, font=MEDIUM_FONT, bg=\"#f8f8f8\", fg=\"#000000\").pack(side=TOP)\n            Label(viewRecipeFrame, text=secondString, font=MEDIUM_FONT, bg=\"#f8f8f8\", fg=\"#000000\").pack(side=TOP)\n            Label(viewRecipeFrame, text=thirdString, font=MEDIUM_FONT, bg=\"#f8f8f8\", fg=\"#000000\").pack(side=TOP)\n            returnButton = Button(menuFrame, text = \"Return to Menu\", highlightbackground=\"#e7e7e7\", command=lambda: [viewRecipeFrame.pack_forget(),\n                                                                                     menu.pack(), returnButton.pack_forget(), label.configure(text=\"Meal Planer\"),\n                                                                                    groceryButton.pack(side=RIGHT)])\n            returnButton.pack(side=RIGHT)",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149431,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    @jwt_required\n    def patch(self, user_id):\n        \"\"\" Replaces information of corresponding user_id with request body \"\"\"\n        query = f\"\"\"update users set user_id = %s \"\"\"\n        query += f\"\"\"where user_id = '{user_id}'\"\"\"\n        json_data = request.get_json()\n        parameters = (json_data['user_id'], )\n        database_utilities.execute_query(query, parameters)",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149432,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    @jwt_required\n    def patch(self, user_id):\n        \"\"\" Replaces information of corresponding user_id with request body \"\"\"\n        query = f\"\"\"update users set user_id = %s \"\"\"\n        query += f\"\"\"where user_id = %s\"\"\"\n        json_data = request.get_json()\n        parameters = (json_data['user_id'], user_id)\n        database_utilities.execute_query(query, parameters)",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149433,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@mod.route('/edit', methods=['GET', 'POST'])\ndef edit():\n    sql = \"SELECT * FROM users where email = '%s';\" % (session['logged_email'])\n    cursor.execute(sql)\n    u = cursor.fetchone()\n    if request.method == 'POST':\n        sql = \"UPDATE users SET nickname = '%s' where email = '%s'\" \\\n        % (request.form['nickname'], session['logged_email'])\n        cursor.execute(sql)\n        sql = \"SELECT * FROM users where email = '%s';\" \\\n            % (session['logged_email'])\n        cursor.execute(sql)\n        u = cursor.fetchone()\n        conn.commit()\n        flash('Edit Nickname Success!')\n    return render_template('users/edit.html', u=u)",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149434,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@mod.route('/edit', methods=['GET', 'POST'])\ndef edit():\n    cursor.execute(\"SELECT * FROM users where email = %s;\", (session['logged_email'],))\n    u = cursor.fetchone()\n    if request.method == 'POST':\n        cursor.execute(\"UPDATE users SET nickname = %s where email = %s\", (request.form['nickname'], session['logged_email']))\n        cursor.execute(\"SELECT * FROM users where email = %s;\", (session['logged_email'],))\n        u = cursor.fetchone()\n        conn.commit()\n        flash('Edit Nickname Success!')\n    return render_template('users/edit.html', u=u)",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149435,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def shame_add(name):\n    shame = shame_ask(name)\n    db = db_connect()\n    cursor = db.cursor()\n    if shame is None:\n        try:\n            cursor.execute('''\n                INSERT INTO people(name,karma,shame) VALUES('{}',0,1)\n                '''.format(name))\n            db.commit()\n            logger.debug('Inserted into karmadb 1 shame for {}'.format(name))\n            db.close()\n            return 1\n        except Exception as e:\n            logger.error('Execution failed with error: {}'.format(e))\n            raise\n\n    else:\n        shame = shame + 1\n        try:\n            cursor.execute('''\n                UPDATE people SET shame = {0} WHERE name = '{1}'\n                '''.format(shame, name))\n            db.commit()\n            logger.debug('Inserted into karmadb {} shame for {}'.format(\n                shame, name))\n            db.close()\n            return shame\n        except Exception as e:\n            logger.error('Execution failed with error: {}'.format(e))\n            raise",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149436,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def shame_add(name):\n    shame = shame_ask(name)\n    db = db_connect()\n    cursor = db.cursor()\n    if shame is None:\n        try:\n            cursor.execute('''\n                INSERT INTO people(name,karma,shame) VALUES(%(name)s,0,1)\n                ''', (name, ))\n            db.commit()\n            logger.debug('Inserted into karmadb 1 shame for {}'.format(name))\n            db.close()\n            return 1\n        except Exception as e:\n            logger.error('Execution failed with error: {}'.format(e))\n            raise\n\n    else:\n        shame = shame + 1\n        try:\n            cursor.execute('''\n                UPDATE people SET shame = %(karma)s WHERE name = %(name)s\n                ''' (\n                shame,\n                name,\n            ))\n            db.commit()\n            logger.debug('Inserted into karmadb {} shame for {}'.format(\n                shame, name))\n            db.close()\n            return shame\n        except Exception as e:\n            logger.error('Execution failed with error: {}'.format(e))\n            raise",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149437,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def can_user_pass_that_amount_of_money(self, user_id, money):\n        self.cursor.execute(\"SELECT count(id) FROM kickstarter.users where id = %s and money >= %s\" % (user_id, money))\n        return self.cursor.fetchall()[0][0]",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149438,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def can_user_pass_that_amount_of_money(self, user_id, money):\n        self.cursor.execute(\"SELECT count(id) FROM kickstarter.users where id = %s and money >= %s\", (user_id, money))\n        return self.cursor.fetchall()[0][0]",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149439,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@endpoints.route(\"/placings\")\ndef placings():\n    if db == None:\n        init()\n\n    tag = request.args.get('tag', default='christmas mike')\n\n    # Get all the urls that this player has participated in\n    sql = \"SELECT * FROM placings WHERE player = '{}'\".format(tag)\n    results = list(db.exec(sql))\n    results.sort(key=lambda x: int(x[2]))\n\n    return json.dumps(results)",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149440,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@endpoints.route(\"/placings\")\ndef placings():\n    if db == None:\n        init()\n\n    tag = request.args.get('tag', default='christmas mike')\n\n    # Get all the urls that this player has participated in\n    sql = \"SELECT * FROM placings WHERE player = '{tag}'\"\n    args = {'tag': tag}\n    results = list(db.exec(sql, args))\n    results.sort(key=lambda x: int(x[2]))\n\n    return json.dumps(results)",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149441,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def markTokenUsedExternal(token, optStr=\"\"):\n    conn, c = connectDB()\n    req = \"UPDATE {} SET \\\"options_selected\\\"='{}' WHERE token='{}'\".format(CFG(\"tokens_table_name\"), \\\n                    optStr, token)\n    c.execute(req)\n    closeDB(conn)",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149442,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def markTokenUsedExternal(token, optStr=\"\"):\n    conn, c = connectDB()\n    req = \"UPDATE {} SET \\\"options_selected\\\"=? WHERE token=?\".format(CFG(\"tokens_table_name\"))\n    c.execute(req, (optStr, token,))\n    closeDB(conn)",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149443,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def get_roster(self, server_id):\n        sql = \"\"\"SELECT username, role\n                 FROM roles\n                 WHERE roles.server_id = {0};\n                 \"\"\".format(server_id)\n        self.cur.execute(sql)\n        return self.cur.fetchall()",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149444,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def get_roster(self, server_id):\n        sql = \"\"\"\n              SELECT username, role\n              FROM roles\n              WHERE roles.server_id = %s;\n              \"\"\"\n        self.cur.execute(sql, (server_id,))\n        return self.cur.fetchall()",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149445,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def retrieve_video(id, playlist_id, db):\n    db.execute(\"SELECT id, position from video WHERE id={id} and playlist_id={playlist_id};\".format(\n        id=id, playlist_id=playlist_id))\n    row = db.fetchone()\n    return row",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149446,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def retrieve_video(id, playlist_id, db):\n    db.execute(\n        \"SELECT id, position from video WHERE id=%s and playlist_id=%s;\", (id, playlist_id))\n    row = db.fetchone()\n    return row",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149447,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def followFriends(self,userid,friendid):\n        sqlText=\"insert into friends values(%d,%d);\"%(friendid,userid)\n        result=sql.insertDB(self.conn,sqlText)\n        return result;",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149448,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def followFriends(self,userid,friendid):\n        sqlText=\"insert into friends values(%s,%s);\"\n        params=[friendid,userid]\n        result=sql.insertDB(self.conn,sqlText,params)\n        return result;",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149449,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def getGameID(ID):\n\tdb.execute(\"SELECT * FROM games WHERE ID = %i\" % ID)\n\tID = db.fetchone()\n\treturn ID",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149450,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def getGameID(ID):\n\tdb.execute(\"SELECT * FROM games WHERE ID = ?\", ID)\n\tID = db.fetchone()\n\treturn ID",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149451,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@app.route('/top_proxies')\ndef top_proxies():\n    con = psycopg2.connect(**config.POSTGRES)\n    cur = con.cursor()\n\n    query = \"SELECT sum(amount) FROM holders\"\n    cur.execute(query)\n    total = cur.fetchone()\n    total_votes = total[0]\n\n    query = \"SELECT voting_as FROM holders WHERE voting_as<>'1.2.5' group by voting_as\"\n    cur.execute(query)\n    results = cur.fetchall()\n    #con.close()\n\n    proxies = []\n\n    for p in range(0, len(results)):\n\n        proxy_line = [0] * 5\n\n        proxy_id = results[p][0]\n        proxy_line[0] = proxy_id\n\n        query = \"SELECT account_name, amount FROM holders WHERE account_id='\"+proxy_id+\"' LIMIT 1\"\n        cur.execute(query)\n        proxy = cur.fetchone()\n\n        try:\n            proxy_name = proxy[0]\n            proxy_amount = proxy[1]\n        except:\n            proxy_name = \"unknown\"\n            proxy_amount = 0\n\n\n        proxy_line[1] = proxy_name\n\n        query = \"SELECT amount, account_id FROM holders WHERE voting_as='\"+proxy_id+\"'\"\n        cur.execute(query)\n        results2 = cur.fetchall()\n\n        proxy_line[2] = int(proxy_amount)\n\n        for p2 in range(0, len(results2)):\n            amount = results2[p2][0]\n            account_id = results2[p2][1]\n            proxy_line[2] = proxy_line[2] + int(amount)  # total proxy votes\n            proxy_line[3] = proxy_line[3] + 1       # followers\n\n        if proxy_line[3] > 2:\n            percentage = float(float(proxy_line[2]) * 100.0/ float(total_votes))\n            proxy_line[4] = percentage\n            proxies.append(proxy_line)\n\n    con.close()\n\n    proxies = sorted(proxies, key=lambda k: int(k[2]))\n    r_proxies = proxies[::-1]\n\n    return jsonify(filter(None, r_proxies))",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149452,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@app.route('/top_proxies')\ndef top_proxies():\n    con = psycopg2.connect(**config.POSTGRES)\n    cur = con.cursor()\n\n    query = \"SELECT sum(amount) FROM holders\"\n    cur.execute(query)\n    total = cur.fetchone()\n    total_votes = total[0]\n\n    query = \"SELECT voting_as FROM holders WHERE voting_as<>'1.2.5' group by voting_as\"\n    cur.execute(query)\n    results = cur.fetchall()\n    #con.close()\n\n    proxies = []\n\n    for p in range(0, len(results)):\n\n        proxy_line = [0] * 5\n\n        proxy_id = results[p][0]\n        proxy_line[0] = proxy_id\n\n        query = \"SELECT account_name, amount FROM holders WHERE account_id=%s LIMIT 1\"\n        cur.execute(query, (proxy_id,))\n        proxy = cur.fetchone()\n\n        try:\n            proxy_name = proxy[0]\n            proxy_amount = proxy[1]\n        except:\n            proxy_name = \"unknown\"\n            proxy_amount = 0\n\n\n        proxy_line[1] = proxy_name\n\n        query = \"SELECT amount, account_id FROM holders WHERE voting_as=%s\"\n        cur.execute(query, (proxy_id,))\n        results2 = cur.fetchall()\n\n        proxy_line[2] = int(proxy_amount)\n\n        for p2 in range(0, len(results2)):\n            amount = results2[p2][0]\n            account_id = results2[p2][1]\n            proxy_line[2] = proxy_line[2] + int(amount)  # total proxy votes\n            proxy_line[3] = proxy_line[3] + 1       # followers\n\n        if proxy_line[3] > 2:\n            percentage = float(float(proxy_line[2]) * 100.0/ float(total_votes))\n            proxy_line[4] = percentage\n            proxies.append(proxy_line)\n\n    con.close()\n\n    proxies = sorted(proxies, key=lambda k: int(k[2]))\n    r_proxies = proxies[::-1]\n\n    return jsonify(filter(None, r_proxies))",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149453,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def userLogin(self):\n\n        sqlName=\"select count(*) from users where name='%s' and \\\n                password='%s';\"%(self.name,self.password)\n        checkName=sql.queryDB(self.conn,sqlName)\n\n        result=checkName[0][0]\n        if result == 0:\n            self.clean()\n            return False\n        else:\n            return True",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149454,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def userLogin(self):\n\n        sqlName=\"select count(*) from users where name=%s and password=%s;\"\n        params = [self.name,self.password]\n        checkName=sql.queryDB(self.conn,sqlName,params)\n        result=checkName[0][0]\n        if result == 0:\n            self.clean()\n            return False\n        else:\n            return True",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149455,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@app.route(\"/search\", methods = [\"POST\"])\ndef search_pages():\n    search = request.form.get(\"search\")\n    page = db.query(\"select title from page where title = '%s'\" % search).namedresult()\n    if len(page) == 0:\n        return redirect(\"/%s\" % search)\n    else:\n        return place_holder(search)",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149456,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@app.route(\"/search\", methods = [\"POST\"])\ndef search_pages():\n    search = request.form.get(\"search\")\n    page = db.query(\"select title from page where title = $1\", search).namedresult()\n    if len(page) == 0:\n        return redirect(\"/%s\" % search)\n    else:\n        return place_holder(search)",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149457,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def get_articles_by_subject(subject):\n    with conn.cursor(cursor_factory=DictCursor) as cur:\n        query = \"SELECT * FROM articles WHERE subject='\" + subject + \"' ORDER BY last_submitted DESC\"\n        cur.execute(query)\n        articles = cur.fetchall()\n        return articles",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149458,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def get_articles_by_subject(subject):\n    with conn.cursor(cursor_factory=DictCursor) as cur:\n        query = \"SELECT * FROM articles WHERE subject=%s ORDER BY last_submitted DESC\"\n        cur.execute(query, (subject,))\n        articles = cur.fetchall()\n        return articles",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149459,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def getQueue(self, numberOfLinks=10):\n        self.cursor.execute(\"SELECT url FROM queue WHERE visited = '0' LIMIT {};\".format(numberOfLinks))\n        result = self.cursor.fetchall()\n        self.remove(result)\n        return result",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149460,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def getQueue(self, numberOfLinks=10):\n        self.cursor.execute(\"SELECT url FROM queue WHERE visited = '0' LIMIT ?;\", numberOfLinks)\n        result = self.cursor.fetchall()\n        self.remove(result)\n        return result",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149461,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@hook.command(autohelp=False)\ndef showPoll(pollID, db=None):\n    \"\"\"Shows the answers for a given poll.\"\"\"\n    if not db_ready: db_init(db)\n    if pollID == None:\n        poll = db.execute(\"SELECT pollID, question FROM polls WHERE active = 1\")\n        if len(poll) == 0:\n            reply(\"There's no poll open.\")\n            return\n    else:\n        poll = db.execute(\"SELECT pollID, question FROM polls WHERE pollID = '{}'\".format(pollID))\n        if len(poll) == 0:\n            reply(\"No such poll found.\")\n            return\n    pollID = poll[0][0]\n    question = poll[0][1]\n    reply(question)\n    for (index, answer, votes) in db.execute(\"SELECT 'index', answer, count(voteID) FROM answers LEFT JOIN votes ON votes.answerID = answers.answerID WHERE pollID = {} GROUP BY answers.answerID, 'index', answer ORDER BY 'index' ASC\".format(pollID, )):\n        reply(\"%s. %s (%s)\" % (index, answer, votes))",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149462,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@hook.command(autohelp=False)\ndef showPoll(pollID, db=None):\n    \"\"\"Shows the answers for a given poll.\"\"\"\n    if not db_ready: db_init(db)\n    if pollID == None:\n        poll = db.execute(\"SELECT pollID, question FROM polls WHERE active = 1\")\n        if len(poll) == 0:\n            reply(\"There's no poll open.\")\n            return\n    else:\n        poll = db.execute(\"SELECT pollID, question FROM polls WHERE pollID = ?\", (pollID,))\n        if len(poll) == 0:\n            reply(\"No such poll found.\")\n            return\n    pollID = poll[0][0]\n    question = poll[0][1]\n    reply(question)\n    for (index, answer, votes) in db.execute(\"SELECT 'index', answer, count(voteID) FROM answers LEFT JOIN votes ON votes.answerID = answers.answerID WHERE pollID = ? GROUP BY answers.answerID, 'index', answer ORDER BY 'index' ASC\", (pollID, )):\n        reply(\"%s. %s (%s)\" % (index, answer, votes))",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149463,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def process_ranks(self, scene, urls, recent_date):\n        PLAYER1 = 0\n        PLAYER2 = 1\n        WINNER = 2\n        DATE = 3\n        SCENE = 4\n\n        # make sure if we already have calculated ranks for these players at this time, we do not do it again\n        sql = \"SELECT * FROM ranks WHERE scene = '{}' AND date='{}';\".format(str(scene), recent_date)\n        res = self.db.exec(sql)\n        if len(res) > 0:\n            LOG.info('We have already calculated ranks for {} on date {}. SKipping'.format(scene, recent_date))\n            return\n\n        matches = bracket_utils.get_matches_from_urls(self.db, urls)\n        LOG.info('About to start processing ranks for scene {} on {}'.format(scene, recent_date))\n\n        # Iterate through each match, and build up our dict\n        win_loss_dict = {}\n        for match in matches:\n            p1 = match[PLAYER1]\n            p2 = match[PLAYER2]\n            winner = match[WINNER]\n            date = match[DATE]\n\n            #Add p1 to the dict\n            if p1 not in win_loss_dict:\n                win_loss_dict[p1] = {}\n\n            if p2 not in win_loss_dict[p1]:\n                win_loss_dict[p1][p2] = []\n\n            # Add an entry to represent this match to p1\n            win_loss_dict[p1][p2].append((date, winner == p1))\n\n            # add p2 to the dict\n            if p2 not in win_loss_dict:\n                win_loss_dict[p2] = {}\n\n            if p1 not in win_loss_dict[p2]:\n                win_loss_dict[p2][p1] = []\n\n            win_loss_dict[p2][p1].append((date, winner == p2))\n\n        ranks = get_ranks(win_loss_dict)\n\n        tag_rank_map = {}\n        for i, x in enumerate(ranks):\n            points, player = x\n            rank = len(ranks) - i\n\n            sql = \"INSERT INTO ranks (scene, player, rank, points, date) VALUES ('{}', '{}', '{}', '{}', '{}');\"\\\n                    .format(str(scene), str(player), int(rank), str(points), str(recent_date))\n            self.db.exec(sql)\n\n            # Only count this player if this is the scene he/she belongs to\n            sql = \"SELECT scene FROM players WHERE tag='{}';\".format(player)\n            res = self.db.exec(sql)\n\n            if len(res) == 0 or res[0][0] == scene:\n                # Also create a list to update the player web\n                map = {'rank':rank, 'total_ranked':len(ranks)}\n                tag_rank_map[player] = map\n\n        player_web.update_ranks(tag_rank_map)",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149464,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def process_ranks(self, scene, urls, recent_date):\n        PLAYER1 = 0\n        PLAYER2 = 1\n        WINNER = 2\n        DATE = 3\n        SCENE = 4\n\n        # make sure if we already have calculated ranks for these players at this time, we do not do it again\n        sql = \"SELECT * FROM ranks WHERE scene = '{scene}' AND date='{date}';\"\n        args = {'scene': scene, 'date': recent_date}\n        res = self.db.exec(sql, args)\n        if len(res) > 0:\n            LOG.info('We have already calculated ranks for {} on date {}. SKipping'.format(scene, recent_date))\n            return\n\n        matches = bracket_utils.get_matches_from_urls(self.db, urls)\n        LOG.info('About to start processing ranks for scene {} on {}'.format(scene, recent_date))\n\n        # Iterate through each match, and build up our dict\n        win_loss_dict = {}\n        for match in matches:\n            p1 = match[PLAYER1]\n            p2 = match[PLAYER2]\n            winner = match[WINNER]\n            date = match[DATE]\n\n            #Add p1 to the dict\n            if p1 not in win_loss_dict:\n                win_loss_dict[p1] = {}\n\n            if p2 not in win_loss_dict[p1]:\n                win_loss_dict[p1][p2] = []\n\n            # Add an entry to represent this match to p1\n            win_loss_dict[p1][p2].append((date, winner == p1))\n\n            # add p2 to the dict\n            if p2 not in win_loss_dict:\n                win_loss_dict[p2] = {}\n\n            if p1 not in win_loss_dict[p2]:\n                win_loss_dict[p2][p1] = []\n\n            win_loss_dict[p2][p1].append((date, winner == p2))\n\n        ranks = get_ranks(win_loss_dict)\n\n        tag_rank_map = {}\n        for i, x in enumerate(ranks):\n            points, player = x\n            rank = len(ranks) - i\n\n            sql = \"INSERT INTO ranks (scene, player, rank, points, date) VALUES ('{scene}', '{player}', '{rank}', '{points}', '{recent_date}');\"\n            args = {'scene': scene, 'player': player, 'rank': rank, 'points': points, 'recent_date': recent_date}\n            self.db.exec(sql, args)\n\n            # Only count this player if this is the scene he/she belongs to\n            sql = \"SELECT scene FROM players WHERE tag='{player}';\"\n            args = {'player': player}\n            res = self.db.exec(sql, args)\n\n            if len(res) == 0 or res[0][0] == scene:\n                # Also create a list to update the player web\n                map = {'rank':rank, 'total_ranked':len(ranks)}\n                tag_rank_map[player] = map\n\n        player_web.update_ranks(tag_rank_map)",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149465,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def analyze_smashgg(self, urls, name):\n        LOG.info('we are about to analyze scene {} with {} brackets'.format(name, len(urls)))\n        for url in urls:\n            # Before we process this URL, check to see if we already have\n            sql = \"SELECT * FROM analyzed where base_url='{}'\".format(url)\n            res = self.db.exec(sql)\n            if len(res) == 0:\n\n                display_name = bracket_utils.get_display_base(url)\n\n                # We don't care about doubles tournaments\n                if 'doubles' in display_name.lower() or 'dubs' in display_name.lower():\n                    LOG.info('We are skipping the tournament {} because it is a doubles tournament'.format(display_name))\n                    continue\n\n                LOG.info('About to process pro bracket {}'.format(url))\n                self.data_processor.process(url, name, display_name)\n            else:\n                LOG.info(\"Skpping pro bracket because it has already been analyzed: {}\".format(url))",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149466,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def analyze_smashgg(self, urls, name):\n        LOG.info('we are about to analyze scene {} with {} brackets'.format(name, len(urls)))\n        for url in urls:\n            # Before we process this URL, check to see if we already have\n            sql = \"SELECT * FROM analyzed where base_url='{url}'\"\n            args = {'url':url}\n            res = self.db.exec(sql, args)\n            if len(res) == 0:\n\n                display_name = bracket_utils.get_display_base(url)\n\n                # We don't care about doubles tournaments\n                if 'doubles' in display_name.lower() or 'dubs' in display_name.lower():\n                    LOG.info('We are skipping the tournament {} because it is a doubles tournament'.format(display_name))\n                    continue\n\n                LOG.info('About to process pro bracket {}'.format(url))\n                self.data_processor.process(url, name, display_name)\n            else:\n                LOG.info(\"Skpping pro bracket because it has already been analyzed: {}\".format(url))",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149467,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@mod.route('/test', methods=['GET', 'POST'])\ndef test():\n    user_id = session['logged_id']\n    sql = 'SELECT * FROM message where user_id = %d ORDER BY c_time DESC' \\\n        % (user_id)\n    cursor.execute(sql)\n    m = cursor.fetchall()\n    print(m)",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149468,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@mod.route('/test', methods=['GET', 'POST'])\ndef test():\n    user_id = session['logged_id']\n    cursor.execute('SELECT * FROM message where user_id = %s ORDER BY c_time DESC', (user_id,))\n    m = cursor.fetchall()\n    print(m)",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149469,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    @staticmethod\n    def get_last_active_users(limit):\n        \"\"\"\n        Get from the database a tuple of users who have been recently using\n        the bot\n        :param limit: integer that specifies how much users to get\n        :return: tuple of tuples with users info\n        \"\"\"\n        log.info('Evaluating last active users with date of '\n                 'last time when they used bot...')\n\n        # From photo_queries_table2 we take chat_id of the last\n        # active users and from 'users' table we take info about these\n        # users by chat_id which is a foreign key\n        query = ('SELECT p.chat_id, u.first_name, u.nickname, u.last_name, '\n                 'u.language '\n                 'FROM photo_queries_table2 p '\n                 'INNER JOIN users u '\n                 'ON p.chat_id = u.chat_id '\n                 'GROUP BY u.chat_id, u.first_name, u.nickname, u.last_name, '\n                 'u.language '\n                 'ORDER BY MAX(time)'\n                 f'DESC LIMIT {limit}')\n\n        try:\n            cursor = db.execute_query(query)\n        except DatabaseConnectionError:\n            log.error(\"Cannot get the last active users because of some \"\n                      \"problems with the database\")\n            raise\n\n        last_active_users = cursor.fetchall()\n        return last_active_users",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149470,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    @staticmethod\n    def get_last_active_users(limit):\n        \"\"\"\n        Get from the database a tuple of users who have been recently using\n        the bot\n        :param limit: integer that specifies how much users to get\n        :return: tuple of tuples with users info\n        \"\"\"\n        log.info('Evaluating last active users with date of '\n                 'last time when they used bot...')\n\n        # From photo_queries_table2 we take chat_id of the last\n        # active users and from 'users' table we take info about these\n        # users by chat_id which is a foreign key\n        query = ('SELECT p.chat_id, u.first_name, u.nickname, u.last_name, '\n                 'u.language '\n                 'FROM photo_queries_table2 p '\n                 'INNER JOIN users u '\n                 'ON p.chat_id = u.chat_id '\n                 'GROUP BY u.chat_id, u.first_name, u.nickname, u.last_name, '\n                 'u.language '\n                 'ORDER BY MAX(time)'\n                 f'DESC LIMIT %s')\n\n        parameters = limit,\n\n        try:\n            cursor = db.execute_query(query, parameters)\n        except DatabaseConnectionError:\n            log.error(\"Cannot get the last active users because of some \"\n                      \"problems with the database\")\n            raise\n\n        last_active_users = cursor.fetchall()\n        return last_active_users",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149471,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def on_save(self):\n        connection = get_connection()\n        cursor = connection.cursor()\n        cursor.execute(\n            f\"insert into visitors (ip_address, user_agent, referrer, full_path, visit_time) values ('{self.ip_address}', '{self.user_agent}', '{self.referrer}', '{self.full_path}', '{self.visit_time}');\")\n        connection.commit()\n        connection.close()\n        return 0",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149472,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def on_save(self):\n        connection = get_connection()\n        cursor = connection.cursor()\n        cursor.execute(\n            \"insert into visitors (ip_address, user_agent, referrer, full_path, visit_time) values (%s, %s, %s, %s, %s);\",\n            (str(self.ip_address), str(self.user_agent), str(self.referrer), str(self.full_path), self.visit_time))\n        connection.commit()\n        connection.close()\n        return 0",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149473,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def update_institutions(conn, sqlite, k10plus, ai):\n    \"\"\"\n    Update the institution table.\n    \"\"\"\n    current_institutions = get_all_current_institutions(k10plus, ai)\n    old_institutions = get_all_old_institutions(conn, sqlite)\n\n    # Check if the institution table is allready filled and this is not the first checkup\n    institution_table_is_filled = len(old_institutions) > 10\n\n    for old_institution in old_institutions:\n        if institution_table_is_filled and old_institution not in current_institutions:\n            message = \"Die ISIL %s ist im aktuellen Import nicht mehr vorhanden.\\nWenn dies beabsichtigt ist, bitte die Institution aus der Datenbank loeschen.\" % old_institution\n            send_message(message)\n\n    for current_institution in current_institutions:\n        if current_institution == \" \" or '\"' in current_institution:\n                continue\n        if current_institution not in old_institutions:\n            message = \"The institution %s is new in Solr.\" % current_institution\n            if institution_table_is_filled:\n                send_message(message)\n            else:\n                logging.info(message)\n            sql = \"INSERT INTO institution (institution) VALUES ('%s')\" % current_institution\n            sqlite.execute(sql)\n            conn.commit()",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149474,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def update_institutions(conn, sqlite, k10plus, ai):\n    \"\"\"\n    Update the institution table.\n    \"\"\"\n    current_institutions = get_all_current_institutions(k10plus, ai)\n    old_institutions = get_all_old_institutions(conn, sqlite)\n\n    # Check if the institution table is allready filled and this is not the first checkup\n    institution_table_is_filled = len(old_institutions) > 10\n\n    for old_institution in old_institutions:\n        if institution_table_is_filled and old_institution not in current_institutions:\n            message = \"Die ISIL %s ist im aktuellen Import nicht mehr vorhanden.\\nWenn dies beabsichtigt ist, bitte die Institution aus der Datenbank loeschen.\" % old_institution\n            send_message(message)\n\n    for current_institution in current_institutions:\n        if current_institution == \" \" or '\"' in current_institution:\n                continue\n        if current_institution not in old_institutions:\n            message = \"The institution %s is new in Solr.\" % current_institution\n            if institution_table_is_filled:\n                send_message(message)\n            else:\n                logging.info(message)\n            sql = \"INSERT INTO institution (institution) VALUES (?)\"\n            sqlite.execute(sql, (current_institution,))\n            conn.commit()",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149475,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    @staticmethod\n    def _add_to_db(user):\n        \"\"\"\n        Adds User object to the database\n        :param user: User object with info about user\n        :return: None\n        \"\"\"\n        query = (\"INSERT INTO users (chat_id, first_name, nickname, \"\n                 \"last_name, language) \"\n                 f\"VALUES ({user.chat_id}, '{user.first_name}', \"\n                 f\"'{user.nickname}', '{user.last_name}', '{user.language}')\")\n        try:\n            db.add(query)\n        except DatabaseError:\n            log.error(\"Cannot add user to the database\")\n        else:\n            log.info(f\"User {user} was successfully added to the users db\")",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149476,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    @staticmethod\n    def _add_to_db(user):\n        \"\"\"\n        Adds User object to the database\n        :param user: User object with info about user\n        :return: None\n        \"\"\"\n        query = (\"INSERT INTO users (chat_id, first_name, nickname, \"\n                 \"last_name, language) \"\n                 f\"VALUES (%s, %s, %s, %s, %s)\")\n\n        parameters = (user.chat_id, user.first_name, user.nickname,\n                      user.last_name, user.language)\n\n        try:\n            db.add(query, parameters)\n        except DatabaseError:\n            log.error(\"Cannot add user to the database\")\n        else:\n            log.info(f\"User {user} was successfully added to the users db\")",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149477,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def deletePost(self,postid):\n        sqlText=\"delete from post where post.postid=%d\"%(postid)\n        result=sql.deleteDB(self.conn,sqlText)\n        return result;",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149478,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def deletePost(self,postid):\n        sqlText=\"delete from post where post.postid=%s\"\n        params=[postid]\n        result=sql.deleteDB(self.conn,sqlText,params)\n        return result;",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149479,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@app.route('/sloka')\ndef sloka():\n\n    sloka_number = request.args.get('sloka_number')\n\n    sloka_number_parts = sloka_number.split('.')\n\n    sloka_number_previous = \"%s.%s.%d\" % (sloka_number_parts[0], sloka_number_parts[1], int(sloka_number_parts[2])-1)\n    sloka_number_next = \"%s.%s.%d\" % (sloka_number_parts[0], sloka_number_parts[1], int(sloka_number_parts[2])+1)\n\n    try:\n        with sql.connect('amara.db') as con:\n            con.row_factory = sql.Row\n            cur = con.cursor()\n            cur.execute(\"select * from mula where sloka_number = '%s' order by sloka_line;\" % sloka_number)\n            mula = cur.fetchall();\n\n            cur.execute(\"select * from pada where sloka_number = '%s' order by id;\" % sloka_number)\n            pada = cur.fetchall();\n\n            varga = \"\"\n            if len(pada) > 0:\n                varga = pada[0][\"varga\"]\n\n            return render_template('sloka.html', mula=mula, pada=pada, varga=varga, sloka_number=sloka_number, sloka_number_previous=sloka_number_previous, sloka_number_next=sloka_number_next)\n    finally:\n        con.close()",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149480,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@app.route('/sloka')\ndef sloka():\n\n    sloka_number = request.args.get('sloka_number')\n\n    sloka_number_parts = sloka_number.split('.')\n\n    sloka_number_previous = \"%s.%s.%d\" % (sloka_number_parts[0], sloka_number_parts[1], int(sloka_number_parts[2])-1)\n    sloka_number_next = \"%s.%s.%d\" % (sloka_number_parts[0], sloka_number_parts[1], int(sloka_number_parts[2])+1)\n\n    try:\n        with sql.connect('amara.db') as con:\n            con.row_factory = sql.Row\n            cur = con.cursor()\n            cur.execute(\"select * from mula where sloka_number = ? order by sloka_line;\", [sloka_number])\n            mula = cur.fetchall();\n\n            cur.execute(\"select * from pada where sloka_number = ? order by id;\", [sloka_number])\n            pada = cur.fetchall();\n\n            varga = \"\"\n            if len(pada) > 0:\n                varga = pada[0][\"varga\"]\n\n            return render_template('sloka.html', mula=mula, pada=pada, varga=varga, sloka_number=sloka_number, sloka_number_previous=sloka_number_previous, sloka_number_next=sloka_number_next)\n    finally:\n        con.close()",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149481,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "  def update_title(self, title = None):\n    if (not self.title):\n      self.title = title\n\n    # This will fall to a sql injection \n    sql = \"UPDATE jdk_entries SET title = '\" + self.title + \"'\" + \\\n          \"WHERE jdk_entries.id = '\" + self.entry_id + \"';\" \n\n    db_execute(sql)\n    \n    self.update_date_modified()\n\n    return None",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149482,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "  def update_title(self, title = None):\n    if (not self.title):\n      self.title = title\n\n    quote_tuple = self.title, self.entry_id\n\n    # This will fall to a sql injection \n    sql = \"UPDATE jdk_entries SET title = ?\" + \\\n          \"WHERE jdk_entries.id = ?;\" \n\n    db_execute(sql, quote_tuple)\n    \n    self.update_date_modified()\n\n    return None",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149483,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def add_language(self, language):\n        \"\"\"\"Add new language for item translations.\"\"\"\n        if self.connection:\n            self.cursor.execute('insert into itemlanguage (language) values (\"%s\")' % language[0])\n            self.connection.commit()",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149484,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def add_language(self, language):\n        \"\"\"\"Add new language for item translations.\"\"\"\n        if self.connection:\n            t = (language[0], )\n            self.cursor.execute('insert into itemlanguage (language) values (?)', t)\n            self.connection.commit()",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149485,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def likeComments(self,commentid,userid):\n        sqlText=\"insert into comment_like values(%d,%d);\"%(userid,commentid)\n        result=sql.insertDB(self.conn,sqlText)\n        return result;",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149522,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def likeComments(self,commentid,userid):\n        sqlText=\"insert into comment_like values(%s,%s);\"\n        params=[userid,commentid]\n        result=sql.insertDB(self.conn,sqlText,params)\n        return result;",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149523,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def add_inverters(self):\n        interfaces = self.config.get_connection_interfaces()\n        for source in interfaces:\n            if source[\"type\"] == \"inverter\":\n\n                query = '''\n                    INSERT OR IGNORE INTO Inverters (\n                        Serial,\n                        EToday,\n                        ETotal\n                    ) VALUES (\n                        %s,\n                        %s,\n                        %s\n                    );\n                ''' % (source[\"serial_id\"], 0, source[\"prev_etotal\"])\n                self.c.execute(query)\n\n                query = '''\n                    UPDATE Inverters\n                    SET     \n                        Name='%s', \n                        Type='%s', \n                        SW_Version='%s', \n                        Status='%s',\n                        TimeStamp='%s'\n                    WHERE Serial='%s';\n                ''' % (source[\"name\"], source[\"inverter_type\"], \"s0-bridge v0\", \"OK\", int(datetime.now().timestamp()), source[\"serial_id\"] )\n                self.c.execute(query)\n\n                self.db.commit()",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149524,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def add_inverters(self):\n        interfaces = self.config.get_connection_interfaces()\n        for source in interfaces:\n            if source[\"type\"] == \"inverter\":\n\n                query = '''\n                    INSERT OR IGNORE INTO Inverters (\n                        Serial,\n                        EToday,\n                        ETotal\n                    ) VALUES (\n                        ?,\n                        ?,\n                        ?\n                    );\n                '''\n                self.c.execute(query, (source[\"serial_id\"], 0, source[\"prev_etotal\"]))\n\n                query = '''\n                    UPDATE Inverters\n                    SET     \n                        Name=?, \n                        Type=?, \n                        SW_Version=?, \n                        Status=?,\n                        TimeStamp=?\n                    WHERE Serial=?;\n                '''\n                self.c.execute(query, (source[\"name\"], source[\"inverter_type\"], \"s0-bridge v0\", \"OK\", int(datetime.now().timestamp()), source[\"serial_id\"] ))\n\n                self.db.commit()",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149525,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@mod.route('/delete/<int:msg_id>', methods=['GET', 'POST'])\ndef delete(msg_id):\n    if request.method == 'GET':\n        sql = \"DELETE FROM message where msg_id = '%d';\" % (msg_id)\n        cursor.execute(sql)\n        conn.commit()\n        flash('Delete Success!')\n    return redirect(url_for('show_entries'))",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149526,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@mod.route('/delete/<int:msg_id>', methods=['GET', 'POST'])\ndef delete(msg_id):\n    if request.method == 'GET':\n        cursor.execute(\"DELETE FROM message where msg_id = %s;\", (msg_id,))\n        conn.commit()\n        flash('Delete Success!')\n    return redirect(url_for('show_entries'))",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149527,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def karma_rank(name):\n    db = db_connect()\n    cursor = db.cursor()\n    try:\n        cursor.execute('''\n            SELECT (SELECT COUNT(*) FROM people AS t2 WHERE t2.karma > t1.karma)\n            AS row_Num FROM people AS t1 WHERE name='{}'\n        '''.format(name))\n        rank = cursor.fetchone()[0] + 1\n        logger.debug('Rank of {} found for name {}'.format(rank, name))\n        db.close()\n        return rank\n    except Exception as e:\n        logger.error('Execution failed with error: {}'.format(e))\n        raise",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149528,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def karma_rank(name):\n    db = db_connect()\n    cursor = db.cursor()\n    try:\n        cursor.execute('''\n            SELECT (SELECT COUNT(*) FROM people AS t2 WHERE t2.karma > t1.karma)\n            AS row_Num FROM people AS t1 WHERE name=%(name)s\n        ''', (name, ))\n        rank = cursor.fetchone()[0] + 1\n        logger.debug('Rank of {} found for name {}'.format(rank, name))\n        db.close()\n        return rank\n    except Exception as e:\n        logger.error('Execution failed with error: {}'.format(e))\n        raise",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149529,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def get_last_month(db, scene):\n    sql = \"select date from matches where scene='{}' order by date desc limit 1;\".format(scene)\n    res = db.exec(sql)\n    date = res[0][0]\n\n    # If it has been more than 1 month since this last tournament,\n    # go ahead and round this date up by a 1 month\n    # eg, if the last tournament was 2015-01-15 (a long time ago)\n    # we can assume the scene won't have more tournaments\n    # So just round to 2015-02-01\n    today = datetime.datetime.today().strftime('%Y-%m-%d')\n    y, m, d = today.split('-')\n    cy, cm, cd = date.split('-')\n    if y > cy or m > cm:\n        # Add 1 to the month before we return\n        # eg 2018-03-01 -> 2018-04-01\n        date = get_next_month(date)\n\n    return date",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149530,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def get_last_month(db, scene):\n    sql = \"select date from matches where scene='{scene}' order by date desc limit 1;\"\n    args = {'scene': scene}\n    res = db.exec(sql, args)\n    date = res[0][0]\n\n    # If it has been more than 1 month since this last tournament,\n    # go ahead and round this date up by a 1 month\n    # eg, if the last tournament was 2015-01-15 (a long time ago)\n    # we can assume the scene won't have more tournaments\n    # So just round to 2015-02-01\n    today = datetime.datetime.today().strftime('%Y-%m-%d')\n    y, m, d = today.split('-')\n    cy, cm, cd = date.split('-')\n    if y > cy or m > cm:\n        # Add 1 to the month before we return\n        # eg 2018-03-01 -> 2018-04-01\n        date = get_next_month(date)\n\n    return date",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149531,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@app.route('/players/<int:player_id>/achievements')\ndef achievements_list_player(player_id):\n    \"\"\"Lists the progress of achievements for a player.\n\n    :param player_id: ID of the player.\n\n    :return:\n        If successful, this method returns a response body with the following structure::\n\n            {\n              \"items\": [\n                {\n                  \"achievement_id\": string,\n                  \"state\": string,\n                  \"current_steps\": integer,\n                  \"create_time\": long,\n                  \"update_time\": long\n                }\n              ]\n            }\n    \"\"\"\n    with db.connection:\n        cursor = db.connection.cursor(db.pymysql.cursors.DictCursor)\n        cursor.execute(\"\"\"SELECT\n                            achievement_id,\n                            current_steps,\n                            state,\n                            UNIX_TIMESTAMP(create_time) as create_time,\n                            UNIX_TIMESTAMP(update_time) as update_time\n                        FROM player_achievements\n                        WHERE player_id = '%s'\"\"\" % player_id)\n\n        return flask.jsonify(items=cursor.fetchall())",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149532,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@app.route('/players/<int:player_id>/achievements')\ndef achievements_list_player(player_id):\n    \"\"\"Lists the progress of achievements for a player.\n\n    :param player_id: ID of the player.\n\n    :return:\n        If successful, this method returns a response body with the following structure::\n\n            {\n              \"items\": [\n                {\n                  \"achievement_id\": string,\n                  \"state\": string,\n                  \"current_steps\": integer,\n                  \"create_time\": long,\n                  \"update_time\": long\n                }\n              ]\n            }\n    \"\"\"\n    with db.connection:\n        cursor = db.connection.cursor(db.pymysql.cursors.DictCursor)\n        cursor.execute(\"\"\"SELECT\n                            achievement_id,\n                            current_steps,\n                            state,\n                            UNIX_TIMESTAMP(create_time) as create_time,\n                            UNIX_TIMESTAMP(update_time) as update_time\n                        FROM player_achievements\n                        WHERE player_id = %s\"\"\", player_id)\n\n        return flask.jsonify(items=cursor.fetchall())",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149533,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def check_if_this_project_is_in_database(self, project_id):\n        self.cursor.execute(\"SELECT count(id) FROM projects where id = %s\" % project_id)\n        return self.cursor.fetchall()[0][0] == 1",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149534,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def check_if_this_project_is_in_database(self, project_id):\n        self.cursor.execute(\"SELECT count(id) FROM projects where id = %s\", (project_id,))\n        return self.cursor.fetchall()[0][0] == 1",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149535,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@app.route(\"/<page_name>/edit\")\ndef edit_page(page_name):\n    query = db.query(\"select * from page where title = '%s'\" % page_name).namedresult()\n    if len(query) == 0:\n        return render_template(\n            \"edit.html\",\n            page_name=page_name,\n            query=query\n        )\n    else:\n        return render_template(\n            \"edit.html\",\n            page_name=page_name,\n            query=query[0]\n        )",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149536,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "@app.route(\"/<page_name>/edit\")\ndef edit_page(page_name):\n    query = db.query(\"select * from page where title = $1\", page_name).namedresult()\n    if len(query) == 0:\n        return render_template(\n            \"edit.html\",\n            page_name=page_name,\n            query=query\n        )\n    else:\n        return render_template(\n            \"edit.html\",\n            page_name=page_name,\n            query=query[0]\n        )",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149537,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def reportMatch(winner, loser):\n    \"\"\"Records the outcome of a single match between two players.\n\n    Args:\n      winner:  the id number of the player who won\n      loser:  the id number of the player who lost\n    \"\"\"\n    conn = connect()\n    cursor = conn.cursor()\n    cursor.execute(\"INSERT INTO playsRecord (winner, loser) VALUES ('%s', '%s')\" % (winner, loser));\n    conn.commit()\n    conn.close()",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149538,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def reportMatch(winner, loser):\n    \"\"\"Records the outcome of a single match between two players.\n\n    Args:\n      winner:  the id number of the player who won\n      loser:  the id number of the player who lost\n    \"\"\"\n    conn = connect()\n    cursor = conn.cursor()\n    query = \"INSERT INTO playsRecord (winner, loser) VALUES (%s, %s);\"\n    cursor.execute(query, (winner, loser));\n    conn.commit()\n    conn.close()",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149539,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def get_game_info(conn, game):\n    # get the basic game properties\n    cursor = conn.cursor()\n    cursor.execute(\"SELECT player1,player2,size,state FROM games WHERE id = %d;\" % game)\n    if cursor.rowcount != 1:\n        raise FormError(\"Invalid game ID\")\n\n    row = cursor.fetchall()[0]\n    players = [row[0],row[1]]\n    size    =  row[2]\n    state   =  row[3]\n\n    if state is None:\n         state = \"Active\"\n\n    cursor.close()\n\n    return (players,size,state)",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149540,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def get_game_info(conn, game):\n    # get the basic game properties\n    cursor = conn.cursor()\n    cursor.execute(\"SELECT player1,player2,size,state FROM games WHERE id = %d;\", (game,))\n    if cursor.rowcount != 1:\n        raise FormError(\"Invalid game ID\")\n\n    row = cursor.fetchall()[0]\n    players = [row[0],row[1]]\n    size    =  row[2]\n    state   =  row[3]\n\n    if state is None:\n         state = \"Active\"\n\n    cursor.close()\n\n    return (players,size,state)",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149541,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def process_as_reply(email_obj):\n    job_number = email_obj['subject'].split(': #')[1]\n    feedback = re.findall(\"^[\\W]*([Oo\\d]){1}(?=[\\W]*)\", email_obj['content'].replace('#','').replace('link', ''))[0]\n    feedback = int(0 if feedback == ('O' or 'o') else feedback)\n    dcn_key = re.findall('\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}', email_obj['content'])[0]\n    logger.info(f\"got feedback `{feedback}` for job #`{job_number}`\")\n    with create_connection() as conn:\n        was_prev_closed = pd.read_sql(f\"SELECT * FROM df_dilfo WHERE job_number={job_number}\", conn).iloc[0].closed\n    if was_prev_closed:\n        logger.info(f\"job was already matched successfully and logged as `closed`... skipping.\")\n        return\n    if feedback == 1:\n        logger.info(f\"got feeback that DCN key {dcn_key} was correct\")\n        update_status_query = \"UPDATE df_dilfo SET closed = 1 WHERE job_number = {}\"\n        with create_connection() as conn:\n            conn.cursor().execute(update_status_query.format(job_number))\n        logger.info(f\"updated df_dilfo to show `closed` status for job #{job_number}\")\n    with create_connection() as conn:\n        df = pd.read_sql(\"SELECT * FROM df_matched\", conn)\n        match_dict_input = {\n            'job_number': job_number,\n            'dcn_key': dcn_key,\n            'ground_truth': 1 if feedback == 1 else 0,\n            'multi_phase': 1 if feedback == 2 else 0,\n            'verifier': email_obj[\"sender\"],\n            'source': 'feedback',\n            'log_date': str(datetime.datetime.now().date()),\n            'validate': 0,\n        }\n        df = df.append(match_dict_input, ignore_index=True)\n        df = df.drop_duplicates(subset=[\"job_number\", \"dcn_key\"], keep='last')\n        df.to_sql('df_matched', conn, if_exists='replace', index=False)\n        logger.info(\n            f\"DCN key `{dcn_key}` was a \"\n            f\"{'successful match' if feedback == 1 else 'mis-match'} for job \"\n            f\"#{job_number}\"\n        )",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149542,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def process_as_reply(email_obj):\n    job_number = email_obj['subject'].split(': #')[1]\n    feedback = re.findall(\"^[\\W]*([Oo\\d]){1}(?=[\\W]*)\", email_obj['content'].replace('#','').replace('link', ''))[0]\n    feedback = int(0 if feedback == ('O' or 'o') else feedback)\n    dcn_key = re.findall('\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}', email_obj['content'])[0]\n    logger.info(f\"got feedback `{feedback}` for job #`{job_number}`\")\n    with create_connection() as conn:\n        was_prev_closed = pd.read_sql(\"SELECT * FROM df_dilfo WHERE job_number=?\", conn, params=[job_number]).iloc[0].closed\n    if was_prev_closed:\n        logger.info(f\"job was already matched successfully and logged as `closed`... skipping.\")\n        return\n    if feedback == 1:\n        logger.info(f\"got feeback that DCN key {dcn_key} was correct\")\n        update_status_query = \"UPDATE df_dilfo SET closed = 1 WHERE job_number = ?\"\n        with create_connection() as conn:\n            conn.cursor().execute(update_status_query, [job_number])\n        logger.info(f\"updated df_dilfo to show `closed` status for job #{job_number}\")\n    with create_connection() as conn:\n        df = pd.read_sql(\"SELECT * FROM df_matched\", conn)\n        match_dict_input = {\n            'job_number': job_number,\n            'dcn_key': dcn_key,\n            'ground_truth': 1 if feedback == 1 else 0,\n            'multi_phase': 1 if feedback == 2 else 0,\n            'verifier': email_obj[\"sender\"],\n            'source': 'feedback',\n            'log_date': str(datetime.datetime.now().date()),\n            'validate': 0,\n        }\n        df = df.append(match_dict_input, ignore_index=True)\n        df = df.drop_duplicates(subset=[\"job_number\", \"dcn_key\"], keep='last')\n        df.to_sql('df_matched', conn, if_exists='replace', index=False)\n        logger.info(\n            f\"DCN key `{dcn_key}` was a \"\n            f\"{'successful match' if feedback == 1 else 'mis-match'} for job \"\n            f\"#{job_number}\"\n        )",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149543,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def update_playlist(id, name, db):\n    db.execute(\n        \"UPDATE playlist SET name='{name}' WHERE id={id};\".format(name=name, id=id))",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149544,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def update_playlist(id, name, db):\n    db.execute(\"UPDATE playlist SET name=%s WHERE id=%s;\", (name, id,))",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149545,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def get_requested_month(self, date):\n        data = dict()\n\n        month_start, month_end = self.get_epoch_month(date)\n        data['interval'] = {'from': self.convert_local_ts_to_utc(month_start, self.local_timezone), 'to': self.convert_local_ts_to_utc(month_end, self.local_timezone)}\n        month_total = 0\n\n        query = '''\n            SELECT TimeStamp, SUM(DayYield) AS Power \n            FROM MonthData \n            WHERE TimeStamp BETWEEN %s AND %s\n            GROUP BY TimeStamp\n            '''\n\n        data['data'] = list()\n        for row in self.c.execute(query % (month_start, month_end)):\n            data['data'].append({'time': self.convert_local_ts_to_utc(row[0], self.local_timezone), 'power': row[1]})\n            month_total += row[1]\n\n        data['total'] = month_total\n\n        query = '''\n            SELECT MIN(TimeStamp) as Min, MAX(TimeStamp) as Max \n            FROM ( SELECT TimeStamp FROM MonthData GROUP BY TimeStamp );\n            '''\n\n        self.c.execute(query)\n        first_data, last_data = self.c.fetchone()\n\n        if first_data: data['hasPrevious'] = (first_data < month_start)\n        else: data['hasPrevious'] = False\n        if last_data: data['hasNext'] = (last_data > month_end)\n        else: data['hasNext'] = False\n\n        return data",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149546,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    def get_requested_month(self, date):\n        data = dict()\n\n        month_start, month_end = self.get_epoch_month(date)\n        data['interval'] = {'from': self.convert_local_ts_to_utc(month_start, self.local_timezone), 'to': self.convert_local_ts_to_utc(month_end, self.local_timezone)}\n        month_total = 0\n\n        query = '''\n            SELECT TimeStamp, SUM(DayYield) AS Power \n            FROM MonthData \n            WHERE TimeStamp BETWEEN ? AND ?\n            GROUP BY TimeStamp;\n            '''\n\n        data['data'] = list()\n        for row in self.c.execute(query, (month_start, month_end)):\n            data['data'].append({'time': self.convert_local_ts_to_utc(row[0], self.local_timezone), 'power': row[1]})\n            month_total += row[1]\n\n        data['total'] = month_total\n\n        query = '''\n            SELECT MIN(TimeStamp) as Min, MAX(TimeStamp) as Max \n            FROM ( SELECT TimeStamp FROM MonthData GROUP BY TimeStamp );\n            '''\n\n        self.c.execute(query)\n        first_data, last_data = self.c.fetchone()\n\n        if first_data: data['hasPrevious'] = (first_data < month_start)\n        else: data['hasPrevious'] = False\n        if last_data: data['hasNext'] = (last_data > month_end)\n        else: data['hasNext'] = False\n\n        return data",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149547,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def retrieve_videos_from_playlist(playlist_id, db):\n    db.execute(\"SELECT id, title, thumbnail, position from video WHERE playlist_id={playlist_id} ORDER BY position ASC;\".format(\n        playlist_id=playlist_id))\n    rows = db.fetchall()\n    return rows",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149548,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def retrieve_videos_from_playlist(playlist_id, db):\n    db.execute(\"SELECT id, title, thumbnail, position from video WHERE playlist_id=%s ORDER BY position ASC;\", (playlist_id,))\n    rows = db.fetchall()\n    return rows",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149549,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def create_playlist(name):\n    db = connect_to_database()\n    cursor = db.cursor()\n    cursor.execute(\n        \"INSERT INTO playlist (name, video_position) VALUES('{name}', 0);\".format(name=name))\n    db.commit()\n    db.close()",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149550,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def create_playlist(name):\n    db = connect_to_database()\n    cursor = db.cursor()\n    cursor.execute(\n        \"INSERT INTO playlist (name, video_position) VALUES(%s, 0);\", (name,))\n    db.commit()\n    db.close()",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149551,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def update_video_positions(removed_position, db):\n    db.execute(\"UPDATE video SET position = position - 1 WHERE position > {removed_position}\".format(\n        removed_position=removed_position))",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149552,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def update_video_positions(removed_position, db):\n    db.execute(\"UPDATE video SET position = position - 1 WHERE position > %s\", (removed_position,))",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149553,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    @staticmethod\n    def _check_camera_tags(tags):\n        \"\"\"\n        Function that convert stupid code name of a smartphone or camera\n        from EXIF to meaningful one by looking a collation in a special MySQL\n        table For example instead of just Nikon there can be\n        NIKON CORPORATION in EXIF\n\n        :param tags: name of a camera and lens from EXIF\n        :return: list with one or two strings which are name of\n        camera and/or lens. If there is not better name for the gadget\n        in database, function just returns name how it is\n        \"\"\"\n        checked_tags = []\n\n        for tag in tags:\n            if tag:  # If there was this information inside EXIF of the photo\n                tag = str(tag).strip()\n                log.info('Looking up collation for %s', tag)\n                query = ('SELECT right_tag '\n                         'FROM tag_table '\n                         'WHERE wrong_tag=\"{}\"'.format(tag))\n                cursor = db.execute_query(query)\n                if not cursor:\n                    log.error(\"Can't check the tag because of the db error\")\n                    log.warning(\"Tag will stay as is.\")\n                    continue\n                if cursor.rowcount:\n                    # Get appropriate tag from the table\n                    tag = cursor.fetchone()[0]\n                    log.info('Tag after looking up in tag_tables - %s.', tag)\n\n            checked_tags.append(tag)\n        return checked_tags",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149554,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "    @staticmethod\n    def _check_camera_tags(tags):\n        \"\"\"\n        Function that convert stupid code name of a smartphone or camera\n        from EXIF to meaningful one by looking a collation in a special MySQL\n        table For example instead of just Nikon there can be\n        NIKON CORPORATION in EXIF\n\n        :param tags: name of a camera and lens from EXIF\n        :return: list with one or two strings which are name of\n        camera and/or lens. If there is not better name for the gadget\n        in database, function just returns name how it is\n        \"\"\"\n        checked_tags = []\n\n        for tag in tags:\n            if tag:  # If there was this information inside EXIF of the photo\n                tag = str(tag).strip()\n                log.info('Looking up collation for %s', tag)\n                query = ('SELECT right_tag '\n                         'FROM tag_table '\n                         'WHERE wrong_tag=%s')\n                parameters = tag,\n                cursor = db.execute_query(query, parameters)\n                if not cursor:\n                    log.error(\"Can't check the tag because of the db error\")\n                    log.warning(\"Tag will stay as is.\")\n                    continue\n                if cursor.rowcount:\n                    # Get appropriate tag from the table\n                    tag = cursor.fetchone()[0]\n                    log.info('Tag after looking up in tag_tables - %s.', tag)\n\n            checked_tags.append(tag)\n        return checked_tags",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149555,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\tdef add_input(self, data):\n\t\tconnection = self.connect()\n\t\ttry:\n\t\t\t# The following introduces a deliberate security flaw.See section on SQL injection below\n\t\t\tquery = \"INSERT INTO crimes (description) VALUES('{}');\".format(data)\n\t\t\twith connection.cursor() as cursor:\n\t\t\t\tcursor.execute(query)\n\t\t\t\tconnection.commit()\n\t\tfinally:\n\t\t\tconnection.close()",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149556,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "\tdef add_input(self, data):\n\t\tconnection = self.connect()\n\t\ttry:\n\t\t\t# The following introduces a deliberate security flaw.See section on SQL injection below\n\t\t\tquery = \"INSERT INTO crimes (description) VALUES (%s);\"\n\t\t\twith connection.cursor() as cursor:\n\t\t\t\tcursor.execute(query, data)\n\t\t\t\tconnection.commit()\n\t\tfinally:\n\t\t\tconnection.close()",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149557,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def getResults(poll_name):\n    conn, c = connectDB()\n    req = \"SELECT options from {} where name = '{}'\".format(CFG(\"poll_table_name\"), poll_name)\n    options_str = queryOne(c, req)\n\n    if not options_str:\n        raise LookupError(\"Poll '{}' not found in DB\".format(poll_name))\n\n    total = 0\n    options = options_str.split(\",\")\n    results = dict()\n    for opt in options:\n        count = getOptionCount(c, poll_name, opt)\n        total += int(count)\n        results.update({opt:count})\n\n    conn.close()\n    return (results, total)",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149558,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def getResults(poll_name):\n    conn, c = connectDB()\n    req = \"SELECT options from {} where name=?\".format(CFG(\"poll_table_name\"))\n    options_str = queryOne(c, req, (poll_name,))\n\n    if not options_str:\n        raise LookupError(\"Poll '{}' not found in DB\".format(poll_name))\n\n    total = 0\n    options = options_str.split(\",\")\n    results = dict()\n    for opt in options:\n        count = getOptionCount(c, poll_name, opt)\n        total += int(count)\n        results.update({opt:count})\n\n    conn.close()\n    return (results, total)",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149559,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def update_sources(conn, sqlite, k10plus, ai):\n    \"\"\"\n    Update the source table.\n    \"\"\"\n    current_sources = get_all_current_sources(k10plus, ai)\n    old_sources = get_all_old_sources(conn, sqlite)\n\n    # Check if the source table is allready filled and this is not the first checkup\n    source_table_is_filled = len(old_sources) > 100\n\n    for old_source in old_sources:\n        if source_table_is_filled and old_source not in current_sources:\n            message = \"Die SID %s ist im aktuellen Import nicht mehr vorhanden.\\nWenn dies beabsichtigt ist, bitte die SID aus der Datenbank loeschen.\" % old_source\n            send_message(message)\n\n    for current_source in current_sources:\n        if current_source not in old_sources:\n            message = \"The source %s is new in Solr.\" % current_source\n            if source_table_is_filled:\n                send_message(message)\n            else:\n                logging.info(message)\n            sql = \"INSERT INTO source (source) VALUES (%s)\" % current_source\n            sqlite.execute(sql)\n            conn.commit()",
    "target": 1,
    "language": "python",
    "dataset": "sven",
    "idx": 149560,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  },
  {
    "CWE_ID": [
      "CWE-89"
    ],
    "code": "def update_sources(conn, sqlite, k10plus, ai):\n    \"\"\"\n    Update the source table.\n    \"\"\"\n    current_sources = get_all_current_sources(k10plus, ai)\n    old_sources = get_all_old_sources(conn, sqlite)\n\n    # Check if the source table is allready filled and this is not the first checkup\n    source_table_is_filled = len(old_sources) > 100\n\n    for old_source in old_sources:\n        if source_table_is_filled and old_source not in current_sources:\n            message = \"Die SID %s ist im aktuellen Import nicht mehr vorhanden.\\nWenn dies beabsichtigt ist, bitte die SID aus der Datenbank loeschen.\" % old_source\n            send_message(message)\n\n    for current_source in current_sources:\n        if current_source not in old_sources:\n            message = \"The source %s is new in Solr.\" % current_source\n            if source_table_is_filled:\n                send_message(message)\n            else:\n                logging.info(message)\n            sql = \"INSERT INTO source (source) VALUES (?)\"\n            sqlite.execute(sql, (current_source,))\n            conn.commit()",
    "target": 0,
    "language": "python",
    "dataset": "sven",
    "idx": 149561,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-91",
      "CWE-78"
    ]
  }
]