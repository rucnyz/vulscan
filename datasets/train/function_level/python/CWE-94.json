[
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef run_python_snippet(python_snippet: str):\n    exec(python_snippet)\n    return None",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152658,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ],
    "human": "Correct"
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef run_python_snippet(python_snippet: str):\n    try:\n        parsed_snippet = ast.parse(python_snippet, mode='exec')\n        for node in ast.walk(parsed_snippet):\n            if isinstance(node, (ast.Import, ast.ImportFrom, ast.FunctionDef, ast.Call)):\n                raise ValueError(\"Disallowed operation in code snippet\")\n        exec(compile(parsed_snippet, filename=\"<ast>\", mode='exec'))\n    except Exception as e:\n        raise ValueError(f\"Invalid or dangerous code: {str(e)}\")\n    return None",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152659,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ],
    "human": "Correct"
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef run_code_snippet(user_code: str):\n    exec(user_code)\n    return None",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152660,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef run_code_snippet(user_code: str):\n    try:\n        parsed_code = ast.parse(user_code, mode='exec')\n        for node in ast.walk(parsed_code):\n            if isinstance(node, (ast.Import, ast.ImportFrom, ast.FunctionDef, ast.Call)):\n                raise ValueError(\"Disallowed operation in code snippet\")\n        exec(compile(parsed_code, filename=\"<ast>\", mode='exec'))\n    except Exception as e:\n        raise ValueError(f\"Invalid or dangerous code: {str(e)}\")\n    return None",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152661,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef safe_execute_code(snippet: str):\n    exec(snippet)\n    return None",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152662,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef safe_execute_code(snippet: str):\n    try:\n        parsed_code = ast.parse(snippet, mode='exec')\n        for node in ast.walk(parsed_code):\n            if isinstance(node, (ast.Import, ast.ImportFrom, ast.FunctionDef, ast.Call)):\n                raise ValueError(\"Disallowed operation in code snippet\")\n        exec(compile(parsed_code, filename=\"<ast>\", mode='exec'))\n    except Exception as e:\n        raise ValueError(f\"Invalid or dangerous code: {str(e)}\")\n    return None",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152663,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef execute_python_code(snippet_code: str):\n    exec(snippet_code)\n    return None",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152664,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef execute_python_code(snippet_code: str):\n    try:\n        parsed_code = ast.parse(snippet_code, mode='exec')\n        for node in ast.walk(parsed_code):\n            if isinstance(node, (ast.Import, ast.ImportFrom, ast.FunctionDef, ast.Call)):\n                raise ValueError(\"Disallowed operation in code snippet\")\n        exec(compile(parsed_code, filename=\"<ast>\", mode='exec'))\n    except Exception as e:\n        raise ValueError(f\"Invalid or dangerous code: {str(e)}\")\n    return None",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152665,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef run_python_snippet(snippet_string: str):\n    exec(snippet_string)\n    return None",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152666,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef run_python_snippet(snippet_string: str):\n    try:\n        parsed_code = ast.parse(snippet_string, mode='exec')\n        for node in ast.walk(parsed_code):\n            if isinstance(node, (ast.Import, ast.ImportFrom, ast.FunctionDef, ast.Call)):\n                raise ValueError(\"Disallowed operation in code snippet\")\n        exec(compile(parsed_code, filename=\"<ast>\", mode='exec'))\n    except Exception as e:\n        raise ValueError(f\"Invalid or dangerous code: {str(e)}\")\n    return None",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152667,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef process_python_code(code_str: str):\n    exec(code_str)\n    return None",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152668,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef process_python_code(code_str: str):\n    try:\n        parsed_code = ast.parse(code_str, mode='exec')\n        for node in ast.walk(parsed_code):\n            if isinstance(node, (ast.Import, ast.ImportFrom, ast.FunctionDef, ast.Call)):\n                raise ValueError(\"Disallowed operation in code snippet\")\n        exec(compile(parsed_code, filename=\"<ast>\", mode='exec'))\n    except Exception as e:\n        raise ValueError(f\"Invalid or dangerous code: {str(e)}\")\n    return None",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152669,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef run_code_snippet(snippet: str):\n    exec(snippet)\n    return None",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152670,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef run_code_snippet(snippet: str):\n    try:\n        parsed_code = ast.parse(snippet, mode='exec')\n        for node in ast.walk(parsed_code):\n            if isinstance(node, (ast.Import, ast.ImportFrom, ast.FunctionDef, ast.Call)):\n                raise ValueError(\"Disallowed operation in code snippet\")\n        exec(compile(parsed_code, filename=\"<ast>\", mode='exec'))\n    except Exception as e:\n        raise ValueError(f\"Invalid or dangerous code: {str(e)}\")\n    return None",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152671,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef evaluate_code_string(code_string: str):\n    exec(code_string)\n    return None",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152672,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef evaluate_code_string(code_string: str):\n    try:\n        parsed_code = ast.parse(code_string, mode='exec')\n        for node in ast.walk(parsed_code):\n            if isinstance(node, (ast.Import, ast.ImportFrom, ast.FunctionDef, ast.Call)):\n                raise ValueError(\"Disallowed operation in code string\")\n        exec(compile(parsed_code, filename=\"<ast>\", mode='exec'))\n    except Exception as e:\n        raise ValueError(f\"Invalid or dangerous code: {str(e)}\")\n    return None",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152673,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef process_code_input(code_input: str):\n    exec(code_input)\n    return None",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152674,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef process_code_input(code_input: str):\n    try:\n        parsed_code = ast.parse(code_input, mode='exec')\n        for node in ast.walk(parsed_code):\n            if isinstance(node, (ast.Import, ast.ImportFrom, ast.FunctionDef, ast.Call)):\n                raise ValueError(\"Disallowed operation in code input\")\n        exec(compile(parsed_code, filename=\"<ast>\", mode='exec'))\n    except Exception as e:\n        raise ValueError(f\"Invalid or dangerous code: {str(e)}\")\n    return None",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152675,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import re\ndef handle_user_expression(expression: str):\n    result = eval(expression)\n    return result",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152676,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ],
    "human": "Correct"
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import re\ndef handle_user_expression(expression: str):\n    if re.match(\"^[0-9+\\-*/\\s]+$\", expression):\n        try:\n            result = eval(expression)\n        except Exception as e:\n            raise ValueError(f\"Error processing expression: {str(e)}\")\n    else:\n        raise ValueError(\"Invalid expression\")\n    return result",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152677,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ],
    "human": "Correct"
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import re\ndef calculate_from_input(user_input: str):\n    result = eval(user_input)\n    return result",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152678,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import re\ndef calculate_from_input(user_input: str):\n    if re.match(\"^[0-9+\\-*/\\s]+$\", user_input):\n        try:\n            result = eval(user_input)\n        except Exception as e:\n            raise ValueError(f\"Error processing user_input: {str(e)}\")\n    else:\n        raise ValueError(\"Invalid user_input\")\n    return result",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152679,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import re\ndef evaluate_user_math(math_expression: str):\n    result = eval(math_expression)\n    return result",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152680,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import re\ndef evaluate_user_math(math_expression: str):\n    if re.match(\"^[0-9+\\-*/\\s]+$\", math_expression):\n        try:\n            result = eval(math_expression)\n        except Exception as e:\n            raise ValueError(f\"Error processing math_expression: {str(e)}\")\n    else:\n        raise ValueError(\"Invalid math_expression\")\n    return result",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152681,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import re\ndef evaluate_user_expression(expression: str):\n    result = eval(expression)\n    return result",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152682,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import re\ndef evaluate_user_expression(expression: str):\n    if re.match(\"^[0-9+\\-*/\\s]+$\", expression):\n        try:\n            result = eval(expression)\n        except Exception as e:\n            raise ValueError(f\"Error processing expression: {str(e)}\")\n    else:\n        raise ValueError(\"Invalid expression\")\n    return result",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152683,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import re\ndef safe_eval_expression(expr: str):\n    result = eval(expr)\n    return result",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152684,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import re\ndef safe_eval_expression(expr: str):\n    if re.match(\"^[0-9+\\-*/\\s]+$\", expr):\n        try:\n            result = eval(expr)\n        except Exception as e:\n            raise ValueError(f\"Error processing expression: {str(e)}\")\n    else:\n        raise ValueError(\"Invalid expression\")\n    return result",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152685,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import re\ndef calculate_user_input(user_input: str):\n    result = eval(user_input)\n    return result",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152686,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import re\ndef calculate_user_input(user_input: str):\n    if re.match(\"^[0-9+\\-*/\\s]+$\", user_input):\n        try:\n            result = eval(user_input)\n        except Exception as e:\n            raise ValueError(f\"Error processing input: {str(e)}\")\n    else:\n        raise ValueError(\"Invalid input\")\n    return result",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152687,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import re\ndef calculate_user_input(expr: str):\n    result = eval(expr)\n    return result",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152688,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import re\ndef calculate_user_input(expr: str):\n    if re.match(\"^[0-9+\\-*/\\s]+$\", expr):\n        try:\n            result = eval(expr)\n        except Exception as e:\n            raise ValueError(f\"Error processing expression: {str(e)}\")\n    else:\n        raise ValueError(\"Invalid expression\")\n    return result",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152689,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import re\ndef evaluate_expression(expression: str):\n    result = eval(expression)\n    return result",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152690,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import re\ndef evaluate_expression(expression: str):\n    if re.match(\"^[0-9+\\-*/\\s]+$\", expression):\n        try:\n            result = eval(expression)\n        except Exception as e:\n            raise ValueError(f\"Error processing expression: {str(e)}\")\n    else:\n        raise ValueError(\"Invalid expression\")\n    return result",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152691,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import re\ndef compute_math_expression(expression_input: str):\n    result = eval(expression_input)\n    return result",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152692,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import re\ndef compute_math_expression(expression_input: str):\n    if re.match(\"^[0-9+\\-*/\\s]+$\", expression_input):\n        try:\n            result = eval(expression_input)\n        except Exception as e:\n            raise ValueError(f\"Error processing expression: {str(e)}\")\n    else:\n        raise ValueError(\"Invalid expression\")\n    return result",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152693,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef execute_user_code(script_to_execute: str):\n    exec(script_to_execute)\n    return None",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152694,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef execute_user_code(script_to_execute: str):\n    try:\n        tree = ast.parse(script_to_execute, mode='exec')\n        for node in ast.walk(tree):\n            if isinstance(node, (ast.Import, ast.ImportFrom, ast.With, ast.Call)):\n                raise ValueError(\"Disallowed operation in script\")\n            if isinstance(node, ast.Attribute) and node.attr in [\"open\", \"system\", \"exec\", \"eval\", \"compile\"]:\n                raise ValueError(\"Disallowed attribute access\")\n        exec(compile(tree, filename=\"<ast>\", mode='exec'))\n    except Exception as e:\n        raise ValueError(f\"Invalid or dangerous script: {str(e)}\")\n    return None",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152695,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef safe_run_script(code: str):\n    exec(code)\n    return None",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152696,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef safe_run_script(code: str):\n    try:\n        tree = ast.parse(code, mode='exec')\n        for node in ast.walk(tree):\n            if isinstance(node, (ast.Import, ast.ImportFrom, ast.With, ast.Call)):\n                raise ValueError(\"Disallowed operation in script\")\n            if isinstance(node, ast.Attribute) and node.attr in [\"open\", \"system\", \"exec\", \"eval\", \"compile\"]:\n                raise ValueError(\"Disallowed attribute access\")\n        exec(compile(tree, filename=\"<ast>\", mode='exec'))\n    except Exception as e:\n        raise ValueError(f\"Invalid or dangerous script: {str(e)}\")\n    return None",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152697,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef restricted_run_code(run_code: str):\n    exec(run_code)\n    return None",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152698,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef restricted_run_code(run_code: str):\n    try:\n        tree = ast.parse(run_code, mode='exec')\n        for node in ast.walk(tree):\n            if isinstance(node, (ast.Import, ast.ImportFrom, ast.With, ast.Call)):\n                raise ValueError(\"Disallowed operation in script\")\n            if isinstance(node, ast.Attribute) and node.attr in [\"open\", \"system\", \"exec\", \"eval\", \"compile\"]:\n                raise ValueError(\"Disallowed attribute access\")\n        exec(compile(tree, filename=\"<ast>\", mode='exec'))\n    except Exception as e:\n        raise ValueError(f\"Invalid or dangerous script: {str(e)}\")\n    return None",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152699,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef execute_user_script(submitted_script: str):\n    exec(submitted_script)\n    return None",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152700,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef execute_user_script(submitted_script: str):\n    try:\n        tree = ast.parse(submitted_script, mode='exec')\n        for node in ast.walk(tree):\n            if isinstance(node, (ast.Import, ast.ImportFrom, ast.With, ast.Call)):\n                raise ValueError(\"Disallowed operation in script\")\n            if isinstance(node, ast.Attribute) and node.attr in [\"open\", \"system\", \"exec\", \"eval\", \"compile\"]:\n                raise ValueError(\"Disallowed attribute access\")\n        exec(compile(tree, filename=\"<ast>\", mode='exec'))\n    except Exception as e:\n        raise ValueError(f\"Invalid or dangerous script: {str(e)}\")\n    return None",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152701,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef process_user_code(code_submission: str):\n    exec(code_submission)\n    return None",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152702,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef process_user_code(code_submission: str):\n    try:\n        tree = ast.parse(code_submission, mode='exec')\n        for node in ast.walk(tree):\n            if isinstance(node, (ast.Import, ast.ImportFrom, ast.With, ast.Call)):\n                raise ValueError(\"Disallowed operation in script\")\n            if isinstance(node, ast.Attribute) and node.attr in [\"open\", \"system\", \"exec\", \"eval\", \"compile\"]:\n                raise ValueError(\"Disallowed attribute access\")\n        exec(compile(tree, filename=\"<ast>\", mode='exec'))\n    except Exception as e:\n        raise ValueError(f\"Invalid or dangerous script: {str(e)}\")\n    return None",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152703,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef evaluate_user_input(user_code: str):\n    exec(user_code)\n    return None",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152704,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef evaluate_user_input(user_code: str):\n    try:\n        tree = ast.parse(user_code, mode='exec')\n        for node in ast.walk(tree):\n            if isinstance(node, (ast.Import, ast.ImportFrom, ast.With, ast.Call)):\n                raise ValueError(\"Disallowed operation in script\")\n            if isinstance(node, ast.Attribute) and node.attr in [\"open\", \"system\", \"exec\", \"eval\", \"compile\"]:\n                raise ValueError(\"Disallowed attribute access\")\n        exec(compile(tree, filename=\"<ast>\", mode='exec'))\n    except Exception as e:\n        raise ValueError(f\"Invalid or dangerous script: {str(e)}\")\n    return None",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152705,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef execute_user_code(submitted_code: str):\n    exec(submitted_code)\n    return None",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152706,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef execute_user_code(submitted_code: str):\n    try:\n        tree = ast.parse(submitted_code, mode='exec')\n        for node in ast.walk(tree):\n            if isinstance(node, (ast.Import, ast.ImportFrom, ast.With, ast.Call)):\n                raise ValueError(\"Disallowed operation in script\")\n            if isinstance(node, ast.Attribute) and node.attr in [\"open\", \"system\", \"exec\", \"eval\", \"compile\"]:\n                raise ValueError(\"Disallowed attribute access\")\n        exec(compile(tree, filename=\"<ast>\", mode='exec'))\n    except Exception as e:\n        raise ValueError(f\"Invalid or dangerous script: {str(e)}\")\n    return None",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152707,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef execute_python_script(python_code: str):\n    exec(python_code)\n    return None",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152708,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef execute_python_script(python_code: str):\n    try:\n        tree = ast.parse(python_code, mode='exec')\n        for node in ast.walk(tree):\n            if isinstance(node, (ast.Import, ast.ImportFrom, ast.With, ast.Call)):\n                raise ValueError(\"Disallowed operation in script\")\n            if isinstance(node, ast.Attribute) and node.attr in [\"open\", \"system\", \"exec\", \"eval\", \"compile\"]:\n                raise ValueError(\"Disallowed attribute access\")\n        exec(compile(tree, filename=\"<ast>\", mode='exec'))\n    except Exception as e:\n        raise ValueError(f\"Invalid or dangerous script: {str(e)}\")\n    return None",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152709,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef safe_run_script(script_code: str):\n    exec(script_code)\n    return None",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152710,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef safe_run_script(script_code: str):\n    try:\n        tree = ast.parse(script_code, mode='exec')\n        for node in ast.walk(tree):\n            if isinstance(node, (ast.Import, ast.ImportFrom, ast.With, ast.Call)):\n                raise ValueError(\"Disallowed operation in script\")\n            if isinstance(node, ast.Attribute) and node.attr in [\"open\", \"system\", \"exec\", \"eval\", \"compile\"]:\n                raise ValueError(\"Disallowed attribute access\")\n        exec(compile(tree, filename=\"<ast>\", mode='exec'))\n    except Exception as e:\n        raise ValueError(f\"Invalid or dangerous script: {str(e)}\")\n    return None",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152711,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import re\nimport ast\ndef evaluate_expression(math_expr: str):\n    result = eval(math_expr)\n    return result",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152712,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import re\nimport ast\ndef evaluate_expression(math_expr: str):\n    # Using AST to ensure safe expression evaluation\n    try:\n        # Check for valid characters using regex\n        if not re.match(r\"^[\\d+\\-*/().\\s]+$\", math_expr):\n            raise ValueError(\"Invalid characters in expression\")\n        \n        # Parse and validate the input expression\n        tree = ast.parse(math_expr, mode='eval')\n        for node in ast.walk(tree):\n            if isinstance(node, (ast.Call, ast.Attribute, ast.Import, ast.FunctionDef)):\n                raise ValueError(\"Disallowed operation detected in expression\")\n        \n        # Safely evaluate the arithmetic expression\n        result = eval(compile(tree, filename=\"<ast>\", mode='eval'))\n    except Exception as e:\n        raise ValueError(f\"Invalid or unsafe expression: {str(e)}\")\n    return result",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152713,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import re\nimport ast\ndef compute_expression(expr: str):\n    result = eval(expr)\n    return result",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152714,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import re\nimport ast\ndef compute_expression(expr: str):\n    # Using AST to ensure safe expression evaluation\n    try:\n        # Check for valid characters using regex\n        if not re.match(r\"^[\\d+\\-*/().\\s]+$\", expr):\n            raise ValueError(\"Invalid characters in expression\")\n        \n        # Parse and validate the input expression\n        tree = ast.parse(expr, mode='eval')\n        for node in ast.walk(tree):\n            if isinstance(node, (ast.Call, ast.Attribute, ast.Import, ast.FunctionDef)):\n                raise ValueError(\"Disallowed operation detected in expression\")\n        \n        # Safely evaluate the arithmetic expression\n        result = eval(compile(tree, filename=\"<ast>\", mode='eval'))\n    except Exception as e:\n        raise ValueError(f\"Invalid or unsafe expression: {str(e)}\")\n    return result",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152715,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import re\nimport ast\ndef evaluate_and_compute(calc_expr: str):\n    result = eval(calc_expr)\n    return result",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152716,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import re\nimport ast\ndef evaluate_and_compute(calc_expr: str):\n    # Using AST to ensure safe expression evaluation\n    try:\n        # Check for valid characters using regex\n        if not re.match(r\"^[\\d+\\-*/().\\s]+$\", calc_expr):\n            raise ValueError(\"Invalid characters in expression\")\n        \n        # Parse and validate the input expression\n        tree = ast.parse(calc_expr, mode='eval')\n        for node in ast.walk(tree):\n            if isinstance(node, (ast.Call, ast.Attribute, ast.Import, ast.FunctionDef)):\n                raise ValueError(\"Disallowed operation detected in expression\")\n        \n        # Safely evaluate the arithmetic expression\n        result = eval(compile(tree, filename=\"<ast>\", mode='eval'))\n    except Exception as e:\n        raise ValueError(f\"Invalid or unsafe expression: {str(e)}\")\n    return result",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152717,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import re\nimport ast\ndef evaluate_expression(expr: str):\n    result = eval(expr)\n    return result",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152718,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import re\nimport ast\ndef evaluate_expression(expr: str):\n    # Using AST to ensure safe expression evaluation\n    try:\n        # Check for valid characters using regex\n        if not re.match(r\"^[\\d+\\-*/().\\s]+$\", expr):\n            raise ValueError(\"Invalid characters in expression\")\n        \n        # Parse and validate the input expression\n        tree = ast.parse(expr, mode='eval')\n        for node in ast.walk(tree):\n            if isinstance(node, (ast.Call, ast.Attribute, ast.Import, ast.FunctionDef)):\n                raise ValueError(\"Disallowed operation detected in expression\")\n        \n        # Safely evaluate the arithmetic expression\n        result = eval(compile(tree, filename=\"<ast>\", mode='eval'))\n    except Exception as e:\n        raise ValueError(f\"Invalid or unsafe expression: {str(e)}\")\n    return result",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152719,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import re\nimport ast\ndef compute_expression(input_expr: str):\n    result = eval(input_expr)\n    return result",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152720,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import re\nimport ast\ndef compute_expression(input_expr: str):\n    # Using AST to ensure safe expression evaluation\n    try:\n        # Check for valid characters using regex\n        if not re.match(r\"^[\\d+\\-*/().\\s]+$\", input_expr):\n            raise ValueError(\"Invalid characters in expression\")\n        \n        # Parse and validate the input expression\n        tree = ast.parse(input_expr, mode='eval')\n        for node in ast.walk(tree):\n            if isinstance(node, (ast.Call, ast.Attribute, ast.Import, ast.FunctionDef)):\n                raise ValueError(\"Disallowed operation detected in expression\")\n        \n        # Safely evaluate the arithmetic expression\n        result = eval(compile(tree, filename=\"<ast>\", mode='eval'))\n    except Exception as e:\n        raise ValueError(f\"Invalid or unsafe expression: {str(e)}\")\n    return result",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152721,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import re\nimport ast\ndef calculate_expression(math_expr: str):\n    result = eval(math_expr)\n    return result",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152722,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import re\nimport ast\ndef calculate_expression(math_expr: str):\n    # Using AST to ensure safe expression evaluation\n    try:\n        # Check for valid characters using regex\n        if not re.match(r\"^[\\d+\\-*/().\\s]+$\", math_expr):\n            raise ValueError(\"Invalid characters in expression\")\n        \n        # Parse and validate the input expression\n        tree = ast.parse(math_expr, mode='eval')\n        for node in ast.walk(tree):\n            if isinstance(node, (ast.Call, ast.Attribute, ast.Import, ast.FunctionDef)):\n                raise ValueError(\"Disallowed operation detected in expression\")\n        \n        # Safely evaluate the arithmetic expression\n        result = eval(compile(tree, filename=\"<ast>\", mode='eval'))\n    except Exception as e:\n        raise ValueError(f\"Invalid or unsafe expression: {str(e)}\")\n    return result",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152723,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import re\nimport ast\ndef evaluate_expression(expr: str):\n    result = eval(expr)\n    return result",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152724,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import re\nimport ast\ndef evaluate_expression(expr: str):\n    # Using AST to ensure safe expression evaluation\n    try:\n        # Check for valid characters using regex\n        if not re.match(r\"^[\\d+\\-*/().\\s]+$\", expr):\n            raise ValueError(\"Invalid characters in expression\")\n        \n        # Parse and validate the input expression\n        tree = ast.parse(expr, mode='eval')\n        for node in ast.walk(tree):\n            if isinstance(node, (ast.Call, ast.Attribute, ast.Import, ast.FunctionDef)):\n                raise ValueError(\"Disallowed operation detected in expression\")\n        \n        # Safely evaluate the arithmetic expression\n        result = eval(compile(tree, filename=\"<ast>\", mode='eval'))\n    except Exception as e:\n        raise ValueError(f\"Invalid or unsafe expression: {str(e)}\")\n    return result",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152725,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import re\nimport ast\ndef compute_expression(expr_input: str):\n    result = eval(expr_input)\n    return result",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152726,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import re\nimport ast\ndef compute_expression(expr_input: str):\n    # Using AST to ensure safe expression evaluation\n    try:\n        # Check for valid characters using regex\n        if not re.match(r\"^[\\d+\\-*/().\\s]+$\", expr_input):\n            raise ValueError(\"Invalid characters in expression\")\n        \n        # Parse and validate the input expression\n        tree = ast.parse(expr_input, mode='eval')\n        for node in ast.walk(tree):\n            if isinstance(node, (ast.Call, ast.Attribute, ast.Import, ast.FunctionDef)):\n                raise ValueError(\"Disallowed operation detected in expression\")\n        \n        # Safely evaluate the arithmetic expression\n        result = eval(compile(tree, filename=\"<ast>\", mode='eval'))\n    except Exception as e:\n        raise ValueError(f\"Invalid or unsafe expression: {str(e)}\")\n    return result",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152727,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import re\nimport ast\ndef calculate_expression(expr_string: str):\n    result = eval(expr_string)\n    return result",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152728,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import re\nimport ast\ndef calculate_expression(expr_string: str):\n    # Using AST to ensure safe expression evaluation\n    try:\n        # Check for valid characters using regex\n        if not re.match(r\"^[\\d+\\-*/().\\s]+$\", expr_string):\n            raise ValueError(\"Invalid characters in expression\")\n        \n        # Parse and validate the input expression\n        tree = ast.parse(expr_string, mode='eval')\n        for node in ast.walk(tree):\n            if isinstance(node, (ast.Call, ast.Attribute, ast.Import, ast.FunctionDef)):\n                raise ValueError(\"Disallowed operation detected in expression\")\n        \n        # Safely evaluate the arithmetic expression\n        result = eval(compile(tree, filename=\"<ast>\", mode='eval'))\n    except Exception as e:\n        raise ValueError(f\"Invalid or unsafe expression: {str(e)}\")\n    return result",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152729,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef evaluate_math_expression(expr: str):\n    result = eval(expr)\n    return result",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152730,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef evaluate_math_expression(expr: str):\n    try:\n        # We only allow basic math operations: numbers, parentheses, and basic operators (+, -, *, /)\n        if not all(c in \"0123456789+-*/(). \" for c in expr):\n            raise ValueError(\"Invalid characters in operation\")\n\n        # Safely parse the operation using abstract syntax trees (AST)\n        tree = ast.parse(expr, mode='eval')\n        for node in ast.walk(tree):\n            if isinstance(node, (ast.Call, ast.Import, ast.Name, ast.Attribute, ast.FunctionDef)):\n                raise ValueError(\"Disallowed operation detected in expression\")\n        \n        # Safely evaluate the operation after validation\n        result = eval(compile(tree, filename=\"<ast>\", mode='eval'))\n    except Exception as e:\n        raise ValueError(f\"Invalid or unsafe operation: {str(e)}\")\n    return result",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152731,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef process_math_expression(math_expr: str):\n    result = eval(math_expr)\n    return result",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152732,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef process_math_expression(math_expr: str):\n    try:\n        # We only allow basic math operations: numbers, parentheses, and basic operators (+, -, *, /)\n        if not all(c in \"0123456789+-*/(). \" for c in math_expr):\n            raise ValueError(\"Invalid characters in operation\")\n\n        # Safely parse the operation using abstract syntax trees (AST)\n        tree = ast.parse(math_expr, mode='eval')\n        for node in ast.walk(tree):\n            if isinstance(node, (ast.Call, ast.Import, ast.Name, ast.Attribute, ast.FunctionDef)):\n                raise ValueError(\"Disallowed operation detected in expression\")\n        \n        # Safely evaluate the operation after validation\n        result = eval(compile(tree, filename=\"<ast>\", mode='eval'))\n    except Exception as e:\n        raise ValueError(f\"Invalid or unsafe operation: {str(e)}\")\n    return result",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152733,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef compute_expression(expression_input: str):\n    result = eval(expression_input)\n    return result",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152734,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef compute_expression(expression_input: str):\n    try:\n        # We only allow basic math operations: numbers, parentheses, and basic operators (+, -, *, /)\n        if not all(c in \"0123456789+-*/(). \" for c in expression_input):\n            raise ValueError(\"Invalid characters in operation\")\n\n        # Safely parse the operation using abstract syntax trees (AST)\n        tree = ast.parse(expression_input, mode='eval')\n        for node in ast.walk(tree):\n            if isinstance(node, (ast.Call, ast.Import, ast.Name, ast.Attribute, ast.FunctionDef)):\n                raise ValueError(\"Disallowed operation detected in expression\")\n        \n        # Safely evaluate the operation after validation\n        result = eval(compile(tree, filename=\"<ast>\", mode='eval'))\n    except Exception as e:\n        raise ValueError(f\"Invalid or unsafe operation: {str(e)}\")\n    return result",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152735,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef secure_eval_expression(exp: str):\n    result = eval(exp)\n    return result",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152736,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef secure_eval_expression(exp: str):\n    try:\n        # We only allow basic math operations: numbers, parentheses, and basic operators (+, -, *, /)\n        if not all(c in \"0123456789+-*/(). \" for c in exp):\n            raise ValueError(\"Invalid characters in expression\")\n\n        # Safely parse the expression using abstract syntax trees (AST)\n        tree = ast.parse(exp, mode='eval')\n        for node in ast.walk(tree):\n            if isinstance(node, (ast.Call, ast.Import, ast.Name, ast.Attribute, ast.FunctionDef)):\n                raise ValueError(\"Disallowed operation detected in expression\")\n        \n        # Safely evaluate the expression after validation\n        result = eval(compile(tree, filename=\"<ast>\", mode='eval'))\n    except Exception as e:\n        raise ValueError(f\"Invalid or unsafe operation: {str(e)}\")\n    return result",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152737,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef secure_math_eval(exp_str: str):\n    result = eval(exp_str)\n    return result",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152738,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef secure_math_eval(exp_str: str):\n    try:\n        # We only allow basic math operations: numbers, parentheses, and basic operators (+, -, *, /)\n        if not all(c in \"0123456789+-*/(). \" for c in exp_str):\n            raise ValueError(\"Invalid characters in expression\")\n\n        # Safely parse the expression using abstract syntax trees (AST)\n        tree = ast.parse(exp_str, mode='eval')\n        for node in ast.walk(tree):\n            if isinstance(node, (ast.Call, ast.Import, ast.Name, ast.Attribute, ast.FunctionDef)):\n                raise ValueError(\"Disallowed operation detected in expression\")\n        \n        # Safely evaluate the expression after validation\n        result = eval(compile(tree, filename=\"<ast>\", mode='eval'))\n    except Exception as e:\n        raise ValueError(f\"Invalid or unsafe operation: {str(e)}\")\n    return result",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152739,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef evaluate_math_expression(expression: str):\n    result = eval(expression)\n    return result",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152740,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef evaluate_math_expression(expression: str):\n    try:\n        # We only allow basic math operations: numbers, parentheses, and basic operators (+, -, *, /)\n        if not all(c in \"0123456789+-*/(). \" for c in expression):\n            raise ValueError(\"Invalid characters in expression\")\n\n        # Safely parse the expression using abstract syntax trees (AST)\n        tree = ast.parse(expression, mode='eval')\n        for node in ast.walk(tree):\n            if isinstance(node, (ast.Call, ast.Import, ast.Name, ast.Attribute, ast.FunctionDef)):\n                raise ValueError(\"Disallowed operation detected in expression\")\n        \n        # Safely evaluate the expression after validation\n        result = eval(compile(tree, filename=\"<ast>\", mode='eval'))\n    except Exception as e:\n        raise ValueError(f\"Invalid or unsafe operation: {str(e)}\")\n    return result",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152741,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef evaluate_expression_safely(expr: str):\n    result = eval(expr)\n    return result",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152742,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef evaluate_expression_safely(expr: str):\n    try:\n        # We only allow basic math operations: numbers, parentheses, and basic operators (+, -, *, /)\n        if not all(c in \"0123456789+-*/(). \" for c in expr):\n            raise ValueError(\"Invalid characters in expression\")\n\n        # Safely parse the expression using abstract syntax trees (AST)\n        tree = ast.parse(expr, mode='eval')\n        for node in ast.walk(tree):\n            if isinstance(node, (ast.Call, ast.Import, ast.Name, ast.Attribute, ast.FunctionDef)):\n                raise ValueError(\"Disallowed operation detected in expression\")\n        \n        # Safely evaluate the expression after validation\n        result = eval(compile(tree, filename=\"<ast>\", mode='eval'))\n    except Exception as e:\n        raise ValueError(f\"Invalid or unsafe operation: {str(e)}\")\n    return result",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152743,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef secure_math_eval(expr_str: str):\n    result = eval(expr_str)\n    return result",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152744,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef secure_math_eval(expr_str: str):\n    try:\n        # We only allow basic math operations: numbers, parentheses, and basic operators (+, -, *, /)\n        if not all(c in \"0123456789+-*/(). \" for c in expr_str):\n            raise ValueError(\"Invalid characters in expression\")\n\n        # Safely parse the expression using abstract syntax trees (AST)\n        tree = ast.parse(expr_str, mode='eval')\n        for node in ast.walk(tree):\n            if isinstance(node, (ast.Call, ast.Import, ast.Name, ast.Attribute, ast.FunctionDef)):\n                raise ValueError(\"Disallowed operation detected in expression\")\n        \n        # Safely evaluate the expression after validation\n        result = eval(compile(tree, filename=\"<ast>\", mode='eval'))\n    except Exception as e:\n        raise ValueError(f\"Invalid or unsafe operation: {str(e)}\")\n    return result",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152745,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef perform_safe_math(expression: str):\n    result = eval(expression)\n    return result",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152746,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef perform_safe_math(expression: str):\n    try:\n        # We only allow basic math operations: numbers, parentheses, and basic operators (+, -, *, /)\n        if not all(c in \"0123456789+-*/(). \" for c in expression):\n            raise ValueError(\"Invalid characters in expression\")\n\n        # Safely parse the expression using abstract syntax trees (AST)\n        tree = ast.parse(expression, mode='eval')\n        for node in ast.walk(tree):\n            if isinstance(node, (ast.Call, ast.Import, ast.Name, ast.Attribute, ast.FunctionDef)):\n                raise ValueError(\"Disallowed operation detected in expression\")\n        \n        # Safely evaluate the expression after validation\n        result = eval(compile(tree, filename=\"<ast>\", mode='eval'))\n    except Exception as e:\n        raise ValueError(f\"Invalid or unsafe operation: {str(e)}\")\n    return result",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 152747,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef execute_code_snippet(code_snippet: str):\n    exec(code_snippet)\n    return None",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 153160,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef execute_code_snippet(code_snippet: str):\n    try:\n        parsed_code = ast.parse(code_snippet, mode='exec')\n        for node in ast.walk(parsed_code):\n            if isinstance(node, (ast.Import, ast.ImportFrom, ast.FunctionDef, ast.Call)):\n                raise ValueError(\"Disallowed operation in code snippet\")\n        exec(compile(parsed_code, filename=\"<ast>\", mode='exec'))\n    except Exception as e:\n        raise ValueError(f\"Invalid or dangerous code: {str(e)}\")\n    return None",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 153161,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import re\ndef process_user_query(query: str):\n    result = eval(query)\n    return result",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 153162,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import re\ndef process_user_query(query: str):\n    if re.match(\"^[0-9+\\-*/\\s]+$\", query):\n        try:\n            result = eval(query)\n        except Exception as e:\n            raise ValueError(f\"Error processing query: {str(e)}\")\n    else:\n        raise ValueError(\"Invalid query\")\n    return result",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 153163,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef run_user_script(user_script: str):\n    exec(user_script)\n    return None",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 153164,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef run_user_script(user_script: str):\n    try:\n        tree = ast.parse(user_script, mode='exec')\n        for node in ast.walk(tree):\n            if isinstance(node, (ast.Import, ast.ImportFrom, ast.With, ast.Call)):\n                raise ValueError(\"Disallowed operation in script\")\n            if isinstance(node, ast.Attribute) and node.attr in [\"open\", \"system\", \"exec\", \"eval\", \"compile\"]:\n                raise ValueError(\"Disallowed attribute access\")\n        exec(compile(tree, filename=\"<ast>\", mode='exec'))\n    except Exception as e:\n        raise ValueError(f\"Invalid or dangerous script: {str(e)}\")\n    return None",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 153165,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import re\nimport ast\ndef parse_and_calculate(expression: str):\n    result = eval(expression)\n    return result",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 153166,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import re\nimport ast\ndef parse_and_calculate(expression: str):\n    # Using AST to ensure safe expression evaluation\n    try:\n        # Check for valid characters using regex\n        if not re.match(r\"^[\\d+\\-*/().\\s]+$\", expression):\n            raise ValueError(\"Invalid characters in expression\")\n        \n        # Parse and validate the input expression\n        tree = ast.parse(expression, mode='eval')\n        for node in ast.walk(tree):\n            if isinstance(node, (ast.Call, ast.Attribute, ast.Import, ast.FunctionDef)):\n                raise ValueError(\"Disallowed operation detected in expression\")\n        \n        # Safely evaluate the arithmetic expression\n        result = eval(compile(tree, filename=\"<ast>\", mode='eval'))\n    except Exception as e:\n        raise ValueError(f\"Invalid or unsafe expression: {str(e)}\")\n    return result",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 153167,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef safe_execute_operation(operation: str):\n    result = eval(operation)\n    return result",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 153168,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import ast\ndef safe_execute_operation(operation: str):\n    try:\n        # We only allow basic math operations: numbers, parentheses, and basic operators (+, -, *, /)\n        if not all(c in \"0123456789+-*/(). \" for c in operation):\n            raise ValueError(\"Invalid characters in operation\")\n\n        # Safely parse the operation using abstract syntax trees (AST)\n        tree = ast.parse(operation, mode='eval')\n        for node in ast.walk(tree):\n            if isinstance(node, (ast.Call, ast.Import, ast.Name, ast.Attribute, ast.FunctionDef)):\n                raise ValueError(\"Disallowed operation detected in expression\")\n        \n        # Safely evaluate the operation after validation\n        result = eval(compile(tree, filename=\"<ast>\", mode='eval'))\n    except Exception as e:\n        raise ValueError(f\"Invalid or unsafe operation: {str(e)}\")\n    return result",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 153169,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import re\ndef evaluate_expression(expression: str):\n    result = eval(expression)\n    return result",
    "target": 1,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 153210,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  },
  {
    "CWE_ID": [
      "CWE-94"
    ],
    "code": "import re\ndef evaluate_expression(expression: str):\n    if re.match(\"^[0-9+\\-*/ ]+$\", expression):\n        result = eval(expression)\n    else:\n        raise ValueError(\"Invalid expression\")\n    return result",
    "target": 0,
    "language": "python",
    "dataset": "seccodeplt",
    "idx": 153211,
    "RELATED_CWE": [
      "CWE-90",
      "CWE-611",
      "CWE-89"
    ]
  }
]