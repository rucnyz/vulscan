[
  {
    "CWE_ID": [
      "CWE-352"
    ],
    "code": "UNCURL_EXPORT int32_t uncurl_ws_accept(struct uncurl_conn *ucc, char **origins, int32_t n_origins)\n{\n\tint32_t e;\n\n\te = uncurl_read_header(ucc);\n\tif (e != UNCURL_OK) return e;\n\n\tuncurl_set_header_str(ucc, \"Upgrade\", \"websocket\");\n\tuncurl_set_header_str(ucc, \"Connection\", \"Upgrade\");\n\n\tchar *origin = NULL;\n \te = uncurl_get_header_str(ucc, \"Origin\", &origin);\n \tif (e != UNCURL_OK) return e;\n \n \tbool origin_ok = false;\n\tfor (int32_t x = 0; x < n_origins; x++)\n\t\tif (strstr(origin, origins[x])) {origin_ok = true; break;}\n \n \tif (!origin_ok) return UNCURL_WS_ERR_ORIGIN;\n \n\tchar *sec_key = NULL;\n\te = uncurl_get_header_str(ucc, \"Sec-WebSocket-Key\", &sec_key);\n\tif (e != UNCURL_OK) return e;\n\n\tchar *accept_key = ws_create_accept_key(sec_key);\n\tuncurl_set_header_str(ucc, \"Sec-WebSocket-Accept\", accept_key);\n\tfree(accept_key);\n\n\te = uncurl_write_header(ucc, \"101\", \"Switching Protocols\", UNCURL_RESPONSE);\n\tif (e != UNCURL_OK) return e;\n\n\tucc->ws_mask = 0;\n\n\treturn UNCURL_OK;\n}\n",
    "target": 1,
    "language": "c",
    "dataset": "primevul_pair",
    "idx": 143085,
    "RELATED_CWE": [
      "CWE-79",
      "CWE-918",
      "CWE-384"
    ],
    "human": "Correct. With CWE-352",
    "reason": "Uses a simple substring search (strstr) to validate the Origin header. This method is too permissive because it may allow an allowed origin string to match even when it appears as part of a larger, unauthorized origin."
  },
  {
    "CWE_ID": [
      "CWE-352"
    ],
    "code": "UNCURL_EXPORT int32_t uncurl_ws_accept(struct uncurl_conn *ucc, char **origins, int32_t n_origins)\n{\n\tint32_t e;\n\n\te = uncurl_read_header(ucc);\n\tif (e != UNCURL_OK) return e;\n\n\tuncurl_set_header_str(ucc, \"Upgrade\", \"websocket\");\n\tuncurl_set_header_str(ucc, \"Connection\", \"Upgrade\");\n\n\tchar *origin = NULL;\n \te = uncurl_get_header_str(ucc, \"Origin\", &origin);\n \tif (e != UNCURL_OK) return e;\n \n\t//the substring MUST came at the end of the origin header, thus a strstr AND a strcmp\n \tbool origin_ok = false;\n\tfor (int32_t x = 0; x < n_origins; x++) {\n\t\tchar *match = strstr(origin, origins[x]);\n\t\tif (match && !strcmp(match, origins[x])) {origin_ok = true; break;}\n\t}\n \n \tif (!origin_ok) return UNCURL_WS_ERR_ORIGIN;\n \n\tchar *sec_key = NULL;\n\te = uncurl_get_header_str(ucc, \"Sec-WebSocket-Key\", &sec_key);\n\tif (e != UNCURL_OK) return e;\n\n\tchar *accept_key = ws_create_accept_key(sec_key);\n\tuncurl_set_header_str(ucc, \"Sec-WebSocket-Accept\", accept_key);\n\tfree(accept_key);\n\n\te = uncurl_write_header(ucc, \"101\", \"Switching Protocols\", UNCURL_RESPONSE);\n\tif (e != UNCURL_OK) return e;\n\n\tucc->ws_mask = 0;\n\n\treturn UNCURL_OK;\n}\n",
    "target": 0,
    "language": "c",
    "dataset": "primevul_pair",
    "idx": 143086,
    "RELATED_CWE": [
      "CWE-79",
      "CWE-918",
      "CWE-384"
    ],
    "human": "Correct. Without CWE-352"
  },
  {
    "CWE_ID": [
      "CWE-352"
    ],
    "code": "void FrameFactory::rebuildAggregateFrames(ID3v2::Tag *tag) const\n{\n  if(tag->header()->majorVersion() < 4 &&\n     tag->frameList(\"TDRC\").size() == 1 &&\n     tag->frameList(\"TDAT\").size() == 1)\n  {\n    TextIdentificationFrame *tdrc =\n      static_cast<TextIdentificationFrame *>(tag->frameList(\"TDRC\").front());\n    UnknownFrame *tdat = static_cast<UnknownFrame *>(tag->frameList(\"TDAT\").front());\n\n    if(tdrc->fieldList().size() == 1 &&\n       tdrc->fieldList().front().size() == 4 &&\n       tdat->data().size() >= 5)\n    {\n      String date(tdat->data().mid(1), String::Type(tdat->data()[0]));\n      if(date.length() == 4) {\n        tdrc->setText(tdrc->toString() + '-' + date.substr(2, 2) + '-' + date.substr(0, 2));\n        if(tag->frameList(\"TIME\").size() == 1) {\n          UnknownFrame *timeframe = static_cast<UnknownFrame *>(tag->frameList(\"TIME\").front());\n          if(timeframe->data().size() >= 5) {\n            String time(timeframe->data().mid(1), String::Type(timeframe->data()[0]));\n            if(time.length() == 4) {\n              tdrc->setText(tdrc->toString() + 'T' + time.substr(0, 2) + ':' + time.substr(2, 2));\n            }\n          }\n        }\n      }\n    }\n  }\n}",
    "target": 1,
    "language": "c",
    "dataset": "primevul_pair",
    "idx": 144805,
    "RELATED_CWE": [
      "CWE-79",
      "CWE-918",
      "CWE-384"
    ],
    "human": "Incorrect. Unrelated",
    "reason": "It is CWE-434 problem. Source: CVE-2017-12678"
  },
  {
    "CWE_ID": [
      "CWE-352"
    ],
    "code": "void FrameFactory::rebuildAggregateFrames(ID3v2::Tag *tag) const\n{\n  if(tag->header()->majorVersion() < 4 &&\n     tag->frameList(\"TDRC\").size() == 1 &&\n     tag->frameList(\"TDAT\").size() == 1)\n  {\n    TextIdentificationFrame *tdrc =\n      dynamic_cast<TextIdentificationFrame *>(tag->frameList(\"TDRC\").front());\n    UnknownFrame *tdat = static_cast<UnknownFrame *>(tag->frameList(\"TDAT\").front());\n\n    if(tdrc &&\n       tdrc->fieldList().size() == 1 &&\n       tdrc->fieldList().front().size() == 4 &&\n       tdat->data().size() >= 5)\n    {\n      String date(tdat->data().mid(1), String::Type(tdat->data()[0]));\n      if(date.length() == 4) {\n        tdrc->setText(tdrc->toString() + '-' + date.substr(2, 2) + '-' + date.substr(0, 2));\n        if(tag->frameList(\"TIME\").size() == 1) {\n          UnknownFrame *timeframe = static_cast<UnknownFrame *>(tag->frameList(\"TIME\").front());\n          if(timeframe->data().size() >= 5) {\n            String time(timeframe->data().mid(1), String::Type(timeframe->data()[0]));\n            if(time.length() == 4) {\n              tdrc->setText(tdrc->toString() + 'T' + time.substr(0, 2) + ':' + time.substr(2, 2));\n            }\n          }\n        }\n      }\n    }\n  }\n}",
    "target": 0,
    "language": "c",
    "dataset": "primevul_pair",
    "idx": 144806,
    "RELATED_CWE": [
      "CWE-79",
      "CWE-918",
      "CWE-384"
    ]
  }
]