[
  {
    "CWE_ID": [
      "CWE-502"
    ],
    "code": "static void php_wddx_push_element(void *user_data, const XML_Char *name, const XML_Char **atts)\n{\n\tst_entry ent;\n\twddx_stack *stack = (wddx_stack *)user_data;\n\n\tif (!strcmp(name, EL_PACKET)) {\n\t\tint i;\n\n\t\tif (atts) for (i=0; atts[i]; i++) {\n\t\t\tif (!strcmp(atts[i], EL_VERSION)) {\n\t\t\t\t/* nothing for now */\n\t\t\t}\n\t\t}\n\t} else if (!strcmp(name, EL_STRING)) {\n\t\tent.type = ST_STRING;\n\t\tSET_STACK_VARNAME;\n\n\t\tALLOC_ZVAL(ent.data);\n\t\tINIT_PZVAL(ent.data);\n\t\tZ_TYPE_P(ent.data) = IS_STRING;\n\t\tZ_STRVAL_P(ent.data) = STR_EMPTY_ALLOC();\n\t\tZ_STRLEN_P(ent.data) = 0;\n\t\twddx_stack_push((wddx_stack *)stack, &ent, sizeof(st_entry));\n\t} else if (!strcmp(name, EL_BINARY)) {\n\t\tent.type = ST_BINARY;\n\t\tSET_STACK_VARNAME;\n\n\t\tALLOC_ZVAL(ent.data);\n\t\tINIT_PZVAL(ent.data);\n\t\tZ_TYPE_P(ent.data) = IS_STRING;\n\t\tZ_STRVAL_P(ent.data) = STR_EMPTY_ALLOC();\n\t\tZ_STRLEN_P(ent.data) = 0;\n\t\twddx_stack_push((wddx_stack *)stack, &ent, sizeof(st_entry));\n\t} else if (!strcmp(name, EL_CHAR)) {\n\t\tint i;\n\n\t\tif (atts) for (i = 0; atts[i]; i++) {\n\t\t\tif (!strcmp(atts[i], EL_CHAR_CODE) && atts[i+1] && atts[i+1][0]) {\n\t\t\t\tchar tmp_buf[2];\n\n\t\t\t\tsnprintf(tmp_buf, sizeof(tmp_buf), \"%c\", (char)strtol(atts[i+1], NULL, 16));\n\t\t\t\tphp_wddx_process_data(user_data, tmp_buf, strlen(tmp_buf));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t} else if (!strcmp(name, EL_NUMBER)) {\n\t\tent.type = ST_NUMBER;\n\t\tSET_STACK_VARNAME;\n\n\t\tALLOC_ZVAL(ent.data);\n\t\tINIT_PZVAL(ent.data);\n\t\tZ_TYPE_P(ent.data) = IS_LONG;\n\t\tZ_LVAL_P(ent.data) = 0;\n\t\twddx_stack_push((wddx_stack *)stack, &ent, sizeof(st_entry));\n        } else if (!strcmp(name, EL_BOOLEAN)) {\n                int i;\n \n                if (atts) for (i = 0; atts[i]; i++) {\n                        if (!strcmp(atts[i], EL_VALUE) && atts[i+1] && atts[i+1][0]) {\n                               ent.type = ST_BOOLEAN;\n                               SET_STACK_VARNAME;\n                               ALLOC_ZVAL(ent.data);\n                               INIT_PZVAL(ent.data);\n                               Z_TYPE_P(ent.data) = IS_BOOL;\n                                wddx_stack_push((wddx_stack *)stack, &ent, sizeof(st_entry));\n                                php_wddx_process_data(user_data, atts[i+1], strlen(atts[i+1]));\n                                break;\n                        }\n                } else {\n                       ent.type = ST_BOOLEAN;\n                       SET_STACK_VARNAME;\n                       ZVAL_FALSE(&ent.data);\n                        wddx_stack_push((wddx_stack *)stack, &ent, sizeof(st_entry));\n                }\n        } else if (!strcmp(name, EL_NULL)) {\n\t\t\twddx_stack_push((wddx_stack *)stack, &ent, sizeof(st_entry));\n\t\t}\n\t} else if (!strcmp(name, EL_NULL)) {\n\t\tent.type = ST_NULL;\n\t\tSET_STACK_VARNAME;\n\n\t\tALLOC_ZVAL(ent.data);\n\t\tINIT_PZVAL(ent.data);\n\t\tZVAL_NULL(ent.data);\n\n\t\twddx_stack_push((wddx_stack *)stack, &ent, sizeof(st_entry));\n\t} else if (!strcmp(name, EL_ARRAY)) {\n\t\tent.type = ST_ARRAY;\n\t\tSET_STACK_VARNAME;\n\n\t\tALLOC_ZVAL(ent.data);\n\t\tarray_init(ent.data);\n\t\tINIT_PZVAL(ent.data);\n\t\twddx_stack_push((wddx_stack *)stack, &ent, sizeof(st_entry));\n\t} else if (!strcmp(name, EL_STRUCT)) {\n\t\tent.type = ST_STRUCT;\n\t\tSET_STACK_VARNAME;\n\n\t\tALLOC_ZVAL(ent.data);\n\t\tarray_init(ent.data);\n\t\tINIT_PZVAL(ent.data);\n\t\twddx_stack_push((wddx_stack *)stack, &ent, sizeof(st_entry));\n\t} else if (!strcmp(name, EL_VAR)) {\n\t\tint i;\n\n\t\tif (atts) for (i = 0; atts[i]; i++) {\n\t\t\tif (!strcmp(atts[i], EL_NAME) && atts[i+1] && atts[i+1][0]) {\n\t\t\t\tif (stack->varname) efree(stack->varname);\n\t\t\t\tstack->varname = estrdup(atts[i+1]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t} else if (!strcmp(name, EL_RECORDSET)) {\n\t\tint i;\n\n\t\tent.type = ST_RECORDSET;\n\t\tSET_STACK_VARNAME;\n\t\tMAKE_STD_ZVAL(ent.data);\n\t\tarray_init(ent.data);\n\n\t\tif (atts) for (i = 0; atts[i]; i++) {\n\t\t\tif (!strcmp(atts[i], \"fieldNames\") && atts[i+1] && atts[i+1][0]) {\n\t\t\t\tzval *tmp;\n\t\t\t\tchar *key;\n\t\t\t\tchar *p1, *p2, *endp;\n\n\t\t\t\ti++;\n\t\t\t\tendp = (char *)atts[i] + strlen(atts[i]);\n\t\t\t\tp1 = (char *)atts[i];\n\t\t\t\twhile ((p2 = php_memnstr(p1, \",\", sizeof(\",\")-1, endp)) != NULL) {\n\t\t\t\t\tkey = estrndup(p1, p2 - p1);\n\t\t\t\t\tMAKE_STD_ZVAL(tmp);\n\t\t\t\t\tarray_init(tmp);\n\t\t\t\t\tadd_assoc_zval_ex(ent.data, key, p2 - p1 + 1, tmp);\n\t\t\t\t\tp1 = p2 + sizeof(\",\")-1;\n\t\t\t\t\tefree(key);\n\t\t\t\t}\n\n\t\t\t\tif (p1 <= endp) {\n\t\t\t\t\tMAKE_STD_ZVAL(tmp);\n\t\t\t\t\tarray_init(tmp);\n\t\t\t\t\tadd_assoc_zval_ex(ent.data, p1, endp - p1 + 1, tmp);\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\twddx_stack_push((wddx_stack *)stack, &ent, sizeof(st_entry));\n\t} else if (!strcmp(name, EL_FIELD)) {\n\t\tint i;\n\t\tst_entry ent;\n\n\t\tent.type = ST_FIELD;\n\t\tent.varname = NULL;\n\t\tent.data = NULL;\n\n\t\tif (atts) for (i = 0; atts[i]; i++) {\n\t\t\tif (!strcmp(atts[i], EL_NAME) && atts[i+1] && atts[i+1][0]) {\n\t\t\t\tst_entry *recordset;\n\t\t\t\tzval **field;\n\n\t\t\t\tif (wddx_stack_top(stack, (void**)&recordset) == SUCCESS &&\n\t\t\t\t\trecordset->type == ST_RECORDSET &&\n\t\t\t\t\tzend_hash_find(Z_ARRVAL_P(recordset->data), (char*)atts[i+1], strlen(atts[i+1])+1, (void**)&field) == SUCCESS) {\n\t\t\t\t\tent.data = *field;\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\twddx_stack_push((wddx_stack *)stack, &ent, sizeof(st_entry));\n\t} else if (!strcmp(name, EL_DATETIME)) {\n\t\tent.type = ST_DATETIME;\n\t\tSET_STACK_VARNAME;\n\n\t\tALLOC_ZVAL(ent.data);\n\t\tINIT_PZVAL(ent.data);\n\t\tZ_TYPE_P(ent.data) = IS_LONG;\n\t\twddx_stack_push((wddx_stack *)stack, &ent, sizeof(st_entry));\n\t}\n",
    "target": 1,
    "language": "c",
    "dataset": "primevul_pair",
    "idx": 144299,
    "RELATED_CWE": [
      "CWE-94",
      "CWE-78",
      "CWE-97"
    ]
  },
  {
    "CWE_ID": [
      "CWE-502"
    ],
    "code": "static void php_wddx_push_element(void *user_data, const XML_Char *name, const XML_Char **atts)\n{\n\tst_entry ent;\n\twddx_stack *stack = (wddx_stack *)user_data;\n\n\tif (!strcmp(name, EL_PACKET)) {\n\t\tint i;\n\n\t\tif (atts) for (i=0; atts[i]; i++) {\n\t\t\tif (!strcmp(atts[i], EL_VERSION)) {\n\t\t\t\t/* nothing for now */\n\t\t\t}\n\t\t}\n\t} else if (!strcmp(name, EL_STRING)) {\n\t\tent.type = ST_STRING;\n\t\tSET_STACK_VARNAME;\n\n\t\tALLOC_ZVAL(ent.data);\n\t\tINIT_PZVAL(ent.data);\n\t\tZ_TYPE_P(ent.data) = IS_STRING;\n\t\tZ_STRVAL_P(ent.data) = STR_EMPTY_ALLOC();\n\t\tZ_STRLEN_P(ent.data) = 0;\n\t\twddx_stack_push((wddx_stack *)stack, &ent, sizeof(st_entry));\n\t} else if (!strcmp(name, EL_BINARY)) {\n\t\tent.type = ST_BINARY;\n\t\tSET_STACK_VARNAME;\n\n\t\tALLOC_ZVAL(ent.data);\n\t\tINIT_PZVAL(ent.data);\n\t\tZ_TYPE_P(ent.data) = IS_STRING;\n\t\tZ_STRVAL_P(ent.data) = STR_EMPTY_ALLOC();\n\t\tZ_STRLEN_P(ent.data) = 0;\n\t\twddx_stack_push((wddx_stack *)stack, &ent, sizeof(st_entry));\n\t} else if (!strcmp(name, EL_CHAR)) {\n\t\tint i;\n\n\t\tif (atts) for (i = 0; atts[i]; i++) {\n\t\t\tif (!strcmp(atts[i], EL_CHAR_CODE) && atts[i+1] && atts[i+1][0]) {\n\t\t\t\tchar tmp_buf[2];\n\n\t\t\t\tsnprintf(tmp_buf, sizeof(tmp_buf), \"%c\", (char)strtol(atts[i+1], NULL, 16));\n\t\t\t\tphp_wddx_process_data(user_data, tmp_buf, strlen(tmp_buf));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t} else if (!strcmp(name, EL_NUMBER)) {\n\t\tent.type = ST_NUMBER;\n\t\tSET_STACK_VARNAME;\n\n\t\tALLOC_ZVAL(ent.data);\n\t\tINIT_PZVAL(ent.data);\n\t\tZ_TYPE_P(ent.data) = IS_LONG;\n\t\tZ_LVAL_P(ent.data) = 0;\n\t\twddx_stack_push((wddx_stack *)stack, &ent, sizeof(st_entry));\n        } else if (!strcmp(name, EL_BOOLEAN)) {\n                int i;\n \n               ALLOC_ZVAL(ent.data);\n               INIT_PZVAL(ent.data);\n               Z_TYPE_P(ent.data) = IS_BOOL;\n               ent.type = ST_BOOLEAN;\n               SET_STACK_VARNAME;\n                if (atts) for (i = 0; atts[i]; i++) {\n                        if (!strcmp(atts[i], EL_VALUE) && atts[i+1] && atts[i+1][0]) {\n                                wddx_stack_push((wddx_stack *)stack, &ent, sizeof(st_entry));\n                                php_wddx_process_data(user_data, atts[i+1], strlen(atts[i+1]));\n                                break;\n                        }\n                } else {\n                       ZVAL_FALSE(ent.data);\n                        wddx_stack_push((wddx_stack *)stack, &ent, sizeof(st_entry));\n                }\n        } else if (!strcmp(name, EL_NULL)) {\n\t\t\twddx_stack_push((wddx_stack *)stack, &ent, sizeof(st_entry));\n\t\t}\n\t} else if (!strcmp(name, EL_NULL)) {\n\t\tent.type = ST_NULL;\n\t\tSET_STACK_VARNAME;\n\n\t\tALLOC_ZVAL(ent.data);\n\t\tINIT_PZVAL(ent.data);\n\t\tZVAL_NULL(ent.data);\n\n\t\twddx_stack_push((wddx_stack *)stack, &ent, sizeof(st_entry));\n\t} else if (!strcmp(name, EL_ARRAY)) {\n\t\tent.type = ST_ARRAY;\n\t\tSET_STACK_VARNAME;\n\n\t\tALLOC_ZVAL(ent.data);\n\t\tarray_init(ent.data);\n\t\tINIT_PZVAL(ent.data);\n\t\twddx_stack_push((wddx_stack *)stack, &ent, sizeof(st_entry));\n\t} else if (!strcmp(name, EL_STRUCT)) {\n\t\tent.type = ST_STRUCT;\n\t\tSET_STACK_VARNAME;\n\n\t\tALLOC_ZVAL(ent.data);\n\t\tarray_init(ent.data);\n\t\tINIT_PZVAL(ent.data);\n\t\twddx_stack_push((wddx_stack *)stack, &ent, sizeof(st_entry));\n\t} else if (!strcmp(name, EL_VAR)) {\n\t\tint i;\n\n\t\tif (atts) for (i = 0; atts[i]; i++) {\n\t\t\tif (!strcmp(atts[i], EL_NAME) && atts[i+1] && atts[i+1][0]) {\n\t\t\t\tif (stack->varname) efree(stack->varname);\n\t\t\t\tstack->varname = estrdup(atts[i+1]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t} else if (!strcmp(name, EL_RECORDSET)) {\n\t\tint i;\n\n\t\tent.type = ST_RECORDSET;\n\t\tSET_STACK_VARNAME;\n\t\tMAKE_STD_ZVAL(ent.data);\n\t\tarray_init(ent.data);\n\n\t\tif (atts) for (i = 0; atts[i]; i++) {\n\t\t\tif (!strcmp(atts[i], \"fieldNames\") && atts[i+1] && atts[i+1][0]) {\n\t\t\t\tzval *tmp;\n\t\t\t\tchar *key;\n\t\t\t\tchar *p1, *p2, *endp;\n\n\t\t\t\ti++;\n\t\t\t\tendp = (char *)atts[i] + strlen(atts[i]);\n\t\t\t\tp1 = (char *)atts[i];\n\t\t\t\twhile ((p2 = php_memnstr(p1, \",\", sizeof(\",\")-1, endp)) != NULL) {\n\t\t\t\t\tkey = estrndup(p1, p2 - p1);\n\t\t\t\t\tMAKE_STD_ZVAL(tmp);\n\t\t\t\t\tarray_init(tmp);\n\t\t\t\t\tadd_assoc_zval_ex(ent.data, key, p2 - p1 + 1, tmp);\n\t\t\t\t\tp1 = p2 + sizeof(\",\")-1;\n\t\t\t\t\tefree(key);\n\t\t\t\t}\n\n\t\t\t\tif (p1 <= endp) {\n\t\t\t\t\tMAKE_STD_ZVAL(tmp);\n\t\t\t\t\tarray_init(tmp);\n\t\t\t\t\tadd_assoc_zval_ex(ent.data, p1, endp - p1 + 1, tmp);\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\twddx_stack_push((wddx_stack *)stack, &ent, sizeof(st_entry));\n\t} else if (!strcmp(name, EL_FIELD)) {\n\t\tint i;\n\t\tst_entry ent;\n\n\t\tent.type = ST_FIELD;\n\t\tent.varname = NULL;\n\t\tent.data = NULL;\n\n\t\tif (atts) for (i = 0; atts[i]; i++) {\n\t\t\tif (!strcmp(atts[i], EL_NAME) && atts[i+1] && atts[i+1][0]) {\n\t\t\t\tst_entry *recordset;\n\t\t\t\tzval **field;\n\n\t\t\t\tif (wddx_stack_top(stack, (void**)&recordset) == SUCCESS &&\n\t\t\t\t\trecordset->type == ST_RECORDSET &&\n\t\t\t\t\tzend_hash_find(Z_ARRVAL_P(recordset->data), (char*)atts[i+1], strlen(atts[i+1])+1, (void**)&field) == SUCCESS) {\n\t\t\t\t\tent.data = *field;\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\twddx_stack_push((wddx_stack *)stack, &ent, sizeof(st_entry));\n\t} else if (!strcmp(name, EL_DATETIME)) {\n\t\tent.type = ST_DATETIME;\n\t\tSET_STACK_VARNAME;\n\n\t\tALLOC_ZVAL(ent.data);\n\t\tINIT_PZVAL(ent.data);\n\t\tZ_TYPE_P(ent.data) = IS_LONG;\n\t\twddx_stack_push((wddx_stack *)stack, &ent, sizeof(st_entry));\n\t}\n",
    "target": 0,
    "language": "c",
    "dataset": "primevul_pair",
    "idx": 144300,
    "RELATED_CWE": [
      "CWE-94",
      "CWE-78",
      "CWE-97"
    ]
  },
  {
    "CWE_ID": [
      "CWE-502"
    ],
    "code": "xmlBufAttrSerializeTxtContent(xmlBufPtr buf, xmlDocPtr doc,\n                              xmlAttrPtr attr, const xmlChar * string)\n{\n    xmlChar *base, *cur;\n\n    if (string == NULL)\n        return;\n    base = cur = (xmlChar *) string;\n    while (*cur != 0) {\n        if (*cur == '\\n') {\n            if (base != cur)\n                xmlBufAdd(buf, base, cur - base);\n            xmlBufAdd(buf, BAD_CAST \"&#10;\", 5);\n            cur++;\n            base = cur;\n        } else if (*cur == '\\r') {\n            if (base != cur)\n                xmlBufAdd(buf, base, cur - base);\n            xmlBufAdd(buf, BAD_CAST \"&#13;\", 5);\n            cur++;\n            base = cur;\n        } else if (*cur == '\\t') {\n            if (base != cur)\n                xmlBufAdd(buf, base, cur - base);\n            xmlBufAdd(buf, BAD_CAST \"&#9;\", 4);\n            cur++;\n            base = cur;\n        } else if (*cur == '\"') {\n            if (base != cur)\n                xmlBufAdd(buf, base, cur - base);\n            xmlBufAdd(buf, BAD_CAST \"&quot;\", 6);\n            cur++;\n            base = cur;\n        } else if (*cur == '<') {\n            if (base != cur)\n                xmlBufAdd(buf, base, cur - base);\n            xmlBufAdd(buf, BAD_CAST \"&lt;\", 4);\n            cur++;\n            base = cur;\n        } else if (*cur == '>') {\n            if (base != cur)\n                xmlBufAdd(buf, base, cur - base);\n            xmlBufAdd(buf, BAD_CAST \"&gt;\", 4);\n            cur++;\n            base = cur;\n        } else if (*cur == '&') {\n            if (base != cur)\n                xmlBufAdd(buf, base, cur - base);\n            xmlBufAdd(buf, BAD_CAST \"&amp;\", 5);\n            cur++;\n            base = cur;\n        } else if ((*cur >= 0x80) && ((doc == NULL) ||\n                                      (doc->encoding == NULL))) {\n            /*\n             * We assume we have UTF-8 content.\n             */\n            unsigned char tmp[12];\n            int val = 0, l = 1;\n\n            if (base != cur)\n                xmlBufAdd(buf, base, cur - base);\n            if (*cur < 0xC0) {\n                xmlSaveErr(XML_SAVE_NOT_UTF8, (xmlNodePtr) attr, NULL);\n                if (doc != NULL)\n                    doc->encoding = xmlStrdup(BAD_CAST \"ISO-8859-1\");\n\t\txmlSerializeHexCharRef(tmp, *cur);\n                xmlBufAdd(buf, (xmlChar *) tmp, -1);\n                cur++;\n                base = cur;\n                continue;\n            } else if (*cur < 0xE0) {\n                val = (cur[0]) & 0x1F;\n                val <<= 6;\n                val |= (cur[1]) & 0x3F;\n                l = 2;\n            } else if (*cur < 0xF0) {\n                val = (cur[0]) & 0x0F;\n                val <<= 6;\n                val |= (cur[1]) & 0x3F;\n                val <<= 6;\n                val |= (cur[2]) & 0x3F;\n                l = 3;\n            } else if (*cur < 0xF8) {\n                val = (cur[0]) & 0x07;\n                val <<= 6;\n                val |= (cur[1]) & 0x3F;\n                val <<= 6;\n                val |= (cur[2]) & 0x3F;\n                val <<= 6;\n                val |= (cur[3]) & 0x3F;\n                l = 4;\n            }\n            if ((l == 1) || (!IS_CHAR(val))) {\n                xmlSaveErr(XML_SAVE_CHAR_INVALID, (xmlNodePtr) attr, NULL);\n                if (doc != NULL)\n                    doc->encoding = xmlStrdup(BAD_CAST \"ISO-8859-1\");\n\n\t\txmlSerializeHexCharRef(tmp, *cur);\n                xmlBufAdd(buf, (xmlChar *) tmp, -1);\n                cur++;\n                base = cur;\n                continue;\n            }\n            /*\n             * We could do multiple things here. Just save\n             * as a char ref\n             */\n\t    xmlSerializeHexCharRef(tmp, val);\n            xmlBufAdd(buf, (xmlChar *) tmp, -1);\n            cur += l;\n            base = cur;\n        } else {\n            cur++;\n        }\n    }\n    if (base != cur)\n        xmlBufAdd(buf, base, cur - base);\n}",
    "target": 1,
    "language": "c",
    "dataset": "primevul_pair",
    "idx": 145998,
    "RELATED_CWE": [
      "CWE-94",
      "CWE-78",
      "CWE-97"
    ]
  },
  {
    "CWE_ID": [
      "CWE-502"
    ],
    "code": "xmlBufAttrSerializeTxtContent(xmlBufPtr buf, xmlDocPtr doc,\n                              xmlAttrPtr attr, const xmlChar * string)\n{\n    xmlChar *base, *cur;\n\n    if (string == NULL)\n        return;\n    base = cur = (xmlChar *) string;\n    while (*cur != 0) {\n        if (*cur == '\\n') {\n            if (base != cur)\n                xmlBufAdd(buf, base, cur - base);\n            xmlBufAdd(buf, BAD_CAST \"&#10;\", 5);\n            cur++;\n            base = cur;\n        } else if (*cur == '\\r') {\n            if (base != cur)\n                xmlBufAdd(buf, base, cur - base);\n            xmlBufAdd(buf, BAD_CAST \"&#13;\", 5);\n            cur++;\n            base = cur;\n        } else if (*cur == '\\t') {\n            if (base != cur)\n                xmlBufAdd(buf, base, cur - base);\n            xmlBufAdd(buf, BAD_CAST \"&#9;\", 4);\n            cur++;\n            base = cur;\n        } else if (*cur == '\"') {\n            if (base != cur)\n                xmlBufAdd(buf, base, cur - base);\n            xmlBufAdd(buf, BAD_CAST \"&quot;\", 6);\n            cur++;\n            base = cur;\n        } else if (*cur == '<') {\n            if (base != cur)\n                xmlBufAdd(buf, base, cur - base);\n            xmlBufAdd(buf, BAD_CAST \"&lt;\", 4);\n            cur++;\n            base = cur;\n        } else if (*cur == '>') {\n            if (base != cur)\n                xmlBufAdd(buf, base, cur - base);\n            xmlBufAdd(buf, BAD_CAST \"&gt;\", 4);\n            cur++;\n            base = cur;\n        } else if (*cur == '&') {\n            if (base != cur)\n                xmlBufAdd(buf, base, cur - base);\n            xmlBufAdd(buf, BAD_CAST \"&amp;\", 5);\n            cur++;\n            base = cur;\n        } else if ((*cur >= 0x80) && (cur[1] != 0) &&\n\t           ((doc == NULL) || (doc->encoding == NULL))) {\n            /*\n             * We assume we have UTF-8 content.\n             */\n            unsigned char tmp[12];\n            int val = 0, l = 1;\n\n            if (base != cur)\n                xmlBufAdd(buf, base, cur - base);\n            if (*cur < 0xC0) {\n                xmlSaveErr(XML_SAVE_NOT_UTF8, (xmlNodePtr) attr, NULL);\n                if (doc != NULL)\n                    doc->encoding = xmlStrdup(BAD_CAST \"ISO-8859-1\");\n\t\txmlSerializeHexCharRef(tmp, *cur);\n                xmlBufAdd(buf, (xmlChar *) tmp, -1);\n                cur++;\n                base = cur;\n                continue;\n            } else if (*cur < 0xE0) {\n                val = (cur[0]) & 0x1F;\n                val <<= 6;\n                val |= (cur[1]) & 0x3F;\n                l = 2;\n            } else if ((*cur < 0xF0) && (cur [2] != 0)) {\n                val = (cur[0]) & 0x0F;\n                val <<= 6;\n                val |= (cur[1]) & 0x3F;\n                val <<= 6;\n                val |= (cur[2]) & 0x3F;\n                l = 3;\n            } else if ((*cur < 0xF8) && (cur [2] != 0) && (cur[3] != 0)) {\n                val = (cur[0]) & 0x07;\n                val <<= 6;\n                val |= (cur[1]) & 0x3F;\n                val <<= 6;\n                val |= (cur[2]) & 0x3F;\n                val <<= 6;\n                val |= (cur[3]) & 0x3F;\n                l = 4;\n            }\n            if ((l == 1) || (!IS_CHAR(val))) {\n                xmlSaveErr(XML_SAVE_CHAR_INVALID, (xmlNodePtr) attr, NULL);\n                if (doc != NULL)\n                    doc->encoding = xmlStrdup(BAD_CAST \"ISO-8859-1\");\n\n\t\txmlSerializeHexCharRef(tmp, *cur);\n                xmlBufAdd(buf, (xmlChar *) tmp, -1);\n                cur++;\n                base = cur;\n                continue;\n            }\n            /*\n             * We could do multiple things here. Just save\n             * as a char ref\n             */\n\t    xmlSerializeHexCharRef(tmp, val);\n            xmlBufAdd(buf, (xmlChar *) tmp, -1);\n            cur += l;\n            base = cur;\n        } else {\n            cur++;\n        }\n    }\n    if (base != cur)\n        xmlBufAdd(buf, base, cur - base);\n}",
    "target": 0,
    "language": "c",
    "dataset": "primevul_pair",
    "idx": 145999,
    "RELATED_CWE": [
      "CWE-94",
      "CWE-78",
      "CWE-97"
    ]
  }
]